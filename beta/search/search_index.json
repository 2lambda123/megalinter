{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Verify your code consistency with an open-source tool. Powered by OX Security . MegaLinter is an Open-Source tool for CI/CD workflows that analyzes the consistency of your code , IAC , configuration , and scripts in your repository sources, to ensure all your projects sources are clean and formatted whatever IDE/toolbox is used by their developers, powered by OX security . Supporting 51 languages , 22 formats , 20 tooling formats and ready to use out of the box , as a GitHub action or any CI system highly configurable and free for all uses . Upgrade to MegaLinter v6 ! Process Console reporter Github PR reporter Why MegaLinter Projects need to contain clean code, in order to avoid technical debt , that makes evolutive maintenance harder and time consuming . By using code formatters and code linters , you ensure that your code base is easier to read and respects best practices , from the kick-off to each step of the project lifecycle Not all developers have the good habit to use linters in their IDEs, making code reviews harder and longer to process By using MegaLinter , you'll enjoy the following benefits for you and your team: At each pull request it will automatically analyze all updated code in all languages Reading error logs, developers learn best practices of the language they are using MegaLinter documentation provides the list of IDE plugins integrating each linter , so developers know which linter and plugins to install MegaLinter is ready out of the box after a quick setup Formatting and fixes can be automatically applied on the git branch or provided in reports This tool is 100% open-source and free for all uses (personal, professional, public and private repositories) MegaLinter can run on any CI tool and be run locally : no need to authorize an external application , and your code base never leaves your tooling ecosystem Supported Linters All linters are integrated in the MegaLinter docker image , which is frequently upgraded with their latest versions Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT revive GO_REVIVE GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE pmd JAVA_PMD JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT_PRETTIER JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK MAKEFILE checkmake MAKEFILE_CHECKMAKE PERL perlcritic PERL_PERLCRITIC PHP phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP_PHPLINT POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF tsqllint SQL_TSQLLINT SWIFT swiftlint SWIFT_SWIFTLINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT remark-lint MARKDOWN_REMARK_LINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV devskim REPOSITORY_DEVSKIM dustilock REPOSITORY_DUSTILOCK git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP syft REPOSITORY_SYFT trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT V4 versus V5 Tool to upgrade user repos configuration files using npx mega-linter-runner --upgrade (will upgrade references to nvuillam/mega-linter into oxsecurity/megalinter ) Migration from github individual repo nvuillam/mega-linter to github organization repo oxsecurity/megalinter Migration from docker hub space nvuillam to space megalinter Docker images are now oxsecurity/megalinter or oxsecurity/megalinter-FLAVOR Documentation is now hosted at https://megalinter.github.io/ Version management: Now mega-linter docker images, github action and mega-linter-runner versions are aligned latest for latest official release beta for current content of main branch alpha for current content of alpha branch docker image, github action and mega-linter-runner can still be called with exact version number Being more inclusive: rename master branch into main IGNORE_GITIGNORED_FILES parameter default to true","title":"Home"},{"location":"#why-megalinter","text":"Projects need to contain clean code, in order to avoid technical debt , that makes evolutive maintenance harder and time consuming . By using code formatters and code linters , you ensure that your code base is easier to read and respects best practices , from the kick-off to each step of the project lifecycle Not all developers have the good habit to use linters in their IDEs, making code reviews harder and longer to process By using MegaLinter , you'll enjoy the following benefits for you and your team: At each pull request it will automatically analyze all updated code in all languages Reading error logs, developers learn best practices of the language they are using MegaLinter documentation provides the list of IDE plugins integrating each linter , so developers know which linter and plugins to install MegaLinter is ready out of the box after a quick setup Formatting and fixes can be automatically applied on the git branch or provided in reports This tool is 100% open-source and free for all uses (personal, professional, public and private repositories) MegaLinter can run on any CI tool and be run locally : no need to authorize an external application , and your code base never leaves your tooling ecosystem","title":"Why MegaLinter"},{"location":"#supported-linters","text":"All linters are integrated in the MegaLinter docker image , which is frequently upgraded with their latest versions","title":"Supported Linters"},{"location":"#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT revive GO_REVIVE GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE pmd JAVA_PMD JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT_PRETTIER JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK MAKEFILE checkmake MAKEFILE_CHECKMAKE PERL perlcritic PERL_PERLCRITIC PHP phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP_PHPLINT POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF tsqllint SQL_TSQLLINT SWIFT swiftlint SWIFT_SWIFTLINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT","title":"Languages"},{"location":"#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT remark-lint MARKDOWN_REMARK_LINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS","title":"Tooling formats"},{"location":"#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV devskim REPOSITORY_DEVSKIM dustilock REPOSITORY_DUSTILOCK git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP syft REPOSITORY_SYFT trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"#v4-versus-v5","text":"Tool to upgrade user repos configuration files using npx mega-linter-runner --upgrade (will upgrade references to nvuillam/mega-linter into oxsecurity/megalinter ) Migration from github individual repo nvuillam/mega-linter to github organization repo oxsecurity/megalinter Migration from docker hub space nvuillam to space megalinter Docker images are now oxsecurity/megalinter or oxsecurity/megalinter-FLAVOR Documentation is now hosted at https://megalinter.github.io/ Version management: Now mega-linter docker images, github action and mega-linter-runner versions are aligned latest for latest official release beta for current content of main branch alpha for current content of alpha branch docker image, github action and mega-linter-runner can still be called with exact version number Being more inclusive: rename master branch into main IGNORE_GITIGNORED_FILES parameter default to true","title":"V4 versus V5"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] (beta, main branch content) Note: Can be used with oxsecurity/megalinter@beta in your GitHub Action mega-linter.yml file, or with oxsecurity/megalinter:beta docker image Document the -f argument to mega-linter-runner ( #1895 ) Fix a typo in documentation of bash-exec linter ( #1892 ) Add quotes to arm-ttk linter command ( #1879 ) Improve support for devcontainers by using Python base image Fixed Python version in devcontainer from 3.9 -> 3.10 Add Makefile linter in java flavor Fix build command on linux (thanks a lot to Edouard Choini\u00e8re for the investigation and solution !) Azure Comments reporter - Change status when all tests pass ( #1915 ) Linter versions upgrades cfn-lint from 0.65.0 to 0.65.1 on 2022-09-20 checkov from 2.1.213 to 2.1.214 on 2022-09-20 semgrep from 0.113.0 to 0.114.0 on 2022-09-20 syft from 0.56.0 to 0.57.0 on 2022-09-20 ansible-lint from 6.6.0 to 6.6.1 on 2022-09-21 djlint from 1.16.0 to 1.17.0 on 2022-09-21 checkov from 2.1.214 to 2.1.219 on 2022-09-21 scalafix from 0.10.2 to 0.10.3 on 2022-09-21 cspell from 6.10.0 to 6.10.1 on 2022-09-21 tflint from 0.40.0 to 0.40.1 on 2022-09-21 stylelint from 14.12.0 to 14.12.1 on 2022-09-21 djlint from 1.17.0 to 1.17.1 on 2022-09-21 markdown-link-check from 3.10.2 to 3.10.3 on 2022-09-21 checkov from 2.1.219 to 2.1.223 on 2022-09-21 djlint from 1.17.1 to 1.17.2 on 2022-09-22 checkov from 2.1.223 to 2.1.226 on 2022-09-22 clippy from 0.1.63 to 0.1.64 on 2022-09-22 terraform-fmt from 1.2.9 to 1.3.0 on 2022-09-22 ansible-lint from 6.6.1 to 6.7.0 on 2022-09-25 eslint from 8.23.1 to 8.24.0 on 2022-09-25 phpstan from 1.8.5 to 1.8.6 on 2022-09-25 protolint from 0.40.0 to 0.41.0 on 2022-09-25 checkov from 2.1.226 to 2.1.227 on 2022-09-25 checkstyle from 10.3.3 to 10.3.4 on 2022-09-26 djlint from 1.17.2 to 1.18.0 on 2022-09-27 jsonlint from 11.6.0 to 11.7.0 on 2022-09-27 mypy from 0.971 to 0.981 on 2022-09-27 checkov from 2.1.227 to 2.1.228 on 2022-09-27 gitleaks from 8.12.0 to 8.13.0 on 2022-09-27 snakemake from 7.14.0 to 7.14.1 on 2022-09-27 tflint from 0.40.1 to 0.41.0 on 2022-09-27 checkov from 2.1.228 to 2.1.229 on 2022-09-27 semgrep from 0.114.0 to 0.115.0 on 2022-09-27 snakemake from 7.14.1 to 7.14.2 on 2022-09-27 sqlfluff from 1.3.1 to 1.3.2 on 2022-09-27 cfn-lint from 0.65.1 to 0.66.0 on 2022-09-30 stylelint from 14.12.1 to 14.13.0 on 2022-09-30 checkov from 2.1.229 to 2.1.242 on 2022-09-30 syft from 0.57.0 to 0.58.0 on 2022-09-30 kics from 1.6.0 to 1.6.1 on 2022-09-30 terraform-fmt from 1.3.0 to 1.3.1 on 2022-09-30 coffeelint from 5.2.9 to 5.2.10 on 2022-10-01 cspell from 6.10.1 to 6.12.0 on 2022-10-01 terragrunt from 0.38.12 to 0.39.0 on 2022-10-01 [v6.10.0] - 2022-09-19 Add git-lfs in Docker image to handle large files in git repositories MegaLinter Docker images size improvements Remove NPM cache Remove Cargo cache Remove rustup when clippy is not embedded in the image Remove npm packages useless files Linter versions upgrades ansible-lint from 6.5.2 to 6.6.0 cfn-lint from 0.64.1 to 0.65.0 checkov from 2.1.201 to 2.1.213 cspell from 6.8.1 to 6.10.0 djlint from 1.12.3 to 1.16.0 eslint from 8.23.0 to 8.23.1 kics from 1.5.15 to 1.6.0 pylint from 2.15.2 to 2.15.3 scalafix from 0.10.1 to 0.10.2 semgrep from 0.112.1 to 0.113.0 sfdx-scanner-apex from 2.13.8 to 2.13.9 sfdx-scanner-aura from 2.13.8 to 2.13.9 sfdx-scanner-lwc from 2.13.8 to 2.13.9 stylelint from 14.11.0 to 14.12.0 syft from 0.55.0 to 0.56.0 terragrunt from 0.38.10 to 0.38.12 terragrunt from 0.38.9 to 0.38.10 yamllint from 1.27.1 to 1.28.0 [v6.9.1] - 2022-09-11 Linters Add python type checker pyright , by Microsoft New linters with available SARIF output for SARIF Reporter ansible-lint shellcheck thanks to shellcheck-sarif Use list_of_files Cli lint mode for checkstyle , to have unique SARIF output and improve performances Use list_of_files Cli lint mode for golangci-lint and revive , to improve performances Reactivate snakefmt Core Improve build performances and docker images sizes (reduce from 117 to 36 layers) Use BUILDKIT Join RUN instructions Optimize core Dockerfile items Clean npm, python and cargo caches Create a venv for each python-based linter to avoid issues with dependencies Fix broken link to documentation when using v6 Linter versions upgrades ansible-lint from 6.0.2 to 6.5.2 cfn-lint from 0.63.2 to 0.64.1 checkov from 2.1.183 to 2.1.201 clj-kondo from 2022.08.03 to 2022.09.08 djlint from 1.12.1 to 1.12.3 gitleaks from 8.11.2 to 8.12.0 golangci-lint from 1.48.0 to 1.49.0 ktlint from 0.47.0 to 0.47.1 phpstan from 1.8.4 to 1.8.5 protolint from 0.39.0 to 0.40.0 pylint from 2.15.0 to 2.15.2 semgrep from 0.103.0 to 0.112.1 sqlfluff from 1.3.0 to 1.3.1 standard from 15.0.1 to 17.0.0 terraform-fmt from 1.2.8 to 1.2.9 tflint from 0.39.3 to 0.40.0 Note: MegaLinter 6.9.0 release has been cancelled: it was fine but the docker image sizes were not optimized enough. [v6.8.0] - 2022-09-04 Run MegaLinter pre-commit hooks serially (#1826). Replace deprecated StandardJS VS Code extension with the newer official version When SARIF_REPORTER is active, use sarif-fmt to convert SARIF into text for console and text reporters ( #1822 ). Count checkstyle errors ( #1820 ) Linter versions upgrades black from 22.6.0 to 22.8.0 cfn-lint from 0.63.0 to 0.63.2 checkov from 2.1.160 to 2.1.183 checkstyle from 10.3.2 to 10.3.3 djlint from 1.12.0 to 1.12.1 kics from 1.5.14 to 1.5.15 phpstan from 1.8.2 to 1.8.4 rubocop from 1.35.1 to 1.36.0 snakemake from 7.13.0 to 7.14.0 syft from 0.54.0 to 0.55.0 terragrunt from 0.38.8 to 0.38.9 [v6.7.1] - 2022-08-28 Fix Azure Comments reporter: Use BuildId to build artifacts url Fix actionlint install command [v6.7.0] - 2022-08-28 Linters Add PMD java linter Azure Pipelines integration enhancements Update installation instructions Console reporter: manage collapsible groups for easier display & navigation in job logs (requires CI=true and TF_BUILD=true sent as env variables) Azure comments reporter (see documentation ) Performances improvements When running linters in parallel, run in the same process only the linters from same descriptor and that can update the same sources (to avoid concurrency). Other linters can be run independently. Define linter_speed of linter descriptors (default 3). Can be from 1 (super slow) to 5 (super fast). This is used to optimize the processing order of linters. Fixes Fix: Properly match files_sub_directory as a prefix instead of partial string matching ( #1765 ) Match regex without workspace and sub_directory Remove config variables that are not applicable to linters analyzing all files or all other linters files Linter versions upgrades cfn-lint from 0.62.0 to 0.63.0 checkov from 2.1.139 to 2.1.160 cspell from 6.8.0 to 6.8.1 djlint from 1.11.0 to 1.12.0 eslint from 8.22.0 to 8.23.0 gitleaks from 8.11.0 to 8.11.2 golangci-lint from 1.48.0 to 1.49.0 luacheck from 0.26.1 to 1.0.0 pylint from 2.14.5 to 2.15.0 rubocop from 1.35.0 to 1.35.1 secretlint from 5.2.3 to 5.2.4 snakemake from 7.12.1 to 7.13.0 terraform-fmt from 1.2.7 to 1.2.8 terragrunt from 0.38.7 to 0.38.8 tflint from 0.35.0 to 0.39.3 [v6.6.0] - 2022-08-21 Fix flavors suggestions to ignore linters not relevant for such flavor ( #1746 ) Update pre-commit hooks from v5 to v6 ( #1755 ). Fix version in URL in logs produced by reporters Add Makefile linter within python flavor ( #1760 ) Set DEFAULT_WORKSPACE as git safe directory per default #1766 Improve documentation for TAP_REPORTER Linter versions upgrades actionlint from 1.6.15 to 1.6.16 cfn-lint from 0.61.5 to 0.62.0 checkov from 2.1.127 to 2.1.139 cpplint from 1.6.0 to 1.6.1 cspell from 6.6.1 to 6.8.0 djlint from 1.9.5 to 1.11.0 eslint-plugin-jsonc from 2.3.1 to 2.4.0 gitleaks from 8.10.3 to 8.11.0 kics from 1.5.13 to 1.5.14 ktlint from 0.46.1 to 0.47.0 markdownlint from 0.32.1 to 0.32.2 sfdx-scanner-apex from 2.13.7 to 2.13.8 sfdx-scanner-aura from 2.13.7 to 2.13.8 sfdx-scanner-lwc from 2.13.7 to 2.13.8 sqlfluff from 1.2.1 to 1.3.0 stylelint from 14.10.0 to 14.11.0 syft from 0.53.4 to 0.54.0 [v6.5.0] - 2022-08-15 npm-groovy-lint: Use Cli lint mode list_of_files for much better performances Disable proselint by default if .proselintrc file is not found Linter versions upgrades checkov from 2.1.121 to 2.1.127 eslint from 8.21.0 to 8.22.0 gitleaks from 8.10.2 to 8.10.3 npm-groovy-lint from 9.5.0 to 10.1.0 rstcheck from 6.0.0 to 6.1.0 [v6.4.0] - 2022-08-12 Add REPOSITORY_CHECKOV in all flavors New config variables MEGALINTER_FILES_TO_LINT : Comma-separated list of files to analyze. Using this variable will bypass other file listing methods ( #808 ) SKIP_CLI_LINT_MODES : Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: file,project ). Available values: file , cli_lint_mode , project . mega-linter-runner: Allow MEGALINTER_FILES_TO_LINT to be sent as positional arguments New argument --filesonly that sends SKIP_CLI_LINT_MODES=project Example: mega-linter-runner --flavor python --release beta --filesonly megalinter/config.py megalinter/flavor_factory.py megalinter/MegaLinter.py Fixes Fix SARIF when a run is missing a results list ( #1725 ) Fix missing quotes for Powershell script analyzer ( #1728 ) Linter versions upgrades cfn-lint from 0.61.4 to 0.61.5 checkov from 2.1.100 to 2.1.121 clippy from 0.1.62 to 0.1.63 cspell from 6.5.0 to 6.6.1 gitleaks from 8.10.1 to 8.10.1 powershell from 7.2.5 to 7.2.6 protolint from 0.38.3 to 0.39.0 rubocop from 1.33.0 to 1.35.0 snakemake from 7.12.0 to 7.12.1 stylelint from 14.9.1 to 14.10.0 terraform-fmt from 1.2.6 to 1.2.7 terragrunt from 0.38.6 to 0.38.7 [v6.3.0] - 2022-08-07 Linters Add REPOSITORY_CHECKOV to benefit from all checks and not only terraform ones. TERRAFORM_CHECKOV will be deprecated in a next major version Add djlint (HTML_DJLINT) to lint HTML files (html, django, jinja, nunjucks, handlebars, golang, angular) Upgrade jsonlint to use maintained package @prantlf/jsonlint]([ https://www.npmjs.com/package/@prantlf/jsonlint ) + use cli_lint_mode list_of_files to improve performances Core Support for automatic removal of Docker container when linting is finished Fix SARIF when endColumn is 0 ( #1702 ) Use dynamic REPORT_FOLDER value for output files for SALESFORCE and COPYPASTE descriptors Fix collapsible sections in Gitlab console logs Manage ignore files (like .secretlintignore or .eslintignore ) Define ignore argument for client in descriptors Define ignore file name in descriptors (overridable with _IGNORE_FILE_NAME at runtime) Update documentation generation to take in account this new configuration Linter versions upgrades checkov from 2.1.83 to 2.1.98 clj-kondo from 2022.04.25 to 2022.08.03 eslint from 8.20.0 to 8.21.0 flake8 from 5.0.1 to 5.0.2 golangci-lint from 1.47.2 to 1.48.0 jsonlint from 1.6.3 to 11.6.0 kics from 1.5.12 to 1.5.13 rubocop from 1.32.0 to 1.33.0 syft from 0.52.0 to 0.53.4 [v6.2.1] - 2022-08-01 Fix blocking bug in MegaLinter v6.2.0 core ( #1684 and #1685 ) Linter versions upgrades checkstyle from 10.3.1 to 10.3.2 on 2022-08-01 flake8 from 5.0.0 to 5.0.1 on 2022-08-01 checkov from 2.1.82 to 2.1.83 on 2022-08-01 [v6.2.0] - 2022-07-31 Core Fix mega-linter-runner --install template (#1662) Use REPORT_OUTPUT_FOLDER: none to not generate report files Add info in doc about CLI_LINT_MODE and about how to ignore files when cli_lint_mode is project Fix bug that disables generation of megalinter.log file in most cases Fixes about JSON Schema (#1621) Remove redundant line separator after generated table (#1650) Avoid flavor suggestion message when only REPOSITORY linters are not found Linters Add checkmake to lint Makefile Disable SemGrep by default if REPOSITORY_SEMGREP_RULESETS is not defined. Avoid cspell to lint all files. Lint only other linter files (#1648) Fix revive installation command New default config for gitleaks with useDefault=true Linter versions upgrades cfn-lint from 0.61.3 to 0.61.4 on 2022-07-30 checkov from 2.1.60 to 2.1.61 on 2022-07-19 checkov from 2.1.61 to 2.1.63 on 2022-07-20 checkov from 2.1.63 to 2.1.65 on 2022-07-21 checkov from 2.1.65 to 2.1.67 on 2022-07-21 checkov from 2.1.67 to 2.1.68 on 2022-07-23 checkov from 2.1.68 to 2.1.69 on 2022-07-24 checkov from 2.1.69 to 2.1.70 on 2022-07-24 checkov from 2.1.70 to 2.1.74 on 2022-07-25 checkov from 2.1.74 to 2.1.82 on 2022-07-30 cspell from 6.3.0 to 6.4.0 on 2022-07-19 cspell from 6.4.0 to 6.4.1 on 2022-07-24 cspell from 6.4.1 to 6.5.0 on 2022-07-30 flake8 from 4.0.1 to 5.0.0 on 2022-07-31 gitleaks from 8.8.12 to 8.9.0 on 2022-07-30 golangci-lint from 1.47.0 to 1.47.1 on 2022-07-19 golangci-lint from 1.47.1 to 1.47.2 on 2022-07-21 jscpd from 3.4.5 to 3.3.26 on 2022-07-19 markdown-table-formatter from 1.3.0 to 1.4.0 on 2022-07-25 markdownlint from 0.32.0 to 0.32.1 on 2022-07-25 mypy from 0.961 to 0.971 on 2022-07-19 phpstan from 1.8.1 to 1.8.2 on 2022-07-20 rubocop from 1.31.2 to 1.32.0 on 2022-07-21 sfdx-scanner-apex from 2.13.5 to 2.13.6 on 2022-07-21 sfdx-scanner-apex from 2.13.6 to 2.13.7 on 2022-07-30 sfdx-scanner-aura from 2.13.5 to 2.13.6 on 2022-07-21 sfdx-scanner-aura from 2.13.6 to 2.13.7 on 2022-07-30 sfdx-scanner-lwc from 2.13.5 to 2.13.6 on 2022-07-21 sfdx-scanner-lwc from 2.13.6 to 2.13.7 on 2022-07-30 snakemake from 7.8.5 to 7.9.0 on 2022-07-19 snakemake from 7.9.0 to 7.12.0 on 2022-07-30 syft from 0.51.0 to 0.52.0 on 2022-07-22 terraform-fmt from 1.2.5 to 1.2.6 on 2022-07-30 terragrunt from 0.38.5 to 0.38.6 on 2022-07-24 [v6.1.0] - 2022-07-19 Improve console logs by using collapsible sections in GitHub Actions and Gitlab CI (disable by defining CONSOLE_REPORTER_SECTIONS: false ) Define CLEAR_REPORT_FOLDER=true to empty report folder at the beginning of each run ( #1502 ) Improve SARIF output Replace CI paths in logs Add missing required properties so SARIF is valid Add MegaLinter information in SARIF linter runs Allow to select linters to activate SARIF for, using SARIF_REPORTER_LINTERS Fix issue when a linter is used in multiple SARIF lint results Linter versions upgrades cfn-lint from 0.61.2 to 0.61.3 on 2022-07-19 checkov from 2.1.57 to 2.1.59 on 2022-07-18 checkov from 2.1.59 to 2.1.60 on 2022-07-19 cspell from 6.2.3 to 6.3.0 on 2022-07-18 eslint from 8.19.0 to 8.20.0 on 2022-07-17 golangci-lint from 1.46.2 to 1.47.0 on 2022-07-19 jscpd from 3.3.26 to 3.4.5 on 2022-07-19 markdownlint from 0.31.1 to 0.32.0 on 2022-07-17 pylint from 2.14.4 to 2.14.5 on 2022-07-18 [v6.0.5] - 2022-07-16 Fix mega-linter-runner --upgrade so it also updates report folder to megalinter-reports in GitHub Actions Workflows #1609 Fix documentation and templates to use megalinter-reports folder everywhere Workaround for python-markdown issue https://github.com/radude/mdx_truly_sane_lists/issues/9 Linter versions upgrades checkov from 2.1.54 to 2.1.56 on 2022-07-15 checkov from 2.1.56 to 2.1.57 on 2022-07-16 gitleaks from 8.8.7 to 8.8.12 on 2022-07-16 kics from 1.5.11 to 1.5.12 on 2022-07-16 protolint from 0.38.2 to 0.38.3 on 2022-07-15 sqlfluff from 1.2.0 to 1.2.1 on 2022-07-16 terraform-fmt from 1.2.4 to 1.2.5 on 2022-07-15 terragrunt from 0.38.4 to 0.38.5 on 2022-07-15 [v6.0.4] - 2022-07-14 Fix count of errors when using SARIF reporter DevSkim: Ignore megalinter-reports by default (#1603) Load JSON when list of objects is defined in an ENV var (#1605) AutoFix pre_commands using npm install (1258) Linter versions upgrades checkov from 2.1.43 to 2.1.54 on 2022-07-14 git_diff from 2.34.2 to 2.34.4 on 2022-07-14 phpstan from 1.8.0 to 1.8.1 on 2022-07-14 sqlfluff from 1.1.0 to 1.2.0 on 2022-07-14 syft from 0.50.0 to 0.51.0 on 2022-07-14 [v6.0.3] - 2022-07-11 mega-linter-runner: Update query args when opening OX Security Fix mega-linter-runner doesn't default to v6 for flavors (1596) [v6.0.0] - 2022-07-10 Breaking changes: you must run npx mega-linter-runner --upgrade to use MegaLinter v6 Core architecture New reporter SARIF_REPORTER that aggregates all SARIF output files into a single one Correct SARIF files for known format errors New config variable DISABLE_LINTERS_ERRORS to define a list of linters that will be considered as non blocking Upgrade base docker image to python:3.10.4-alpine3.15 Rename default report folder from report to megalinter-reports Display GitHub stars in linters summary table in documentation Linters: Add DevSkim security linter by Microsoft Add dustilock to check for dependency confusion attacks with node and python packages Add gitleaks to lint git repository Add goodcheck as regex-based linter Add PMD to lint java files (disabled for now) Add semgrep as regex-based linter with many community rules Add syft to generate SBOM (Software Bill Of Materials) Add trivy security linter Remove dockerfilelint , as it is not maintained anymore and hadolint contains all its rules Remove rstfmt as it is not maintained anymore SARIF management for: bandit checkov checkstyle cfn-lint devskim eslint gitleaks hadolint ktlint npm-groovy-lint psalm semgrep secretlint revive terrascan tflint trivy Descriptors: New flavor Security New descriptor repository : contains DevSkim, dustilock, gitleaks, secretlint, semgrep, syft, trivy Remove CREDENTIALS and GIT descriptors mega-linter-runner --upgrade option can now upgrade repos MegaLinter config to v6 Create/update local .gitignore file when installing / updating MegaLinter using mega-linter-runner Propose to test ox.security service Switch from npm to yarn Dev architecture Manage offline run of bash build.sh for those who want to code in planes :) Automate update of CHANGELOG.md after release (beta) Accelerate internal CI testing performances Linter versions upgrades actionlint from 1.6.13 to 1.6.15 on 2022-07-10 black from 22.3.0 to 22.6.0 on 2022-07-10 cfn-lint from 0.61.1 to 0.61.2 on 2022-07-10 checkov from 3.9 to 2.1.43 on 2022-07-10 checkstyle from 10.3 to 10.3.1 on 2022-07-10 clippy from 0.1.61 to 0.1.62 on 2022-07-10 cspell from 6.1.2 to 6.2.3 on 2022-07-10 eslint-plugin-jsonc from 2.3.0 to 2.3.1 on 2022-07-10 eslint from 8.18.0 to 8.19.0 on 2022-07-10 git_diff from 2.30.3 to 2.34.2 on 2022-07-10 phpstan from 1.7.15 to 1.8.0 on 2022-07-10 pylint from 2.14.3 to 2.14.4 on 2022-07-10 rubocop from 1.30.1 to 1.31.2 on 2022-07-10 secretlint from 4.1.0 to 5.2.3 on 2022-07-10 snakemake from 7.8.3 to 7.8.5 on 2022-07-10 spectral from 5.6.0 to 5.9.2 on 2022-07-10 sqlfluff from 1.0.0 to 1.1.0 on 2022-07-10 terraform-fmt from 1.2.3 to 1.2.4 on 2022-07-10 terragrunt from 0.38.1 to 0.38.4 on 2022-07-10 terrascan from 1.14.0 to 1.15.2 on 2022-07-10 v8r from 0.6.1 to 0.13.0 on 2022-07-10 yamllint from 1.26.3 to 1.27.1 on 2022-07-10 [v5.17.0] - 2022-07-10 Message to propose users to upgrade to v6 [v5.16.1] - 2022-06-26 Quick fix release management [v5.16.0] - 2022-06-26 Support for named Docker container. Linter versions upgrades checkov from 2.0.1230 to 2.1.0 on 2022-06-23 checkov from 2.1.0 to 2.1.5 on 2022-06-24 checkov from 2.1.5 to 2.1.7 on 2022-06-25 checkov from 2.1.7 to 3.9 on 2022-06-26 kics from 1.5.10 to 1.5.11 on 2022-06-23 protolint from 0.38.1 to 0.38.2 on 2022-06-26 sfdx-scanner-apex from 2.13.4 to 2.13.5 on 2022-06-23 sfdx-scanner-aura from 2.13.4 to 2.13.5 on 2022-06-23 sfdx-scanner-lwc from 2.13.4 to 2.13.5 on 2022-06-23 terragrunt from 0.38.0 to 0.38.1 on 2022-06-23 [v5.15.0] - 2022-06-23 OX Security branding and pre-announcement Linter versions upgrades cfn-lint from 0.61.0 to 0.61.1 on 2022-06-22 checkov from 2.0.1209 to 2.0.1210 on 2022-06-14 checkov from 2.0.1210 to 2.0.1212 on 2022-06-15 checkov from 2.0.1212 to 2.0.1217 on 2022-06-15 checkov from 2.0.1217 to 2.0.1218 on 2022-06-17 checkov from 2.0.1218 to 2.0.1219 on 2022-06-19 checkov from 2.0.1219 to 2.0.1226 on 2022-06-22 checkov from 2.0.1226 to 2.0.1230 on 2022-06-22 eslint from 8.17.0 to 8.18.0 on 2022-06-19 ktlint from 0.45.2 to 0.46.0 on 2022-06-19 ktlint from 0.46.0 to 0.46.1 on 2022-06-22 phpcs from 3.6.2 to 3.7.0 on 2022-06-14 phpcs from 3.7.0 to 3.7.1 on 2022-06-19 phpstan from 1.7.12 to 1.7.13 on 2022-06-14 phpstan from 1.7.13 to 1.7.14 on 2022-06-15 phpstan from 1.7.14 to 1.7.15 on 2022-06-22 powershell from 7.2.4 to 7.2.5 on 2022-06-22 prettier from 2.6.2 to 2.7.0 on 2022-06-15 prettier from 2.7.0 to 2.7.1 on 2022-06-17 pylint from 2.14.1 to 2.14.2 on 2022-06-15 pylint from 2.14.2 to 2.14.3 on 2022-06-19 snakefmt from 0.6.0 to 0.6.1 on 2022-06-14 snakemake from 7.8.2 to 7.8.3 on 2022-06-22 sql-lint from 0.0.19 to 0.0.20 on 2022-06-19 sql-lint from 0.0.20 to 1.0.0 on 2022-06-22 sqlfluff from 0.13.2 to 1.0.0 on 2022-06-19 terraform-fmt from 1.2.2 to 1.2.3 on 2022-06-17 terragrunt from 0.37.3 to 0.37.4 on 2022-06-15 terragrunt from 0.37.4 to 0.38.0 on 2022-06-19 [v5.14.0] - 2022-06-12 Local plugins support & documentation Update R lintr documentation Linter versions upgrades actionlint from 1.6.12 to 1.6.13 on 2022-05-20 cfn-lint from 0.60.0 to 0.60.1 on 2022-05-20 cfn-lint from 0.60.1 to 0.61.0 on 2022-06-01 checkov from 2.0.1141 to 2.0.1143 on 2022-05-17 checkov from 2.0.1143 to 2.0.1147 on 2022-05-20 checkov from 2.0.1147 to 2.0.1150 on 2022-05-22 checkov from 2.0.1150 to 2.0.1158 on 2022-05-24 checkov from 2.0.1158 to 2.0.1159 on 2022-05-24 checkov from 2.0.1159 to 2.0.1161 on 2022-05-25 checkov from 2.0.1161 to 2.0.1162 on 2022-05-27 checkov from 2.0.1162 to 2.0.1174 on 2022-05-30 checkov from 2.0.1174 to 2.0.1175 on 2022-05-31 checkov from 2.0.1175 to 2.0.1177 on 2022-05-31 checkov from 2.0.1177 to 2.0.1182 on 2022-05-31 checkov from 2.0.1182 to 2.0.1185 on 2022-06-02 checkov from 2.0.1185 to 2.0.1188 on 2022-06-03 checkov from 2.0.1188 to 2.0.1206 on 2022-06-08 checkov from 2.0.1206 to 2.0.1207 on 2022-06-09 checkov from 2.0.1207 to 2.0.1209 on 2022-06-10 checkstyle from 10.2 to 10.3 on 2022-05-30 clippy from 0.1.60 to 0.1.61 on 2022-05-20 coffeelint from 5.2.8 to 5.2.9 on 2022-05-17 cspell from 5.20.0 to 5.21.0 on 2022-05-20 cspell from 5.21.0 to 5.21.1 on 2022-05-21 cspell from 5.21.1 to 6.0.0 on 2022-05-22 cspell from 6.0.0 to 6.1.0 on 2022-05-31 cspell from 6.1.0 to 6.1.1 on 2022-06-03 cspell from 6.1.1 to 6.1.2 on 2022-06-09 eslint-plugin-jsonc from 2.2.1 to 2.3.0 on 2022-05-28 eslint from 8.15.0 to 8.16.0 on 2022-05-21 eslint from 8.16.0 to 8.17.0 on 2022-06-08 golangci-lint from 1.46.1 to 1.46.2 on 2022-05-20 graphql-schema-linter from 3.0.0 to 3.0.1 on 2022-05-22 kics from 1.5.8 to 1.5.9 on 2022-05-27 kics from 1.5.9 to 1.5.10 on 2022-06-09 mypy from 0.950 to 0.960 on 2022-05-27 mypy from 0.960 to 0.961 on 2022-06-08 phpstan from 1.6.8 to 1.6.9 on 2022-05-22 phpstan from 1.6.9 to 1.7.0 on 2022-05-24 phpstan from 1.7.0 to 1.7.1 on 2022-05-24 phpstan from 1.7.1 to 1.7.2 on 2022-05-27 phpstan from 1.7.11 to 1.7.12 on 2022-06-09 phpstan from 1.7.2 to 1.7.3 on 2022-05-30 phpstan from 1.7.3 to 1.7.6 on 2022-05-31 phpstan from 1.7.6 to 1.7.7 on 2022-05-31 phpstan from 1.7.7 to 1.7.8 on 2022-06-02 phpstan from 1.7.8 to 1.7.9 on 2022-06-03 phpstan from 1.7.9 to 1.7.11 on 2022-06-08 powershell from 7.2.3 to 7.2.4 on 2022-05-20 pylint from 2.13.9 to 2.14.0 on 2022-06-02 pylint from 2.14.0 to 2.14.1 on 2022-06-08 rstcheck from 5.0.0 to 6.0.0 on 2022-06-08 rubocop from 1.29.1 to 1.30.0 on 2022-05-27 rubocop from 1.30.0 to 1.30.1 on 2022-06-08 scalafix from 0.10.0 to 0.10.1 on 2022-06-10 sfdx-scanner-apex from 2.13.2 to 2.13.4 on 2022-05-27 sfdx-scanner-aura from 2.13.2 to 2.13.4 on 2022-05-27 sfdx-scanner-lwc from 2.13.2 to 2.13.4 on 2022-05-27 shfmt from 3.5.0 to 3.6.0 on 2022-05-24 snakemake from 7.6.2 to 7.7.0 on 2022-05-17 snakemake from 7.7.0 to 7.8.0 on 2022-05-24 snakemake from 7.8.0 to 7.8.1 on 2022-05-31 snakemake from 7.8.1 to 7.8.2 on 2022-06-08 sqlfluff from 0.13.1 to 0.13.2 on 2022-05-21 stylelint from 14.8.2 to 14.8.3 on 2022-05-22 stylelint from 14.8.3 to 14.8.4 on 2022-05-25 stylelint from 14.8.4 to 14.8.5 on 2022-05-27 stylelint from 14.8.5 to 14.9.0 on 2022-06-09 stylelint from 14.9.0 to 14.9.1 on 2022-06-11 terraform-fmt from 1.1.9 to 1.2.0 on 2022-05-20 terraform-fmt from 1.2.0 to 1.2.1 on 2022-05-24 terraform-fmt from 1.2.1 to 1.2.2 on 2022-06-03 terragrunt from 0.37.1 to 0.37.2 on 2022-06-09 terragrunt from 0.37.2 to 0.37.3 on 2022-06-12 [v5.13.0] - 2022-05-15 Add gherkin-lint in dotnet flavor ( #1435 ) Define pre-commit hooks ( #569 ). Pin ansible-lint to 6.0.2 to fix pip dependency conflict between jsonschema versions ( #1470 ). Use docker image for editorconfig-checker Update sqlfluff descriptor properties to enable error count( #1460 ) Linter versions upgrades cfn-lint from 0.59.0 to 0.59.1 on 2022-05-03 cfn-lint from 0.59.1 to 0.60.0 on 2022-05-14 checkov from 2.0.1076 to 2.0.1079 on 2022-04-24 checkov from 2.0.1079 to 2.0.1084 on 2022-04-26 checkov from 2.0.1084 to 2.0.1088 on 2022-04-28 checkov from 2.0.1088 to 2.0.1098 on 2022-04-29 checkov from 2.0.1098 to 2.0.1100 on 2022-04-30 checkov from 2.0.1100 to 2.0.1102 on 2022-05-02 checkov from 2.0.1102 to 2.0.1108 on 2022-05-03 checkov from 2.0.1108 to 2.0.1110 on 2022-05-03 checkov from 2.0.1110 to 2.0.1113 on 2022-05-05 checkov from 2.0.1113 to 2.0.1118 on 2022-05-06 checkov from 2.0.1118 to 2.0.1119 on 2022-05-07 checkov from 2.0.1119 to 2.0.1120 on 2022-05-08 checkov from 2.0.1120 to 2.0.1121 on 2022-05-08 checkov from 2.0.1121 to 2.0.1140 on 2022-05-14 checkov from 2.0.1140 to 2.0.1141 on 2022-05-15 checkstyle from 10.1 to 10.2 on 2022-04-24 clj-kondo from 2022.04.08 to 2022.04.25 on 2022-04-30 coffeelint from 5.2.7 to 5.2.8 on 2022-04-26 cspell from 5.19.7 to 5.20.0 on 2022-05-03 editorconfig-checker from 2.3.5 to 2.4.0 on 2022-05-15 eslint from 8.14.0 to 8.15.0 on 2022-05-07 golangci-lint from 1.45.2 to 1.46.1 on 2022-05-14 graphql-schema-linter from 2.0.1 to 2.0.2 on 2022-05-06 graphql-schema-linter from 2.0.2 to 3.0.0 on 2022-05-07 kics from 1.5.6 to 1.5.7 on 2022-05-03 kics from 1.5.7 to 1.5.8 on 2022-05-14 luacheck from 0.26.0 to 0.26.1 on 2022-04-24 markdown-link-check from 3.10.0 to 3.10.2 on 2022-05-05 mypy from 0.942 to 0.950 on 2022-04-28 phpstan from 1.5.7 to 1.6.0 on 2022-04-26 phpstan from 1.6.0 to 1.6.2 on 2022-04-28 phpstan from 1.6.2 to 1.6.3 on 2022-04-29 phpstan from 1.6.3 to 1.6.4 on 2022-05-03 phpstan from 1.6.4 to 1.6.7 on 2022-05-05 phpstan from 1.6.7 to 1.6.8 on 2022-05-14 powershell from 7.2.2 to 7.2.3 on 2022-04-28 protolint from 0.37.1 to 0.38.1 on 2022-05-03 psalm from Psalm.4.x-dev@ to Psalm.5.x-dev@ on 2022-05-14 pylint from 2.13.7 to 2.13.8 on 2022-05-03 pylint from 2.13.8 to 2.13.9 on 2022-05-14 rubocop from 1.28.1 to 1.28.2 on 2022-04-26 rubocop from 1.28.2 to 1.29.0 on 2022-05-07 rubocop from 1.29.0 to 1.29.1 on 2022-05-14 sfdx-scanner-apex from 2.13.1 to 2.13.2 on 2022-05-05 sfdx-scanner-aura from 2.13.1 to 2.13.2 on 2022-05-05 sfdx-scanner-lwc from 2.13.1 to 2.13.2 on 2022-05-05 snakemake from 7.4.0 to 7.5.0 on 2022-04-28 snakemake from 7.5.0 to 7.6.0 on 2022-05-03 snakemake from 7.6.0 to 7.6.1 on 2022-05-05 snakemake from 7.6.1 to 7.6.2 on 2022-05-07 sqlfluff from 0.13.0 to 0.13.1 on 2022-05-07 stylelint from 14.7.1 to 14.8.0 on 2022-04-28 stylelint from 14.8.0 to 14.8.1 on 2022-04-30 stylelint from 14.8.1 to 14.8.2 on 2022-05-04 terragrunt from 0.36.10 to 0.37.1 on 2022-05-14 terragrunt from 0.36.7 to 0.36.8 on 2022-04-28 terragrunt from 0.36.8 to 0.36.9 on 2022-04-30 terragrunt from 0.36.9 to 0.36.10 on 2022-05-06 xmllint from 20913 to 20914 on 2022-05-14 [v5.12.0] - 2022-04-23 Core Fix git upgrade issue New option FAIL_IF_UPDATED_SOURCES ( #1389 ) Linter versions upgrades actionlint from 1.6.11 to 1.6.12 on 2022-04-18 cfn-lint from 0.58.4 to 0.59.0 on 2022-04-18 checkov from 2.0.1047 to 2.0.1050 on 2022-04-11 checkov from 2.0.1050 to 2.0.1067 on 2022-04-18 checkov from 2.0.1067 to 2.0.1068 on 2022-04-18 checkov from 2.0.1068 to 2.0.1076 on 2022-04-22 coffeelint from 5.2.5 to 5.2.6 on 2022-04-11 coffeelint from 5.2.6 to 5.2.7 on 2022-04-22 eslint from 8.13.0 to 8.14.0 on 2022-04-23 git_diff from 2.30.2 to 2.30.3 on 2022-04-18 htmlhint from 1.1.3 to 1.1.4 on 2022-04-11 kics from 1.5.5 to 1.5.6 on 2022-04-18 npm-groovy-lint from 9.4.1 to 9.5.0 on 2022-04-18 phpstan from 1.5.4 to 1.5.6 on 2022-04-18 phpstan from 1.5.6 to 1.5.7 on 2022-04-22 pylint from 2.13.5 to 2.13.7 on 2022-04-22 rstcheck from 3.3.1 to 5.0.0 on 2022-04-18 rubocop from 1.27.0 to 1.28.1 on 2022-04-22 snakemake from 7.3.8 to 7.4.0 on 2022-04-22 sqlfluff from 0.12.0 to 0.13.0 on 2022-04-22 stylelint from 14.6.1 to 14.7.1 on 2022-04-18 terraform-fmt from 1.1.8 to 1.1.9 on 2022-04-22 terragrunt from 0.36.6 to 0.36.7 on 2022-04-18 tflint from 0.34.1 to 0.35.0 on 2022-04-18 [v5.11.0] - 2022-04-11 Linters Disable rstfmt as it is neither stable or maintained markdown-links-check: allow 203 as valid return code Fixes Github Comment Reporter: switch to using a hidden HTML comment to mark the comment, with the current workflow and jobid. This is more robust than the old method. ([ #1355 ) Allow to provide CI_ACTION_RUN_URL to build hlink for GitHub Comments reporter messages ([ #1341 ) Display plugin URL in MegaLinter output logs ([ #1340 ) Fix public glibc public key download Fix no override and no default toolchain set when lint rust with clippy via github-action ( #975 ) Fix cspell FileNotFound error by creating subdirectories under report as required ( #1397 ) Doc Add instructions to upload artifacts when using MegaLinter with Jenkins Linter versions upgrades actionlint from 1.6.10 to 1.6.11 on 2022-04-06 ansible-lint from 6.0.1 to 6.0.2 on 2022-03-24 bash-exec from 5.1.0 to 5.1.16 on 2022-03-22 black from 22.1.0 to 22.3.0 on 2022-03-30 cfn-lint from 0.58.3 to 0.58.4 on 2022-03-22 checkov from 2.0.1008 to 2.0.1016 on 2022-03-31 checkov from 2.0.1016 to 2.0.1021 on 2022-03-31 checkov from 2.0.1021 to 2.0.1024 on 2022-04-01 checkov from 2.0.1024 to 2.0.1030 on 2022-04-04 checkov from 2.0.1030 to 2.0.1037 on 2022-04-06 checkov from 2.0.1037 to 2.0.1045 on 2022-04-09 checkov from 2.0.1045 to 2.0.1046 on 2022-04-10 checkov from 2.0.1046 to 2.0.1047 on 2022-04-11 checkov from 2.0.975 to 2.0.977 on 2022-03-21 checkov from 2.0.977 to 2.0.980 on 2022-03-22 checkov from 2.0.980 to 2.0.983 on 2022-03-23 checkov from 2.0.983 to 2.0.995 on 2022-03-26 checkov from 2.0.995 to 2.0.999 on 2022-03-27 checkov from 2.0.999 to 2.0.1008 on 2022-03-30 checkstyle from 10.0 to 10.1 on 2022-03-27 clippy from 0.1.59 to 0.1.60 on 2022-04-09 clj-kondo from 2022.02.09 to 2022.04.08 on 2022-04-10 coffeelint from 5.2.4 to 5.2.5 on 2022-03-22 cspell from 5.19.2 to 5.19.3 on 2022-03-26 cspell from 5.19.3 to 5.19.4 on 2022-04-01 cspell from 5.19.4 to 5.19.5 on 2022-04-02 cspell from 5.19.5 to 5.19.6 on 2022-04-09 cspell from 5.19.6 to 5.19.7 on 2022-04-10 eslint from 8.11.0 to 8.12.0 on 2022-03-26 eslint from 8.12.0 to 8.13.0 on 2022-04-09 golangci-lint from 1.45.0 to 1.45.2 on 2022-03-26 hadolint from 2.9.1 to 2.9.3 on 2022-03-31 hadolint from 2.9.3 to 2.10.0 on 2022-04-10 htmlhint from 1.1.2 to 1.1.3 on 2022-03-30 kics from 1.5.4 to 1.5.5 on 2022-03-31 ktlint from 0.45.0 to 0.45.1 on 2022-03-22 ktlint from 0.45.1 to 0.45.2 on 2022-04-07 luacheck from 0.25.0 to 0.26.0 on 2022-03-26 mypy from 0.941 to 0.942 on 2022-03-26 phpstan from 1.4.10 to 1.5.0 on 2022-03-26 phpstan from 1.5.0 to 1.5.2 on 2022-03-30 phpstan from 1.5.2 to 1.5.3 on 2022-03-31 phpstan from 1.5.3 to 1.5.4 on 2022-04-04 prettier from 2.6.0 to 2.6.1 on 2022-03-26 prettier from 2.6.1 to 2.6.2 on 2022-04-04 pylint from 2.12.2 to 2.13.1 on 2022-03-26 pylint from 2.13.1 to 2.13.2 on 2022-03-27 pylint from 2.13.2 to 2.13.3 on 2022-03-30 pylint from 2.13.3 to 2.13.4 on 2022-03-31 pylint from 2.13.4 to 2.13.5 on 2022-04-07 rubocop from 1.26.0 to 1.26.1 on 2022-03-23 rubocop from 1.26.1 to 1.27.0 on 2022-04-09 scalafix from 0.9.34 to 0.10.0 on 2022-04-04 sfdx-scanner-apex from 2.13.0 to 2.13.1 on 2022-03-24 sfdx-scanner-aura from 2.13.0 to 2.13.1 on 2022-03-24 sfdx-scanner-lwc from 2.13.0 to 2.13.1 on 2022-03-24 snakemake from 7.2.1 to 7.3.0 on 2022-03-22 snakemake from 7.3.0 to 7.3.1 on 2022-03-24 snakemake from 7.3.1 to 7.3.2 on 2022-03-26 snakemake from 7.3.2 to 7.3.3 on 2022-03-30 snakemake from 7.3.3 to 7.3.4 on 2022-03-31 snakemake from 7.3.4 to 7.3.5 on 2022-03-31 snakemake from 7.3.5 to 7.3.6 on 2022-04-04 snakemake from 7.3.6 to 7.3.7 on 2022-04-06 snakemake from 7.3.7 to 7.3.8 on 2022-04-07 sqlfluff from 0.11.1 to 0.11.2 on 2022-03-26 sqlfluff from 0.11.2 to 0.12.0 on 2022-04-09 stylelint from 14.6.0 to 14.6.1 on 2022-03-26 terraform-fmt from 1.1.7 to 1.1.8 on 2022-04-09 terrascan from 1.13.2 to 1.14.0 on 2022-04-01 [v5.10.0] - 2022-03-20 Linter versions upgrades ansible-lint from 5.4.0 to 6.0.0 on 2022-03-16 ansible-lint from 6.0.0 to 6.0.1 on 2022-03-19 checkov from 2.0.939 to 2.0.940 on 2022-03-13 checkov from 2.0.940 to 2.0.943 on 2022-03-14 checkov from 2.0.943 to 2.0.949 on 2022-03-15 checkov from 2.0.949 to 2.0.962 on 2022-03-16 checkov from 2.0.962 to 2.0.969 on 2022-03-17 checkov from 2.0.969 to 2.0.970 on 2022-03-17 checkov from 2.0.970 to 2.0.975 on 2022-03-19 cspell from 5.19.0 to 5.19.1 on 2022-03-13 cspell from 5.19.1 to 5.19.2 on 2022-03-14 golangci-lint from 1.44.2 to 1.45.0 on 2022-03-19 hadolint from 2.7.0 to 2.9.1 on 2022-03-19 kics from 1.5.3 to 1.5.4 on 2022-03-17 ktlint from 0.44.0 to 0.45.0 on 2022-03-19 markdown-link-check from 3.9.3 to 3.10.0 on 2022-03-20 mypy from 0.940 to 0.941 on 2022-03-15 phpstan from 1.4.9 to 1.4.10 on 2022-03-14 powershell from 7.2.1 to 7.2.2 on 2022-03-17 prettier from 2.5.1 to 2.6.0 on 2022-03-17 snakemake from 7.2.0 to 7.2.1 on 2022-03-14 sqlfluff from 0.11.0 to 0.11.1 on 2022-03-17 stylelint from 14.5.3 to 14.6.0 on 2022-03-17 terragrunt from 0.36.3 to 0.36.5 on 2022-03-17 terragrunt from 0.36.5 to 0.36.6 on 2022-03-19 [v5.9.0] - 2022-03-13 Linters New linter kubeconform to validate Kubernetes manifests with updated schemas Core Switch from JDK 8 to JDK 11 Use latest version of npm Flavors Add shell linters to ci_light flavor ( #1298 ) Fixes Generate JSON Schema HTML Documentation when building documentation ( #1287 ) rubocop: remove --force-exclusion from auto-added parameters ( #302 ) terrascan: call terrascan init as a pre-command Linter versions upgrades actionlint from 1.6.8 to 1.6.9 on 2022-02-25 actionlint from 1.6.9 to 1.6.10 on 2022-03-12 bandit from 1.7.2 to 1.7.3 on 2022-02-28 bandit from 1.7.3 to 1.7.4 on 2022-03-06 cfn-lint from 0.58.0 to 0.58.1 on 2022-02-21 cfn-lint from 0.58.1 to 0.58.2 on 2022-02-27 cfn-lint from 0.58.2 to 0.58.3 on 2022-03-09 checkov from 2.0.873 to 2.0.885 on 2022-02-21 checkov from 2.0.885 to 2.0.901 on 2022-02-25 checkov from 2.0.901 to 2.0.902 on 2022-02-25 checkov from 2.0.902 to 2.0.903 on 2022-02-27 checkov from 2.0.903 to 2.0.906 on 2022-02-28 checkov from 2.0.906 to 2.0.914 on 2022-03-03 checkov from 2.0.914 to 2.0.917 on 2022-03-04 checkov from 2.0.917 to 2.0.918 on 2022-03-06 checkov from 2.0.918 to 2.0.923 on 2022-03-08 checkov from 2.0.923 to 2.0.924 on 2022-03-08 checkov from 2.0.924 to 2.0.927 on 2022-03-09 checkov from 2.0.927 to 2.0.931 on 2022-03-10 checkov from 2.0.931 to 2.0.935 on 2022-03-11 checkov from 2.0.935 to 2.0.938 on 2022-03-12 checkov from 2.0.938 to 2.0.939 on 2022-03-13 checkstyle from 9.3 to 10.0 on 2022-03-03 clippy from 0.1.58 to 0.1.59 on 2022-02-25 clj-kondo from 2022.01.15 to 2022.02.09 on 2022-02-21 cpplint from 1.5.5 to 1.6.0 on 2022-02-20 cspell from 5.18.5 to 5.19.0 on 2022-03-13 eslint from 8.10.0 to 8.11.0 on 2022-03-12 eslint from 8.9.0 to 8.10.0 on 2022-02-27 kics from 1.5.2 to 1.5.3 on 2022-03-03 mypy from 0.931 to 0.940 on 2022-03-12 phpstan from 1.4.6 to 1.4.7 on 2022-03-03 phpstan from 1.4.7 to 1.4.8 on 2022-03-06 phpstan from 1.4.8 to 1.4.9 on 2022-03-11 protolint from 0.37.0 to 0.37.1 on 2022-02-27 rst-lint from 1.3.2 to 1.4.0 on 2022-02-25 rubocop from 1.25.1 to 1.26.0 on 2022-03-10 sfdx-scanner-apex from 2.12.0 to 2.13.0 on 2022-02-25 sfdx-scanner-aura from 2.12.0 to 2.13.0 on 2022-02-25 sfdx-scanner-lwc from 2.12.0 to 2.13.0 on 2022-02-25 snakefmt from 0.4.4 to 0.6.0 on 2022-03-04 snakemake from 6.15.5 to 7.0.0 on 2022-02-25 snakemake from 7.0.0 to 7.0.1 on 2022-02-27 snakemake from 7.0.1 to 7.0.3 on 2022-03-03 snakemake from 7.0.3 to 7.0.4 on 2022-03-04 snakemake from 7.0.4 to 7.1.0 on 2022-03-06 snakemake from 7.1.0 to 7.1.1 on 2022-03-08 snakemake from 7.1.1 to 7.2.0 on 2022-03-13 sqlfluff from 0.10.1 to 0.11.0 on 2022-03-08 stylelint from 14.5.1 to 14.5.3 on 2022-02-25 swiftlint from 0.46.2 to 0.46.3 on 2022-02-25 swiftlint from 0.46.3 to 0.46.4 on 2022-03-08 swiftlint from 0.46.4 to 0.46.5 on 2022-03-09 terraform-fmt from 1.1.6 to 1.1.7 on 2022-03-04 terragrunt from 0.36.1 to 0.36.2 on 2022-02-25 terragrunt from 0.36.2 to 0.36.3 on 2022-03-04 terrascan from 1.13.1 to 1.13.2 on 2022-02-25 tsqllint from 1.14.3.0 to 1.14.5.0 on 2022-02-21 xmllint from 20912 to 20913 on 2022-03-12 [v5.8.0] - 2022-02-18 Linters Improve ansible-lint performances by linting all project in one call, and count number of errors Use project cli_lint_mode to improve performances terrascan Fixes Manage to use local certificate with Gitlab comments reporter using GITLAB_SSL_CERTIFICATE_PATH ( #1239 ) Fix GITLAB_ACCESS_TOKEN_MEGALINTER suggestion when trying to push comments to gitlab merge request Gitlab Comments Reporter: allow to use certificates with variable GITLAB_CUSTOM_CERTIFICATE (or GITLAB_CERTIFICATE_PATH only if PRE_COMMANDS are used) ( #1239 ) Core Allow to check prop existence in active_only_if_file_found and apply to eslint descriptors ( #1205 ) Doc Update images with screen records gifs Add publish artifact task in azure pipelines doc Linter versions upgrades ansible-lint from 5.3.2 to 5.4.0 on 2022-02-13 checkov from 2.0.782 to 2.0.783 on 2022-02-03 checkov from 2.0.783 to 2.0.786 on 2022-02-03 checkov from 2.0.786 to 2.0.791 on 2022-02-05 checkov from 2.0.791 to 2.0.793 on 2022-02-06 checkov from 2.0.793 to 2.0.795 on 2022-02-06 checkov from 2.0.795 to 2.0.812 on 2022-02-09 checkov from 2.0.812 to 2.0.813 on 2022-02-09 checkov from 2.0.813 to 2.0.817 on 2022-02-10 checkov from 2.0.817 to 2.0.830 on 2022-02-13 checkov from 2.0.830 to 2.0.833 on 2022-02-14 checkov from 2.0.833 to 2.0.853 on 2022-02-16 checkov from 2.0.853 to 2.0.866 on 2022-02-18 checkov from 2.0.866 to 2.0.873 on 2022-02-18 cspell from 5.18.0 to 5.18.3 on 2022-02-05 cspell from 5.18.3 to 5.18.4 on 2022-02-09 cspell from 5.18.4 to 5.18.5 on 2022-02-16 eslint-plugin-jsonc from 2.1.0 to 2.2.1 on 2022-02-18 eslint from 8.8.0 to 8.9.0 on 2022-02-13 golangci-lint from 1.44.0 to 1.44.2 on 2022-02-18 kics from 1.5.1 to 1.5.2 on 2022-02-18 ktlint from 0.43.2 to 0.44.0 on 2022-02-16 markdownlint from 0.30.0 to 0.31.0 on 2022-02-06 markdownlint from 0.31.0 to 0.31.1 on 2022-02-09 phpstan from 1.4.5 to 1.4.6 on 2022-02-06 protolint from 0.36.0 to 0.37.0 on 2022-02-13 rubocop from 1.25.0 to 1.25.1 on 2022-02-03 snakemake from 6.15.1 to 6.15.2 on 2022-02-06 snakemake from 6.15.2 to 6.15.3 on 2022-02-09 snakemake from 6.15.3 to 6.15.4 on 2022-02-09 snakemake from 6.15.4 to 6.15.5 on 2022-02-10 sqlfluff from 0.10.0 to 0.10.1 on 2022-02-18 sqlfluff from 0.9.4 to 0.10.0 on 2022-02-13 stylelint from 14.3.0 to 14.4.0 on 2022-02-09 stylelint from 14.4.0 to 14.5.0 on 2022-02-13 stylelint from 14.5.0 to 14.5.1 on 2022-02-18 terraform-fmt from 1.1.4 to 1.1.5 on 2022-02-03 terraform-fmt from 1.1.5 to 1.1.6 on 2022-02-18 terrascan from 1.13.0 to 1.13.1 on 2022-02-13 [v5.7.1] - 2022-02-02 Linter updates: temporary disable snakefmt to allow latest versions of black and sqlfluff cspell: Update .cspell default config with \"version: \"2.0\", \"noConfigSearch\": true Use list_of_files mode to improve performances markdown-link-check standard stylelint Fixes Remove extraheader in git repo when using Azure Pipelines ( #1125 ) Fix gitlab token error message ( #1228 ) Linter versions upgrades black from 21.12 to 22.1.0 on 2022-02-02 cfn-lint from 0.57.0 to 0.58.0 on 2022-02-01 checkov from 2.0.775 to 2.0.777 on 2022-01-31 checkov from 2.0.777 to 2.0.778 on 2022-02-01 checkov from 2.0.778 to 2.0.780 on 2022-02-02 checkov from 2.0.780 to 2.0.782 on 2022-02-02 cspell from 5.17.0 to 5.18.0 on 2022-01-31 kics from 1.5.0 to 1.5.1 on 2022-02-02 markdown-table-formatter from 1.2.0 to 1.3.0 on 2022-01-31 phpstan from 1.4.3 to 1.4.4 on 2022-02-01 phpstan from 1.4.4 to 1.4.5 on 2022-02-02 snakemake from 6.13.1 to 6.15.1 on 2022-02-02 sqlfluff from 0.9.3 to 0.9.4 on 2022-02-02 terragrunt from 0.36.0 to 0.36.1 on 2022-02-01 [v5.7.0] - 2022-01-30 Core: New reporter GITLAB_COMMENT_REPORTER allowing to post MegaLinter results as comments on Gitlab merge requests CI: Update test method to check that the number of errors is correctly calculated (+ fix linter test cases) Linter updates: Add configuration file option for SQLFluff ( #1200 ) secretlint: Use .gitignore as .secretlintignore if --secretlintignore is not defined and .secretlintignore not found ( #1207 ) Update bash-exec documentation Display correct number of errors in logs actionlint chktex cpplint htmlhint perlcritic sfdx-scanner shellcheck shfmt Use list_of_files mode to improve performances htmlhint shellcheck shfmt Fixes: Fix v5 doc deployment when there is a new release ( #1190 ) Fix issue when using VALIDATE_ALL_CODEBASE: false on Azure Pipelines by defining auth header in CI env variable GIT_AUTHORIZATION_BEARER ( #1125 ) Fix tflint initialization so it uses configuration file when defined ( #1134 ) Linter versions upgrades bandit from 1.7.1 to 1.7.2 on 2022-01-26 checkov from 2.0.744 to 2.0.745 on 2022-01-23 checkov from 2.0.745 to 2.0.746 on 2022-01-24 checkov from 2.0.746 to 2.0.749 on 2022-01-24 checkov from 2.0.749 to 2.0.754 on 2022-01-24 checkov from 2.0.754 to 2.0.763 on 2022-01-26 checkov from 2.0.763 to 2.0.769 on 2022-01-28 checkov from 2.0.769 to 2.0.772 on 2022-01-29 checkov from 2.0.772 to 2.0.775 on 2022-01-30 checkstyle from 9.2.1 to 9.3 on 2022-01-30 coffeelint from 5.2.3 to 5.2.4 on 2022-01-28 cspell from 5.16.0 to 5.17.0 on 2022-01-28 dotenv-linter from 3.1.1 to 3.2.0 on 2022-01-24 eslint-plugin-jsonc from 2.0.0 to 2.1.0 on 2022-01-28 eslint from 8.7.0 to 8.8.0 on 2022-01-29 golangci-lint from 1.43.0 to 1.44.0 on 2022-01-26 htmlhint from 1.1.0 to 1.1.1 on 2022-01-23 htmlhint from 1.1.1 to 1.1.2 on 2022-01-28 markdown-link-check from 3.9.2 to 3.9.3 on 2022-01-29 phpstan from 1.4.2 to 1.4.3 on 2022-01-29 rubocop from 0.82.0 to 1.25.0 on 2022-01-29 shfmt from 3.2.1 to 3.5.0 on 2022-01-30 shfmt from 3.3.1 to 3.2.1 on 2022-01-30 snakemake from 6.13.1 to 6.14.0 on 2022-01-28 snakemake from 6.14.0 to 6.15.0 on 2022-01-29 snakemake from 6.15.0 to 6.13.1 on 2022-01-30 sqlfluff from 0.9.1 to 0.9.3 on 2022-01-28 stylelint from 14.2.0 to 14.3.0 on 2022-01-23 swiftlint from 0.46.0 to 0.46.2 on 2022-01-28 tsqllint from 1.14.0.0 to 1.14.3.0 on 2022-01-23 [v5.6.0] - 2022-01-22 Add linters licenses to online documentation Fix issue when config vars are both from ENV and from config file ( #1154 ) Fix issue of --files argument format when calling npm-groovy-lint ( #1176 ) Fix wrong status in reports when DISABLE_ERRORS is used Increase memory size for node.js-based linters ( #1149 ) Make python linters play nice with each other ( #1182 ) Linter versions upgrades coffeelint from 5.2.2 to 5.2.3 on 2022-01-09 phpstan from 1.3.0 to 1.3.3 on 2022-01-09 mypy from 0.930 to 0.931 on 2022-01-09 cspell from 5.14.0 to 5.15.1 on 2022-01-09 checkov from 2.0.702 to 2.0.708 on 2022-01-09 terraform-fmt from 1.1.2 to 1.1.3 on 2022-01-09 terrascan from 1.12.0 to 1.13.0 on 2022-01-09 npm-groovy-lint from 9.3.0 to 9.3.2 on 2022-01-09 sqlfluff from 0.9.0 to 0.9.1 on 2022-01-09 cfn-lint from 0.56.3 to 0.56.4 on 2022-01-11 npm-groovy-lint from 9.3.2 to 9.4.0 on 2022-01-11 snakemake from 6.12.3 to 6.13.0 on 2022-01-11 checkov from 2.0.708 to 2.0.709 on 2022-01-11 scalafix from 0.9.33 to 0.9.34 on 2022-01-12 snakemake from 6.13.0 to 6.13.1 on 2022-01-12 cspell from 5.15.1 to 5.15.2 on 2022-01-12 checkov from 2.0.709 to 2.0.710 on 2022-01-12 npm-groovy-lint from 9.4.0 to 9.4.1 on 2022-01-13 checkov from 2.0.710 to 2.0.712 on 2022-01-13 terragrunt from 0.35.16 to 0.35.18 on 2022-01-13 clj-kondo from 2021.12.19 to 2022.01.13 on 2022-01-14 clippy from 0.1.57 to 0.1.58 on 2022-01-14 checkov from 2.0.712 to 2.0.717 on 2022-01-14 phpstan from 1.3.3 to 1.4.0 on 2022-01-15 terragrunt from 0.35.18 to 0.35.19 on 2022-01-15 terragrunt from 0.35.19 to 0.35.20 on 2022-01-15 checkov from 2.0.717 to 2.0.718 on 2022-01-16 eslint from 8.6.0 to 8.7.0 on 2022-01-17 checkov from 2.0.718 to 2.0.720 on 2022-01-17 phpstan from 1.4.0 to 1.4.1 on 2022-01-18 checkov from 2.0.720 to 2.0.727 on 2022-01-18 clj-kondo from 2022.01.13 to 2022.01.15 on 2022-01-22 cfn-lint from 0.56.4 to 0.57.0 on 2022-01-22 markdown-link-check from 3.9.0 to 3.9.2 on 2022-01-22 phpstan from 1.4.1 to 1.4.2 on 2022-01-22 protolint from 0.35.2 to 0.36.0 on 2022-01-22 cspell from 5.15.2 to 5.16.0 on 2022-01-22 swiftlint from 0.45.1 to 0.46.0 on 2022-01-22 checkov from 2.0.727 to 2.0.744 on 2022-01-22 kics from 1.4.9 to 1.5.0 on 2022-01-22 terraform-fmt from 1.1.3 to 1.1.4 on 2022-01-22 terragrunt from 0.35.20 to 0.36.0 on 2022-01-22 [v5.5.0] - 2022-01-03 Linter versions upgrades checkov from 2.0.680 to 2.0.681 on 2021-12-21 stylelint from 14.1.0 to 14.2.0 on 2021-12-23 mypy from 0.920 to 0.930 on 2021-12-23 checkov from 2.0.681 to 2.0.687 on 2021-12-23 npm-groovy-lint from 9.1.0 to 9.2.0 on 2021-12-23 checkov from 2.0.687 to 2.0.690 on 2021-12-23 tflint from 0.34.0 to 0.34.1 on 2021-12-26 clj-kondo from 2021.06.18 to 2021.12.19 on 2021-12-29 npm-groovy-lint from 9.2.0 to 9.3.0 on 2021-12-29 checkstyle from 9.2 to 9.2.1 on 2021-12-29 cspell from 5.13.4 to 5.14.0 on 2021-12-29 checkov from 2.0.690 to 2.0.695 on 2021-12-29 phpstan from 1.2.0 to 1.3.0 on 2021-12-29 checkov from 2.0.695 to 2.0.701 on 2021-12-31 htmlhint from 1.0.0 to 1.1.0 on 2022-01-01 eslint from 8.5.0 to 8.6.0 on 2022-01-01 checkov from 2.0.701 to 2.0.702 on 2022-01-03 [v5.4.0] - 2021-12-21 Linter versions upgrades snakemake from 6.12.1 to 6.12.2 on 2021-12-09 checkov from 2.0.636 to 2.0.639 on 2021-12-09 checkov from 2.0.639 to 2.0.641 on 2021-12-09 terraform-fmt from 1.0.11 to 1.1.0 on 2021-12-09 snakemake from 6.12.2 to 6.12.3 on 2021-12-11 checkov from 2.0.641 to 2.0.648 on 2021-12-11 cspell from 5.13.2 to 5.13.3 on 2021-12-11 terragrunt from 0.35.13 to 0.35.14 on 2021-12-11 checkov from 2.0.648 to 2.0.649 on 2021-12-12 phpcs from 3.6.1 to 3.6.2 on 2021-12-14 sqlfluff from 0.8.2 to 0.9.0 on 2021-12-14 checkov from 2.0.649 to 2.0.659 on 2021-12-14 tflint from 0.33.2 to 0.34.0 on 2021-12-14 npm-groovy-lint from 9.0.0 to 9.1.0 on 2021-12-15 powershell from 7.2.0 to 7.2.1 on 2021-12-15 checkov from 2.0.659 to 2.0.660 on 2021-12-15 mypy from 0.910 to 0.920 on 2021-12-16 checkov from 2.0.660 to 2.0.662 on 2021-12-16 checkov from 2.0.662 to 2.0.668 on 2021-12-17 terraform-fmt from 1.1.0 to 1.1.1 on 2021-12-17 eslint from 8.4.1 to 8.5.0 on 2021-12-18 checkov from 2.0.668 to 2.0.672 on 2021-12-18 cspell from 5.13.3 to 5.13.4 on 2021-12-18 terraform-fmt from 1.1.1 to 1.1.2 on 2021-12-18 terragrunt from 0.35.14 to 0.35.16 on 2021-12-18 coffeelint from 5.2.1 to 5.2.2 on 2021-12-21 checkov from 2.0.672 to 2.0.680 on 2021-12-21 kics from 1.4.8 to 1.4.9 on 2021-12-21 [v5.3.0] - 2021-12-08 Fix jscpd typo about .venv (#986) markdownlint: rename default config file from .markdown-lint.json to .markdownlint.json Deprecate DEFAULT_BRANCH setting (#948) Correct some broken links in README from Mega-Linter to MegaLinter (#1030) Docker run -- clean-up containers when exits (#1033) Add missing Bandit config file and rules path options (#679) Fix getting linter version of npm plugin. (#845) Improve runtime performances when using a flavor and defining FLAVORS_SUGGESTION: false Do not check for updated files when APPLY_FIXES is not active Fix CLI_LINT_MODE default value in doc (#1086) Linters New linter phplint to speed-up linting of php files (#1031) Fix phplint constraint to accept all future bugfix v3.0.x versions (PHP 7.4 support) (#1043) cpplint : Use cli_lint_mode: project to improve performances Linter versions upgrades remark-lint from 14.0.1 to 14.0.2 on 2021-11-19 php from 7.4.25 to 7.4.26 on 2021-11-19 checkov from 2.0.587 to 2.0.588 on 2021-11-19 markdownlint from 0.29.0 to 0.30.0 on 2021-11-21 checkov from 2.0.588 to 2.0.591 on 2021-11-21 terragrunt from 0.35.10 to 0.35.12 on 2021-11-21 eslint from 8.2.0 to 8.3.0 on 2021-11-21 checkov from 2.0.591 to 2.0.595 on 2021-11-21 cfn-lint from 0.56.1 to 0.56.2 on 2021-11-22 sqlfluff from 0.8.1 to 0.8.2 on 2021-11-22 checkov from 2.0.595 to 2.0.597 on 2021-11-22 htmlhint from 0.16.1 to 0.16.2 on 2021-11-24 checkov from 2.0.597 to 2.0.600 on 2021-11-24 htmlhint from 0.16.2 to 0.16.3 on 2021-11-25 markdown-link-check from 0.0.0 to 3.9.0 on 2021-11-25 cspell from 5.13.0 to 5.13.1 on 2021-11-25 checkov from 2.0.600 to 2.0.603 on 2021-11-25 kics from 1.4.7 to 1.4.8 on 2021-11-25 prettier from 2.4.1 to 2.5.0 on 2021-11-26 pylint from 2.11.1 to 2.12.1 on 2021-11-26 snakemake from 6.10.0 to 6.11.0 on 2021-11-26 checkov from 2.0.603 to 2.0.605 on 2021-11-26 terragrunt from 0.35.12 to 0.35.13 on 2021-11-26 htmlhint from 0.16.3 to 1.0.0 on 2021-11-27 scalafix from 0.9.32 to 0.9.33 on 2021-11-27 snakemake from 6.11.0 to 6.11.1 on 2021-11-27 checkstyle from 9.1 to 9.2 on 2021-11-29 checkov from 2.0.605 to 2.0.606 on 2021-11-29 snakemake from 6.11.1 to 6.12.1 on 2021-11-30 swiftlint from 0.45.0 to 0.45.1 on 2021-11-30 checkov from 2.0.606 to 2.0.609 on 2021-11-30 v8r from 0.6.1 to 0.7.0 on 2021-11-30 v8r from 0.7.0 to 0.6.1 on 2021-12-01 checkov from 2.0.614 to 2.0.616 on 2021-12-01 checkov from 2.0.616 to 2.0.618 on 2021-12-01 coffeelint from 5.2.0 to 5.2.1 on 2021-12-02 checkov from 2.0.618 to 2.0.621 on 2021-12-02 ktlint from 0.40.0 to 0.43.2 on 2021-12-02 clippy from 0.1.56 to 0.1.57 on 2021-12-03 checkov from 2.0.621 to 2.0.625 on 2021-12-03 cfn-lint from 0.56.2 to 0.56.3 on 2021-12-04 pylint from 2.12.1 to 2.12.2 on 2021-12-04 checkov from 2.0.625 to 2.0.626 on 2021-12-04 eslint from 8.3.0 to 8.4.0 on 2021-12-04 prettier from 2.5.0 to 2.5.1 on 2021-12-05 black from 21.11 to 21.12 on 2021-12-06 checkov from 2.0.626 to 2.0.628 on 2021-12-06 checkov from 2.0.628 to 2.0.632 on 2021-12-07 eslint from 8.4.0 to 8.4.1 on 2021-12-07 cspell from 5.13.1 to 5.13.2 on 2021-12-07 checkov from 2.0.632 to 2.0.634 on 2021-12-07 tflint from 0.33.1 to 0.33.2 on 2021-12-07 checkov from 2.0.634 to 2.0.636 on 2021-12-08 [v5.2.0] - 2021-11-18 Fix release doc CI Add comments in online documentation Add link to MegaLinter documentation in console logs Linter versions upgrades actionlint from 1.6.7 to 1.6.8 on 2021-11-15 checkov from 2.0.572 to 2.0.573 on 2021-11-15 checkov from 2.0.573 to 2.0.574 on 2021-11-15 cfn-lint from 0.56.0 to 0.56.1 on 2021-11-17 checkov from 2.0.574 to 2.0.580 on 2021-11-17 black from 21.10 to 21.11 on 2021-11-17 cspell from 5.12.6 to 5.13.0 on 2021-11-17 checkov from 2.0.580 to 2.0.582 on 2021-11-17 checkov from 2.0.582 to 2.0.583 on 2021-11-18 phpstan from 1.1.2 to 1.2.0 on 2021-11-18 checkov from 2.0.583 to 2.0.587 on 2021-11-18 [v5.1.0] - 2021-11-15 Fix config issue with IGNORE_GITIGNORED_FILES (#932) Bypass random CI issue with sql_tsqllint_test test version and test help New configuration PRINT_ALL_FILES (default: true ). If set to false , console log only displays updated and error files, not all of them Update black configuration, that now uses a pyproject.toml file (#949) Allows list_of_files cli_lint_mode on Psalm linter to improve performance compare to file mode mega-linter-runner: Upgrade yeoman environment to allow spaces in path Documentation versioning with mike Accordingly, to official PHPStan documentation , the TEMPLATES/phpstan.neon.dist config file set default level to zero. Downgrade dotnet from 6.0 to 5.0, to be compliant with tsqllint Allow GithubStatusReporter to work for other CI platforms Add license badge in linters documentation (All linters) Upgrade checkov install instructions to use alpine-oriented ones Fix wrong errors count displayed with PHPStan and Psalm linters (#985) Fix typo error in .jscpd.json config file (#986) Deprecate DEFAULT_BRANCH , and change its default from master to HEAD (#915) Core architecture New configuration PRINT_ALL_FILES (default: true ). If set to false , console log only displays updated and error files, not all of them Documentation versioning with mike Allow GithubStatusReporter to work for other CI platforms Add license info in List of linters documentation page Linters Update black configuration, that now uses a pyproject.toml file (#949) Allows list_of_files cli_lint_mode on Psalm linter to improve performance compare to file mode Upgrade checkov install instructions to use alpine-oriented ones Accordingly, to official PHPStan documentation , the TEMPLATES/phpstan.neon.dist config file set default level to zero. Downgrade dotnet from 6.0 to 5.0, to be compliant with tsqllint Bug fixes Fix config issue with IGNORE_GITIGNORED_FILES (#932) Bypass random CI issue with sql_tsqllint_test test version and test help mega-linter-runner: Upgrade yeoman environment to allow spaces in path Linter versions upgrades cspell from 5.12.5 to 5.12.6 on 2021-11-04 cfn-lint from 0.55.0 to 0.56.0 on 2021-11-06 coffeelint from 5.1.0 to 5.1.1 on 2021-11-06 jscpd from 3.3.26 to 3.4.1 on 2021-11-06 hadolint from 2.7.0 to 2.8.0 on 2021-11-06 eslint-plugin-jsonc from 1.7.0 to 2.0.0 on 2021-11-06 phpstan from 1.0.2 to 1.1.0 on 2021-11-06 jscpd from 3.4.1 to 3.4.2 on 2021-11-07 shellcheck from 0.7.2 to 0.8.0 on 2021-11-07 coffeelint from 5.1.1 to 5.2.0 on 2021-11-07 jscpd from 3.4.2 to 3.3.26 on 2021-11-07 hadolint from 2.8.0 to 2.7.0 on 2021-11-07 sqlfluff from 0.7.1 to 0.8.0 on 2021-11-07 sqlfluff from 0.8.0 to 0.8.1 on 2021-11-08 swiftlint from 0.43.1 to 0.44.0 on 2021-11-08 actionlint from 1.6.6 to 1.6.7 on 2021-11-08 eslint from 7.32.0 to 8.2.0 on 2021-11-08 swiftlint from 0.44.0 to 0.45.0 on 2021-11-08 powershell from 7.1.5 to 7.2.0 on 2021-11-08 protolint from 0.35.1 to 0.35.2 on 2021-11-09 isort from 5.10.0 to 5.10.1 on 2021-11-09 phpstan from 1.1.1 to 1.1.2 on 2021-11-09 kics from 1.4.6 to 1.4.7 on 2021-11-11 terraform-fmt from 1.0.10 to 1.0.11 on 2021-11-11 terragrunt from 0.35.6 to 0.35.8 on 2021-11-11 htmlhint from 0.16.0 to 0.16.1 on 2021-11-12 checkov from 2.0.524 to 2.0.566 on 2021-11-12 terragrunt from 0.35.8 to 0.35.9 on 2021-11-12 bandit from 1.7.0 to 1.7.1 on 2021-11-13 scalafix from 0.9.31 to 0.9.32 on 2021-11-13 checkov from 2.0.566 to 2.0.569 on 2021-11-13 terragrunt from 0.35.9 to 0.35.10 on 2021-11-13 checkov from 2.0.569 to 2.0.571 on 2021-11-14 stylelint from 14.0.1 to 14.1.0 on 2021-11-14 checkov from 2.0.571 to 2.0.572 on 2021-11-14 [v5.0.7] - 2021-11-04 Fix that upgrader removed all jobs after cancel_duplicates but the last (#925) Linter versions upgrades cfn-lint from 0.54.4 to 0.55.0 on 2021-11-03 phpstan from 1.0.0 to 1.0.1 on 2021-11-03 golangci-lint from 1.42.1 to 1.43.0 on 2021-11-04 phpstan from 1.0.1 to 1.0.2 on 2021-11-04 isort from 5.9.3 to 5.10.0 on 2021-11-04 [v5.0.6] - 2021-11-03 Use GH actions concurrency to cancel runs (#921) [v5.0.5] - 2021-11-02 Fix mega-linter-runner --install template for Github Action Workflow Replace expression \"abusive copy-paste\" by \"excessive copy-paste\" Linter versions upgrades coffeelint from 5.0.5 to 5.1.0 on 2021-11-02 phpstan from 0.12.99 to 1.0.0 on 2021-11-02 black from 21.9 to 21.10 on 2021-11-02 cspell from 5.12.4 to 5.12.5 on 2021-11-02 terragrunt from 0.35.5 to 0.35.6 on 2021-11-02 [v5.0.2] - 2021-10-31 Quick build to fix stargazers badge regression (see issue #873) (#909) Improve Azure Pipeline template documentation (#908) Take in account legacy docker images for total docker pull count (#910) Upgrade stale github action Linter versions upgrades cspell from 5.12.3 to 5.12.4 on 2021-10-31 checkstyle from 9.0.1 to 9.1 on 2021-10-31 tflint from 0.33.0 to 0.33.1 on 2021-10-31 [v5.0.1] - 2021-10-30 Fix mega-linter-runner bug related to v5 Fix online documentation [v5.0.0] - 2021-10-30 Migration from github individual repo nvuillam/mega-linter to github organization repo megalinter/megalinter Migration from docker hub space nvuillam to space megalinter Docker images are now megalinter/megalinter or megalinter/megalinter-FLAVOR Documentation is now hosted at https://megalinter.github.io/ Tool to upgrade user repos configuration files using npx mega-linter-runner --upgrade (will upgrade references to nvuillam/mega-linter into megalinter/megalinter) Version management: Now mega-linter docker images, github action and mega-linter-runner versions are aligned latest for latest official release beta for current content of main branch alpha for current content of alpha branch docker image, github action and mega-linter-runner can still be called with exact version number Being more inclusive: rename master branch into main IGNORE_GITIGNORED_FILES parameter default to true [4.47.0] - 2021-10-30 Upgrades Base docker image python:3.9.6-alpine3.13 to python:3.9.7-alpine3.13 Automerge internal job pascalgn/automerge-action-0.14.2 to pascalgn/automerge-action-0.14.3 Config reporter: Parse .vscode/extensions.json as json5 (with comments) Add eslint-plugin-jsx-a11y dependency Rename default PHPStan config file, from phpstan.neon to phpstan.neon.dist accordingly to PHPStan resolution priority Allows list_of_files cli_lint_mode on PHPSTAN linter to improve performance compare to file mode phpstan is now installed with phive rather than composer (reduces disk usage) Allows list_of_files cli_lint_mode on PHPCS linter to improve performance compare to file mode Allows list_of_files cli_lint_mode on EditorConfig-Checker linter to improve performance compare to file mode Fix internal CSS because of StyleLint new rule selector-class-pattern Fix ansible-lint version collection Message to recommend to upgrade to MegaLinter v5 Linter versions upgrades cfn-lint from 0.54.1 to 0.54.2 on 2021-09-23 eslint-plugin-jsonc from 1.6.0 to 1.7.0 on 2021-09-23 checkov from 2.0.430 to 2.0.436 on 2021-09-23 coffeelint from 5.0.3 to 5.0.4 on 2021-09-24 checkov from 2.0.436 to 2.0.438 on 2021-09-24 php from 7.4.21 to 7.4.24 on 2021-09-24 terragrunt from 0.32.3 to 0.32.4 on 2021-09-24 snakemake from 6.8.0 to 6.8.1 on 2021-09-25 checkov from 2.0.438 to 2.0.441 on 2021-09-25 secretlint from 4.0.0 to 4.1.0 on 2021-09-25 checkov from 2.0.441 to 2.0.442 on 2021-09-26 checkov from 2.0.442 to 2.0.443 on 2021-09-27 protolint from 0.32.0 to 0.35.1 on 2021-09-26 protolint from 0.32.0 to 0.35.1 on 2021-09-27 checkov from 2.0.443 to 2.0.446 on 2021-09-27 cspell from 5.10.1 to 5.11.0 on 2021-09-29 checkov from 2.0.446 to 2.0.448 on 2021-09-29 npm-groovy-lint from 8.2.0 to 9.0.0 on 2021-09-30 sfdx-scanner-apex from 2.11.0 to 2.12.0 on 2021-09-30 sfdx-scanner-aura from 2.11.0 to 2.12.0 on 2021-09-30 sfdx-scanner-lwc from 2.11.0 to 2.12.0 on 2021-09-30 snakemake from 6.8.1 to 6.9.0 on 2021-09-30 cspell from 5.11.0 to 5.11.1 on 2021-09-30 checkov from 2.0.448 to 2.0.454 on 2021-09-30 snakemake from 6.9.0 to 6.9.1 on 2021-09-30 checkov from 2.0.454 to 2.0.461 on 2021-09-30 checkstyle from 9.0 to 9.0.1 on 2021-10-03 luacheck from 0.23.0 to 0.25.0 on 2021-10-03 checkov from 2.0.461 to 2.0.467 on 2021-10-03 terraform-fmt from 1.0.7 to 1.0.8 on 2021-10-03 terragrunt from 0.32.4 to 0.34.0 on 2021-10-03 sqlfluff from 0.6.6 to 0.6.7 on 2021-10-05 checkov from 2.0.467 to 2.0.469 on 2021-10-05 markdownlint from 0.28.1 to 0.29.0 on 2021-10-06 cspell from 5.11.1 to 5.12.0 on 2021-10-06 sqlfluff from 0.6.7 to 0.6.8 on 2021-10-06 checkov from 2.0.469 to 2.0.475 on 2021-10-06 cspell from 5.12.0 to 5.12.1 on 2021-10-06 checkov from 2.0.475 to 2.0.476 on 2021-10-06 cspell from 5.12.1 to 5.12.2 on 2021-10-07 terragrunt from 0.34.0 to 0.34.1 on 2021-10-07 checkov from 2.0.476 to 2.0.477 on 2021-10-07 terrascan from 1.10.0 to 1.11.0 on 2021-10-07 cspell from 5.12.2 to 5.12.3 on 2021-10-09 checkov from 2.0.477 to 2.0.479 on 2021-10-09 sqlfluff from 0.6.8 to 0.6.9 on 2021-10-10 checkov from 2.0.479 to 2.0.481 on 2021-10-10 checkov from 2.0.481 to 2.0.482 on 2021-10-10 phpcs from 3.6.0 to 3.6.1 on 2021-10-12 flake8 from 3.9.2 to 4.0.1 on 2021-10-12 checkov from 2.0.482 to 2.0.484 on 2021-10-12 terragrunt from 0.34.1 to 0.34.3 on 2021-10-12 checkov from 2.0.484 to 2.0.485 on 2021-10-13 powershell from 7.1.4 to 7.1.5 on 2021-10-16 sqlfluff from 0.6.9 to 0.7.0 on 2021-10-16 checkov from 2.0.485 to 2.0.491 on 2021-10-16 terraform-fmt from 1.0.8 to 1.0.9 on 2021-10-16 terragrunt from 0.34.3 to 0.35.3 on 2021-10-16 tflint from 0.32.1 to 0.33.0 on 2021-10-16 checkov from 2.0.491 to 2.0.492 on 2021-10-17 actionlint from 1.6.5 to 1.6.6 on 2021-10-17 cfn-lint from 0.54.2 to 0.54.3 on 2021-10-21 coffeelint from 5.0.4 to 5.0.5 on 2021-10-21 snakefmt from 0.4.3 to 0.4.4 on 2021-10-21 tekton-lint from 0.5.2 to 0.6.0 on 2021-10-21 checkov from 2.0.492 to 2.0.497 on 2021-10-21 terragrunt from 0.35.3 to 0.35.4 on 2021-10-21 stylelint from 13.13.1 to 14.0.0 on 2021-10-24 clippy from 0.1.55 to 0.1.56 on 2021-10-24 snakemake from 6.9.1 to 6.10.0 on 2021-10-24 sqlfluff from 0.7.0 to 0.7.1 on 2021-10-24 checkov from 2.0.497 to 2.0.509 on 2021-10-24 terrascan from 1.11.0 to 1.12.0 on 2021-10-24 checkov from 2.0.509 to 2.0.510 on 2021-10-25 checkov from 2.0.510 to 2.0.516 on 2021-10-26 stylelint from 14.0.0 to 14.0.1 on 2021-10-26 checkov from 2.0.516 to 2.0.524 on 2021-10-26 php from 7.4.24 to 7.4.25 on 2021-10-27 cfn-lint from 0.54.3 to 0.54.4 on 2021-10-28 htmlhint from 0.15.2 to 0.16.0 on 2021-10-29 terraform-fmt from 1.0.9 to 1.0.10 on 2021-10-29 terragrunt from 0.35.4 to 0.35.5 on 2021-10-29 [4.46.0] - 2021-09-21 Add openssh apk for git repos using ssh Change default yamllint config file name from .yaml-lint.yml to .yamllint.yml Allow to disable console reporter using CONSOLE_REPORTER: false Override cli_lint_mode of linters using configuration : LINTER _CLI_LINT_MODE Performances Use list_of_files linting mode for yamllint , black and prettier Fixes Add CONFIG_REPORTER in json schema Fix Broken CI due to mega-linter test plugin Linter versions upgrades checkov from 2.0.396 to 2.0.399 on 2021-09-06 golangci-lint from 1.42.0 to 1.42.1 on 2021-09-07 snakemake from 6.7.0 to 6.8.0 on 2021-09-07 cfn-lint from 0.53.1 to 0.54.1 on 2021-09-12 prettier from 2.3.2 to 2.4.0 on 2021-09-12 clippy from 0.1.54 to 0.1.55 on 2021-09-12 sqlfluff from 0.6.4 to 0.6.5 on 2021-09-12 checkov from 2.0.399 to 2.0.407 on 2021-09-12 terragrunt from 0.31.8 to 0.31.10 on 2021-09-12 tflint from 0.31.0 to 0.32.1 on 2021-09-12 cspell from 5.9.0 to 5.9.1 on 2021-09-12 phpstan from 0.12.98 to 0.12.99 on 2021-09-15 puppet-lint from 2.5.0 to 2.5.2 on 2021-09-15 black from 21.8 to 21.9 on 2021-09-15 checkov from 2.0.407 to 2.0.414 on 2021-09-15 terragrunt from 0.31.10 to 0.31.11 on 2021-09-15 terragrunt from 0.31.11 to 0.32.1 on 2021-09-15 secretlint from 3.3.0 to 4.0.0 on 2021-09-18 htmlhint from 0.15.1 to 0.15.2 on 2021-09-18 prettier from 2.4.0 to 2.4.1 on 2021-09-18 pylint from 2.10.2 to 2.11.1 on 2021-09-18 scalafix from 0.9.30 to 0.9.31 on 2021-09-18 cspell from 5.9.1 to 5.10.1 on 2021-09-18 checkov from 2.0.414 to 2.0.421 on 2021-09-18 terraform-fmt from 1.0.6 to 1.0.7 on 2021-09-18 terragrunt from 0.32.1 to 0.32.2 on 2021-09-18 checkov from 2.0.421 to 2.0.425 on 2021-09-19 checkov from 2.0.425 to 2.0.426 on 2021-09-19 checkov from 2.0.426 to 2.0.427 on 2021-09-20 coffeelint from 5.0.2 to 5.0.3 on 2021-09-21 rstfmt from 0.0.9 to 0.0.10 on 2021-09-21 sqlfluff from 0.6.5 to 0.6.6 on 2021-09-21 checkov from 2.0.427 to 2.0.428 on 2021-09-21 checkov from 2.0.428 to 2.0.430 on 2021-09-21 terragrunt from 0.32.2 to 0.32.3 on 2021-09-21 [4.45.0] - 2021-09-04 New CONFIG_REPORTER to generate \"ready to copy\" folder containing default linter configurations and IDE extensions recommendations New JSON_REPORTER to generate an output json file in report folder Manage pre_commands and post_commands at linter level Default commands defined at linter descriptor level Overridable by user in linterName_PRE_COMMANDS and linterName_POST_COMMANDS in .mega-linter.yml Fix tflint config so no custom PRE_COMMAND is necessary Use dotnet installer to setup tsqllint. tsqllint is now part of the main MegaLinter flavor, but removed from JAVASCRIPT flavor Ignore linter_FILTER_REGEX_INCLUDE/linter_FILTER_REGEX_EXCLUDE for linters running on the whole project directory mega-linter-runner updates New CLI argument --json , to get the full report as JSON in stdout last line Fix mega-linter-runner --install when local folder path contain spaces Upgrade mega-linter-runner dependencies (npm audit fix) Better comments for generated .mega-linter.yml config file Linter versions upgrades markdown-table-formatter from 1.1.0 to 1.2.0 on 2021-08-20 phpstan from 0.12.94 to 0.12.95 on 2021-08-20 pylint from 2.9.6 to 2.10.1 on 2021-08-21 sqlfluff from 0.6.3 to 0.6.4 on 2021-08-21 phpstan from 0.12.95 to 0.12.96 on 2021-08-21 pylint from 2.10.1 to 2.10.2 on 2021-08-22 cspell from 5.7.2 to 5.8.0 on 2021-08-22 yamllint from 1.26.2 to 1.26.3 on 2021-08-22 eslint-plugin-jsonc from 1.5.0 to 1.6.0 on 2021-08-23 checkov from 2.0.363 to 2.0.367 on 2021-08-23 cspell from 5.8.0 to 5.8.1 on 2021-08-24 terragrunt from 0.31.5 to 0.31.6 on 2021-08-24 hadolint from 2.6.0 to 2.7.0 on 2021-08-28 dotenv-linter from 3.1.0 to 3.1.1 on 2021-08-28 cspell from 5.8.1 to 5.8.2 on 2021-08-28 checkov from 2.0.367 to 2.0.376 on 2021-08-28 terragrunt from 0.31.6 to 0.31.7 on 2021-08-28 terrascan from 1.9.0 to 1.10.0 on 2021-08-28 checkov from 2.0.376 to 2.0.377 on 2021-08-29 cfn-lint from 0.53.0 to 0.53.1 on 2021-08-31 tsqllint from 1.13.5.0 to 1.14.0.0 on 2021-08-31 checkov from 2.0.377 to 2.0.380 on 2021-08-31 terragrunt from 0.31.7 to 0.31.8 on 2021-08-31 checkstyle from 8.45.1 to 9.0 on 2021-09-01 cspell from 5.8.2 to 5.9.0 on 2021-09-01 checkov from 2.0.380 to 2.0.387 on 2021-09-01 phpstan from 0.12.96 to 0.12.97 on 2021-09-02 checkov from 2.0.387 to 2.0.392 on 2021-09-02 checkov from 2.0.392 to 2.0.393 on 2021-09-02 phpstan from 0.12.97 to 0.12.98 on 2021-09-03 checkov from 2.0.393 to 2.0.395 on 2021-09-03 checkov from 2.0.395 to 2.0.396 on 2021-09-04 black from 20.8 to 21.8 on 2021-09-04 snakefmt from 0.4.2 to 0.4.3 on 2021-09-04 terraform-fmt from 1.0.5 to 1.0.6 on 2021-09-04 [4.44.0] - 2021-08-19 Upgrade tflint descriptor to use ghcr.io/terraform-linters/tflint docker image and initialize tflint Add page for flavors stats in online documentation Unable to list git ignored files when IGNORED_GITIGNORED_FILES: true ( #PR605 , by David Bernard with the contribution of Tim Pansino ) Linter versions upgrades powershell from 7.1.3 to 7.1.4 on 2021-08-13 checkov from 2.0.347 to 2.0.348 on 2021-08-13 cspell from 5.6.6 to 5.6.7 on 2021-08-14 terragrunt from 0.31.3 to 0.31.4 on 2021-08-14 tflint from 0.29.1 to 0.31.0 on 2021-08-14 cspell from 5.6.7 to 5.7.1 on 2021-08-15 eslint-plugin-jsonc from 1.4.0 to 1.5.0 on 2021-08-15 checkov from 2.0.348 to 2.0.350 on 2021-08-15 coffeelint from 5.0.1 to 5.0.2 on 2021-08-17 scalafix from 0.9.29 to 0.9.30 on 2021-08-17 cspell from 5.7.1 to 5.7.2 on 2021-08-17 sqlfluff from 0.6.2 to 0.6.3 on 2021-08-17 checkov from 2.0.350 to 2.0.352 on 2021-08-17 golangci-lint from 1.41.1 to 1.42.0 on 2021-08-18 checkov from 2.0.352 to 2.0.361 on 2021-08-18 sfdx-scanner-apex from 2.10.1005 to 2.11.0 on 2021-08-19 sfdx-scanner-aura from 2.10.1005 to 2.11.0 on 2021-08-19 sfdx-scanner-lwc from 2.10.1005 to 2.11.0 on 2021-08-19 checkov from 2.0.361 to 2.0.363 on 2021-08-19 terraform-fmt from 1.0.4 to 1.0.5 on 2021-08-19 terragrunt from 0.31.4 to 0.31.5 on 2021-08-19 [4.43.0] - 2021-08-12 Add secretlint to check for credentials , secrets and passwords stored in linted repository Linter versions upgrades snakemake from 6.6.1 to 6.7.0 on 2021-08-12 checkov from 2.0.344 to 2.0.346 on 2021-08-12 checkov from 2.0.346 to 2.0.347 on 2021-08-12 [4.42.0] - 2021-08-12 Add tsqllint to lint TSQL files Store docker pulls statistics history add IGNORE_GENERATED_FILES in json schema allow commonjs config file for eslint - #629 , by vitalitytv Linter versions upgrades checkov from 2.0.295 to 2.0.297 on 2021-07-25 puppet-lint from 2.4.2 to 2.5.0 on 2021-07-26 checkov from 2.0.297 to 2.0.303 on 2021-07-26 checkov from 2.0.303 to 2.0.307 on 2021-07-28 v8r from 0.5.0 to 0.6.0 on 2021-07-29 pylint from 2.9.5 to 2.9.6 on 2021-07-29 checkov from 2.0.307 to 2.0.313 on 2021-07-29 isort from 5.9.2 to 5.9.3 on 2021-07-30 clippy from 0.1.53 to 0.1.54 on 2021-07-30 snakefmt from 0.4.1 to 0.4.2 on 2021-07-30 checkov from 2.0.313 to 2.0.317 on 2021-07-30 terragrunt from 0.31.1 to 0.31.2 on 2021-07-30 eslint from 7.31.0 to 7.32.0 on 2021-07-31 phpstan from 0.12.93 to 0.12.94 on 2021-07-31 checkov from 2.0.317 to 2.0.318 on 2021-07-31 terragrunt from 0.31.2 to 0.31.3 on 2021-07-31 checkstyle from 8.44 to 8.45 on 2021-08-01 shfmt from 3.3.0 to 3.3.1 on 2021-08-02 checkov from 2.0.318 to 2.0.323 on 2021-08-02 cfn-lint from 0.52.0 to 0.53.0 on 2021-08-03 checkov from 2.0.323 to 2.0.327 on 2021-08-03 remark-lint from 13.0.0 to 14.0.1 on 2021-08-04 checkov from 2.0.327 to 2.0.330 on 2021-08-04 yamllint from 1.26.1 to 1.26.2 on 2021-08-04 checkov from 2.0.330 to 2.0.334 on 2021-08-05 terraform-fmt from 1.0.3 to 1.0.4 on 2021-08-05 checkov from 2.0.334 to 2.0.336 on 2021-08-05 sfdx-scanner-apex from 2.10.0 to 2.10.1005 on 2021-08-06 sfdx-scanner-aura from 2.10.0 to 2.10.1005 on 2021-08-06 sfdx-scanner-lwc from 2.10.0 to 2.10.1005 on 2021-08-06 v8r from 0.6.0 to 0.6.1 on 2021-08-07 checkov from 2.0.336 to 2.0.337 on 2021-08-07 terrascan from 1.8.1 to 1.9.0 on 2021-08-07 checkov from 2.0.337 to 2.0.338 on 2021-08-08 checkstyle from 8.45 to 8.45.1 on 2021-08-09 checkov from 2.0.338 to 2.0.340 on 2021-08-09 checkov from 2.0.340 to 2.0.342 on 2021-08-10 checkov from 2.0.342 to 2.0.344 on 2021-08-10 [4.41.0] - 2021-07-25 New config variable IGNORE_GITIGNORED_FILES (default: false ). If set to true , MegaLinter will skips files ignored by git using .gitignore files New config variable IGNORE_GENERATED_FILES (default: false ). If set to true , MegaLinter will skips files containing @generated marker and not containing @not-generated marker Linter versions upgrades sfdx-scanner-apex from 2.9.2 to 2.9.1 on 2021-07-14 sfdx-scanner-aura from 2.9.2 to 2.9.1 on 2021-07-14 sfdx-scanner-lwc from 2.9.2 to 2.9.1 on 2021-07-14 checkov from 2.0.267 to 2.0.269 on 2021-07-14 snakemake from 6.5.3 to 6.6.0 on 2021-07-17 sqlfluff from 0.6.0 to 0.6.1 on 2021-07-17 checkov from 2.0.269 to 1.0.860 on 2021-07-17 checkov from 1.0.860 to 2.0.276 on 2021-07-17 eslint from 7.30.0 to 7.31.0 on 2021-07-17 checkov from 2.0.276 to 2.0.278 on 2021-07-18 checkov from 2.0.278 to 2.0.279 on 2021-07-18 checkov from 2.0.279 to 2.0.280 on 2021-07-18 snakemake from 6.6.0 to 6.6.1 on 2021-07-20 checkov from 2.0.280 to 2.0.283 on 2021-07-20 terraform-fmt from 1.0.1 to 1.0.2 on 2021-07-20 phpstan from 0.12.92 to 0.12.93 on 2021-07-21 pylint from 2.9.3 to 2.9.4 on 2021-07-21 checkov from 2.0.283 to 2.0.287 on 2021-07-21 terragrunt from 0.31.0 to 0.31.1 on 2021-07-21 markdownlint from 0.27.1 to 0.28.1 on 2021-07-25 pylint from 2.9.4 to 2.9.5 on 2021-07-25 sfdx-scanner-apex from 2.9.1 to 2.10.0 on 2021-07-25 sfdx-scanner-aura from 2.9.1 to 2.10.0 on 2021-07-25 sfdx-scanner-lwc from 2.9.1 to 2.10.0 on 2021-07-25 sqlfluff from 0.6.1 to 0.6.2 on 2021-07-25 checkov from 2.0.287 to 2.0.295 on 2021-07-25 terraform-fmt from 1.0.2 to 1.0.3 on 2021-07-25 terrascan from 1.8.0 to 1.8.1 on 2021-07-25 xmllint from 20910 to 20912 on 2021-07-25 [4.40.0] - 2021-07-14 Add mypy python linter mega-linter-runner: Add possibility to send the docker image to use, including from another registry than docker hub, with argument --image Linter versions upgrades phpstan from 0.12.91 to 0.12.92 on 2021-07-10 checkov from 2.0.259 to 2.0.261 on 2021-07-11 checkov from 2.0.261 to 2.0.262 on 2021-07-11 checkov from 2.0.262 to 2.0.263 on 2021-07-12 checkov from 2.0.263 to 2.0.266 on 2021-07-13 checkov from 2.0.266 to 2.0.267 on 2021-07-13 [4.39.0] - 2021-07-14 [DELETED RELEASE BECAUSE NOT WORKING, USE 4.38.0 UNTIL 4.40.0 RELEASE] Add mypy python linter mega-linter-runner: Add possibility to send the docker image to use, including from another registry than docker hub, with argument --image Linter versions upgrades phpstan from 0.12.91 to 0.12.92 on 2021-07-10 checkov from 2.0.259 to 2.0.261 on 2021-07-11 checkov from 2.0.261 to 2.0.262 on 2021-07-11 checkov from 2.0.262 to 2.0.263 on 2021-07-12 checkov from 2.0.263 to 2.0.266 on 2021-07-13 checkov from 2.0.266 to 2.0.267 on 2021-07-13 [4.38.0] - 2021-07-10 New python linter: bandit , added by Tom Pansino Manage Github action versioning: Match MegaLinter docker image version Linter versions upgrades snakemake from 6.5.2 to 6.5.3 on 2021-07-07 checkov from 2.0.251 to 2.0.253 on 2021-07-07 php from 7.4.19 to 7.4.21 on 2021-07-07 sql-lint from 0.0.18 to 0.0.19 on 2021-07-08 checkov from 2.0.253 to 2.0.257 on 2021-07-08 isort from 5.9.1 to 5.9.2 on 2021-07-10 checkov from 2.0.257 to 2.0.259 on 2021-07-10 [4.37.0] - 2021-07-05 Downgrade npm to npm@latest-6 to avoid idealTree error when using npm install Use pip to install ansible & ansible-lint as alpine apk package ansible disappeared Add --doc argument to build.sh to generate doc only when requested (manually, or from CI job Auto-Update-Linters) Add rust in default installations as it is required for latest pip cryptography package Linter versions upgrades rstfmt from 0.0.0 to 0.0.9 on 2021-06-24 sfdx-scanner-apex from 2.9.1 to 2.9.2 on 2021-06-24 sfdx-scanner-aura from 2.9.1 to 2.9.2 on 2021-06-24 sfdx-scanner-lwc from 2.9.1 to 2.9.2 on 2021-06-24 snakemake from 6.4.1 to 6.5.0 on 2021-06-24 terraform-fmt from Terraform.v1.0.0 to 1.0.0 on 2021-06-24 terragrunt from 0.30.7 to 0.31.0 on 2021-06-24 snakemake from 6.5.0 to 6.5.1 on 2021-06-24 terraform-fmt from 1.0.0 to 1.0.1 on 2021-06-24 prettier from 2.3.1 to 2.3.2 on 2021-06-27 checkstyle from 8.43 to 8.44 on 2021-06-28 checkov from 2.0.226 to 2.0.228 on 2021-06-28 checkov from 2.0.228 to 2.0.229 on 2021-06-28 checkov from 2.0.229 to 2.0.230 on 2021-06-28 checkov from 2.0.230 to 2.0.232 on 2021-06-28 cfn-lint from 0.51.0 to 0.52.0 on 2021-07-05 hadolint from 2.5.0 to 2.6.0 on 2021-07-05 eslint from 7.29.0 to 7.30.0 on 2021-07-05 eslint-plugin-jsonc from 1.3.1 to 1.4.0 on 2021-07-05 phpstan from 0.12.90 to 0.12.91 on 2021-07-05 pylint from 2.8.3 to 2.9.3 on 2021-07-05 snakemake from 6.5.1 to 6.5.2 on 2021-07-05 checkov from 2.0.232 to 2.0.250 on 2021-07-05 terrascan from 1.7.0 to 1.8.0 on 2021-07-05 checkov from 2.0.250 to 2.0.251 on 2021-07-05 [4.36.0] - 2021-06-22 Fix Phive (php package manager) installation Fix dependency error with importlib_metadata before build Linter versions upgrades clj-kondo from 2021.04.23 to 2021.06.18 on 2021-06-22 cfn-lint from 0.50.0 to 0.51.0 on 2021-06-22 hadolint from 2.4.1 to 2.5.0 on 2021-06-22 dotenv-linter from 3.0.0 to 3.1.0 on 2021-06-22 golangci-lint from 1.40.1 to 1.41.1 on 2021-06-22 npm-groovy-lint from 8.1.0 to 8.2.0 on 2021-06-22 htmlhint from 0.14.2 to 0.15.1 on 2021-06-22 eslint from 7.28.0 to 7.29.0 on 2021-06-22 eslint-plugin-jsonc from 1.2.1 to 1.3.1 on 2021-06-22 phpstan from 0.12.88 to 0.12.90 on 2021-06-22 isort from 5.8.0 to 5.9.1 on 2021-06-22 clippy from 0.1.52 to 0.1.53 on 2021-06-22 snakefmt from 0.4.0 to 0.4.1 on 2021-06-22 cspell from 5.6.0 to 5.6.6 on 2021-06-22 sqlfluff from 0.5.6 to 0.6.0 on 2021-06-22 terraform-fmt from Terraform.v0.15.5 to Terraform.v1.0.0 on 2021-06-22 terragrunt from 0.29.8 to 0.30.7 on 2021-06-22 terrascan from 1.6.0 to 1.7.0 on 2021-06-22 tflint from 0.29.0 to 0.29.1 on 2021-06-22 [4.35.0] - 2021-06-12 Fix #304 : Display error message when docker is not found when running mega-linter-runner Calculate sum of docker pulls for main page counter badge Check _RULES_PATH for active_only_if_file_found check ( #418 , by Omeed Musavi ) Upgrade clj-kondo 2021.04.23-alpine Upgrade to python:3.9.5-alpine Partial fix #481 : Allow applying fixes on push events ( PR487 by V\u00edt Ku\u010dera ) Fix build.sh on windows Add trivy security check of all built MegaLinter docker images Linter versions upgrades terragrunt from 0.29.2 to 0.29.3 on 2021-05-16 shfmt from 3.2.4 to 3.3.0 on 2021-05-18 phpstan from 0.12.87 to 0.12.88 on 2021-05-18 cfn-lint from 0.49.1 to 0.49.2 on 2021-05-19 cpplint from 1.5.4 to 1.5.5 on 2021-05-21 scalafix from 0.9.27 to 0.9.28 on 2021-05-21 snakemake from 6.3.0 to 6.4.0 on 2021-05-21 terraform-fmt from Terraform.v0.15.3 to Terraform.v0.15.4 on 2021-05-21 terragrunt from 0.29.3 to 0.29.4 on 2021-05-21 sfdx-scanner-apex from 2.8.0 to 2.9.1 on 2021-05-22 sfdx-scanner-aura from 2.8.0 to 2.9.1 on 2021-05-22 sfdx-scanner-lwc from 2.8.0 to 2.9.1 on 2021-05-22 jscpd from 3.3.25 to 3.3.26 on 2021-05-24 eslint from 7.26.0 to 7.27.0 on 2021-05-24 clj-kondo from 2021.02.13 to 2021.04.23 on 2021-05-24 terragrunt from 0.29.4 to 0.29.5 on 2021-05-24 snakemake from 6.4.0 to 6.4.1 on 2021-05-28 terragrunt from 0.29.5 to 0.29.6 on 2021-05-28 terragrunt from 0.29.6 to 0.29.7 on 2021-05-29 cspell from 4.1.3 to 5.5.2 on 2021-05-30 checkstyle from 8.42 to 8.43 on 2021-05-30 scalafix from 0.9.28 to 0.9.29 on 2021-05-30 pylint from 2.8.2 to 2.8.3 on 2021-06-01 cfn-lint from 0.49.2 to 0.50.0 on 2021-06-04 terraform-fmt from Terraform.v0.15.4 to Terraform.v0.15.5 on 2021-06-04 terragrunt from 0.29.7 to 0.29.8 on 2021-06-04 eslint from 7.27.0 to 7.28.0 on 2021-06-05 prettier from 2.3.0 to 2.3.1 on 2021-06-07 protolint from 0.31.0 to 0.32.0 on 2021-06-07 cspell from 5.5.2 to 5.6.0 on 2021-06-07 sql-lint from 0.0.17 to 0.0.18 on 2021-06-07 tflint from 0.28.1 to 0.29.0 on 2021-06-07 [4.34.0] - 2021-04-30 Fix bug in MegaLinter plugins installation (related to #PR403 ) Linter versions upgrades sqlfluff from 0.5.3 to 0.5.5 on 2021-05-14 hadolint from 2.4.0 to 2.4.1 on 2021-05-15 golangci-lint from 1.40.0 to 1.40.1 on 2021-05-15 sqlfluff from 0.5.5 to 0.5.6 on 2021-05-15 [4.33.0] - 2021-04-30 Split Salesforce sfdx-scanner into pmd, eslint aura and eslint lwc Linter versions upgrades snakemake from 6.1.1 to 6.1.2 on 2021-04-20 stylelint from 13.12.0 to 13.13.0 on 2021-04-25 hadolint from 2.2.0 to 2.3.0 on 2021-04-25 eslint from 7.24.0 to 7.25.0 on 2021-04-25 pylint from 2.7.4 to 2.8.0 on 2021-04-25 snakemake from 6.1.2 to 6.2.1 on 2021-04-25 terrascan from 1.4.0 to 1.5.0 on 2021-04-25 checkstyle from 8.41.1 to 8.42 on 2021-04-25 pylint from 2.8.0 to 2.8.1 on 2021-04-25 tflint from 0.27.0 to 0.28.0 on 2021-04-25 pylint from 2.8.1 to 2.8.2 on 2021-04-27 cfn-lint from 0.48.3 to 0.49.0 on 2021-04-28 phpstan from 0.12.84 to 0.12.85 on 2021-04-28 terragrunt from 0.28.21 to 0.29.0 on 2021-04-28 snakemake from 6.2.1 to 6.3.0 on 2021-04-30 terrascan from 1.5.0 to 1.5.1 on 2021-04-30 [4.32.0] - 2021-04-20 Fix #376 : Link-title to license Add support from prettier as JSON formatter ( #421 , by Omeed Musavi Linter versions upgrades phpstan from 0.12.82 to 0.12.83 on 2021-04-03 markdown-table-formatter from 1.0.4 to 1.1.0 on 2021-04-05 tflint from 0.25.0 to 0.26.0 on 2021-04-05 sqlfluff from 0.4.1 to 0.5.0 on 2021-04-06 cfn-lint from 0.48.1 to 0.48.2 on 2021-04-07 yamllint from 1.26.0 to 1.26.1 on 2021-04-07 snakemake from 6.1.0 to 6.1.1 on 2021-04-08 terragrunt from 0.28.16 to 0.28.19 on 2021-04-09 phpcs from 3.5.8 to 3.6.0 on 2021-04-09 eslint from 7.23.0 to 7.24.0 on 2021-04-10 sqlfluff from 0.5.0 to 0.5.1 on 2021-04-10 protolint from 0.30.1 to 0.31.0 on 2021-04-11 sqlfluff from 0.5.1 to 0.5.2 on 2021-04-11 sfdx-scanner from 2.7.0 to 2.8.0 on 2021-04-14 terragrunt from 0.28.19 to 0.28.21 on 2021-04-15 cfn-lint from 0.48.2 to 0.48.3 on 2021-04-17 flake8 from 3.9.0 to 3.9.1 on 2021-04-17 tflint from 0.26.0 to 0.27.0 on 2021-04-19 hadolint from 2.1.0 to 2.2.0 on 2021-04-19 phpstan from 0.12.83 to 0.12.84 on 2021-04-19 shellcheck from 0.7.1 to 0.7.2 on 2021-04-19 [4.31.0] - 2021-04-03 Keep license pre-formatted in docs Use Python virtual-environment in dev-dependencies shell example Fix #367 : Display editorconfig-checker version Fix #379 : New configuration FAIL_IF_MISSING_LINTER_IN_FLAVOR Linter versions upgrades flake8 from 3.8.4 to 3.9.0 on 2021-03-15 ktlint from 0.40.0 to 0.41.0 on 2021-03-21 phpstan from 0.12.81 to 0.12.82 on 2021-03-21 isort from 5.7.0 to 5.8.0 on 2021-03-21 sfdx-scanner from 2.6.0 to 2.7.0 on 2021-03-21 sql-lint from 0.0.15 to 0.0.16 on 2021-03-21 swiftlint from 0.43.0 to 0.43.1 on 2021-03-21 editorconfig-checker from 0.0.0 to 2.3.4 on 2021-03-22 ktlint from 0.41.0 to 0.40.0 on 2021-03-22 cfn-lint from 0.47.2 to 0.48.1 on 2021-03-30 coffeelint from 4.1.3 to 4.1.4 on 2021-03-30 hadolint from 1.23.0 to 2.0.0 on 2021-03-30 golangci-lint from 1.38.0 to 1.39.0 on 2021-03-30 checkstyle from 8.41 to 8.41.1 on 2021-03-30 eslint from 7.22.0 to 7.23.0 on 2021-03-30 kubeval from 0.15.0 to 0.16.1 on 2021-03-30 perlcritic from 1.138 to 1.140 on 2021-03-30 pylint from 2.7.2 to 2.7.4 on 2021-03-30 clippy from 0.0.212 to 0.1.51 on 2021-03-30 scalafix from 0.9.26 to 0.9.27 on 2021-03-30 terragrunt from 0.28.9 to 0.28.16 on 2021-03-30 kubeval from 0.16.0 to 0.16.1 on 2021-03-30 pylint from 2.7.3 to 2.7.4 on 2021-03-30 editorconfig-checker from 2.3.4 to 2.3.5 on 2021-03-31 hadolint from 2.0.0 to 2.1.0 on 2021-04-02 snakemake from 6.0.5 to 6.1.0 on 2021-04-02 [4.30.0] - 2021-03-14 Fix #361 - Not respecting *_DISABLE_ERRORS: false New variable FORMATTERS_DISABLE_ERRORS to force all formatters to be blocking if errors are found Add *.svg in .jscpd (copy-paste detector) default ignore paths Linter versions upgrades cfn-lint from 0.47.1 to 0.47.2 on 2021-03-13 eslint from 7.21.0 to 7.22.0 on 2021-03-13 eslint-plugin-jsonc from 1.1.0 to 1.2.1 on 2021-03-14 [4.29.0] - 2021-03-12 Fix regex to list Salesforce errors Fix Updated Files Reporter when MegaLinter is not running on GitHub Action Fix #359 - invalid literal with _DISABLE_ERRORS_IF_LESS_THAN Linter versions upgrades clj-kondo from 2021.01.20 to 2021.02.13 on 2021-03-01 jscpd from 3.3.24 to 3.3.25 on 2021-03-06 hadolint from 1.22.1 to 1.23.0 on 2021-03-06 golangci-lint from 1.37.1 to 1.38.0 on 2021-03-06 markdownlint from 0.26.0 to 0.27.1 on 2021-03-06 snakemake from 6.0.0 to 6.0.2 on 2021-03-06 sqlfluff from 0.4.0 to 0.4.1 on 2021-03-06 swiftlint from 0.42.0 to 0.43.0 on 2021-03-06 terrascan from 1.3.3 to 1.4.0 on 2021-03-06 stylelint from 13.11.0 to 13.12.0 on 2021-03-06 tflint from 0.24.1 to 0.25.0 on 2021-03-06 shfmt from 3.2.2 to 3.2.4 on 2021-03-10 cfn-lint from 0.46.0 to 0.47.0 on 2021-03-10 git_diff from 2.30.1 to 2.30.2 on 2021-03-10 phpstan from 0.12.80 to 0.12.81 on 2021-03-10 protolint from 0.29.0 to 0.30.1 on 2021-03-10 snakefmt from 0.3.1 to 0.4.0 on 2021-03-10 snakemake from 6.0.2 to 6.0.3 on 2021-03-10 cfn-lint from 0.47.0 to 0.47.1 on 2021-03-12 powershell from 7.1.2 to 7.1.3 on 2021-03-12 snakemake from 6.0.3 to 6.0.5 on 2021-03-12 terragrunt from 0.28.6 to 0.28.9 on 2021-03-12 [4.28.0] - 2021-03-01 Feature: _DISABLE_ERRORS_IF_LESS_THAN : set linter status to warning if maximum allowed errors is not reached Add colors in logs Linter versions upgrades pylint from 2.6.0 to 2.6.2 on 2021-02-16 golangci-lint from 1.36.0 to 1.37.0 on 2021-02-19 phpstan from 0.12.76 to 0.12.77 on 2021-02-19 sfdx-scanner from 2.5.1 to 2.6.0 on 2021-02-19 terragrunt from 0.28.2 to 0.28.6 on 2021-02-19 terrascan from 1.3.2 to 1.3.3 on 2021-02-19 stylelint from 13.10.0 to 13.11.0 on 2021-02-21 golangci-lint from 1.37.0 to 1.37.1 on 2021-02-21 phpstan from 0.12.77 to 0.12.78 on 2021-02-21 pylint from 2.6.2 to 2.7.0 on 2021-02-22 cfn-lint from 0.45.0 to 0.46.0 on 2021-02-24 pylint from 2.7.0 to 2.7.1 on 2021-02-24 eslint-plugin-jsonc from 0.9.0 to 1.0.0 on 2021-02-25 phpstan from 0.12.78 to 0.12.79 on 2021-02-25 protolint from 0.28.2 to 0.29.0 on 2021-02-25 jscpd from 3.3.23 to 3.3.24 on 2021-02-28 eslint from 7.20.0 to 7.21.0 on 2021-02-28 scalafix from 0.9.25 to 0.9.26 on 2021-02-28 snakemake from 5.32.2 to 6.0.0 on 2021-02-28 checkstyle from 8.40 to 8.41 on 2021-03-01 eslint-plugin-jsonc from 1.0.0 to 1.1.0 on 2021-03-01 phpstan from 0.12.79 to 0.12.80 on 2021-03-01 pylint from 2.7.1 to 2.7.2 on 2021-03-01 clj-kondo from 2021.01.20 to 2021.02.13 on 2021-03-01 [4.27.0] - 2021-02-16 Linters Format YAML with prettier Core Lint docker image using Dockle Fixes Fix ansible-lint test cases for new version Update --help expected return code for shfmt ash formatter and revive go linter Add --write to update files fixed by eslint Pimp MegaLinter sources by adding newLines when missing (manually and from build.py) + fix logger initialization error + call python3 by default ( PR329 by Tom Klingenberg ) Increase max line length to 500 in yaml-lint default configuration Linter versions upgrades ansible-lint from 4.2.0 to 5.0.0 on 2021-02-09 bash-exec from 5.0.17 to 5.1.0 on 2021-02-09 cfn-lint from 0.44.6 to 0.44.7 on 2021-02-09 hadolint from 1.21.0 to 1.22.1 on 2021-02-09 git_diff from 2.26.2 to 2.30.1 on 2021-02-09 php from 7.3.26 to 7.4.15 on 2021-02-09 phpstan from 0.12.71 to 0.12.74 on 2021-02-09 protolint from 0.28.0 to 0.28.2 on 2021-02-09 lintr from 2.0.1.9000 to 0.0.0 on 2021-02-09 snakemake from 5.32.0 to 5.32.1 on 2021-02-09 terragrunt from 0.27.1 to 0.28.2 on 2021-02-09 ansible-lint from 5.0.0 to 0.0.0 on 2021-02-09 dotnet-format from 4.1.131201 to 5.0.211103 on 2021-02-12 stylelint from 13.9.0 to 13.10.0 on 2021-02-12 phpstan from 0.12.74 to 0.12.75 on 2021-02-12 powershell from 7.0.4 to 7.1.2 on 2021-02-12 snakemake from 5.32.1 to 5.32.2 on 2021-02-12 coffeelint from 4.1.2 to 4.1.3 on 2021-02-14 eslint from 7.19.0 to 7.20.0 on 2021-02-14 phpstan from 0.12.75 to 0.12.76 on 2021-02-14 black from 19.10 to 20.8 on 2021-02-15 snakefmt from 0.2.6 to 0.3.0 on 2021-02-15 sqlfluff from 0.3.6 to 0.4.0 on 2021-02-15 cfn-lint from 0.44.7 to 0.45.0 on 2021-02-16 snakefmt from 0.3.0 to 0.3.1 on 2021-02-16 [4.26.2] - 2021-01-29 Linter versions upgrades shfmt from 3.2.1 to 3.2.2 on 2021-01-30 yamllint from 1.25.0 to 1.26.0 on 2021-01-30 hadolint from 1.20.0 to 1.21.0 on 2021-02-02 checkstyle from 8.39 to 8.40 on 2021-02-02 eslint from 7.18.0 to 7.19.0 on 2021-02-02 phpstan from 0.12.70 to 0.12.71 on 2021-02-02 tflint from 0.23.1 to 0.24.1 on 2021-02-02 cfn-lint from 0.44.5 to 0.44.6 on 2021-02-03 terrascan from 1.3.1 to 1.3.2 on 2021-02-04 [4.26.1] - 2021-01-29 Fixes Prevent unexpected token error using mega-linter-runner on old versions of node #293 Fix CI for PR from forked repositories #295 Fix crash when .cspell.json is not parseable (wrong JSON format) #311 Add java in salesforce flavor descriptor because it is used by Apex PMD Linter versions upgrades phpstan from 0.12.68 to 0.12.69 on 2021-01-24 cfn-lint from 0.44.4 to 0.44.5 on 2021-01-25 golangci-lint from 1.35.2 to 1.36.0 on 2021-01-27 protolint from 0.27.0 to 0.28.0 on 2021-01-27 hadolint from 1.19.0 to 1.20.0 on 2021-01-28 phpstan from 0.12.69 to 0.12.70 on 2021-01-28 clj-kondo from 2020.09.09 to 2021.01.20 on 2021-01-28 [4.26.0] - 2021-01-24 Core architecture Manage remote mega-linter.yml configuration files New property EXTENDS , allowing to inherit from remote mega-linter.yml configuration files Add docker-in-docker management (reuse running docker instance) Allow to skip auto apply fixes with commit or PR if latest commit text contains skip fix Provide new issue link to create a new flavor to improve performances Linters Add revive GO linter Add SwiftLint for Swift language New MegaLinter flavor swift Get correct version for eslint-plugin-jsonc Linter versions upgrades snakefmt from 0.2.5 to 0.2.6 on 2021-01-22 terrascan from 1.3.0 to 1.3.1 on 2021-01-22 eslint-plugin-jsonc from 6.14.10 to 0.9.0 on 2021-01-24 [4.25.0] - 2021-01-22 Linters Add SQL linter sqlfluff Fixes #269 eslint: .eslintrc.yml is considered as found whereas it's not located in workspace root Linter versions upgrades stylelint from 13.8.0 to 13.9.0 on 2021-01-19 markdown-table-formatter from 1.0.1 to 1.0.4 on 2021-01-19 terrascan from 1.2.0 to 1.3.0 on 2021-01-19 cfn-lint from 0.44.3 to 0.44.4 on 2021-01-19 powershell from 7.1.1 to 7.0.4 on 2021-01-19 sfdx-scanner from 2.4.0 to 2.5.1 on 2021-01-21 terragrunt from 0.26.7 to 0.27.1 on 2021-01-22 [4.24.1] - 2021-01-19 mega-linter-runner --install Create .jscpd.json file if copy-paste detection is activated Display ending message Fixes #266 : shfmt error in python flavor, and reactivate BASH_SHFMT and DOCKERFILE_HADOLINT for own sources linting) Linter versions upgrades powershell from 7.1.0 to 7.1.1 on 2021-01-15 eslint from 7.17.0 to 7.18.0 on 2021-01-16 eslint-plugin-jsonc from 7.17.0 to 7.18.0 on 2021-01-16 scalafix from 0.9.24 to 0.9.25 on 2021-01-16 snakemake from 5.31.1 to 5.32.0 on 2021-01-16 protolint from 0.26.1 to 0.27.0 on 2021-01-18 phpstan from 0.12.67 to 0.12.68 on 2021-01-19 [4.24.0] - 2021-01-14 Linters Add markdown-table-formatter Fix python error when CSpell found no errors Linter versions upgrades v8r from 0.4.0 to 0.5.0 on 2021-01-14 phpstan from 0.12.66 to 0.12.67 on 2021-01-14 psalm from 4.3.1 to Psalm.4.x-dev@ on 2021-01-14 [4.23.3] - 2021-01-14 Fix .cspell.json file updater Linter versions upgrades v8r from 0.4.0 to 0.5.0 on 2021-01-14 [4.23.2] - 2021-01-14 mega-linter-runner --install: Fix .mega-linter.yml DISABLE property when nothing in it Add default .cspell.json if spelling mistakes detector is activated [4.23.1] - 2021-01-12 Core Refactor part of Linter & reporters to manage correctly logs when linter cli_lint_mode is project or list_of_files Generate ConsoleLinter and Text reports based from Linter.files_lint_results instead of at each loop When TAP Reporter active, switch linters with cli_lint_mode == \"list_of_files\" to \"files\" Fix linter output when cli_lint_mode == \"list_of_files\" Decrease number of Dockerfile steps [4.23.0] - 2021-01-12 Core If the linter is a formatter, errors are not considered as blocking errors by default Linters Add prettier to format Javascript and Typescript. standard remains default Add remark-lint to check and fix Markdown files. markdownlint remains default Linter versions upgrades golangci-lint from 1.35.1 to 1.35.2 on 2021-01-11 golangci-lint from 1.35.0 to 1.35.1 on 2021-01-11 golangci-lint from 1.34.1 to 1.35.0 on 2021-01-08 cfn-lint from 0.44.2 to 0.44.3 on 2021-01-09 tflint from 0.23.0 to 0.23.1 on 2021-01-10 dotenv-linter from 2.2.1 to 3.0.0 on 2021-01-11 Update MegaLinter to call dotenv-linter v3 with fix and not --fix anymore phpstan from 0.12.65 to 0.12.66 on 2021-01-11 [4.22.1] - 2021-01-07 Core Improve warning status in logs Remove timestamp at each log line Enhance integration with GitLab CI Update configuration generator Update core to clean logs when in GitLab CI context [4.22.0] - 2021-01-06 Core Allow user to configure custom scripts in .mega-linter.yml to run before and after linting, with variables PRE_RUN and POST_RUN Fix wrong linter status bug Enhance configuration variables performances Rename XXX_FILE_NAME into XXX_CONFIG_FILE Linters Add JSONC (json with comments) linting with eslint-plugin-jsonc [4.21.0] - 2021-01-03 Linters Add misspell spell checker Allow to define cli_lint_errors_regex in descriptors to extract number of errors from linter output stdout Call linters CLIs with list of files instead of once by file, to improve performances eslint markdownlint pylint flake8 isort Core Implement architecture for MegaLinter plugins Count number of errors in linter logs with regexes ( cli_lint_errors_count and cli_lint_errors_regex in descriptor files) Cleanup unused legacy from Super-Linter Reports Better icons for Console, GitHub Comment and Text reporters: \u2705 \u274c Documentation Add Install button for VsCode IDE extensions when available Add Install button for JetBrains IDEs extensions when available Add a new page All linters listing all linters and references to MegaLinter in their documentation Add json-schema documentation generation and references CI Use quick build and TEST_KEYWORDS in commit messages, to improve contributor experience Fixes Upgrade .tflint default config to work with new tflint version [4.20.0] - 2020-12-28 Flavors Add ci_light flavor for only CI config files (Dockerfile,Jenkinsfile,JSON,YAML,XML) Add salesforce flavor for Salesforce projects (DX or Metadata) If all required linters are not in the current flavor, just skip them with a warning message Core Add Json Schema for descriptors (allows validation and auto-completion from IDEs) Add Json Schema for .mega-linter.yml configuration files [4.19.0] - 2020-12-27 Installation Add a yeoman generator in mega-linter-runner to initialize configuration in a repository: npx mega-linter-runner --install Linters New linter v8r to validate json and yaml files with schemastore.org [4.18.0] - 2020-12-23 Core Do not suggest flavors when MegaLinter validates only the diff files ( VALIDATE_ALL_CODE_BASE: false ) Fix ConsoleReporter active linters table content Check if linter is able to fix before flagging it as a fixing linter during runtime Flavors New flavor: documentation Reporters Support GitHub Enterprise for GitHub Comment Reporter Support GitHub Enterprise for GitHub Status Reporter Doc Add docker pulls badge in flavors documentation Generate list of references to MegaLinter [4.17.0] - 2020-12-18 Core Allow to use remote linters configuration files with LINTER_RULES_PATH Add .jekyll-cache in the list of ignored folders by default Arrange display of Flavor suggestions (text and order) in reporter logs Build Dynamically generate (build.py) the list of flavors in github actions workflows Doc Reorganize online documentation menus Linters Add new linter git_diff to check for git conflicts markers Fix rakudo installation Fix phpstan installation [4.16.0] - 2020-12-14 Flavored MegaLinters Generate lightweight docker images to improve MegaLinter performances on some language based projects During MegaLinter run, suggest user to use a flavor and write it in reporters Update descriptor YML files to define flavours Update build.py to create one Dockerfile by MegaLinter flavour & flavors documentation New GHA workflows to build all flavoured MegaLinters when pushing in master Fixes Output reporter problems as warnings Do not make MegaLinter fail in case GitHubStatusReporter fails Doc Rename \"index\" pages into more meaningful labels [4.15.0] - 2020-12-13 Add Vue.js linting (eslint-plugin-vue added in dependencies) Configuration parameters changes: Change config setting logic: EXCLUDED_DIRECTORIES is now replacing original directory list instead of extending it Add config setting: ADDITIONAL_EXCLUDED_DIRECTORIES extends EXCLUDED_DIRECTORIES directory list Add config setting: &lt;LINTER_KEY&gt;_FILE_EXTENSIONS to override corresponding value from linter descriptor file Add config setting: &lt;LINTER_KEY&gt;_FILE_NAMES_REGEX to override corresponding value from linter descriptor file Descriptor yaml schema changes: Rename files_names_not_ends_with to file_names_not_ends_with Rename files_names to files_names_regex and change behavior to expect regular expressions in the list. They are applied using full match (i.e. the whole text should match the regular expression) Fix error message from Email Reporter when SMTP password is not set Fix automerge action yml (skip if secrets.PAT is not set) Improve caching of compiled regular expressions Override mkdocs theme to make analytics work CI Auto update linters and documentation: Create update PR only if linter versions has been updated Build and deploy docker images only when it is relevant (not in case of just documentation update for example) [4.14.2] - 2020-12-07 Quick fix Github Comment Reporter Reorder linters for reports [4.14.1] - 2020-12-07 Fixes Fix python error when File.io does not respond, + harmonize reporter logs [4.14.0] - 2020-12-07 Linters Add Salesforce linter: sfdx-scanner Core architecture Allow to call extra commands to build help content [4.13.0] - 2020-12-05 Major updates in online documentation generation Reorganize TOC Generate individual pages from README sections and update their internal links targets Open external links in a new browser tab New configuration parameters Allow disabling printing alpaca image to console using PRINT_ALPACA config parameter Support list of additional excluded directory basenames via EXCLUDED_DIRECTORIES configuration parameter New reporters: Email reporter, to send mega-linter reports by mail if smtp server is configured File.io reporter, to access reports with a file.io hyperlink Fixes Fix markdown comments generator when build on Windows Fix terrascan unit test case Run some actions/steps only when PR is from same repository Add comments in markdown generated by build.py Fix boolean variables not taken in account in .mega-linter.yml config file Performance Change way to install linters in Dockerfile (replace FROM ... COPY) by package or sh installation, to reduce the docker build steps from 93 to 87 shellcheck editorconfig-checker dotenv-linter golangci-lint kubeval [4.12.0] - 2020-11-29 Performances Update default workflow to get ride of has_updates action (replace by output has_updated_files from mega-linter github action) Avoid duplicate runs in mega-linter.yml template and internal workflows, using skip-duplicate-actions Give a proper name to each internal workflow Fix issue about mkdirs failing [4.11.0] - 2020-11-29 Manage parallel processing of linters to improve performances [4.10.1] - 2020-11-28 Fallback to default behaviours instead of crashes when git not available mega-linter-runner Allow to send env parameters to mega-linter-runner cli Add examples in documentation Publish mega-linter-runner beta version when pushing in master branch [4.10.0] - 2020-11-23 Add link to linters rules index in documentation Remove ANSI color codes from log files Add performances by linter in console log New option SHOW_ELAPSED_TIME , allowing the number of seconds elapsed by linter in reports NPM package MegaLinter runner runs MegaLinter locally, using .mega-linter.yml configuration (requires docker installed on your computer) test cases added in CI [4.9.0] - 2020-11-23 Core Allow configuration to be defined in a .mega-linter.yml file Linters Add Gherkin (Cucumber language) & gherkin-lint Add RST linter : rst-lint Add RST linter : rstcheck Add RST formatter : rstfmt Activate formatting for BASH_SHFMT Activate formatting for SNAKEMAKE_SNAKEFMT JsCpd: remove copy-paste HTML folder when no abuse copy-paste has been found Logs Store log files as artifacts during test cases Add examples of success and failed linter logs in documentation Remove /tmp/lint and /github/workspace from log files Documentation Add list of supported IDE in each linter documentation Generate GitHub card on linter doc when available Store link preview info during build [4.8.0] - 2020-11-17 New reporter: Updated sources [4.7.1] - 2020-11-16 Activate auto-fix for Groovy [4.7.0] - 2020-11-16 Update markdown-link-check default config Add tip in documentation about .cspell.json generated by MegaLinter Remove /tmp/lint from logs Improve summary table for linters in project mode (all project linted in one call, not one file by one file) Add Reporters in documentation, with screenshots New MegaLinter variables to activate/deactivate/configure reporters [4.6.0] - 2020-11-13 Automatic build of documentation with mkdocs-material Automatic deployment to https://megalinter.github.io/ Add markdown-link-check [4.5.0] - 2020-11-11 Add Visual Basic .NET language & dotnet-format Refactor removal of arguments for formatters (from custom class to Linter generic class) Perl: lint files with no extension containing Perl shebang Add automerge for PR issues from linter versions updates Fix ignored root files issue [4.4.0] - 2020-11-05 Add Python iSort Quick fix \"PR Comment\" reporter (orange light emoji) Refresh fork [4.3.2] - 2020-11-04 Add spell checker cspell Add Github Action Workflow to automatically: update linters dependencies rebuild MegaLinter documentation create a PR with updates Apply fixes performed by linters: User configuration (APPLY_FIXES vars) Descriptors configuration: cli_lint_fix_arg_name set on linter in YML when it can format and/or auto-fix issues Provide fixed files info in reports Test cases for all fixable file types: sample_project_fixes Generate README linters table with column \"Fix\" Provide fix capability in linters docs Update Workflows YMLs to create PR or commit to apply fixes Core Archi: All linters now have a name different than descriptor_id replace calls from os.path.exists to os.path.isfile and os.path.isdir Other: fix Phive install Upgrade linter versions & help [4.0.0] - 2020-10-01 Initial version","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#unreleased-beta-main-branch-content","text":"Note: Can be used with oxsecurity/megalinter@beta in your GitHub Action mega-linter.yml file, or with oxsecurity/megalinter:beta docker image Document the -f argument to mega-linter-runner ( #1895 ) Fix a typo in documentation of bash-exec linter ( #1892 ) Add quotes to arm-ttk linter command ( #1879 ) Improve support for devcontainers by using Python base image Fixed Python version in devcontainer from 3.9 -> 3.10 Add Makefile linter in java flavor Fix build command on linux (thanks a lot to Edouard Choini\u00e8re for the investigation and solution !) Azure Comments reporter - Change status when all tests pass ( #1915 ) Linter versions upgrades cfn-lint from 0.65.0 to 0.65.1 on 2022-09-20 checkov from 2.1.213 to 2.1.214 on 2022-09-20 semgrep from 0.113.0 to 0.114.0 on 2022-09-20 syft from 0.56.0 to 0.57.0 on 2022-09-20 ansible-lint from 6.6.0 to 6.6.1 on 2022-09-21 djlint from 1.16.0 to 1.17.0 on 2022-09-21 checkov from 2.1.214 to 2.1.219 on 2022-09-21 scalafix from 0.10.2 to 0.10.3 on 2022-09-21 cspell from 6.10.0 to 6.10.1 on 2022-09-21 tflint from 0.40.0 to 0.40.1 on 2022-09-21 stylelint from 14.12.0 to 14.12.1 on 2022-09-21 djlint from 1.17.0 to 1.17.1 on 2022-09-21 markdown-link-check from 3.10.2 to 3.10.3 on 2022-09-21 checkov from 2.1.219 to 2.1.223 on 2022-09-21 djlint from 1.17.1 to 1.17.2 on 2022-09-22 checkov from 2.1.223 to 2.1.226 on 2022-09-22 clippy from 0.1.63 to 0.1.64 on 2022-09-22 terraform-fmt from 1.2.9 to 1.3.0 on 2022-09-22 ansible-lint from 6.6.1 to 6.7.0 on 2022-09-25 eslint from 8.23.1 to 8.24.0 on 2022-09-25 phpstan from 1.8.5 to 1.8.6 on 2022-09-25 protolint from 0.40.0 to 0.41.0 on 2022-09-25 checkov from 2.1.226 to 2.1.227 on 2022-09-25 checkstyle from 10.3.3 to 10.3.4 on 2022-09-26 djlint from 1.17.2 to 1.18.0 on 2022-09-27 jsonlint from 11.6.0 to 11.7.0 on 2022-09-27 mypy from 0.971 to 0.981 on 2022-09-27 checkov from 2.1.227 to 2.1.228 on 2022-09-27 gitleaks from 8.12.0 to 8.13.0 on 2022-09-27 snakemake from 7.14.0 to 7.14.1 on 2022-09-27 tflint from 0.40.1 to 0.41.0 on 2022-09-27 checkov from 2.1.228 to 2.1.229 on 2022-09-27 semgrep from 0.114.0 to 0.115.0 on 2022-09-27 snakemake from 7.14.1 to 7.14.2 on 2022-09-27 sqlfluff from 1.3.1 to 1.3.2 on 2022-09-27 cfn-lint from 0.65.1 to 0.66.0 on 2022-09-30 stylelint from 14.12.1 to 14.13.0 on 2022-09-30 checkov from 2.1.229 to 2.1.242 on 2022-09-30 syft from 0.57.0 to 0.58.0 on 2022-09-30 kics from 1.6.0 to 1.6.1 on 2022-09-30 terraform-fmt from 1.3.0 to 1.3.1 on 2022-09-30 coffeelint from 5.2.9 to 5.2.10 on 2022-10-01 cspell from 6.10.1 to 6.12.0 on 2022-10-01 terragrunt from 0.38.12 to 0.39.0 on 2022-10-01","title":"[Unreleased] (beta, main branch content)"},{"location":"CHANGELOG/#v6100-2022-09-19","text":"Add git-lfs in Docker image to handle large files in git repositories MegaLinter Docker images size improvements Remove NPM cache Remove Cargo cache Remove rustup when clippy is not embedded in the image Remove npm packages useless files Linter versions upgrades ansible-lint from 6.5.2 to 6.6.0 cfn-lint from 0.64.1 to 0.65.0 checkov from 2.1.201 to 2.1.213 cspell from 6.8.1 to 6.10.0 djlint from 1.12.3 to 1.16.0 eslint from 8.23.0 to 8.23.1 kics from 1.5.15 to 1.6.0 pylint from 2.15.2 to 2.15.3 scalafix from 0.10.1 to 0.10.2 semgrep from 0.112.1 to 0.113.0 sfdx-scanner-apex from 2.13.8 to 2.13.9 sfdx-scanner-aura from 2.13.8 to 2.13.9 sfdx-scanner-lwc from 2.13.8 to 2.13.9 stylelint from 14.11.0 to 14.12.0 syft from 0.55.0 to 0.56.0 terragrunt from 0.38.10 to 0.38.12 terragrunt from 0.38.9 to 0.38.10 yamllint from 1.27.1 to 1.28.0","title":"[v6.10.0] - 2022-09-19"},{"location":"CHANGELOG/#v691-2022-09-11","text":"Linters Add python type checker pyright , by Microsoft New linters with available SARIF output for SARIF Reporter ansible-lint shellcheck thanks to shellcheck-sarif Use list_of_files Cli lint mode for checkstyle , to have unique SARIF output and improve performances Use list_of_files Cli lint mode for golangci-lint and revive , to improve performances Reactivate snakefmt Core Improve build performances and docker images sizes (reduce from 117 to 36 layers) Use BUILDKIT Join RUN instructions Optimize core Dockerfile items Clean npm, python and cargo caches Create a venv for each python-based linter to avoid issues with dependencies Fix broken link to documentation when using v6 Linter versions upgrades ansible-lint from 6.0.2 to 6.5.2 cfn-lint from 0.63.2 to 0.64.1 checkov from 2.1.183 to 2.1.201 clj-kondo from 2022.08.03 to 2022.09.08 djlint from 1.12.1 to 1.12.3 gitleaks from 8.11.2 to 8.12.0 golangci-lint from 1.48.0 to 1.49.0 ktlint from 0.47.0 to 0.47.1 phpstan from 1.8.4 to 1.8.5 protolint from 0.39.0 to 0.40.0 pylint from 2.15.0 to 2.15.2 semgrep from 0.103.0 to 0.112.1 sqlfluff from 1.3.0 to 1.3.1 standard from 15.0.1 to 17.0.0 terraform-fmt from 1.2.8 to 1.2.9 tflint from 0.39.3 to 0.40.0 Note: MegaLinter 6.9.0 release has been cancelled: it was fine but the docker image sizes were not optimized enough.","title":"[v6.9.1] - 2022-09-11"},{"location":"CHANGELOG/#v680-2022-09-04","text":"Run MegaLinter pre-commit hooks serially (#1826). Replace deprecated StandardJS VS Code extension with the newer official version When SARIF_REPORTER is active, use sarif-fmt to convert SARIF into text for console and text reporters ( #1822 ). Count checkstyle errors ( #1820 ) Linter versions upgrades black from 22.6.0 to 22.8.0 cfn-lint from 0.63.0 to 0.63.2 checkov from 2.1.160 to 2.1.183 checkstyle from 10.3.2 to 10.3.3 djlint from 1.12.0 to 1.12.1 kics from 1.5.14 to 1.5.15 phpstan from 1.8.2 to 1.8.4 rubocop from 1.35.1 to 1.36.0 snakemake from 7.13.0 to 7.14.0 syft from 0.54.0 to 0.55.0 terragrunt from 0.38.8 to 0.38.9","title":"[v6.8.0] - 2022-09-04"},{"location":"CHANGELOG/#v671-2022-08-28","text":"Fix Azure Comments reporter: Use BuildId to build artifacts url Fix actionlint install command","title":"[v6.7.1] - 2022-08-28"},{"location":"CHANGELOG/#v670-2022-08-28","text":"Linters Add PMD java linter Azure Pipelines integration enhancements Update installation instructions Console reporter: manage collapsible groups for easier display & navigation in job logs (requires CI=true and TF_BUILD=true sent as env variables) Azure comments reporter (see documentation ) Performances improvements When running linters in parallel, run in the same process only the linters from same descriptor and that can update the same sources (to avoid concurrency). Other linters can be run independently. Define linter_speed of linter descriptors (default 3). Can be from 1 (super slow) to 5 (super fast). This is used to optimize the processing order of linters. Fixes Fix: Properly match files_sub_directory as a prefix instead of partial string matching ( #1765 ) Match regex without workspace and sub_directory Remove config variables that are not applicable to linters analyzing all files or all other linters files Linter versions upgrades cfn-lint from 0.62.0 to 0.63.0 checkov from 2.1.139 to 2.1.160 cspell from 6.8.0 to 6.8.1 djlint from 1.11.0 to 1.12.0 eslint from 8.22.0 to 8.23.0 gitleaks from 8.11.0 to 8.11.2 golangci-lint from 1.48.0 to 1.49.0 luacheck from 0.26.1 to 1.0.0 pylint from 2.14.5 to 2.15.0 rubocop from 1.35.0 to 1.35.1 secretlint from 5.2.3 to 5.2.4 snakemake from 7.12.1 to 7.13.0 terraform-fmt from 1.2.7 to 1.2.8 terragrunt from 0.38.7 to 0.38.8 tflint from 0.35.0 to 0.39.3","title":"[v6.7.0] - 2022-08-28"},{"location":"CHANGELOG/#v660-2022-08-21","text":"Fix flavors suggestions to ignore linters not relevant for such flavor ( #1746 ) Update pre-commit hooks from v5 to v6 ( #1755 ). Fix version in URL in logs produced by reporters Add Makefile linter within python flavor ( #1760 ) Set DEFAULT_WORKSPACE as git safe directory per default #1766 Improve documentation for TAP_REPORTER Linter versions upgrades actionlint from 1.6.15 to 1.6.16 cfn-lint from 0.61.5 to 0.62.0 checkov from 2.1.127 to 2.1.139 cpplint from 1.6.0 to 1.6.1 cspell from 6.6.1 to 6.8.0 djlint from 1.9.5 to 1.11.0 eslint-plugin-jsonc from 2.3.1 to 2.4.0 gitleaks from 8.10.3 to 8.11.0 kics from 1.5.13 to 1.5.14 ktlint from 0.46.1 to 0.47.0 markdownlint from 0.32.1 to 0.32.2 sfdx-scanner-apex from 2.13.7 to 2.13.8 sfdx-scanner-aura from 2.13.7 to 2.13.8 sfdx-scanner-lwc from 2.13.7 to 2.13.8 sqlfluff from 1.2.1 to 1.3.0 stylelint from 14.10.0 to 14.11.0 syft from 0.53.4 to 0.54.0","title":"[v6.6.0] - 2022-08-21"},{"location":"CHANGELOG/#v650-2022-08-15","text":"npm-groovy-lint: Use Cli lint mode list_of_files for much better performances Disable proselint by default if .proselintrc file is not found Linter versions upgrades checkov from 2.1.121 to 2.1.127 eslint from 8.21.0 to 8.22.0 gitleaks from 8.10.2 to 8.10.3 npm-groovy-lint from 9.5.0 to 10.1.0 rstcheck from 6.0.0 to 6.1.0","title":"[v6.5.0] - 2022-08-15"},{"location":"CHANGELOG/#v640-2022-08-12","text":"Add REPOSITORY_CHECKOV in all flavors New config variables MEGALINTER_FILES_TO_LINT : Comma-separated list of files to analyze. Using this variable will bypass other file listing methods ( #808 ) SKIP_CLI_LINT_MODES : Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: file,project ). Available values: file , cli_lint_mode , project . mega-linter-runner: Allow MEGALINTER_FILES_TO_LINT to be sent as positional arguments New argument --filesonly that sends SKIP_CLI_LINT_MODES=project Example: mega-linter-runner --flavor python --release beta --filesonly megalinter/config.py megalinter/flavor_factory.py megalinter/MegaLinter.py Fixes Fix SARIF when a run is missing a results list ( #1725 ) Fix missing quotes for Powershell script analyzer ( #1728 ) Linter versions upgrades cfn-lint from 0.61.4 to 0.61.5 checkov from 2.1.100 to 2.1.121 clippy from 0.1.62 to 0.1.63 cspell from 6.5.0 to 6.6.1 gitleaks from 8.10.1 to 8.10.1 powershell from 7.2.5 to 7.2.6 protolint from 0.38.3 to 0.39.0 rubocop from 1.33.0 to 1.35.0 snakemake from 7.12.0 to 7.12.1 stylelint from 14.9.1 to 14.10.0 terraform-fmt from 1.2.6 to 1.2.7 terragrunt from 0.38.6 to 0.38.7","title":"[v6.4.0] - 2022-08-12"},{"location":"CHANGELOG/#v630-2022-08-07","text":"Linters Add REPOSITORY_CHECKOV to benefit from all checks and not only terraform ones. TERRAFORM_CHECKOV will be deprecated in a next major version Add djlint (HTML_DJLINT) to lint HTML files (html, django, jinja, nunjucks, handlebars, golang, angular) Upgrade jsonlint to use maintained package @prantlf/jsonlint]([ https://www.npmjs.com/package/@prantlf/jsonlint ) + use cli_lint_mode list_of_files to improve performances Core Support for automatic removal of Docker container when linting is finished Fix SARIF when endColumn is 0 ( #1702 ) Use dynamic REPORT_FOLDER value for output files for SALESFORCE and COPYPASTE descriptors Fix collapsible sections in Gitlab console logs Manage ignore files (like .secretlintignore or .eslintignore ) Define ignore argument for client in descriptors Define ignore file name in descriptors (overridable with _IGNORE_FILE_NAME at runtime) Update documentation generation to take in account this new configuration Linter versions upgrades checkov from 2.1.83 to 2.1.98 clj-kondo from 2022.04.25 to 2022.08.03 eslint from 8.20.0 to 8.21.0 flake8 from 5.0.1 to 5.0.2 golangci-lint from 1.47.2 to 1.48.0 jsonlint from 1.6.3 to 11.6.0 kics from 1.5.12 to 1.5.13 rubocop from 1.32.0 to 1.33.0 syft from 0.52.0 to 0.53.4","title":"[v6.3.0] - 2022-08-07"},{"location":"CHANGELOG/#v621-2022-08-01","text":"Fix blocking bug in MegaLinter v6.2.0 core ( #1684 and #1685 ) Linter versions upgrades checkstyle from 10.3.1 to 10.3.2 on 2022-08-01 flake8 from 5.0.0 to 5.0.1 on 2022-08-01 checkov from 2.1.82 to 2.1.83 on 2022-08-01","title":"[v6.2.1] - 2022-08-01"},{"location":"CHANGELOG/#v620-2022-07-31","text":"Core Fix mega-linter-runner --install template (#1662) Use REPORT_OUTPUT_FOLDER: none to not generate report files Add info in doc about CLI_LINT_MODE and about how to ignore files when cli_lint_mode is project Fix bug that disables generation of megalinter.log file in most cases Fixes about JSON Schema (#1621) Remove redundant line separator after generated table (#1650) Avoid flavor suggestion message when only REPOSITORY linters are not found Linters Add checkmake to lint Makefile Disable SemGrep by default if REPOSITORY_SEMGREP_RULESETS is not defined. Avoid cspell to lint all files. Lint only other linter files (#1648) Fix revive installation command New default config for gitleaks with useDefault=true Linter versions upgrades cfn-lint from 0.61.3 to 0.61.4 on 2022-07-30 checkov from 2.1.60 to 2.1.61 on 2022-07-19 checkov from 2.1.61 to 2.1.63 on 2022-07-20 checkov from 2.1.63 to 2.1.65 on 2022-07-21 checkov from 2.1.65 to 2.1.67 on 2022-07-21 checkov from 2.1.67 to 2.1.68 on 2022-07-23 checkov from 2.1.68 to 2.1.69 on 2022-07-24 checkov from 2.1.69 to 2.1.70 on 2022-07-24 checkov from 2.1.70 to 2.1.74 on 2022-07-25 checkov from 2.1.74 to 2.1.82 on 2022-07-30 cspell from 6.3.0 to 6.4.0 on 2022-07-19 cspell from 6.4.0 to 6.4.1 on 2022-07-24 cspell from 6.4.1 to 6.5.0 on 2022-07-30 flake8 from 4.0.1 to 5.0.0 on 2022-07-31 gitleaks from 8.8.12 to 8.9.0 on 2022-07-30 golangci-lint from 1.47.0 to 1.47.1 on 2022-07-19 golangci-lint from 1.47.1 to 1.47.2 on 2022-07-21 jscpd from 3.4.5 to 3.3.26 on 2022-07-19 markdown-table-formatter from 1.3.0 to 1.4.0 on 2022-07-25 markdownlint from 0.32.0 to 0.32.1 on 2022-07-25 mypy from 0.961 to 0.971 on 2022-07-19 phpstan from 1.8.1 to 1.8.2 on 2022-07-20 rubocop from 1.31.2 to 1.32.0 on 2022-07-21 sfdx-scanner-apex from 2.13.5 to 2.13.6 on 2022-07-21 sfdx-scanner-apex from 2.13.6 to 2.13.7 on 2022-07-30 sfdx-scanner-aura from 2.13.5 to 2.13.6 on 2022-07-21 sfdx-scanner-aura from 2.13.6 to 2.13.7 on 2022-07-30 sfdx-scanner-lwc from 2.13.5 to 2.13.6 on 2022-07-21 sfdx-scanner-lwc from 2.13.6 to 2.13.7 on 2022-07-30 snakemake from 7.8.5 to 7.9.0 on 2022-07-19 snakemake from 7.9.0 to 7.12.0 on 2022-07-30 syft from 0.51.0 to 0.52.0 on 2022-07-22 terraform-fmt from 1.2.5 to 1.2.6 on 2022-07-30 terragrunt from 0.38.5 to 0.38.6 on 2022-07-24","title":"[v6.2.0] - 2022-07-31"},{"location":"CHANGELOG/#v610-2022-07-19","text":"Improve console logs by using collapsible sections in GitHub Actions and Gitlab CI (disable by defining CONSOLE_REPORTER_SECTIONS: false ) Define CLEAR_REPORT_FOLDER=true to empty report folder at the beginning of each run ( #1502 ) Improve SARIF output Replace CI paths in logs Add missing required properties so SARIF is valid Add MegaLinter information in SARIF linter runs Allow to select linters to activate SARIF for, using SARIF_REPORTER_LINTERS Fix issue when a linter is used in multiple SARIF lint results Linter versions upgrades cfn-lint from 0.61.2 to 0.61.3 on 2022-07-19 checkov from 2.1.57 to 2.1.59 on 2022-07-18 checkov from 2.1.59 to 2.1.60 on 2022-07-19 cspell from 6.2.3 to 6.3.0 on 2022-07-18 eslint from 8.19.0 to 8.20.0 on 2022-07-17 golangci-lint from 1.46.2 to 1.47.0 on 2022-07-19 jscpd from 3.3.26 to 3.4.5 on 2022-07-19 markdownlint from 0.31.1 to 0.32.0 on 2022-07-17 pylint from 2.14.4 to 2.14.5 on 2022-07-18","title":"[v6.1.0] - 2022-07-19"},{"location":"CHANGELOG/#v605-2022-07-16","text":"Fix mega-linter-runner --upgrade so it also updates report folder to megalinter-reports in GitHub Actions Workflows #1609 Fix documentation and templates to use megalinter-reports folder everywhere Workaround for python-markdown issue https://github.com/radude/mdx_truly_sane_lists/issues/9 Linter versions upgrades checkov from 2.1.54 to 2.1.56 on 2022-07-15 checkov from 2.1.56 to 2.1.57 on 2022-07-16 gitleaks from 8.8.7 to 8.8.12 on 2022-07-16 kics from 1.5.11 to 1.5.12 on 2022-07-16 protolint from 0.38.2 to 0.38.3 on 2022-07-15 sqlfluff from 1.2.0 to 1.2.1 on 2022-07-16 terraform-fmt from 1.2.4 to 1.2.5 on 2022-07-15 terragrunt from 0.38.4 to 0.38.5 on 2022-07-15","title":"[v6.0.5] - 2022-07-16"},{"location":"CHANGELOG/#v604-2022-07-14","text":"Fix count of errors when using SARIF reporter DevSkim: Ignore megalinter-reports by default (#1603) Load JSON when list of objects is defined in an ENV var (#1605) AutoFix pre_commands using npm install (1258) Linter versions upgrades checkov from 2.1.43 to 2.1.54 on 2022-07-14 git_diff from 2.34.2 to 2.34.4 on 2022-07-14 phpstan from 1.8.0 to 1.8.1 on 2022-07-14 sqlfluff from 1.1.0 to 1.2.0 on 2022-07-14 syft from 0.50.0 to 0.51.0 on 2022-07-14","title":"[v6.0.4] - 2022-07-14"},{"location":"CHANGELOG/#v603-2022-07-11","text":"mega-linter-runner: Update query args when opening OX Security Fix mega-linter-runner doesn't default to v6 for flavors (1596)","title":"[v6.0.3] - 2022-07-11"},{"location":"CHANGELOG/#v600-2022-07-10","text":"Breaking changes: you must run npx mega-linter-runner --upgrade to use MegaLinter v6 Core architecture New reporter SARIF_REPORTER that aggregates all SARIF output files into a single one Correct SARIF files for known format errors New config variable DISABLE_LINTERS_ERRORS to define a list of linters that will be considered as non blocking Upgrade base docker image to python:3.10.4-alpine3.15 Rename default report folder from report to megalinter-reports Display GitHub stars in linters summary table in documentation Linters: Add DevSkim security linter by Microsoft Add dustilock to check for dependency confusion attacks with node and python packages Add gitleaks to lint git repository Add goodcheck as regex-based linter Add PMD to lint java files (disabled for now) Add semgrep as regex-based linter with many community rules Add syft to generate SBOM (Software Bill Of Materials) Add trivy security linter Remove dockerfilelint , as it is not maintained anymore and hadolint contains all its rules Remove rstfmt as it is not maintained anymore SARIF management for: bandit checkov checkstyle cfn-lint devskim eslint gitleaks hadolint ktlint npm-groovy-lint psalm semgrep secretlint revive terrascan tflint trivy Descriptors: New flavor Security New descriptor repository : contains DevSkim, dustilock, gitleaks, secretlint, semgrep, syft, trivy Remove CREDENTIALS and GIT descriptors mega-linter-runner --upgrade option can now upgrade repos MegaLinter config to v6 Create/update local .gitignore file when installing / updating MegaLinter using mega-linter-runner Propose to test ox.security service Switch from npm to yarn Dev architecture Manage offline run of bash build.sh for those who want to code in planes :) Automate update of CHANGELOG.md after release (beta) Accelerate internal CI testing performances Linter versions upgrades actionlint from 1.6.13 to 1.6.15 on 2022-07-10 black from 22.3.0 to 22.6.0 on 2022-07-10 cfn-lint from 0.61.1 to 0.61.2 on 2022-07-10 checkov from 3.9 to 2.1.43 on 2022-07-10 checkstyle from 10.3 to 10.3.1 on 2022-07-10 clippy from 0.1.61 to 0.1.62 on 2022-07-10 cspell from 6.1.2 to 6.2.3 on 2022-07-10 eslint-plugin-jsonc from 2.3.0 to 2.3.1 on 2022-07-10 eslint from 8.18.0 to 8.19.0 on 2022-07-10 git_diff from 2.30.3 to 2.34.2 on 2022-07-10 phpstan from 1.7.15 to 1.8.0 on 2022-07-10 pylint from 2.14.3 to 2.14.4 on 2022-07-10 rubocop from 1.30.1 to 1.31.2 on 2022-07-10 secretlint from 4.1.0 to 5.2.3 on 2022-07-10 snakemake from 7.8.3 to 7.8.5 on 2022-07-10 spectral from 5.6.0 to 5.9.2 on 2022-07-10 sqlfluff from 1.0.0 to 1.1.0 on 2022-07-10 terraform-fmt from 1.2.3 to 1.2.4 on 2022-07-10 terragrunt from 0.38.1 to 0.38.4 on 2022-07-10 terrascan from 1.14.0 to 1.15.2 on 2022-07-10 v8r from 0.6.1 to 0.13.0 on 2022-07-10 yamllint from 1.26.3 to 1.27.1 on 2022-07-10","title":"[v6.0.0] - 2022-07-10"},{"location":"CHANGELOG/#v5170-2022-07-10","text":"Message to propose users to upgrade to v6","title":"[v5.17.0] - 2022-07-10"},{"location":"CHANGELOG/#v5161-2022-06-26","text":"Quick fix release management","title":"[v5.16.1] - 2022-06-26"},{"location":"CHANGELOG/#v5160-2022-06-26","text":"Support for named Docker container. Linter versions upgrades checkov from 2.0.1230 to 2.1.0 on 2022-06-23 checkov from 2.1.0 to 2.1.5 on 2022-06-24 checkov from 2.1.5 to 2.1.7 on 2022-06-25 checkov from 2.1.7 to 3.9 on 2022-06-26 kics from 1.5.10 to 1.5.11 on 2022-06-23 protolint from 0.38.1 to 0.38.2 on 2022-06-26 sfdx-scanner-apex from 2.13.4 to 2.13.5 on 2022-06-23 sfdx-scanner-aura from 2.13.4 to 2.13.5 on 2022-06-23 sfdx-scanner-lwc from 2.13.4 to 2.13.5 on 2022-06-23 terragrunt from 0.38.0 to 0.38.1 on 2022-06-23","title":"[v5.16.0] - 2022-06-26"},{"location":"CHANGELOG/#v5150-2022-06-23","text":"OX Security branding and pre-announcement Linter versions upgrades cfn-lint from 0.61.0 to 0.61.1 on 2022-06-22 checkov from 2.0.1209 to 2.0.1210 on 2022-06-14 checkov from 2.0.1210 to 2.0.1212 on 2022-06-15 checkov from 2.0.1212 to 2.0.1217 on 2022-06-15 checkov from 2.0.1217 to 2.0.1218 on 2022-06-17 checkov from 2.0.1218 to 2.0.1219 on 2022-06-19 checkov from 2.0.1219 to 2.0.1226 on 2022-06-22 checkov from 2.0.1226 to 2.0.1230 on 2022-06-22 eslint from 8.17.0 to 8.18.0 on 2022-06-19 ktlint from 0.45.2 to 0.46.0 on 2022-06-19 ktlint from 0.46.0 to 0.46.1 on 2022-06-22 phpcs from 3.6.2 to 3.7.0 on 2022-06-14 phpcs from 3.7.0 to 3.7.1 on 2022-06-19 phpstan from 1.7.12 to 1.7.13 on 2022-06-14 phpstan from 1.7.13 to 1.7.14 on 2022-06-15 phpstan from 1.7.14 to 1.7.15 on 2022-06-22 powershell from 7.2.4 to 7.2.5 on 2022-06-22 prettier from 2.6.2 to 2.7.0 on 2022-06-15 prettier from 2.7.0 to 2.7.1 on 2022-06-17 pylint from 2.14.1 to 2.14.2 on 2022-06-15 pylint from 2.14.2 to 2.14.3 on 2022-06-19 snakefmt from 0.6.0 to 0.6.1 on 2022-06-14 snakemake from 7.8.2 to 7.8.3 on 2022-06-22 sql-lint from 0.0.19 to 0.0.20 on 2022-06-19 sql-lint from 0.0.20 to 1.0.0 on 2022-06-22 sqlfluff from 0.13.2 to 1.0.0 on 2022-06-19 terraform-fmt from 1.2.2 to 1.2.3 on 2022-06-17 terragrunt from 0.37.3 to 0.37.4 on 2022-06-15 terragrunt from 0.37.4 to 0.38.0 on 2022-06-19","title":"[v5.15.0] - 2022-06-23"},{"location":"CHANGELOG/#v5140-2022-06-12","text":"Local plugins support & documentation Update R lintr documentation Linter versions upgrades actionlint from 1.6.12 to 1.6.13 on 2022-05-20 cfn-lint from 0.60.0 to 0.60.1 on 2022-05-20 cfn-lint from 0.60.1 to 0.61.0 on 2022-06-01 checkov from 2.0.1141 to 2.0.1143 on 2022-05-17 checkov from 2.0.1143 to 2.0.1147 on 2022-05-20 checkov from 2.0.1147 to 2.0.1150 on 2022-05-22 checkov from 2.0.1150 to 2.0.1158 on 2022-05-24 checkov from 2.0.1158 to 2.0.1159 on 2022-05-24 checkov from 2.0.1159 to 2.0.1161 on 2022-05-25 checkov from 2.0.1161 to 2.0.1162 on 2022-05-27 checkov from 2.0.1162 to 2.0.1174 on 2022-05-30 checkov from 2.0.1174 to 2.0.1175 on 2022-05-31 checkov from 2.0.1175 to 2.0.1177 on 2022-05-31 checkov from 2.0.1177 to 2.0.1182 on 2022-05-31 checkov from 2.0.1182 to 2.0.1185 on 2022-06-02 checkov from 2.0.1185 to 2.0.1188 on 2022-06-03 checkov from 2.0.1188 to 2.0.1206 on 2022-06-08 checkov from 2.0.1206 to 2.0.1207 on 2022-06-09 checkov from 2.0.1207 to 2.0.1209 on 2022-06-10 checkstyle from 10.2 to 10.3 on 2022-05-30 clippy from 0.1.60 to 0.1.61 on 2022-05-20 coffeelint from 5.2.8 to 5.2.9 on 2022-05-17 cspell from 5.20.0 to 5.21.0 on 2022-05-20 cspell from 5.21.0 to 5.21.1 on 2022-05-21 cspell from 5.21.1 to 6.0.0 on 2022-05-22 cspell from 6.0.0 to 6.1.0 on 2022-05-31 cspell from 6.1.0 to 6.1.1 on 2022-06-03 cspell from 6.1.1 to 6.1.2 on 2022-06-09 eslint-plugin-jsonc from 2.2.1 to 2.3.0 on 2022-05-28 eslint from 8.15.0 to 8.16.0 on 2022-05-21 eslint from 8.16.0 to 8.17.0 on 2022-06-08 golangci-lint from 1.46.1 to 1.46.2 on 2022-05-20 graphql-schema-linter from 3.0.0 to 3.0.1 on 2022-05-22 kics from 1.5.8 to 1.5.9 on 2022-05-27 kics from 1.5.9 to 1.5.10 on 2022-06-09 mypy from 0.950 to 0.960 on 2022-05-27 mypy from 0.960 to 0.961 on 2022-06-08 phpstan from 1.6.8 to 1.6.9 on 2022-05-22 phpstan from 1.6.9 to 1.7.0 on 2022-05-24 phpstan from 1.7.0 to 1.7.1 on 2022-05-24 phpstan from 1.7.1 to 1.7.2 on 2022-05-27 phpstan from 1.7.11 to 1.7.12 on 2022-06-09 phpstan from 1.7.2 to 1.7.3 on 2022-05-30 phpstan from 1.7.3 to 1.7.6 on 2022-05-31 phpstan from 1.7.6 to 1.7.7 on 2022-05-31 phpstan from 1.7.7 to 1.7.8 on 2022-06-02 phpstan from 1.7.8 to 1.7.9 on 2022-06-03 phpstan from 1.7.9 to 1.7.11 on 2022-06-08 powershell from 7.2.3 to 7.2.4 on 2022-05-20 pylint from 2.13.9 to 2.14.0 on 2022-06-02 pylint from 2.14.0 to 2.14.1 on 2022-06-08 rstcheck from 5.0.0 to 6.0.0 on 2022-06-08 rubocop from 1.29.1 to 1.30.0 on 2022-05-27 rubocop from 1.30.0 to 1.30.1 on 2022-06-08 scalafix from 0.10.0 to 0.10.1 on 2022-06-10 sfdx-scanner-apex from 2.13.2 to 2.13.4 on 2022-05-27 sfdx-scanner-aura from 2.13.2 to 2.13.4 on 2022-05-27 sfdx-scanner-lwc from 2.13.2 to 2.13.4 on 2022-05-27 shfmt from 3.5.0 to 3.6.0 on 2022-05-24 snakemake from 7.6.2 to 7.7.0 on 2022-05-17 snakemake from 7.7.0 to 7.8.0 on 2022-05-24 snakemake from 7.8.0 to 7.8.1 on 2022-05-31 snakemake from 7.8.1 to 7.8.2 on 2022-06-08 sqlfluff from 0.13.1 to 0.13.2 on 2022-05-21 stylelint from 14.8.2 to 14.8.3 on 2022-05-22 stylelint from 14.8.3 to 14.8.4 on 2022-05-25 stylelint from 14.8.4 to 14.8.5 on 2022-05-27 stylelint from 14.8.5 to 14.9.0 on 2022-06-09 stylelint from 14.9.0 to 14.9.1 on 2022-06-11 terraform-fmt from 1.1.9 to 1.2.0 on 2022-05-20 terraform-fmt from 1.2.0 to 1.2.1 on 2022-05-24 terraform-fmt from 1.2.1 to 1.2.2 on 2022-06-03 terragrunt from 0.37.1 to 0.37.2 on 2022-06-09 terragrunt from 0.37.2 to 0.37.3 on 2022-06-12","title":"[v5.14.0] - 2022-06-12"},{"location":"CHANGELOG/#v5130-2022-05-15","text":"Add gherkin-lint in dotnet flavor ( #1435 ) Define pre-commit hooks ( #569 ). Pin ansible-lint to 6.0.2 to fix pip dependency conflict between jsonschema versions ( #1470 ). Use docker image for editorconfig-checker Update sqlfluff descriptor properties to enable error count( #1460 ) Linter versions upgrades cfn-lint from 0.59.0 to 0.59.1 on 2022-05-03 cfn-lint from 0.59.1 to 0.60.0 on 2022-05-14 checkov from 2.0.1076 to 2.0.1079 on 2022-04-24 checkov from 2.0.1079 to 2.0.1084 on 2022-04-26 checkov from 2.0.1084 to 2.0.1088 on 2022-04-28 checkov from 2.0.1088 to 2.0.1098 on 2022-04-29 checkov from 2.0.1098 to 2.0.1100 on 2022-04-30 checkov from 2.0.1100 to 2.0.1102 on 2022-05-02 checkov from 2.0.1102 to 2.0.1108 on 2022-05-03 checkov from 2.0.1108 to 2.0.1110 on 2022-05-03 checkov from 2.0.1110 to 2.0.1113 on 2022-05-05 checkov from 2.0.1113 to 2.0.1118 on 2022-05-06 checkov from 2.0.1118 to 2.0.1119 on 2022-05-07 checkov from 2.0.1119 to 2.0.1120 on 2022-05-08 checkov from 2.0.1120 to 2.0.1121 on 2022-05-08 checkov from 2.0.1121 to 2.0.1140 on 2022-05-14 checkov from 2.0.1140 to 2.0.1141 on 2022-05-15 checkstyle from 10.1 to 10.2 on 2022-04-24 clj-kondo from 2022.04.08 to 2022.04.25 on 2022-04-30 coffeelint from 5.2.7 to 5.2.8 on 2022-04-26 cspell from 5.19.7 to 5.20.0 on 2022-05-03 editorconfig-checker from 2.3.5 to 2.4.0 on 2022-05-15 eslint from 8.14.0 to 8.15.0 on 2022-05-07 golangci-lint from 1.45.2 to 1.46.1 on 2022-05-14 graphql-schema-linter from 2.0.1 to 2.0.2 on 2022-05-06 graphql-schema-linter from 2.0.2 to 3.0.0 on 2022-05-07 kics from 1.5.6 to 1.5.7 on 2022-05-03 kics from 1.5.7 to 1.5.8 on 2022-05-14 luacheck from 0.26.0 to 0.26.1 on 2022-04-24 markdown-link-check from 3.10.0 to 3.10.2 on 2022-05-05 mypy from 0.942 to 0.950 on 2022-04-28 phpstan from 1.5.7 to 1.6.0 on 2022-04-26 phpstan from 1.6.0 to 1.6.2 on 2022-04-28 phpstan from 1.6.2 to 1.6.3 on 2022-04-29 phpstan from 1.6.3 to 1.6.4 on 2022-05-03 phpstan from 1.6.4 to 1.6.7 on 2022-05-05 phpstan from 1.6.7 to 1.6.8 on 2022-05-14 powershell from 7.2.2 to 7.2.3 on 2022-04-28 protolint from 0.37.1 to 0.38.1 on 2022-05-03 psalm from Psalm.4.x-dev@ to Psalm.5.x-dev@ on 2022-05-14 pylint from 2.13.7 to 2.13.8 on 2022-05-03 pylint from 2.13.8 to 2.13.9 on 2022-05-14 rubocop from 1.28.1 to 1.28.2 on 2022-04-26 rubocop from 1.28.2 to 1.29.0 on 2022-05-07 rubocop from 1.29.0 to 1.29.1 on 2022-05-14 sfdx-scanner-apex from 2.13.1 to 2.13.2 on 2022-05-05 sfdx-scanner-aura from 2.13.1 to 2.13.2 on 2022-05-05 sfdx-scanner-lwc from 2.13.1 to 2.13.2 on 2022-05-05 snakemake from 7.4.0 to 7.5.0 on 2022-04-28 snakemake from 7.5.0 to 7.6.0 on 2022-05-03 snakemake from 7.6.0 to 7.6.1 on 2022-05-05 snakemake from 7.6.1 to 7.6.2 on 2022-05-07 sqlfluff from 0.13.0 to 0.13.1 on 2022-05-07 stylelint from 14.7.1 to 14.8.0 on 2022-04-28 stylelint from 14.8.0 to 14.8.1 on 2022-04-30 stylelint from 14.8.1 to 14.8.2 on 2022-05-04 terragrunt from 0.36.10 to 0.37.1 on 2022-05-14 terragrunt from 0.36.7 to 0.36.8 on 2022-04-28 terragrunt from 0.36.8 to 0.36.9 on 2022-04-30 terragrunt from 0.36.9 to 0.36.10 on 2022-05-06 xmllint from 20913 to 20914 on 2022-05-14","title":"[v5.13.0] - 2022-05-15"},{"location":"CHANGELOG/#v5120-2022-04-23","text":"Core Fix git upgrade issue New option FAIL_IF_UPDATED_SOURCES ( #1389 ) Linter versions upgrades actionlint from 1.6.11 to 1.6.12 on 2022-04-18 cfn-lint from 0.58.4 to 0.59.0 on 2022-04-18 checkov from 2.0.1047 to 2.0.1050 on 2022-04-11 checkov from 2.0.1050 to 2.0.1067 on 2022-04-18 checkov from 2.0.1067 to 2.0.1068 on 2022-04-18 checkov from 2.0.1068 to 2.0.1076 on 2022-04-22 coffeelint from 5.2.5 to 5.2.6 on 2022-04-11 coffeelint from 5.2.6 to 5.2.7 on 2022-04-22 eslint from 8.13.0 to 8.14.0 on 2022-04-23 git_diff from 2.30.2 to 2.30.3 on 2022-04-18 htmlhint from 1.1.3 to 1.1.4 on 2022-04-11 kics from 1.5.5 to 1.5.6 on 2022-04-18 npm-groovy-lint from 9.4.1 to 9.5.0 on 2022-04-18 phpstan from 1.5.4 to 1.5.6 on 2022-04-18 phpstan from 1.5.6 to 1.5.7 on 2022-04-22 pylint from 2.13.5 to 2.13.7 on 2022-04-22 rstcheck from 3.3.1 to 5.0.0 on 2022-04-18 rubocop from 1.27.0 to 1.28.1 on 2022-04-22 snakemake from 7.3.8 to 7.4.0 on 2022-04-22 sqlfluff from 0.12.0 to 0.13.0 on 2022-04-22 stylelint from 14.6.1 to 14.7.1 on 2022-04-18 terraform-fmt from 1.1.8 to 1.1.9 on 2022-04-22 terragrunt from 0.36.6 to 0.36.7 on 2022-04-18 tflint from 0.34.1 to 0.35.0 on 2022-04-18","title":"[v5.12.0] - 2022-04-23"},{"location":"CHANGELOG/#v5110-2022-04-11","text":"Linters Disable rstfmt as it is neither stable or maintained markdown-links-check: allow 203 as valid return code Fixes Github Comment Reporter: switch to using a hidden HTML comment to mark the comment, with the current workflow and jobid. This is more robust than the old method. ([ #1355 ) Allow to provide CI_ACTION_RUN_URL to build hlink for GitHub Comments reporter messages ([ #1341 ) Display plugin URL in MegaLinter output logs ([ #1340 ) Fix public glibc public key download Fix no override and no default toolchain set when lint rust with clippy via github-action ( #975 ) Fix cspell FileNotFound error by creating subdirectories under report as required ( #1397 ) Doc Add instructions to upload artifacts when using MegaLinter with Jenkins Linter versions upgrades actionlint from 1.6.10 to 1.6.11 on 2022-04-06 ansible-lint from 6.0.1 to 6.0.2 on 2022-03-24 bash-exec from 5.1.0 to 5.1.16 on 2022-03-22 black from 22.1.0 to 22.3.0 on 2022-03-30 cfn-lint from 0.58.3 to 0.58.4 on 2022-03-22 checkov from 2.0.1008 to 2.0.1016 on 2022-03-31 checkov from 2.0.1016 to 2.0.1021 on 2022-03-31 checkov from 2.0.1021 to 2.0.1024 on 2022-04-01 checkov from 2.0.1024 to 2.0.1030 on 2022-04-04 checkov from 2.0.1030 to 2.0.1037 on 2022-04-06 checkov from 2.0.1037 to 2.0.1045 on 2022-04-09 checkov from 2.0.1045 to 2.0.1046 on 2022-04-10 checkov from 2.0.1046 to 2.0.1047 on 2022-04-11 checkov from 2.0.975 to 2.0.977 on 2022-03-21 checkov from 2.0.977 to 2.0.980 on 2022-03-22 checkov from 2.0.980 to 2.0.983 on 2022-03-23 checkov from 2.0.983 to 2.0.995 on 2022-03-26 checkov from 2.0.995 to 2.0.999 on 2022-03-27 checkov from 2.0.999 to 2.0.1008 on 2022-03-30 checkstyle from 10.0 to 10.1 on 2022-03-27 clippy from 0.1.59 to 0.1.60 on 2022-04-09 clj-kondo from 2022.02.09 to 2022.04.08 on 2022-04-10 coffeelint from 5.2.4 to 5.2.5 on 2022-03-22 cspell from 5.19.2 to 5.19.3 on 2022-03-26 cspell from 5.19.3 to 5.19.4 on 2022-04-01 cspell from 5.19.4 to 5.19.5 on 2022-04-02 cspell from 5.19.5 to 5.19.6 on 2022-04-09 cspell from 5.19.6 to 5.19.7 on 2022-04-10 eslint from 8.11.0 to 8.12.0 on 2022-03-26 eslint from 8.12.0 to 8.13.0 on 2022-04-09 golangci-lint from 1.45.0 to 1.45.2 on 2022-03-26 hadolint from 2.9.1 to 2.9.3 on 2022-03-31 hadolint from 2.9.3 to 2.10.0 on 2022-04-10 htmlhint from 1.1.2 to 1.1.3 on 2022-03-30 kics from 1.5.4 to 1.5.5 on 2022-03-31 ktlint from 0.45.0 to 0.45.1 on 2022-03-22 ktlint from 0.45.1 to 0.45.2 on 2022-04-07 luacheck from 0.25.0 to 0.26.0 on 2022-03-26 mypy from 0.941 to 0.942 on 2022-03-26 phpstan from 1.4.10 to 1.5.0 on 2022-03-26 phpstan from 1.5.0 to 1.5.2 on 2022-03-30 phpstan from 1.5.2 to 1.5.3 on 2022-03-31 phpstan from 1.5.3 to 1.5.4 on 2022-04-04 prettier from 2.6.0 to 2.6.1 on 2022-03-26 prettier from 2.6.1 to 2.6.2 on 2022-04-04 pylint from 2.12.2 to 2.13.1 on 2022-03-26 pylint from 2.13.1 to 2.13.2 on 2022-03-27 pylint from 2.13.2 to 2.13.3 on 2022-03-30 pylint from 2.13.3 to 2.13.4 on 2022-03-31 pylint from 2.13.4 to 2.13.5 on 2022-04-07 rubocop from 1.26.0 to 1.26.1 on 2022-03-23 rubocop from 1.26.1 to 1.27.0 on 2022-04-09 scalafix from 0.9.34 to 0.10.0 on 2022-04-04 sfdx-scanner-apex from 2.13.0 to 2.13.1 on 2022-03-24 sfdx-scanner-aura from 2.13.0 to 2.13.1 on 2022-03-24 sfdx-scanner-lwc from 2.13.0 to 2.13.1 on 2022-03-24 snakemake from 7.2.1 to 7.3.0 on 2022-03-22 snakemake from 7.3.0 to 7.3.1 on 2022-03-24 snakemake from 7.3.1 to 7.3.2 on 2022-03-26 snakemake from 7.3.2 to 7.3.3 on 2022-03-30 snakemake from 7.3.3 to 7.3.4 on 2022-03-31 snakemake from 7.3.4 to 7.3.5 on 2022-03-31 snakemake from 7.3.5 to 7.3.6 on 2022-04-04 snakemake from 7.3.6 to 7.3.7 on 2022-04-06 snakemake from 7.3.7 to 7.3.8 on 2022-04-07 sqlfluff from 0.11.1 to 0.11.2 on 2022-03-26 sqlfluff from 0.11.2 to 0.12.0 on 2022-04-09 stylelint from 14.6.0 to 14.6.1 on 2022-03-26 terraform-fmt from 1.1.7 to 1.1.8 on 2022-04-09 terrascan from 1.13.2 to 1.14.0 on 2022-04-01","title":"[v5.11.0] - 2022-04-11"},{"location":"CHANGELOG/#v5100-2022-03-20","text":"Linter versions upgrades ansible-lint from 5.4.0 to 6.0.0 on 2022-03-16 ansible-lint from 6.0.0 to 6.0.1 on 2022-03-19 checkov from 2.0.939 to 2.0.940 on 2022-03-13 checkov from 2.0.940 to 2.0.943 on 2022-03-14 checkov from 2.0.943 to 2.0.949 on 2022-03-15 checkov from 2.0.949 to 2.0.962 on 2022-03-16 checkov from 2.0.962 to 2.0.969 on 2022-03-17 checkov from 2.0.969 to 2.0.970 on 2022-03-17 checkov from 2.0.970 to 2.0.975 on 2022-03-19 cspell from 5.19.0 to 5.19.1 on 2022-03-13 cspell from 5.19.1 to 5.19.2 on 2022-03-14 golangci-lint from 1.44.2 to 1.45.0 on 2022-03-19 hadolint from 2.7.0 to 2.9.1 on 2022-03-19 kics from 1.5.3 to 1.5.4 on 2022-03-17 ktlint from 0.44.0 to 0.45.0 on 2022-03-19 markdown-link-check from 3.9.3 to 3.10.0 on 2022-03-20 mypy from 0.940 to 0.941 on 2022-03-15 phpstan from 1.4.9 to 1.4.10 on 2022-03-14 powershell from 7.2.1 to 7.2.2 on 2022-03-17 prettier from 2.5.1 to 2.6.0 on 2022-03-17 snakemake from 7.2.0 to 7.2.1 on 2022-03-14 sqlfluff from 0.11.0 to 0.11.1 on 2022-03-17 stylelint from 14.5.3 to 14.6.0 on 2022-03-17 terragrunt from 0.36.3 to 0.36.5 on 2022-03-17 terragrunt from 0.36.5 to 0.36.6 on 2022-03-19","title":"[v5.10.0] - 2022-03-20"},{"location":"CHANGELOG/#v590-2022-03-13","text":"Linters New linter kubeconform to validate Kubernetes manifests with updated schemas Core Switch from JDK 8 to JDK 11 Use latest version of npm Flavors Add shell linters to ci_light flavor ( #1298 ) Fixes Generate JSON Schema HTML Documentation when building documentation ( #1287 ) rubocop: remove --force-exclusion from auto-added parameters ( #302 ) terrascan: call terrascan init as a pre-command Linter versions upgrades actionlint from 1.6.8 to 1.6.9 on 2022-02-25 actionlint from 1.6.9 to 1.6.10 on 2022-03-12 bandit from 1.7.2 to 1.7.3 on 2022-02-28 bandit from 1.7.3 to 1.7.4 on 2022-03-06 cfn-lint from 0.58.0 to 0.58.1 on 2022-02-21 cfn-lint from 0.58.1 to 0.58.2 on 2022-02-27 cfn-lint from 0.58.2 to 0.58.3 on 2022-03-09 checkov from 2.0.873 to 2.0.885 on 2022-02-21 checkov from 2.0.885 to 2.0.901 on 2022-02-25 checkov from 2.0.901 to 2.0.902 on 2022-02-25 checkov from 2.0.902 to 2.0.903 on 2022-02-27 checkov from 2.0.903 to 2.0.906 on 2022-02-28 checkov from 2.0.906 to 2.0.914 on 2022-03-03 checkov from 2.0.914 to 2.0.917 on 2022-03-04 checkov from 2.0.917 to 2.0.918 on 2022-03-06 checkov from 2.0.918 to 2.0.923 on 2022-03-08 checkov from 2.0.923 to 2.0.924 on 2022-03-08 checkov from 2.0.924 to 2.0.927 on 2022-03-09 checkov from 2.0.927 to 2.0.931 on 2022-03-10 checkov from 2.0.931 to 2.0.935 on 2022-03-11 checkov from 2.0.935 to 2.0.938 on 2022-03-12 checkov from 2.0.938 to 2.0.939 on 2022-03-13 checkstyle from 9.3 to 10.0 on 2022-03-03 clippy from 0.1.58 to 0.1.59 on 2022-02-25 clj-kondo from 2022.01.15 to 2022.02.09 on 2022-02-21 cpplint from 1.5.5 to 1.6.0 on 2022-02-20 cspell from 5.18.5 to 5.19.0 on 2022-03-13 eslint from 8.10.0 to 8.11.0 on 2022-03-12 eslint from 8.9.0 to 8.10.0 on 2022-02-27 kics from 1.5.2 to 1.5.3 on 2022-03-03 mypy from 0.931 to 0.940 on 2022-03-12 phpstan from 1.4.6 to 1.4.7 on 2022-03-03 phpstan from 1.4.7 to 1.4.8 on 2022-03-06 phpstan from 1.4.8 to 1.4.9 on 2022-03-11 protolint from 0.37.0 to 0.37.1 on 2022-02-27 rst-lint from 1.3.2 to 1.4.0 on 2022-02-25 rubocop from 1.25.1 to 1.26.0 on 2022-03-10 sfdx-scanner-apex from 2.12.0 to 2.13.0 on 2022-02-25 sfdx-scanner-aura from 2.12.0 to 2.13.0 on 2022-02-25 sfdx-scanner-lwc from 2.12.0 to 2.13.0 on 2022-02-25 snakefmt from 0.4.4 to 0.6.0 on 2022-03-04 snakemake from 6.15.5 to 7.0.0 on 2022-02-25 snakemake from 7.0.0 to 7.0.1 on 2022-02-27 snakemake from 7.0.1 to 7.0.3 on 2022-03-03 snakemake from 7.0.3 to 7.0.4 on 2022-03-04 snakemake from 7.0.4 to 7.1.0 on 2022-03-06 snakemake from 7.1.0 to 7.1.1 on 2022-03-08 snakemake from 7.1.1 to 7.2.0 on 2022-03-13 sqlfluff from 0.10.1 to 0.11.0 on 2022-03-08 stylelint from 14.5.1 to 14.5.3 on 2022-02-25 swiftlint from 0.46.2 to 0.46.3 on 2022-02-25 swiftlint from 0.46.3 to 0.46.4 on 2022-03-08 swiftlint from 0.46.4 to 0.46.5 on 2022-03-09 terraform-fmt from 1.1.6 to 1.1.7 on 2022-03-04 terragrunt from 0.36.1 to 0.36.2 on 2022-02-25 terragrunt from 0.36.2 to 0.36.3 on 2022-03-04 terrascan from 1.13.1 to 1.13.2 on 2022-02-25 tsqllint from 1.14.3.0 to 1.14.5.0 on 2022-02-21 xmllint from 20912 to 20913 on 2022-03-12","title":"[v5.9.0] - 2022-03-13"},{"location":"CHANGELOG/#v580-2022-02-18","text":"Linters Improve ansible-lint performances by linting all project in one call, and count number of errors Use project cli_lint_mode to improve performances terrascan Fixes Manage to use local certificate with Gitlab comments reporter using GITLAB_SSL_CERTIFICATE_PATH ( #1239 ) Fix GITLAB_ACCESS_TOKEN_MEGALINTER suggestion when trying to push comments to gitlab merge request Gitlab Comments Reporter: allow to use certificates with variable GITLAB_CUSTOM_CERTIFICATE (or GITLAB_CERTIFICATE_PATH only if PRE_COMMANDS are used) ( #1239 ) Core Allow to check prop existence in active_only_if_file_found and apply to eslint descriptors ( #1205 ) Doc Update images with screen records gifs Add publish artifact task in azure pipelines doc Linter versions upgrades ansible-lint from 5.3.2 to 5.4.0 on 2022-02-13 checkov from 2.0.782 to 2.0.783 on 2022-02-03 checkov from 2.0.783 to 2.0.786 on 2022-02-03 checkov from 2.0.786 to 2.0.791 on 2022-02-05 checkov from 2.0.791 to 2.0.793 on 2022-02-06 checkov from 2.0.793 to 2.0.795 on 2022-02-06 checkov from 2.0.795 to 2.0.812 on 2022-02-09 checkov from 2.0.812 to 2.0.813 on 2022-02-09 checkov from 2.0.813 to 2.0.817 on 2022-02-10 checkov from 2.0.817 to 2.0.830 on 2022-02-13 checkov from 2.0.830 to 2.0.833 on 2022-02-14 checkov from 2.0.833 to 2.0.853 on 2022-02-16 checkov from 2.0.853 to 2.0.866 on 2022-02-18 checkov from 2.0.866 to 2.0.873 on 2022-02-18 cspell from 5.18.0 to 5.18.3 on 2022-02-05 cspell from 5.18.3 to 5.18.4 on 2022-02-09 cspell from 5.18.4 to 5.18.5 on 2022-02-16 eslint-plugin-jsonc from 2.1.0 to 2.2.1 on 2022-02-18 eslint from 8.8.0 to 8.9.0 on 2022-02-13 golangci-lint from 1.44.0 to 1.44.2 on 2022-02-18 kics from 1.5.1 to 1.5.2 on 2022-02-18 ktlint from 0.43.2 to 0.44.0 on 2022-02-16 markdownlint from 0.30.0 to 0.31.0 on 2022-02-06 markdownlint from 0.31.0 to 0.31.1 on 2022-02-09 phpstan from 1.4.5 to 1.4.6 on 2022-02-06 protolint from 0.36.0 to 0.37.0 on 2022-02-13 rubocop from 1.25.0 to 1.25.1 on 2022-02-03 snakemake from 6.15.1 to 6.15.2 on 2022-02-06 snakemake from 6.15.2 to 6.15.3 on 2022-02-09 snakemake from 6.15.3 to 6.15.4 on 2022-02-09 snakemake from 6.15.4 to 6.15.5 on 2022-02-10 sqlfluff from 0.10.0 to 0.10.1 on 2022-02-18 sqlfluff from 0.9.4 to 0.10.0 on 2022-02-13 stylelint from 14.3.0 to 14.4.0 on 2022-02-09 stylelint from 14.4.0 to 14.5.0 on 2022-02-13 stylelint from 14.5.0 to 14.5.1 on 2022-02-18 terraform-fmt from 1.1.4 to 1.1.5 on 2022-02-03 terraform-fmt from 1.1.5 to 1.1.6 on 2022-02-18 terrascan from 1.13.0 to 1.13.1 on 2022-02-13","title":"[v5.8.0] - 2022-02-18"},{"location":"CHANGELOG/#v571-2022-02-02","text":"Linter updates: temporary disable snakefmt to allow latest versions of black and sqlfluff cspell: Update .cspell default config with \"version: \"2.0\", \"noConfigSearch\": true Use list_of_files mode to improve performances markdown-link-check standard stylelint Fixes Remove extraheader in git repo when using Azure Pipelines ( #1125 ) Fix gitlab token error message ( #1228 ) Linter versions upgrades black from 21.12 to 22.1.0 on 2022-02-02 cfn-lint from 0.57.0 to 0.58.0 on 2022-02-01 checkov from 2.0.775 to 2.0.777 on 2022-01-31 checkov from 2.0.777 to 2.0.778 on 2022-02-01 checkov from 2.0.778 to 2.0.780 on 2022-02-02 checkov from 2.0.780 to 2.0.782 on 2022-02-02 cspell from 5.17.0 to 5.18.0 on 2022-01-31 kics from 1.5.0 to 1.5.1 on 2022-02-02 markdown-table-formatter from 1.2.0 to 1.3.0 on 2022-01-31 phpstan from 1.4.3 to 1.4.4 on 2022-02-01 phpstan from 1.4.4 to 1.4.5 on 2022-02-02 snakemake from 6.13.1 to 6.15.1 on 2022-02-02 sqlfluff from 0.9.3 to 0.9.4 on 2022-02-02 terragrunt from 0.36.0 to 0.36.1 on 2022-02-01","title":"[v5.7.1] - 2022-02-02"},{"location":"CHANGELOG/#v570-2022-01-30","text":"Core: New reporter GITLAB_COMMENT_REPORTER allowing to post MegaLinter results as comments on Gitlab merge requests CI: Update test method to check that the number of errors is correctly calculated (+ fix linter test cases) Linter updates: Add configuration file option for SQLFluff ( #1200 ) secretlint: Use .gitignore as .secretlintignore if --secretlintignore is not defined and .secretlintignore not found ( #1207 ) Update bash-exec documentation Display correct number of errors in logs actionlint chktex cpplint htmlhint perlcritic sfdx-scanner shellcheck shfmt Use list_of_files mode to improve performances htmlhint shellcheck shfmt Fixes: Fix v5 doc deployment when there is a new release ( #1190 ) Fix issue when using VALIDATE_ALL_CODEBASE: false on Azure Pipelines by defining auth header in CI env variable GIT_AUTHORIZATION_BEARER ( #1125 ) Fix tflint initialization so it uses configuration file when defined ( #1134 ) Linter versions upgrades bandit from 1.7.1 to 1.7.2 on 2022-01-26 checkov from 2.0.744 to 2.0.745 on 2022-01-23 checkov from 2.0.745 to 2.0.746 on 2022-01-24 checkov from 2.0.746 to 2.0.749 on 2022-01-24 checkov from 2.0.749 to 2.0.754 on 2022-01-24 checkov from 2.0.754 to 2.0.763 on 2022-01-26 checkov from 2.0.763 to 2.0.769 on 2022-01-28 checkov from 2.0.769 to 2.0.772 on 2022-01-29 checkov from 2.0.772 to 2.0.775 on 2022-01-30 checkstyle from 9.2.1 to 9.3 on 2022-01-30 coffeelint from 5.2.3 to 5.2.4 on 2022-01-28 cspell from 5.16.0 to 5.17.0 on 2022-01-28 dotenv-linter from 3.1.1 to 3.2.0 on 2022-01-24 eslint-plugin-jsonc from 2.0.0 to 2.1.0 on 2022-01-28 eslint from 8.7.0 to 8.8.0 on 2022-01-29 golangci-lint from 1.43.0 to 1.44.0 on 2022-01-26 htmlhint from 1.1.0 to 1.1.1 on 2022-01-23 htmlhint from 1.1.1 to 1.1.2 on 2022-01-28 markdown-link-check from 3.9.2 to 3.9.3 on 2022-01-29 phpstan from 1.4.2 to 1.4.3 on 2022-01-29 rubocop from 0.82.0 to 1.25.0 on 2022-01-29 shfmt from 3.2.1 to 3.5.0 on 2022-01-30 shfmt from 3.3.1 to 3.2.1 on 2022-01-30 snakemake from 6.13.1 to 6.14.0 on 2022-01-28 snakemake from 6.14.0 to 6.15.0 on 2022-01-29 snakemake from 6.15.0 to 6.13.1 on 2022-01-30 sqlfluff from 0.9.1 to 0.9.3 on 2022-01-28 stylelint from 14.2.0 to 14.3.0 on 2022-01-23 swiftlint from 0.46.0 to 0.46.2 on 2022-01-28 tsqllint from 1.14.0.0 to 1.14.3.0 on 2022-01-23","title":"[v5.7.0] - 2022-01-30"},{"location":"CHANGELOG/#v560-2022-01-22","text":"Add linters licenses to online documentation Fix issue when config vars are both from ENV and from config file ( #1154 ) Fix issue of --files argument format when calling npm-groovy-lint ( #1176 ) Fix wrong status in reports when DISABLE_ERRORS is used Increase memory size for node.js-based linters ( #1149 ) Make python linters play nice with each other ( #1182 ) Linter versions upgrades coffeelint from 5.2.2 to 5.2.3 on 2022-01-09 phpstan from 1.3.0 to 1.3.3 on 2022-01-09 mypy from 0.930 to 0.931 on 2022-01-09 cspell from 5.14.0 to 5.15.1 on 2022-01-09 checkov from 2.0.702 to 2.0.708 on 2022-01-09 terraform-fmt from 1.1.2 to 1.1.3 on 2022-01-09 terrascan from 1.12.0 to 1.13.0 on 2022-01-09 npm-groovy-lint from 9.3.0 to 9.3.2 on 2022-01-09 sqlfluff from 0.9.0 to 0.9.1 on 2022-01-09 cfn-lint from 0.56.3 to 0.56.4 on 2022-01-11 npm-groovy-lint from 9.3.2 to 9.4.0 on 2022-01-11 snakemake from 6.12.3 to 6.13.0 on 2022-01-11 checkov from 2.0.708 to 2.0.709 on 2022-01-11 scalafix from 0.9.33 to 0.9.34 on 2022-01-12 snakemake from 6.13.0 to 6.13.1 on 2022-01-12 cspell from 5.15.1 to 5.15.2 on 2022-01-12 checkov from 2.0.709 to 2.0.710 on 2022-01-12 npm-groovy-lint from 9.4.0 to 9.4.1 on 2022-01-13 checkov from 2.0.710 to 2.0.712 on 2022-01-13 terragrunt from 0.35.16 to 0.35.18 on 2022-01-13 clj-kondo from 2021.12.19 to 2022.01.13 on 2022-01-14 clippy from 0.1.57 to 0.1.58 on 2022-01-14 checkov from 2.0.712 to 2.0.717 on 2022-01-14 phpstan from 1.3.3 to 1.4.0 on 2022-01-15 terragrunt from 0.35.18 to 0.35.19 on 2022-01-15 terragrunt from 0.35.19 to 0.35.20 on 2022-01-15 checkov from 2.0.717 to 2.0.718 on 2022-01-16 eslint from 8.6.0 to 8.7.0 on 2022-01-17 checkov from 2.0.718 to 2.0.720 on 2022-01-17 phpstan from 1.4.0 to 1.4.1 on 2022-01-18 checkov from 2.0.720 to 2.0.727 on 2022-01-18 clj-kondo from 2022.01.13 to 2022.01.15 on 2022-01-22 cfn-lint from 0.56.4 to 0.57.0 on 2022-01-22 markdown-link-check from 3.9.0 to 3.9.2 on 2022-01-22 phpstan from 1.4.1 to 1.4.2 on 2022-01-22 protolint from 0.35.2 to 0.36.0 on 2022-01-22 cspell from 5.15.2 to 5.16.0 on 2022-01-22 swiftlint from 0.45.1 to 0.46.0 on 2022-01-22 checkov from 2.0.727 to 2.0.744 on 2022-01-22 kics from 1.4.9 to 1.5.0 on 2022-01-22 terraform-fmt from 1.1.3 to 1.1.4 on 2022-01-22 terragrunt from 0.35.20 to 0.36.0 on 2022-01-22","title":"[v5.6.0] - 2022-01-22"},{"location":"CHANGELOG/#v550-2022-01-03","text":"Linter versions upgrades checkov from 2.0.680 to 2.0.681 on 2021-12-21 stylelint from 14.1.0 to 14.2.0 on 2021-12-23 mypy from 0.920 to 0.930 on 2021-12-23 checkov from 2.0.681 to 2.0.687 on 2021-12-23 npm-groovy-lint from 9.1.0 to 9.2.0 on 2021-12-23 checkov from 2.0.687 to 2.0.690 on 2021-12-23 tflint from 0.34.0 to 0.34.1 on 2021-12-26 clj-kondo from 2021.06.18 to 2021.12.19 on 2021-12-29 npm-groovy-lint from 9.2.0 to 9.3.0 on 2021-12-29 checkstyle from 9.2 to 9.2.1 on 2021-12-29 cspell from 5.13.4 to 5.14.0 on 2021-12-29 checkov from 2.0.690 to 2.0.695 on 2021-12-29 phpstan from 1.2.0 to 1.3.0 on 2021-12-29 checkov from 2.0.695 to 2.0.701 on 2021-12-31 htmlhint from 1.0.0 to 1.1.0 on 2022-01-01 eslint from 8.5.0 to 8.6.0 on 2022-01-01 checkov from 2.0.701 to 2.0.702 on 2022-01-03","title":"[v5.5.0] - 2022-01-03"},{"location":"CHANGELOG/#v540-2021-12-21","text":"Linter versions upgrades snakemake from 6.12.1 to 6.12.2 on 2021-12-09 checkov from 2.0.636 to 2.0.639 on 2021-12-09 checkov from 2.0.639 to 2.0.641 on 2021-12-09 terraform-fmt from 1.0.11 to 1.1.0 on 2021-12-09 snakemake from 6.12.2 to 6.12.3 on 2021-12-11 checkov from 2.0.641 to 2.0.648 on 2021-12-11 cspell from 5.13.2 to 5.13.3 on 2021-12-11 terragrunt from 0.35.13 to 0.35.14 on 2021-12-11 checkov from 2.0.648 to 2.0.649 on 2021-12-12 phpcs from 3.6.1 to 3.6.2 on 2021-12-14 sqlfluff from 0.8.2 to 0.9.0 on 2021-12-14 checkov from 2.0.649 to 2.0.659 on 2021-12-14 tflint from 0.33.2 to 0.34.0 on 2021-12-14 npm-groovy-lint from 9.0.0 to 9.1.0 on 2021-12-15 powershell from 7.2.0 to 7.2.1 on 2021-12-15 checkov from 2.0.659 to 2.0.660 on 2021-12-15 mypy from 0.910 to 0.920 on 2021-12-16 checkov from 2.0.660 to 2.0.662 on 2021-12-16 checkov from 2.0.662 to 2.0.668 on 2021-12-17 terraform-fmt from 1.1.0 to 1.1.1 on 2021-12-17 eslint from 8.4.1 to 8.5.0 on 2021-12-18 checkov from 2.0.668 to 2.0.672 on 2021-12-18 cspell from 5.13.3 to 5.13.4 on 2021-12-18 terraform-fmt from 1.1.1 to 1.1.2 on 2021-12-18 terragrunt from 0.35.14 to 0.35.16 on 2021-12-18 coffeelint from 5.2.1 to 5.2.2 on 2021-12-21 checkov from 2.0.672 to 2.0.680 on 2021-12-21 kics from 1.4.8 to 1.4.9 on 2021-12-21","title":"[v5.4.0] - 2021-12-21"},{"location":"CHANGELOG/#v530-2021-12-08","text":"Fix jscpd typo about .venv (#986) markdownlint: rename default config file from .markdown-lint.json to .markdownlint.json Deprecate DEFAULT_BRANCH setting (#948) Correct some broken links in README from Mega-Linter to MegaLinter (#1030) Docker run -- clean-up containers when exits (#1033) Add missing Bandit config file and rules path options (#679) Fix getting linter version of npm plugin. (#845) Improve runtime performances when using a flavor and defining FLAVORS_SUGGESTION: false Do not check for updated files when APPLY_FIXES is not active Fix CLI_LINT_MODE default value in doc (#1086) Linters New linter phplint to speed-up linting of php files (#1031) Fix phplint constraint to accept all future bugfix v3.0.x versions (PHP 7.4 support) (#1043) cpplint : Use cli_lint_mode: project to improve performances Linter versions upgrades remark-lint from 14.0.1 to 14.0.2 on 2021-11-19 php from 7.4.25 to 7.4.26 on 2021-11-19 checkov from 2.0.587 to 2.0.588 on 2021-11-19 markdownlint from 0.29.0 to 0.30.0 on 2021-11-21 checkov from 2.0.588 to 2.0.591 on 2021-11-21 terragrunt from 0.35.10 to 0.35.12 on 2021-11-21 eslint from 8.2.0 to 8.3.0 on 2021-11-21 checkov from 2.0.591 to 2.0.595 on 2021-11-21 cfn-lint from 0.56.1 to 0.56.2 on 2021-11-22 sqlfluff from 0.8.1 to 0.8.2 on 2021-11-22 checkov from 2.0.595 to 2.0.597 on 2021-11-22 htmlhint from 0.16.1 to 0.16.2 on 2021-11-24 checkov from 2.0.597 to 2.0.600 on 2021-11-24 htmlhint from 0.16.2 to 0.16.3 on 2021-11-25 markdown-link-check from 0.0.0 to 3.9.0 on 2021-11-25 cspell from 5.13.0 to 5.13.1 on 2021-11-25 checkov from 2.0.600 to 2.0.603 on 2021-11-25 kics from 1.4.7 to 1.4.8 on 2021-11-25 prettier from 2.4.1 to 2.5.0 on 2021-11-26 pylint from 2.11.1 to 2.12.1 on 2021-11-26 snakemake from 6.10.0 to 6.11.0 on 2021-11-26 checkov from 2.0.603 to 2.0.605 on 2021-11-26 terragrunt from 0.35.12 to 0.35.13 on 2021-11-26 htmlhint from 0.16.3 to 1.0.0 on 2021-11-27 scalafix from 0.9.32 to 0.9.33 on 2021-11-27 snakemake from 6.11.0 to 6.11.1 on 2021-11-27 checkstyle from 9.1 to 9.2 on 2021-11-29 checkov from 2.0.605 to 2.0.606 on 2021-11-29 snakemake from 6.11.1 to 6.12.1 on 2021-11-30 swiftlint from 0.45.0 to 0.45.1 on 2021-11-30 checkov from 2.0.606 to 2.0.609 on 2021-11-30 v8r from 0.6.1 to 0.7.0 on 2021-11-30 v8r from 0.7.0 to 0.6.1 on 2021-12-01 checkov from 2.0.614 to 2.0.616 on 2021-12-01 checkov from 2.0.616 to 2.0.618 on 2021-12-01 coffeelint from 5.2.0 to 5.2.1 on 2021-12-02 checkov from 2.0.618 to 2.0.621 on 2021-12-02 ktlint from 0.40.0 to 0.43.2 on 2021-12-02 clippy from 0.1.56 to 0.1.57 on 2021-12-03 checkov from 2.0.621 to 2.0.625 on 2021-12-03 cfn-lint from 0.56.2 to 0.56.3 on 2021-12-04 pylint from 2.12.1 to 2.12.2 on 2021-12-04 checkov from 2.0.625 to 2.0.626 on 2021-12-04 eslint from 8.3.0 to 8.4.0 on 2021-12-04 prettier from 2.5.0 to 2.5.1 on 2021-12-05 black from 21.11 to 21.12 on 2021-12-06 checkov from 2.0.626 to 2.0.628 on 2021-12-06 checkov from 2.0.628 to 2.0.632 on 2021-12-07 eslint from 8.4.0 to 8.4.1 on 2021-12-07 cspell from 5.13.1 to 5.13.2 on 2021-12-07 checkov from 2.0.632 to 2.0.634 on 2021-12-07 tflint from 0.33.1 to 0.33.2 on 2021-12-07 checkov from 2.0.634 to 2.0.636 on 2021-12-08","title":"[v5.3.0] - 2021-12-08"},{"location":"CHANGELOG/#v520-2021-11-18","text":"Fix release doc CI Add comments in online documentation Add link to MegaLinter documentation in console logs Linter versions upgrades actionlint from 1.6.7 to 1.6.8 on 2021-11-15 checkov from 2.0.572 to 2.0.573 on 2021-11-15 checkov from 2.0.573 to 2.0.574 on 2021-11-15 cfn-lint from 0.56.0 to 0.56.1 on 2021-11-17 checkov from 2.0.574 to 2.0.580 on 2021-11-17 black from 21.10 to 21.11 on 2021-11-17 cspell from 5.12.6 to 5.13.0 on 2021-11-17 checkov from 2.0.580 to 2.0.582 on 2021-11-17 checkov from 2.0.582 to 2.0.583 on 2021-11-18 phpstan from 1.1.2 to 1.2.0 on 2021-11-18 checkov from 2.0.583 to 2.0.587 on 2021-11-18","title":"[v5.2.0] - 2021-11-18"},{"location":"CHANGELOG/#v510-2021-11-15","text":"Fix config issue with IGNORE_GITIGNORED_FILES (#932) Bypass random CI issue with sql_tsqllint_test test version and test help New configuration PRINT_ALL_FILES (default: true ). If set to false , console log only displays updated and error files, not all of them Update black configuration, that now uses a pyproject.toml file (#949) Allows list_of_files cli_lint_mode on Psalm linter to improve performance compare to file mode mega-linter-runner: Upgrade yeoman environment to allow spaces in path Documentation versioning with mike Accordingly, to official PHPStan documentation , the TEMPLATES/phpstan.neon.dist config file set default level to zero. Downgrade dotnet from 6.0 to 5.0, to be compliant with tsqllint Allow GithubStatusReporter to work for other CI platforms Add license badge in linters documentation (All linters) Upgrade checkov install instructions to use alpine-oriented ones Fix wrong errors count displayed with PHPStan and Psalm linters (#985) Fix typo error in .jscpd.json config file (#986) Deprecate DEFAULT_BRANCH , and change its default from master to HEAD (#915) Core architecture New configuration PRINT_ALL_FILES (default: true ). If set to false , console log only displays updated and error files, not all of them Documentation versioning with mike Allow GithubStatusReporter to work for other CI platforms Add license info in List of linters documentation page Linters Update black configuration, that now uses a pyproject.toml file (#949) Allows list_of_files cli_lint_mode on Psalm linter to improve performance compare to file mode Upgrade checkov install instructions to use alpine-oriented ones Accordingly, to official PHPStan documentation , the TEMPLATES/phpstan.neon.dist config file set default level to zero. Downgrade dotnet from 6.0 to 5.0, to be compliant with tsqllint Bug fixes Fix config issue with IGNORE_GITIGNORED_FILES (#932) Bypass random CI issue with sql_tsqllint_test test version and test help mega-linter-runner: Upgrade yeoman environment to allow spaces in path Linter versions upgrades cspell from 5.12.5 to 5.12.6 on 2021-11-04 cfn-lint from 0.55.0 to 0.56.0 on 2021-11-06 coffeelint from 5.1.0 to 5.1.1 on 2021-11-06 jscpd from 3.3.26 to 3.4.1 on 2021-11-06 hadolint from 2.7.0 to 2.8.0 on 2021-11-06 eslint-plugin-jsonc from 1.7.0 to 2.0.0 on 2021-11-06 phpstan from 1.0.2 to 1.1.0 on 2021-11-06 jscpd from 3.4.1 to 3.4.2 on 2021-11-07 shellcheck from 0.7.2 to 0.8.0 on 2021-11-07 coffeelint from 5.1.1 to 5.2.0 on 2021-11-07 jscpd from 3.4.2 to 3.3.26 on 2021-11-07 hadolint from 2.8.0 to 2.7.0 on 2021-11-07 sqlfluff from 0.7.1 to 0.8.0 on 2021-11-07 sqlfluff from 0.8.0 to 0.8.1 on 2021-11-08 swiftlint from 0.43.1 to 0.44.0 on 2021-11-08 actionlint from 1.6.6 to 1.6.7 on 2021-11-08 eslint from 7.32.0 to 8.2.0 on 2021-11-08 swiftlint from 0.44.0 to 0.45.0 on 2021-11-08 powershell from 7.1.5 to 7.2.0 on 2021-11-08 protolint from 0.35.1 to 0.35.2 on 2021-11-09 isort from 5.10.0 to 5.10.1 on 2021-11-09 phpstan from 1.1.1 to 1.1.2 on 2021-11-09 kics from 1.4.6 to 1.4.7 on 2021-11-11 terraform-fmt from 1.0.10 to 1.0.11 on 2021-11-11 terragrunt from 0.35.6 to 0.35.8 on 2021-11-11 htmlhint from 0.16.0 to 0.16.1 on 2021-11-12 checkov from 2.0.524 to 2.0.566 on 2021-11-12 terragrunt from 0.35.8 to 0.35.9 on 2021-11-12 bandit from 1.7.0 to 1.7.1 on 2021-11-13 scalafix from 0.9.31 to 0.9.32 on 2021-11-13 checkov from 2.0.566 to 2.0.569 on 2021-11-13 terragrunt from 0.35.9 to 0.35.10 on 2021-11-13 checkov from 2.0.569 to 2.0.571 on 2021-11-14 stylelint from 14.0.1 to 14.1.0 on 2021-11-14 checkov from 2.0.571 to 2.0.572 on 2021-11-14","title":"[v5.1.0] - 2021-11-15"},{"location":"CHANGELOG/#v507-2021-11-04","text":"Fix that upgrader removed all jobs after cancel_duplicates but the last (#925) Linter versions upgrades cfn-lint from 0.54.4 to 0.55.0 on 2021-11-03 phpstan from 1.0.0 to 1.0.1 on 2021-11-03 golangci-lint from 1.42.1 to 1.43.0 on 2021-11-04 phpstan from 1.0.1 to 1.0.2 on 2021-11-04 isort from 5.9.3 to 5.10.0 on 2021-11-04","title":"[v5.0.7] - 2021-11-04"},{"location":"CHANGELOG/#v506-2021-11-03","text":"Use GH actions concurrency to cancel runs (#921)","title":"[v5.0.6] - 2021-11-03"},{"location":"CHANGELOG/#v505-2021-11-02","text":"Fix mega-linter-runner --install template for Github Action Workflow Replace expression \"abusive copy-paste\" by \"excessive copy-paste\" Linter versions upgrades coffeelint from 5.0.5 to 5.1.0 on 2021-11-02 phpstan from 0.12.99 to 1.0.0 on 2021-11-02 black from 21.9 to 21.10 on 2021-11-02 cspell from 5.12.4 to 5.12.5 on 2021-11-02 terragrunt from 0.35.5 to 0.35.6 on 2021-11-02","title":"[v5.0.5] - 2021-11-02"},{"location":"CHANGELOG/#v502-2021-10-31","text":"Quick build to fix stargazers badge regression (see issue #873) (#909) Improve Azure Pipeline template documentation (#908) Take in account legacy docker images for total docker pull count (#910) Upgrade stale github action Linter versions upgrades cspell from 5.12.3 to 5.12.4 on 2021-10-31 checkstyle from 9.0.1 to 9.1 on 2021-10-31 tflint from 0.33.0 to 0.33.1 on 2021-10-31","title":"[v5.0.2] - 2021-10-31"},{"location":"CHANGELOG/#v501-2021-10-30","text":"Fix mega-linter-runner bug related to v5 Fix online documentation","title":"[v5.0.1] - 2021-10-30"},{"location":"CHANGELOG/#v500-2021-10-30","text":"Migration from github individual repo nvuillam/mega-linter to github organization repo megalinter/megalinter Migration from docker hub space nvuillam to space megalinter Docker images are now megalinter/megalinter or megalinter/megalinter-FLAVOR Documentation is now hosted at https://megalinter.github.io/ Tool to upgrade user repos configuration files using npx mega-linter-runner --upgrade (will upgrade references to nvuillam/mega-linter into megalinter/megalinter) Version management: Now mega-linter docker images, github action and mega-linter-runner versions are aligned latest for latest official release beta for current content of main branch alpha for current content of alpha branch docker image, github action and mega-linter-runner can still be called with exact version number Being more inclusive: rename master branch into main IGNORE_GITIGNORED_FILES parameter default to true","title":"[v5.0.0] - 2021-10-30"},{"location":"CHANGELOG/#4470-2021-10-30","text":"Upgrades Base docker image python:3.9.6-alpine3.13 to python:3.9.7-alpine3.13 Automerge internal job pascalgn/automerge-action-0.14.2 to pascalgn/automerge-action-0.14.3 Config reporter: Parse .vscode/extensions.json as json5 (with comments) Add eslint-plugin-jsx-a11y dependency Rename default PHPStan config file, from phpstan.neon to phpstan.neon.dist accordingly to PHPStan resolution priority Allows list_of_files cli_lint_mode on PHPSTAN linter to improve performance compare to file mode phpstan is now installed with phive rather than composer (reduces disk usage) Allows list_of_files cli_lint_mode on PHPCS linter to improve performance compare to file mode Allows list_of_files cli_lint_mode on EditorConfig-Checker linter to improve performance compare to file mode Fix internal CSS because of StyleLint new rule selector-class-pattern Fix ansible-lint version collection Message to recommend to upgrade to MegaLinter v5 Linter versions upgrades cfn-lint from 0.54.1 to 0.54.2 on 2021-09-23 eslint-plugin-jsonc from 1.6.0 to 1.7.0 on 2021-09-23 checkov from 2.0.430 to 2.0.436 on 2021-09-23 coffeelint from 5.0.3 to 5.0.4 on 2021-09-24 checkov from 2.0.436 to 2.0.438 on 2021-09-24 php from 7.4.21 to 7.4.24 on 2021-09-24 terragrunt from 0.32.3 to 0.32.4 on 2021-09-24 snakemake from 6.8.0 to 6.8.1 on 2021-09-25 checkov from 2.0.438 to 2.0.441 on 2021-09-25 secretlint from 4.0.0 to 4.1.0 on 2021-09-25 checkov from 2.0.441 to 2.0.442 on 2021-09-26 checkov from 2.0.442 to 2.0.443 on 2021-09-27 protolint from 0.32.0 to 0.35.1 on 2021-09-26 protolint from 0.32.0 to 0.35.1 on 2021-09-27 checkov from 2.0.443 to 2.0.446 on 2021-09-27 cspell from 5.10.1 to 5.11.0 on 2021-09-29 checkov from 2.0.446 to 2.0.448 on 2021-09-29 npm-groovy-lint from 8.2.0 to 9.0.0 on 2021-09-30 sfdx-scanner-apex from 2.11.0 to 2.12.0 on 2021-09-30 sfdx-scanner-aura from 2.11.0 to 2.12.0 on 2021-09-30 sfdx-scanner-lwc from 2.11.0 to 2.12.0 on 2021-09-30 snakemake from 6.8.1 to 6.9.0 on 2021-09-30 cspell from 5.11.0 to 5.11.1 on 2021-09-30 checkov from 2.0.448 to 2.0.454 on 2021-09-30 snakemake from 6.9.0 to 6.9.1 on 2021-09-30 checkov from 2.0.454 to 2.0.461 on 2021-09-30 checkstyle from 9.0 to 9.0.1 on 2021-10-03 luacheck from 0.23.0 to 0.25.0 on 2021-10-03 checkov from 2.0.461 to 2.0.467 on 2021-10-03 terraform-fmt from 1.0.7 to 1.0.8 on 2021-10-03 terragrunt from 0.32.4 to 0.34.0 on 2021-10-03 sqlfluff from 0.6.6 to 0.6.7 on 2021-10-05 checkov from 2.0.467 to 2.0.469 on 2021-10-05 markdownlint from 0.28.1 to 0.29.0 on 2021-10-06 cspell from 5.11.1 to 5.12.0 on 2021-10-06 sqlfluff from 0.6.7 to 0.6.8 on 2021-10-06 checkov from 2.0.469 to 2.0.475 on 2021-10-06 cspell from 5.12.0 to 5.12.1 on 2021-10-06 checkov from 2.0.475 to 2.0.476 on 2021-10-06 cspell from 5.12.1 to 5.12.2 on 2021-10-07 terragrunt from 0.34.0 to 0.34.1 on 2021-10-07 checkov from 2.0.476 to 2.0.477 on 2021-10-07 terrascan from 1.10.0 to 1.11.0 on 2021-10-07 cspell from 5.12.2 to 5.12.3 on 2021-10-09 checkov from 2.0.477 to 2.0.479 on 2021-10-09 sqlfluff from 0.6.8 to 0.6.9 on 2021-10-10 checkov from 2.0.479 to 2.0.481 on 2021-10-10 checkov from 2.0.481 to 2.0.482 on 2021-10-10 phpcs from 3.6.0 to 3.6.1 on 2021-10-12 flake8 from 3.9.2 to 4.0.1 on 2021-10-12 checkov from 2.0.482 to 2.0.484 on 2021-10-12 terragrunt from 0.34.1 to 0.34.3 on 2021-10-12 checkov from 2.0.484 to 2.0.485 on 2021-10-13 powershell from 7.1.4 to 7.1.5 on 2021-10-16 sqlfluff from 0.6.9 to 0.7.0 on 2021-10-16 checkov from 2.0.485 to 2.0.491 on 2021-10-16 terraform-fmt from 1.0.8 to 1.0.9 on 2021-10-16 terragrunt from 0.34.3 to 0.35.3 on 2021-10-16 tflint from 0.32.1 to 0.33.0 on 2021-10-16 checkov from 2.0.491 to 2.0.492 on 2021-10-17 actionlint from 1.6.5 to 1.6.6 on 2021-10-17 cfn-lint from 0.54.2 to 0.54.3 on 2021-10-21 coffeelint from 5.0.4 to 5.0.5 on 2021-10-21 snakefmt from 0.4.3 to 0.4.4 on 2021-10-21 tekton-lint from 0.5.2 to 0.6.0 on 2021-10-21 checkov from 2.0.492 to 2.0.497 on 2021-10-21 terragrunt from 0.35.3 to 0.35.4 on 2021-10-21 stylelint from 13.13.1 to 14.0.0 on 2021-10-24 clippy from 0.1.55 to 0.1.56 on 2021-10-24 snakemake from 6.9.1 to 6.10.0 on 2021-10-24 sqlfluff from 0.7.0 to 0.7.1 on 2021-10-24 checkov from 2.0.497 to 2.0.509 on 2021-10-24 terrascan from 1.11.0 to 1.12.0 on 2021-10-24 checkov from 2.0.509 to 2.0.510 on 2021-10-25 checkov from 2.0.510 to 2.0.516 on 2021-10-26 stylelint from 14.0.0 to 14.0.1 on 2021-10-26 checkov from 2.0.516 to 2.0.524 on 2021-10-26 php from 7.4.24 to 7.4.25 on 2021-10-27 cfn-lint from 0.54.3 to 0.54.4 on 2021-10-28 htmlhint from 0.15.2 to 0.16.0 on 2021-10-29 terraform-fmt from 1.0.9 to 1.0.10 on 2021-10-29 terragrunt from 0.35.4 to 0.35.5 on 2021-10-29","title":"[4.47.0] - 2021-10-30"},{"location":"CHANGELOG/#4460-2021-09-21","text":"Add openssh apk for git repos using ssh Change default yamllint config file name from .yaml-lint.yml to .yamllint.yml Allow to disable console reporter using CONSOLE_REPORTER: false Override cli_lint_mode of linters using configuration : LINTER _CLI_LINT_MODE Performances Use list_of_files linting mode for yamllint , black and prettier Fixes Add CONFIG_REPORTER in json schema Fix Broken CI due to mega-linter test plugin Linter versions upgrades checkov from 2.0.396 to 2.0.399 on 2021-09-06 golangci-lint from 1.42.0 to 1.42.1 on 2021-09-07 snakemake from 6.7.0 to 6.8.0 on 2021-09-07 cfn-lint from 0.53.1 to 0.54.1 on 2021-09-12 prettier from 2.3.2 to 2.4.0 on 2021-09-12 clippy from 0.1.54 to 0.1.55 on 2021-09-12 sqlfluff from 0.6.4 to 0.6.5 on 2021-09-12 checkov from 2.0.399 to 2.0.407 on 2021-09-12 terragrunt from 0.31.8 to 0.31.10 on 2021-09-12 tflint from 0.31.0 to 0.32.1 on 2021-09-12 cspell from 5.9.0 to 5.9.1 on 2021-09-12 phpstan from 0.12.98 to 0.12.99 on 2021-09-15 puppet-lint from 2.5.0 to 2.5.2 on 2021-09-15 black from 21.8 to 21.9 on 2021-09-15 checkov from 2.0.407 to 2.0.414 on 2021-09-15 terragrunt from 0.31.10 to 0.31.11 on 2021-09-15 terragrunt from 0.31.11 to 0.32.1 on 2021-09-15 secretlint from 3.3.0 to 4.0.0 on 2021-09-18 htmlhint from 0.15.1 to 0.15.2 on 2021-09-18 prettier from 2.4.0 to 2.4.1 on 2021-09-18 pylint from 2.10.2 to 2.11.1 on 2021-09-18 scalafix from 0.9.30 to 0.9.31 on 2021-09-18 cspell from 5.9.1 to 5.10.1 on 2021-09-18 checkov from 2.0.414 to 2.0.421 on 2021-09-18 terraform-fmt from 1.0.6 to 1.0.7 on 2021-09-18 terragrunt from 0.32.1 to 0.32.2 on 2021-09-18 checkov from 2.0.421 to 2.0.425 on 2021-09-19 checkov from 2.0.425 to 2.0.426 on 2021-09-19 checkov from 2.0.426 to 2.0.427 on 2021-09-20 coffeelint from 5.0.2 to 5.0.3 on 2021-09-21 rstfmt from 0.0.9 to 0.0.10 on 2021-09-21 sqlfluff from 0.6.5 to 0.6.6 on 2021-09-21 checkov from 2.0.427 to 2.0.428 on 2021-09-21 checkov from 2.0.428 to 2.0.430 on 2021-09-21 terragrunt from 0.32.2 to 0.32.3 on 2021-09-21","title":"[4.46.0] - 2021-09-21"},{"location":"CHANGELOG/#4450-2021-09-04","text":"New CONFIG_REPORTER to generate \"ready to copy\" folder containing default linter configurations and IDE extensions recommendations New JSON_REPORTER to generate an output json file in report folder Manage pre_commands and post_commands at linter level Default commands defined at linter descriptor level Overridable by user in linterName_PRE_COMMANDS and linterName_POST_COMMANDS in .mega-linter.yml Fix tflint config so no custom PRE_COMMAND is necessary Use dotnet installer to setup tsqllint. tsqllint is now part of the main MegaLinter flavor, but removed from JAVASCRIPT flavor Ignore linter_FILTER_REGEX_INCLUDE/linter_FILTER_REGEX_EXCLUDE for linters running on the whole project directory mega-linter-runner updates New CLI argument --json , to get the full report as JSON in stdout last line Fix mega-linter-runner --install when local folder path contain spaces Upgrade mega-linter-runner dependencies (npm audit fix) Better comments for generated .mega-linter.yml config file Linter versions upgrades markdown-table-formatter from 1.1.0 to 1.2.0 on 2021-08-20 phpstan from 0.12.94 to 0.12.95 on 2021-08-20 pylint from 2.9.6 to 2.10.1 on 2021-08-21 sqlfluff from 0.6.3 to 0.6.4 on 2021-08-21 phpstan from 0.12.95 to 0.12.96 on 2021-08-21 pylint from 2.10.1 to 2.10.2 on 2021-08-22 cspell from 5.7.2 to 5.8.0 on 2021-08-22 yamllint from 1.26.2 to 1.26.3 on 2021-08-22 eslint-plugin-jsonc from 1.5.0 to 1.6.0 on 2021-08-23 checkov from 2.0.363 to 2.0.367 on 2021-08-23 cspell from 5.8.0 to 5.8.1 on 2021-08-24 terragrunt from 0.31.5 to 0.31.6 on 2021-08-24 hadolint from 2.6.0 to 2.7.0 on 2021-08-28 dotenv-linter from 3.1.0 to 3.1.1 on 2021-08-28 cspell from 5.8.1 to 5.8.2 on 2021-08-28 checkov from 2.0.367 to 2.0.376 on 2021-08-28 terragrunt from 0.31.6 to 0.31.7 on 2021-08-28 terrascan from 1.9.0 to 1.10.0 on 2021-08-28 checkov from 2.0.376 to 2.0.377 on 2021-08-29 cfn-lint from 0.53.0 to 0.53.1 on 2021-08-31 tsqllint from 1.13.5.0 to 1.14.0.0 on 2021-08-31 checkov from 2.0.377 to 2.0.380 on 2021-08-31 terragrunt from 0.31.7 to 0.31.8 on 2021-08-31 checkstyle from 8.45.1 to 9.0 on 2021-09-01 cspell from 5.8.2 to 5.9.0 on 2021-09-01 checkov from 2.0.380 to 2.0.387 on 2021-09-01 phpstan from 0.12.96 to 0.12.97 on 2021-09-02 checkov from 2.0.387 to 2.0.392 on 2021-09-02 checkov from 2.0.392 to 2.0.393 on 2021-09-02 phpstan from 0.12.97 to 0.12.98 on 2021-09-03 checkov from 2.0.393 to 2.0.395 on 2021-09-03 checkov from 2.0.395 to 2.0.396 on 2021-09-04 black from 20.8 to 21.8 on 2021-09-04 snakefmt from 0.4.2 to 0.4.3 on 2021-09-04 terraform-fmt from 1.0.5 to 1.0.6 on 2021-09-04","title":"[4.45.0] - 2021-09-04"},{"location":"CHANGELOG/#4440-2021-08-19","text":"Upgrade tflint descriptor to use ghcr.io/terraform-linters/tflint docker image and initialize tflint Add page for flavors stats in online documentation Unable to list git ignored files when IGNORED_GITIGNORED_FILES: true ( #PR605 , by David Bernard with the contribution of Tim Pansino ) Linter versions upgrades powershell from 7.1.3 to 7.1.4 on 2021-08-13 checkov from 2.0.347 to 2.0.348 on 2021-08-13 cspell from 5.6.6 to 5.6.7 on 2021-08-14 terragrunt from 0.31.3 to 0.31.4 on 2021-08-14 tflint from 0.29.1 to 0.31.0 on 2021-08-14 cspell from 5.6.7 to 5.7.1 on 2021-08-15 eslint-plugin-jsonc from 1.4.0 to 1.5.0 on 2021-08-15 checkov from 2.0.348 to 2.0.350 on 2021-08-15 coffeelint from 5.0.1 to 5.0.2 on 2021-08-17 scalafix from 0.9.29 to 0.9.30 on 2021-08-17 cspell from 5.7.1 to 5.7.2 on 2021-08-17 sqlfluff from 0.6.2 to 0.6.3 on 2021-08-17 checkov from 2.0.350 to 2.0.352 on 2021-08-17 golangci-lint from 1.41.1 to 1.42.0 on 2021-08-18 checkov from 2.0.352 to 2.0.361 on 2021-08-18 sfdx-scanner-apex from 2.10.1005 to 2.11.0 on 2021-08-19 sfdx-scanner-aura from 2.10.1005 to 2.11.0 on 2021-08-19 sfdx-scanner-lwc from 2.10.1005 to 2.11.0 on 2021-08-19 checkov from 2.0.361 to 2.0.363 on 2021-08-19 terraform-fmt from 1.0.4 to 1.0.5 on 2021-08-19 terragrunt from 0.31.4 to 0.31.5 on 2021-08-19","title":"[4.44.0] - 2021-08-19"},{"location":"CHANGELOG/#4430-2021-08-12","text":"Add secretlint to check for credentials , secrets and passwords stored in linted repository Linter versions upgrades snakemake from 6.6.1 to 6.7.0 on 2021-08-12 checkov from 2.0.344 to 2.0.346 on 2021-08-12 checkov from 2.0.346 to 2.0.347 on 2021-08-12","title":"[4.43.0] - 2021-08-12"},{"location":"CHANGELOG/#4420-2021-08-12","text":"Add tsqllint to lint TSQL files Store docker pulls statistics history add IGNORE_GENERATED_FILES in json schema allow commonjs config file for eslint - #629 , by vitalitytv Linter versions upgrades checkov from 2.0.295 to 2.0.297 on 2021-07-25 puppet-lint from 2.4.2 to 2.5.0 on 2021-07-26 checkov from 2.0.297 to 2.0.303 on 2021-07-26 checkov from 2.0.303 to 2.0.307 on 2021-07-28 v8r from 0.5.0 to 0.6.0 on 2021-07-29 pylint from 2.9.5 to 2.9.6 on 2021-07-29 checkov from 2.0.307 to 2.0.313 on 2021-07-29 isort from 5.9.2 to 5.9.3 on 2021-07-30 clippy from 0.1.53 to 0.1.54 on 2021-07-30 snakefmt from 0.4.1 to 0.4.2 on 2021-07-30 checkov from 2.0.313 to 2.0.317 on 2021-07-30 terragrunt from 0.31.1 to 0.31.2 on 2021-07-30 eslint from 7.31.0 to 7.32.0 on 2021-07-31 phpstan from 0.12.93 to 0.12.94 on 2021-07-31 checkov from 2.0.317 to 2.0.318 on 2021-07-31 terragrunt from 0.31.2 to 0.31.3 on 2021-07-31 checkstyle from 8.44 to 8.45 on 2021-08-01 shfmt from 3.3.0 to 3.3.1 on 2021-08-02 checkov from 2.0.318 to 2.0.323 on 2021-08-02 cfn-lint from 0.52.0 to 0.53.0 on 2021-08-03 checkov from 2.0.323 to 2.0.327 on 2021-08-03 remark-lint from 13.0.0 to 14.0.1 on 2021-08-04 checkov from 2.0.327 to 2.0.330 on 2021-08-04 yamllint from 1.26.1 to 1.26.2 on 2021-08-04 checkov from 2.0.330 to 2.0.334 on 2021-08-05 terraform-fmt from 1.0.3 to 1.0.4 on 2021-08-05 checkov from 2.0.334 to 2.0.336 on 2021-08-05 sfdx-scanner-apex from 2.10.0 to 2.10.1005 on 2021-08-06 sfdx-scanner-aura from 2.10.0 to 2.10.1005 on 2021-08-06 sfdx-scanner-lwc from 2.10.0 to 2.10.1005 on 2021-08-06 v8r from 0.6.0 to 0.6.1 on 2021-08-07 checkov from 2.0.336 to 2.0.337 on 2021-08-07 terrascan from 1.8.1 to 1.9.0 on 2021-08-07 checkov from 2.0.337 to 2.0.338 on 2021-08-08 checkstyle from 8.45 to 8.45.1 on 2021-08-09 checkov from 2.0.338 to 2.0.340 on 2021-08-09 checkov from 2.0.340 to 2.0.342 on 2021-08-10 checkov from 2.0.342 to 2.0.344 on 2021-08-10","title":"[4.42.0] - 2021-08-12"},{"location":"CHANGELOG/#4410-2021-07-25","text":"New config variable IGNORE_GITIGNORED_FILES (default: false ). If set to true , MegaLinter will skips files ignored by git using .gitignore files New config variable IGNORE_GENERATED_FILES (default: false ). If set to true , MegaLinter will skips files containing @generated marker and not containing @not-generated marker Linter versions upgrades sfdx-scanner-apex from 2.9.2 to 2.9.1 on 2021-07-14 sfdx-scanner-aura from 2.9.2 to 2.9.1 on 2021-07-14 sfdx-scanner-lwc from 2.9.2 to 2.9.1 on 2021-07-14 checkov from 2.0.267 to 2.0.269 on 2021-07-14 snakemake from 6.5.3 to 6.6.0 on 2021-07-17 sqlfluff from 0.6.0 to 0.6.1 on 2021-07-17 checkov from 2.0.269 to 1.0.860 on 2021-07-17 checkov from 1.0.860 to 2.0.276 on 2021-07-17 eslint from 7.30.0 to 7.31.0 on 2021-07-17 checkov from 2.0.276 to 2.0.278 on 2021-07-18 checkov from 2.0.278 to 2.0.279 on 2021-07-18 checkov from 2.0.279 to 2.0.280 on 2021-07-18 snakemake from 6.6.0 to 6.6.1 on 2021-07-20 checkov from 2.0.280 to 2.0.283 on 2021-07-20 terraform-fmt from 1.0.1 to 1.0.2 on 2021-07-20 phpstan from 0.12.92 to 0.12.93 on 2021-07-21 pylint from 2.9.3 to 2.9.4 on 2021-07-21 checkov from 2.0.283 to 2.0.287 on 2021-07-21 terragrunt from 0.31.0 to 0.31.1 on 2021-07-21 markdownlint from 0.27.1 to 0.28.1 on 2021-07-25 pylint from 2.9.4 to 2.9.5 on 2021-07-25 sfdx-scanner-apex from 2.9.1 to 2.10.0 on 2021-07-25 sfdx-scanner-aura from 2.9.1 to 2.10.0 on 2021-07-25 sfdx-scanner-lwc from 2.9.1 to 2.10.0 on 2021-07-25 sqlfluff from 0.6.1 to 0.6.2 on 2021-07-25 checkov from 2.0.287 to 2.0.295 on 2021-07-25 terraform-fmt from 1.0.2 to 1.0.3 on 2021-07-25 terrascan from 1.8.0 to 1.8.1 on 2021-07-25 xmllint from 20910 to 20912 on 2021-07-25","title":"[4.41.0] - 2021-07-25"},{"location":"CHANGELOG/#4400-2021-07-14","text":"Add mypy python linter mega-linter-runner: Add possibility to send the docker image to use, including from another registry than docker hub, with argument --image Linter versions upgrades phpstan from 0.12.91 to 0.12.92 on 2021-07-10 checkov from 2.0.259 to 2.0.261 on 2021-07-11 checkov from 2.0.261 to 2.0.262 on 2021-07-11 checkov from 2.0.262 to 2.0.263 on 2021-07-12 checkov from 2.0.263 to 2.0.266 on 2021-07-13 checkov from 2.0.266 to 2.0.267 on 2021-07-13","title":"[4.40.0] - 2021-07-14"},{"location":"CHANGELOG/#4390-2021-07-14-deleted-release-because-not-working-use-4380-until-4400-release","text":"Add mypy python linter mega-linter-runner: Add possibility to send the docker image to use, including from another registry than docker hub, with argument --image Linter versions upgrades phpstan from 0.12.91 to 0.12.92 on 2021-07-10 checkov from 2.0.259 to 2.0.261 on 2021-07-11 checkov from 2.0.261 to 2.0.262 on 2021-07-11 checkov from 2.0.262 to 2.0.263 on 2021-07-12 checkov from 2.0.263 to 2.0.266 on 2021-07-13 checkov from 2.0.266 to 2.0.267 on 2021-07-13","title":"[4.39.0] - 2021-07-14 [DELETED RELEASE BECAUSE NOT WORKING, USE 4.38.0 UNTIL 4.40.0 RELEASE]"},{"location":"CHANGELOG/#4380-2021-07-10","text":"New python linter: bandit , added by Tom Pansino Manage Github action versioning: Match MegaLinter docker image version Linter versions upgrades snakemake from 6.5.2 to 6.5.3 on 2021-07-07 checkov from 2.0.251 to 2.0.253 on 2021-07-07 php from 7.4.19 to 7.4.21 on 2021-07-07 sql-lint from 0.0.18 to 0.0.19 on 2021-07-08 checkov from 2.0.253 to 2.0.257 on 2021-07-08 isort from 5.9.1 to 5.9.2 on 2021-07-10 checkov from 2.0.257 to 2.0.259 on 2021-07-10","title":"[4.38.0] - 2021-07-10"},{"location":"CHANGELOG/#4370-2021-07-05","text":"Downgrade npm to npm@latest-6 to avoid idealTree error when using npm install Use pip to install ansible & ansible-lint as alpine apk package ansible disappeared Add --doc argument to build.sh to generate doc only when requested (manually, or from CI job Auto-Update-Linters) Add rust in default installations as it is required for latest pip cryptography package Linter versions upgrades rstfmt from 0.0.0 to 0.0.9 on 2021-06-24 sfdx-scanner-apex from 2.9.1 to 2.9.2 on 2021-06-24 sfdx-scanner-aura from 2.9.1 to 2.9.2 on 2021-06-24 sfdx-scanner-lwc from 2.9.1 to 2.9.2 on 2021-06-24 snakemake from 6.4.1 to 6.5.0 on 2021-06-24 terraform-fmt from Terraform.v1.0.0 to 1.0.0 on 2021-06-24 terragrunt from 0.30.7 to 0.31.0 on 2021-06-24 snakemake from 6.5.0 to 6.5.1 on 2021-06-24 terraform-fmt from 1.0.0 to 1.0.1 on 2021-06-24 prettier from 2.3.1 to 2.3.2 on 2021-06-27 checkstyle from 8.43 to 8.44 on 2021-06-28 checkov from 2.0.226 to 2.0.228 on 2021-06-28 checkov from 2.0.228 to 2.0.229 on 2021-06-28 checkov from 2.0.229 to 2.0.230 on 2021-06-28 checkov from 2.0.230 to 2.0.232 on 2021-06-28 cfn-lint from 0.51.0 to 0.52.0 on 2021-07-05 hadolint from 2.5.0 to 2.6.0 on 2021-07-05 eslint from 7.29.0 to 7.30.0 on 2021-07-05 eslint-plugin-jsonc from 1.3.1 to 1.4.0 on 2021-07-05 phpstan from 0.12.90 to 0.12.91 on 2021-07-05 pylint from 2.8.3 to 2.9.3 on 2021-07-05 snakemake from 6.5.1 to 6.5.2 on 2021-07-05 checkov from 2.0.232 to 2.0.250 on 2021-07-05 terrascan from 1.7.0 to 1.8.0 on 2021-07-05 checkov from 2.0.250 to 2.0.251 on 2021-07-05","title":"[4.37.0] - 2021-07-05"},{"location":"CHANGELOG/#4360-2021-06-22","text":"Fix Phive (php package manager) installation Fix dependency error with importlib_metadata before build Linter versions upgrades clj-kondo from 2021.04.23 to 2021.06.18 on 2021-06-22 cfn-lint from 0.50.0 to 0.51.0 on 2021-06-22 hadolint from 2.4.1 to 2.5.0 on 2021-06-22 dotenv-linter from 3.0.0 to 3.1.0 on 2021-06-22 golangci-lint from 1.40.1 to 1.41.1 on 2021-06-22 npm-groovy-lint from 8.1.0 to 8.2.0 on 2021-06-22 htmlhint from 0.14.2 to 0.15.1 on 2021-06-22 eslint from 7.28.0 to 7.29.0 on 2021-06-22 eslint-plugin-jsonc from 1.2.1 to 1.3.1 on 2021-06-22 phpstan from 0.12.88 to 0.12.90 on 2021-06-22 isort from 5.8.0 to 5.9.1 on 2021-06-22 clippy from 0.1.52 to 0.1.53 on 2021-06-22 snakefmt from 0.4.0 to 0.4.1 on 2021-06-22 cspell from 5.6.0 to 5.6.6 on 2021-06-22 sqlfluff from 0.5.6 to 0.6.0 on 2021-06-22 terraform-fmt from Terraform.v0.15.5 to Terraform.v1.0.0 on 2021-06-22 terragrunt from 0.29.8 to 0.30.7 on 2021-06-22 terrascan from 1.6.0 to 1.7.0 on 2021-06-22 tflint from 0.29.0 to 0.29.1 on 2021-06-22","title":"[4.36.0] - 2021-06-22"},{"location":"CHANGELOG/#4350-2021-06-12","text":"Fix #304 : Display error message when docker is not found when running mega-linter-runner Calculate sum of docker pulls for main page counter badge Check _RULES_PATH for active_only_if_file_found check ( #418 , by Omeed Musavi ) Upgrade clj-kondo 2021.04.23-alpine Upgrade to python:3.9.5-alpine Partial fix #481 : Allow applying fixes on push events ( PR487 by V\u00edt Ku\u010dera ) Fix build.sh on windows Add trivy security check of all built MegaLinter docker images Linter versions upgrades terragrunt from 0.29.2 to 0.29.3 on 2021-05-16 shfmt from 3.2.4 to 3.3.0 on 2021-05-18 phpstan from 0.12.87 to 0.12.88 on 2021-05-18 cfn-lint from 0.49.1 to 0.49.2 on 2021-05-19 cpplint from 1.5.4 to 1.5.5 on 2021-05-21 scalafix from 0.9.27 to 0.9.28 on 2021-05-21 snakemake from 6.3.0 to 6.4.0 on 2021-05-21 terraform-fmt from Terraform.v0.15.3 to Terraform.v0.15.4 on 2021-05-21 terragrunt from 0.29.3 to 0.29.4 on 2021-05-21 sfdx-scanner-apex from 2.8.0 to 2.9.1 on 2021-05-22 sfdx-scanner-aura from 2.8.0 to 2.9.1 on 2021-05-22 sfdx-scanner-lwc from 2.8.0 to 2.9.1 on 2021-05-22 jscpd from 3.3.25 to 3.3.26 on 2021-05-24 eslint from 7.26.0 to 7.27.0 on 2021-05-24 clj-kondo from 2021.02.13 to 2021.04.23 on 2021-05-24 terragrunt from 0.29.4 to 0.29.5 on 2021-05-24 snakemake from 6.4.0 to 6.4.1 on 2021-05-28 terragrunt from 0.29.5 to 0.29.6 on 2021-05-28 terragrunt from 0.29.6 to 0.29.7 on 2021-05-29 cspell from 4.1.3 to 5.5.2 on 2021-05-30 checkstyle from 8.42 to 8.43 on 2021-05-30 scalafix from 0.9.28 to 0.9.29 on 2021-05-30 pylint from 2.8.2 to 2.8.3 on 2021-06-01 cfn-lint from 0.49.2 to 0.50.0 on 2021-06-04 terraform-fmt from Terraform.v0.15.4 to Terraform.v0.15.5 on 2021-06-04 terragrunt from 0.29.7 to 0.29.8 on 2021-06-04 eslint from 7.27.0 to 7.28.0 on 2021-06-05 prettier from 2.3.0 to 2.3.1 on 2021-06-07 protolint from 0.31.0 to 0.32.0 on 2021-06-07 cspell from 5.5.2 to 5.6.0 on 2021-06-07 sql-lint from 0.0.17 to 0.0.18 on 2021-06-07 tflint from 0.28.1 to 0.29.0 on 2021-06-07","title":"[4.35.0] - 2021-06-12"},{"location":"CHANGELOG/#4340-2021-04-30","text":"Fix bug in MegaLinter plugins installation (related to #PR403 ) Linter versions upgrades sqlfluff from 0.5.3 to 0.5.5 on 2021-05-14 hadolint from 2.4.0 to 2.4.1 on 2021-05-15 golangci-lint from 1.40.0 to 1.40.1 on 2021-05-15 sqlfluff from 0.5.5 to 0.5.6 on 2021-05-15","title":"[4.34.0] - 2021-04-30"},{"location":"CHANGELOG/#4330-2021-04-30","text":"Split Salesforce sfdx-scanner into pmd, eslint aura and eslint lwc Linter versions upgrades snakemake from 6.1.1 to 6.1.2 on 2021-04-20 stylelint from 13.12.0 to 13.13.0 on 2021-04-25 hadolint from 2.2.0 to 2.3.0 on 2021-04-25 eslint from 7.24.0 to 7.25.0 on 2021-04-25 pylint from 2.7.4 to 2.8.0 on 2021-04-25 snakemake from 6.1.2 to 6.2.1 on 2021-04-25 terrascan from 1.4.0 to 1.5.0 on 2021-04-25 checkstyle from 8.41.1 to 8.42 on 2021-04-25 pylint from 2.8.0 to 2.8.1 on 2021-04-25 tflint from 0.27.0 to 0.28.0 on 2021-04-25 pylint from 2.8.1 to 2.8.2 on 2021-04-27 cfn-lint from 0.48.3 to 0.49.0 on 2021-04-28 phpstan from 0.12.84 to 0.12.85 on 2021-04-28 terragrunt from 0.28.21 to 0.29.0 on 2021-04-28 snakemake from 6.2.1 to 6.3.0 on 2021-04-30 terrascan from 1.5.0 to 1.5.1 on 2021-04-30","title":"[4.33.0] - 2021-04-30"},{"location":"CHANGELOG/#4320-2021-04-20","text":"Fix #376 : Link-title to license Add support from prettier as JSON formatter ( #421 , by Omeed Musavi Linter versions upgrades phpstan from 0.12.82 to 0.12.83 on 2021-04-03 markdown-table-formatter from 1.0.4 to 1.1.0 on 2021-04-05 tflint from 0.25.0 to 0.26.0 on 2021-04-05 sqlfluff from 0.4.1 to 0.5.0 on 2021-04-06 cfn-lint from 0.48.1 to 0.48.2 on 2021-04-07 yamllint from 1.26.0 to 1.26.1 on 2021-04-07 snakemake from 6.1.0 to 6.1.1 on 2021-04-08 terragrunt from 0.28.16 to 0.28.19 on 2021-04-09 phpcs from 3.5.8 to 3.6.0 on 2021-04-09 eslint from 7.23.0 to 7.24.0 on 2021-04-10 sqlfluff from 0.5.0 to 0.5.1 on 2021-04-10 protolint from 0.30.1 to 0.31.0 on 2021-04-11 sqlfluff from 0.5.1 to 0.5.2 on 2021-04-11 sfdx-scanner from 2.7.0 to 2.8.0 on 2021-04-14 terragrunt from 0.28.19 to 0.28.21 on 2021-04-15 cfn-lint from 0.48.2 to 0.48.3 on 2021-04-17 flake8 from 3.9.0 to 3.9.1 on 2021-04-17 tflint from 0.26.0 to 0.27.0 on 2021-04-19 hadolint from 2.1.0 to 2.2.0 on 2021-04-19 phpstan from 0.12.83 to 0.12.84 on 2021-04-19 shellcheck from 0.7.1 to 0.7.2 on 2021-04-19","title":"[4.32.0] - 2021-04-20"},{"location":"CHANGELOG/#4310-2021-04-03","text":"Keep license pre-formatted in docs Use Python virtual-environment in dev-dependencies shell example Fix #367 : Display editorconfig-checker version Fix #379 : New configuration FAIL_IF_MISSING_LINTER_IN_FLAVOR Linter versions upgrades flake8 from 3.8.4 to 3.9.0 on 2021-03-15 ktlint from 0.40.0 to 0.41.0 on 2021-03-21 phpstan from 0.12.81 to 0.12.82 on 2021-03-21 isort from 5.7.0 to 5.8.0 on 2021-03-21 sfdx-scanner from 2.6.0 to 2.7.0 on 2021-03-21 sql-lint from 0.0.15 to 0.0.16 on 2021-03-21 swiftlint from 0.43.0 to 0.43.1 on 2021-03-21 editorconfig-checker from 0.0.0 to 2.3.4 on 2021-03-22 ktlint from 0.41.0 to 0.40.0 on 2021-03-22 cfn-lint from 0.47.2 to 0.48.1 on 2021-03-30 coffeelint from 4.1.3 to 4.1.4 on 2021-03-30 hadolint from 1.23.0 to 2.0.0 on 2021-03-30 golangci-lint from 1.38.0 to 1.39.0 on 2021-03-30 checkstyle from 8.41 to 8.41.1 on 2021-03-30 eslint from 7.22.0 to 7.23.0 on 2021-03-30 kubeval from 0.15.0 to 0.16.1 on 2021-03-30 perlcritic from 1.138 to 1.140 on 2021-03-30 pylint from 2.7.2 to 2.7.4 on 2021-03-30 clippy from 0.0.212 to 0.1.51 on 2021-03-30 scalafix from 0.9.26 to 0.9.27 on 2021-03-30 terragrunt from 0.28.9 to 0.28.16 on 2021-03-30 kubeval from 0.16.0 to 0.16.1 on 2021-03-30 pylint from 2.7.3 to 2.7.4 on 2021-03-30 editorconfig-checker from 2.3.4 to 2.3.5 on 2021-03-31 hadolint from 2.0.0 to 2.1.0 on 2021-04-02 snakemake from 6.0.5 to 6.1.0 on 2021-04-02","title":"[4.31.0] - 2021-04-03"},{"location":"CHANGELOG/#4300-2021-03-14","text":"Fix #361 - Not respecting *_DISABLE_ERRORS: false New variable FORMATTERS_DISABLE_ERRORS to force all formatters to be blocking if errors are found Add *.svg in .jscpd (copy-paste detector) default ignore paths Linter versions upgrades cfn-lint from 0.47.1 to 0.47.2 on 2021-03-13 eslint from 7.21.0 to 7.22.0 on 2021-03-13 eslint-plugin-jsonc from 1.1.0 to 1.2.1 on 2021-03-14","title":"[4.30.0] - 2021-03-14"},{"location":"CHANGELOG/#4290-2021-03-12","text":"Fix regex to list Salesforce errors Fix Updated Files Reporter when MegaLinter is not running on GitHub Action Fix #359 - invalid literal with _DISABLE_ERRORS_IF_LESS_THAN Linter versions upgrades clj-kondo from 2021.01.20 to 2021.02.13 on 2021-03-01 jscpd from 3.3.24 to 3.3.25 on 2021-03-06 hadolint from 1.22.1 to 1.23.0 on 2021-03-06 golangci-lint from 1.37.1 to 1.38.0 on 2021-03-06 markdownlint from 0.26.0 to 0.27.1 on 2021-03-06 snakemake from 6.0.0 to 6.0.2 on 2021-03-06 sqlfluff from 0.4.0 to 0.4.1 on 2021-03-06 swiftlint from 0.42.0 to 0.43.0 on 2021-03-06 terrascan from 1.3.3 to 1.4.0 on 2021-03-06 stylelint from 13.11.0 to 13.12.0 on 2021-03-06 tflint from 0.24.1 to 0.25.0 on 2021-03-06 shfmt from 3.2.2 to 3.2.4 on 2021-03-10 cfn-lint from 0.46.0 to 0.47.0 on 2021-03-10 git_diff from 2.30.1 to 2.30.2 on 2021-03-10 phpstan from 0.12.80 to 0.12.81 on 2021-03-10 protolint from 0.29.0 to 0.30.1 on 2021-03-10 snakefmt from 0.3.1 to 0.4.0 on 2021-03-10 snakemake from 6.0.2 to 6.0.3 on 2021-03-10 cfn-lint from 0.47.0 to 0.47.1 on 2021-03-12 powershell from 7.1.2 to 7.1.3 on 2021-03-12 snakemake from 6.0.3 to 6.0.5 on 2021-03-12 terragrunt from 0.28.6 to 0.28.9 on 2021-03-12","title":"[4.29.0] - 2021-03-12"},{"location":"CHANGELOG/#4280-2021-03-01","text":"Feature: _DISABLE_ERRORS_IF_LESS_THAN : set linter status to warning if maximum allowed errors is not reached Add colors in logs Linter versions upgrades pylint from 2.6.0 to 2.6.2 on 2021-02-16 golangci-lint from 1.36.0 to 1.37.0 on 2021-02-19 phpstan from 0.12.76 to 0.12.77 on 2021-02-19 sfdx-scanner from 2.5.1 to 2.6.0 on 2021-02-19 terragrunt from 0.28.2 to 0.28.6 on 2021-02-19 terrascan from 1.3.2 to 1.3.3 on 2021-02-19 stylelint from 13.10.0 to 13.11.0 on 2021-02-21 golangci-lint from 1.37.0 to 1.37.1 on 2021-02-21 phpstan from 0.12.77 to 0.12.78 on 2021-02-21 pylint from 2.6.2 to 2.7.0 on 2021-02-22 cfn-lint from 0.45.0 to 0.46.0 on 2021-02-24 pylint from 2.7.0 to 2.7.1 on 2021-02-24 eslint-plugin-jsonc from 0.9.0 to 1.0.0 on 2021-02-25 phpstan from 0.12.78 to 0.12.79 on 2021-02-25 protolint from 0.28.2 to 0.29.0 on 2021-02-25 jscpd from 3.3.23 to 3.3.24 on 2021-02-28 eslint from 7.20.0 to 7.21.0 on 2021-02-28 scalafix from 0.9.25 to 0.9.26 on 2021-02-28 snakemake from 5.32.2 to 6.0.0 on 2021-02-28 checkstyle from 8.40 to 8.41 on 2021-03-01 eslint-plugin-jsonc from 1.0.0 to 1.1.0 on 2021-03-01 phpstan from 0.12.79 to 0.12.80 on 2021-03-01 pylint from 2.7.1 to 2.7.2 on 2021-03-01 clj-kondo from 2021.01.20 to 2021.02.13 on 2021-03-01","title":"[4.28.0] - 2021-03-01"},{"location":"CHANGELOG/#4270-2021-02-16","text":"Linters Format YAML with prettier Core Lint docker image using Dockle Fixes Fix ansible-lint test cases for new version Update --help expected return code for shfmt ash formatter and revive go linter Add --write to update files fixed by eslint Pimp MegaLinter sources by adding newLines when missing (manually and from build.py) + fix logger initialization error + call python3 by default ( PR329 by Tom Klingenberg ) Increase max line length to 500 in yaml-lint default configuration Linter versions upgrades ansible-lint from 4.2.0 to 5.0.0 on 2021-02-09 bash-exec from 5.0.17 to 5.1.0 on 2021-02-09 cfn-lint from 0.44.6 to 0.44.7 on 2021-02-09 hadolint from 1.21.0 to 1.22.1 on 2021-02-09 git_diff from 2.26.2 to 2.30.1 on 2021-02-09 php from 7.3.26 to 7.4.15 on 2021-02-09 phpstan from 0.12.71 to 0.12.74 on 2021-02-09 protolint from 0.28.0 to 0.28.2 on 2021-02-09 lintr from 2.0.1.9000 to 0.0.0 on 2021-02-09 snakemake from 5.32.0 to 5.32.1 on 2021-02-09 terragrunt from 0.27.1 to 0.28.2 on 2021-02-09 ansible-lint from 5.0.0 to 0.0.0 on 2021-02-09 dotnet-format from 4.1.131201 to 5.0.211103 on 2021-02-12 stylelint from 13.9.0 to 13.10.0 on 2021-02-12 phpstan from 0.12.74 to 0.12.75 on 2021-02-12 powershell from 7.0.4 to 7.1.2 on 2021-02-12 snakemake from 5.32.1 to 5.32.2 on 2021-02-12 coffeelint from 4.1.2 to 4.1.3 on 2021-02-14 eslint from 7.19.0 to 7.20.0 on 2021-02-14 phpstan from 0.12.75 to 0.12.76 on 2021-02-14 black from 19.10 to 20.8 on 2021-02-15 snakefmt from 0.2.6 to 0.3.0 on 2021-02-15 sqlfluff from 0.3.6 to 0.4.0 on 2021-02-15 cfn-lint from 0.44.7 to 0.45.0 on 2021-02-16 snakefmt from 0.3.0 to 0.3.1 on 2021-02-16","title":"[4.27.0] - 2021-02-16"},{"location":"CHANGELOG/#4262-2021-01-29","text":"Linter versions upgrades shfmt from 3.2.1 to 3.2.2 on 2021-01-30 yamllint from 1.25.0 to 1.26.0 on 2021-01-30 hadolint from 1.20.0 to 1.21.0 on 2021-02-02 checkstyle from 8.39 to 8.40 on 2021-02-02 eslint from 7.18.0 to 7.19.0 on 2021-02-02 phpstan from 0.12.70 to 0.12.71 on 2021-02-02 tflint from 0.23.1 to 0.24.1 on 2021-02-02 cfn-lint from 0.44.5 to 0.44.6 on 2021-02-03 terrascan from 1.3.1 to 1.3.2 on 2021-02-04","title":"[4.26.2] - 2021-01-29"},{"location":"CHANGELOG/#4261-2021-01-29","text":"Fixes Prevent unexpected token error using mega-linter-runner on old versions of node #293 Fix CI for PR from forked repositories #295 Fix crash when .cspell.json is not parseable (wrong JSON format) #311 Add java in salesforce flavor descriptor because it is used by Apex PMD Linter versions upgrades phpstan from 0.12.68 to 0.12.69 on 2021-01-24 cfn-lint from 0.44.4 to 0.44.5 on 2021-01-25 golangci-lint from 1.35.2 to 1.36.0 on 2021-01-27 protolint from 0.27.0 to 0.28.0 on 2021-01-27 hadolint from 1.19.0 to 1.20.0 on 2021-01-28 phpstan from 0.12.69 to 0.12.70 on 2021-01-28 clj-kondo from 2020.09.09 to 2021.01.20 on 2021-01-28","title":"[4.26.1] - 2021-01-29"},{"location":"CHANGELOG/#4260-2021-01-24","text":"Core architecture Manage remote mega-linter.yml configuration files New property EXTENDS , allowing to inherit from remote mega-linter.yml configuration files Add docker-in-docker management (reuse running docker instance) Allow to skip auto apply fixes with commit or PR if latest commit text contains skip fix Provide new issue link to create a new flavor to improve performances Linters Add revive GO linter Add SwiftLint for Swift language New MegaLinter flavor swift Get correct version for eslint-plugin-jsonc Linter versions upgrades snakefmt from 0.2.5 to 0.2.6 on 2021-01-22 terrascan from 1.3.0 to 1.3.1 on 2021-01-22 eslint-plugin-jsonc from 6.14.10 to 0.9.0 on 2021-01-24","title":"[4.26.0] - 2021-01-24"},{"location":"CHANGELOG/#4250-2021-01-22","text":"Linters Add SQL linter sqlfluff Fixes #269 eslint: .eslintrc.yml is considered as found whereas it's not located in workspace root Linter versions upgrades stylelint from 13.8.0 to 13.9.0 on 2021-01-19 markdown-table-formatter from 1.0.1 to 1.0.4 on 2021-01-19 terrascan from 1.2.0 to 1.3.0 on 2021-01-19 cfn-lint from 0.44.3 to 0.44.4 on 2021-01-19 powershell from 7.1.1 to 7.0.4 on 2021-01-19 sfdx-scanner from 2.4.0 to 2.5.1 on 2021-01-21 terragrunt from 0.26.7 to 0.27.1 on 2021-01-22","title":"[4.25.0] - 2021-01-22"},{"location":"CHANGELOG/#4241-2021-01-19","text":"mega-linter-runner --install Create .jscpd.json file if copy-paste detection is activated Display ending message Fixes #266 : shfmt error in python flavor, and reactivate BASH_SHFMT and DOCKERFILE_HADOLINT for own sources linting) Linter versions upgrades powershell from 7.1.0 to 7.1.1 on 2021-01-15 eslint from 7.17.0 to 7.18.0 on 2021-01-16 eslint-plugin-jsonc from 7.17.0 to 7.18.0 on 2021-01-16 scalafix from 0.9.24 to 0.9.25 on 2021-01-16 snakemake from 5.31.1 to 5.32.0 on 2021-01-16 protolint from 0.26.1 to 0.27.0 on 2021-01-18 phpstan from 0.12.67 to 0.12.68 on 2021-01-19","title":"[4.24.1] - 2021-01-19"},{"location":"CHANGELOG/#4240-2021-01-14","text":"Linters Add markdown-table-formatter Fix python error when CSpell found no errors Linter versions upgrades v8r from 0.4.0 to 0.5.0 on 2021-01-14 phpstan from 0.12.66 to 0.12.67 on 2021-01-14 psalm from 4.3.1 to Psalm.4.x-dev@ on 2021-01-14","title":"[4.24.0] - 2021-01-14"},{"location":"CHANGELOG/#4233-2021-01-14","text":"Fix .cspell.json file updater Linter versions upgrades v8r from 0.4.0 to 0.5.0 on 2021-01-14","title":"[4.23.3] - 2021-01-14"},{"location":"CHANGELOG/#4232-2021-01-14","text":"mega-linter-runner --install: Fix .mega-linter.yml DISABLE property when nothing in it Add default .cspell.json if spelling mistakes detector is activated","title":"[4.23.2] - 2021-01-14"},{"location":"CHANGELOG/#4231-2021-01-12","text":"Core Refactor part of Linter & reporters to manage correctly logs when linter cli_lint_mode is project or list_of_files Generate ConsoleLinter and Text reports based from Linter.files_lint_results instead of at each loop When TAP Reporter active, switch linters with cli_lint_mode == \"list_of_files\" to \"files\" Fix linter output when cli_lint_mode == \"list_of_files\" Decrease number of Dockerfile steps","title":"[4.23.1] - 2021-01-12"},{"location":"CHANGELOG/#4230-2021-01-12","text":"Core If the linter is a formatter, errors are not considered as blocking errors by default Linters Add prettier to format Javascript and Typescript. standard remains default Add remark-lint to check and fix Markdown files. markdownlint remains default Linter versions upgrades golangci-lint from 1.35.1 to 1.35.2 on 2021-01-11 golangci-lint from 1.35.0 to 1.35.1 on 2021-01-11 golangci-lint from 1.34.1 to 1.35.0 on 2021-01-08 cfn-lint from 0.44.2 to 0.44.3 on 2021-01-09 tflint from 0.23.0 to 0.23.1 on 2021-01-10 dotenv-linter from 2.2.1 to 3.0.0 on 2021-01-11 Update MegaLinter to call dotenv-linter v3 with fix and not --fix anymore phpstan from 0.12.65 to 0.12.66 on 2021-01-11","title":"[4.23.0] - 2021-01-12"},{"location":"CHANGELOG/#4221-2021-01-07","text":"Core Improve warning status in logs Remove timestamp at each log line Enhance integration with GitLab CI Update configuration generator Update core to clean logs when in GitLab CI context","title":"[4.22.1] - 2021-01-07"},{"location":"CHANGELOG/#4220-2021-01-06","text":"Core Allow user to configure custom scripts in .mega-linter.yml to run before and after linting, with variables PRE_RUN and POST_RUN Fix wrong linter status bug Enhance configuration variables performances Rename XXX_FILE_NAME into XXX_CONFIG_FILE Linters Add JSONC (json with comments) linting with eslint-plugin-jsonc","title":"[4.22.0] - 2021-01-06"},{"location":"CHANGELOG/#4210-2021-01-03","text":"Linters Add misspell spell checker Allow to define cli_lint_errors_regex in descriptors to extract number of errors from linter output stdout Call linters CLIs with list of files instead of once by file, to improve performances eslint markdownlint pylint flake8 isort Core Implement architecture for MegaLinter plugins Count number of errors in linter logs with regexes ( cli_lint_errors_count and cli_lint_errors_regex in descriptor files) Cleanup unused legacy from Super-Linter Reports Better icons for Console, GitHub Comment and Text reporters: \u2705 \u274c Documentation Add Install button for VsCode IDE extensions when available Add Install button for JetBrains IDEs extensions when available Add a new page All linters listing all linters and references to MegaLinter in their documentation Add json-schema documentation generation and references CI Use quick build and TEST_KEYWORDS in commit messages, to improve contributor experience Fixes Upgrade .tflint default config to work with new tflint version","title":"[4.21.0] - 2021-01-03"},{"location":"CHANGELOG/#4200-2020-12-28","text":"Flavors Add ci_light flavor for only CI config files (Dockerfile,Jenkinsfile,JSON,YAML,XML) Add salesforce flavor for Salesforce projects (DX or Metadata) If all required linters are not in the current flavor, just skip them with a warning message Core Add Json Schema for descriptors (allows validation and auto-completion from IDEs) Add Json Schema for .mega-linter.yml configuration files","title":"[4.20.0] - 2020-12-28"},{"location":"CHANGELOG/#4190-2020-12-27","text":"Installation Add a yeoman generator in mega-linter-runner to initialize configuration in a repository: npx mega-linter-runner --install Linters New linter v8r to validate json and yaml files with schemastore.org","title":"[4.19.0] - 2020-12-27"},{"location":"CHANGELOG/#4180-2020-12-23","text":"Core Do not suggest flavors when MegaLinter validates only the diff files ( VALIDATE_ALL_CODE_BASE: false ) Fix ConsoleReporter active linters table content Check if linter is able to fix before flagging it as a fixing linter during runtime Flavors New flavor: documentation Reporters Support GitHub Enterprise for GitHub Comment Reporter Support GitHub Enterprise for GitHub Status Reporter Doc Add docker pulls badge in flavors documentation Generate list of references to MegaLinter","title":"[4.18.0] - 2020-12-23"},{"location":"CHANGELOG/#4170-2020-12-18","text":"Core Allow to use remote linters configuration files with LINTER_RULES_PATH Add .jekyll-cache in the list of ignored folders by default Arrange display of Flavor suggestions (text and order) in reporter logs Build Dynamically generate (build.py) the list of flavors in github actions workflows Doc Reorganize online documentation menus Linters Add new linter git_diff to check for git conflicts markers Fix rakudo installation Fix phpstan installation","title":"[4.17.0] - 2020-12-18"},{"location":"CHANGELOG/#4160-2020-12-14","text":"Flavored MegaLinters Generate lightweight docker images to improve MegaLinter performances on some language based projects During MegaLinter run, suggest user to use a flavor and write it in reporters Update descriptor YML files to define flavours Update build.py to create one Dockerfile by MegaLinter flavour & flavors documentation New GHA workflows to build all flavoured MegaLinters when pushing in master Fixes Output reporter problems as warnings Do not make MegaLinter fail in case GitHubStatusReporter fails Doc Rename \"index\" pages into more meaningful labels","title":"[4.16.0] - 2020-12-14"},{"location":"CHANGELOG/#4150-2020-12-13","text":"Add Vue.js linting (eslint-plugin-vue added in dependencies) Configuration parameters changes: Change config setting logic: EXCLUDED_DIRECTORIES is now replacing original directory list instead of extending it Add config setting: ADDITIONAL_EXCLUDED_DIRECTORIES extends EXCLUDED_DIRECTORIES directory list Add config setting: &lt;LINTER_KEY&gt;_FILE_EXTENSIONS to override corresponding value from linter descriptor file Add config setting: &lt;LINTER_KEY&gt;_FILE_NAMES_REGEX to override corresponding value from linter descriptor file Descriptor yaml schema changes: Rename files_names_not_ends_with to file_names_not_ends_with Rename files_names to files_names_regex and change behavior to expect regular expressions in the list. They are applied using full match (i.e. the whole text should match the regular expression) Fix error message from Email Reporter when SMTP password is not set Fix automerge action yml (skip if secrets.PAT is not set) Improve caching of compiled regular expressions Override mkdocs theme to make analytics work CI Auto update linters and documentation: Create update PR only if linter versions has been updated Build and deploy docker images only when it is relevant (not in case of just documentation update for example)","title":"[4.15.0] - 2020-12-13"},{"location":"CHANGELOG/#4142-2020-12-07","text":"Quick fix Github Comment Reporter Reorder linters for reports","title":"[4.14.2] - 2020-12-07"},{"location":"CHANGELOG/#4141-2020-12-07","text":"Fixes Fix python error when File.io does not respond, + harmonize reporter logs","title":"[4.14.1] - 2020-12-07"},{"location":"CHANGELOG/#4140-2020-12-07","text":"Linters Add Salesforce linter: sfdx-scanner Core architecture Allow to call extra commands to build help content","title":"[4.14.0] - 2020-12-07"},{"location":"CHANGELOG/#4130-2020-12-05","text":"Major updates in online documentation generation Reorganize TOC Generate individual pages from README sections and update their internal links targets Open external links in a new browser tab New configuration parameters Allow disabling printing alpaca image to console using PRINT_ALPACA config parameter Support list of additional excluded directory basenames via EXCLUDED_DIRECTORIES configuration parameter New reporters: Email reporter, to send mega-linter reports by mail if smtp server is configured File.io reporter, to access reports with a file.io hyperlink Fixes Fix markdown comments generator when build on Windows Fix terrascan unit test case Run some actions/steps only when PR is from same repository Add comments in markdown generated by build.py Fix boolean variables not taken in account in .mega-linter.yml config file Performance Change way to install linters in Dockerfile (replace FROM ... COPY) by package or sh installation, to reduce the docker build steps from 93 to 87 shellcheck editorconfig-checker dotenv-linter golangci-lint kubeval","title":"[4.13.0] - 2020-12-05"},{"location":"CHANGELOG/#4120-2020-11-29","text":"Performances Update default workflow to get ride of has_updates action (replace by output has_updated_files from mega-linter github action) Avoid duplicate runs in mega-linter.yml template and internal workflows, using skip-duplicate-actions Give a proper name to each internal workflow Fix issue about mkdirs failing","title":"[4.12.0] - 2020-11-29"},{"location":"CHANGELOG/#4110-2020-11-29","text":"Manage parallel processing of linters to improve performances","title":"[4.11.0] - 2020-11-29"},{"location":"CHANGELOG/#4101-2020-11-28","text":"Fallback to default behaviours instead of crashes when git not available mega-linter-runner Allow to send env parameters to mega-linter-runner cli Add examples in documentation Publish mega-linter-runner beta version when pushing in master branch","title":"[4.10.1] - 2020-11-28"},{"location":"CHANGELOG/#4100-2020-11-23","text":"Add link to linters rules index in documentation Remove ANSI color codes from log files Add performances by linter in console log New option SHOW_ELAPSED_TIME , allowing the number of seconds elapsed by linter in reports NPM package MegaLinter runner runs MegaLinter locally, using .mega-linter.yml configuration (requires docker installed on your computer) test cases added in CI","title":"[4.10.0] - 2020-11-23"},{"location":"CHANGELOG/#490-2020-11-23","text":"Core Allow configuration to be defined in a .mega-linter.yml file Linters Add Gherkin (Cucumber language) & gherkin-lint Add RST linter : rst-lint Add RST linter : rstcheck Add RST formatter : rstfmt Activate formatting for BASH_SHFMT Activate formatting for SNAKEMAKE_SNAKEFMT JsCpd: remove copy-paste HTML folder when no abuse copy-paste has been found Logs Store log files as artifacts during test cases Add examples of success and failed linter logs in documentation Remove /tmp/lint and /github/workspace from log files Documentation Add list of supported IDE in each linter documentation Generate GitHub card on linter doc when available Store link preview info during build","title":"[4.9.0] - 2020-11-23"},{"location":"CHANGELOG/#480-2020-11-17","text":"New reporter: Updated sources","title":"[4.8.0] - 2020-11-17"},{"location":"CHANGELOG/#471-2020-11-16","text":"Activate auto-fix for Groovy","title":"[4.7.1] - 2020-11-16"},{"location":"CHANGELOG/#470-2020-11-16","text":"Update markdown-link-check default config Add tip in documentation about .cspell.json generated by MegaLinter Remove /tmp/lint from logs Improve summary table for linters in project mode (all project linted in one call, not one file by one file) Add Reporters in documentation, with screenshots New MegaLinter variables to activate/deactivate/configure reporters","title":"[4.7.0] - 2020-11-16"},{"location":"CHANGELOG/#460-2020-11-13","text":"Automatic build of documentation with mkdocs-material Automatic deployment to https://megalinter.github.io/ Add markdown-link-check","title":"[4.6.0] - 2020-11-13"},{"location":"CHANGELOG/#450-2020-11-11","text":"Add Visual Basic .NET language & dotnet-format Refactor removal of arguments for formatters (from custom class to Linter generic class) Perl: lint files with no extension containing Perl shebang Add automerge for PR issues from linter versions updates Fix ignored root files issue","title":"[4.5.0] - 2020-11-11"},{"location":"CHANGELOG/#440-2020-11-05","text":"Add Python iSort Quick fix \"PR Comment\" reporter (orange light emoji) Refresh fork","title":"[4.4.0] - 2020-11-05"},{"location":"CHANGELOG/#432-2020-11-04","text":"Add spell checker cspell Add Github Action Workflow to automatically: update linters dependencies rebuild MegaLinter documentation create a PR with updates Apply fixes performed by linters: User configuration (APPLY_FIXES vars) Descriptors configuration: cli_lint_fix_arg_name set on linter in YML when it can format and/or auto-fix issues Provide fixed files info in reports Test cases for all fixable file types: sample_project_fixes Generate README linters table with column \"Fix\" Provide fix capability in linters docs Update Workflows YMLs to create PR or commit to apply fixes Core Archi: All linters now have a name different than descriptor_id replace calls from os.path.exists to os.path.isfile and os.path.isdir Other: fix Phive install Upgrade linter versions & help","title":"[4.3.2] - 2020-11-04"},{"location":"CHANGELOG/#400-2020-10-01","text":"Initial version","title":"[4.0.0] - 2020-10-01"},{"location":"all_linters/","text":"References Linter Version License Popularity Descriptors Ref URL actionlint 1.6.16 MIT ACTION Repository ansible-lint 6.7.0 GPL-3.0 ANSIBLE Repository arm-ttk N/A ARM Web Site bandit 1.7.4 Apache-2.0 PYTHON Repository bash-exec 5.1.16 BASH Web Site black 22.8.0 MIT PYTHON Repository cfn-lint 0.66.0 MIT-0 CLOUDFORMATION Repository checkmake 0.2.1 MIT MAKEFILE Repository checkov 2.1.242 Apache-2.0 REPOSITORY TERRAFORM Repository checkstyle 10.3.4 LGPL-2.1 JAVA MegaLinter reference chktex 1.7.6 LATEX Web Site clippy 0.1.64 Other RUST Repository clj-kondo 2022.09.08 EPL-1.0 CLOJURE MegaLinter reference coffeelint 5.2.10 Other COFFEE Repository cpplint 1.6.1 C CPP Web Site cspell 6.12.0 MIT SPELL MegaLinter reference dartanalyzer N/A BSD-3-Clause DART Repository devskim 0.6.9 MIT REPOSITORY Repository djlint 1.18.0 GPL-3.0 HTML Repository dotenv-linter 3.2.0 MIT ENV MegaLinter reference dotnet-format 000 MIT CSHARP VBDOTNET Repository dustilock N/A Apache-2.0 REPOSITORY Repository editorconfig-checker 2.4.0 MIT EDITORCONFIG MegaLinter reference eslint 8.24.0 MIT JAVASCRIPT JSX TSX TYPESCRIPT MegaLinter reference eslint-plugin-jsonc 2.4.0 MIT JSON MegaLinter reference flake8 5.0.4 MIT PYTHON Repository gherkin-lint N/A ISC GHERKIN Repository git_diff 2.34.4 LGPL-2.1 REPOSITORY Repository gitleaks 8.13.0 MIT REPOSITORY Repository golangci-lint 1.49.0 GPL-3.0 GO Repository goodcheck 3.1.0 MIT REPOSITORY Repository graphql-schema-linter 3.0.1 MIT GRAPHQL Pull Request hadolint 2.10.0 GPL-3.0 DOCKERFILE MegaLinter reference htmlhint 1.1.4 MIT HTML MegaLinter reference isort 5.10.1 MIT PYTHON Repository jscpd 3.3.26 MIT COPYPASTE MegaLinter reference jsonlint 11.7.0 MIT JSON Repository kics 1.6.1 Apache-2.0 TERRAFORM MegaLinter reference ktlint 0.47.1 MIT KOTLIN MegaLinter reference kubeconform 0.4.12 Other KUBERNETES Repository kubeval 0.16.1 Apache-2.0 KUBERNETES Repository lintr N/A Other R Repository luacheck 1.0.0 MIT LUA Repository markdown-link-check 3.10.3 ISC MARKDOWN MegaLinter reference markdown-table-formatter 1.4.0 MIT MARKDOWN Repository markdownlint 0.32.2 MIT MARKDOWN Repository misspell 0.3.4 MIT SPELL Repository mypy 0.981 MIT PYTHON Repository npm-groovy-lint 10.1.0 GPL-3.0 GROOVY MegaLinter reference perlcritic 1.140 Other PERL Repository phpcs 3.7.1 BSD-3-Clause PHP Repository phplint 3.0 PHP Web Site phpstan 1.8.6 MIT PHP Repository pmd 6.48.0 Apache-2.0 JAVA MegaLinter reference powershell 7.2.6 POWERSHELL Repository prettier 2.7.1 MIT JAVASCRIPT JSON TYPESCRIPT YAML Repository proselint 0.13.0 SPELL Repository protolint 0.41.0 PROTOBUF Repository psalm Psalm.5.x-dev@ MIT PHP Repository puppet-lint 2.5.2 MIT PUPPET Repository pylint 2.15.3 GPL-2.0 PYTHON Repository pyright 1.1.270 PYTHON Repository raku 2020.10 Artistic-2.0 RAKU Repository remark-lint 14.0.2 MIT MARKDOWN Repository revive N/A MIT GO Repository rst-lint 1.4.0 RST MegaLinter reference rstcheck 6.1.0 RST Pull Request rubocop 1.36.0 MIT RUBY MegaLinter reference scalafix 0.10.3 Other SCALA MegaLinter reference scss-lint 0.59.0 CSS Repository secretlint 5.2.4 MIT REPOSITORY MegaLinter reference semgrep 0.115.0 REPOSITORY Repository sfdx-scanner-apex 2.13.9 MIT SALESFORCE Pull Request sfdx-scanner-aura 2.13.9 MIT SALESFORCE Pull Request sfdx-scanner-lwc 2.13.9 MIT SALESFORCE Pull Request shellcheck 0.8.0 BASH Repository shfmt 3.6.0 BASH Repository snakefmt 0.6.1 SNAKEMAKE Repository snakemake 7.14.2 MIT SNAKEMAKE Repository spectral 5.9.2 Apache-2.0 OPENAPI Repository sql-lint 1.0.0 SQL Repository sqlfluff 1.3.2 MIT SQL Repository standard 17.0.0 MIT JAVASCRIPT TYPESCRIPT Repository stylelint 14.13.0 MIT CSS MegaLinter reference swiftlint 0.46.5 MIT SWIFT Repository syft 0.58.0 REPOSITORY Repository tekton-lint 0.6.0 TEKTON Repository terraform-fmt 1.3.1 MPL-2.0 TERRAFORM Repository terragrunt 0.39.0 MIT TERRAFORM Repository terrascan 1.15.2 Apache-2.0 TERRAFORM Repository tflint 0.41.0 TERRAFORM Repository trivy 0.29.2 Apache-2.0 REPOSITORY Repository tsqllint 1.14.5.0 MIT SQL Repository v8r 0.13.0 JSON YAML Repository xmllint 20914 XML Web Site yamllint 1.28.0 GPL-3.0 YAML Repository","title":"List of linters"},{"location":"all_linters/#references","text":"Linter Version License Popularity Descriptors Ref URL actionlint 1.6.16 MIT ACTION Repository ansible-lint 6.7.0 GPL-3.0 ANSIBLE Repository arm-ttk N/A ARM Web Site bandit 1.7.4 Apache-2.0 PYTHON Repository bash-exec 5.1.16 BASH Web Site black 22.8.0 MIT PYTHON Repository cfn-lint 0.66.0 MIT-0 CLOUDFORMATION Repository checkmake 0.2.1 MIT MAKEFILE Repository checkov 2.1.242 Apache-2.0 REPOSITORY TERRAFORM Repository checkstyle 10.3.4 LGPL-2.1 JAVA MegaLinter reference chktex 1.7.6 LATEX Web Site clippy 0.1.64 Other RUST Repository clj-kondo 2022.09.08 EPL-1.0 CLOJURE MegaLinter reference coffeelint 5.2.10 Other COFFEE Repository cpplint 1.6.1 C CPP Web Site cspell 6.12.0 MIT SPELL MegaLinter reference dartanalyzer N/A BSD-3-Clause DART Repository devskim 0.6.9 MIT REPOSITORY Repository djlint 1.18.0 GPL-3.0 HTML Repository dotenv-linter 3.2.0 MIT ENV MegaLinter reference dotnet-format 000 MIT CSHARP VBDOTNET Repository dustilock N/A Apache-2.0 REPOSITORY Repository editorconfig-checker 2.4.0 MIT EDITORCONFIG MegaLinter reference eslint 8.24.0 MIT JAVASCRIPT JSX TSX TYPESCRIPT MegaLinter reference eslint-plugin-jsonc 2.4.0 MIT JSON MegaLinter reference flake8 5.0.4 MIT PYTHON Repository gherkin-lint N/A ISC GHERKIN Repository git_diff 2.34.4 LGPL-2.1 REPOSITORY Repository gitleaks 8.13.0 MIT REPOSITORY Repository golangci-lint 1.49.0 GPL-3.0 GO Repository goodcheck 3.1.0 MIT REPOSITORY Repository graphql-schema-linter 3.0.1 MIT GRAPHQL Pull Request hadolint 2.10.0 GPL-3.0 DOCKERFILE MegaLinter reference htmlhint 1.1.4 MIT HTML MegaLinter reference isort 5.10.1 MIT PYTHON Repository jscpd 3.3.26 MIT COPYPASTE MegaLinter reference jsonlint 11.7.0 MIT JSON Repository kics 1.6.1 Apache-2.0 TERRAFORM MegaLinter reference ktlint 0.47.1 MIT KOTLIN MegaLinter reference kubeconform 0.4.12 Other KUBERNETES Repository kubeval 0.16.1 Apache-2.0 KUBERNETES Repository lintr N/A Other R Repository luacheck 1.0.0 MIT LUA Repository markdown-link-check 3.10.3 ISC MARKDOWN MegaLinter reference markdown-table-formatter 1.4.0 MIT MARKDOWN Repository markdownlint 0.32.2 MIT MARKDOWN Repository misspell 0.3.4 MIT SPELL Repository mypy 0.981 MIT PYTHON Repository npm-groovy-lint 10.1.0 GPL-3.0 GROOVY MegaLinter reference perlcritic 1.140 Other PERL Repository phpcs 3.7.1 BSD-3-Clause PHP Repository phplint 3.0 PHP Web Site phpstan 1.8.6 MIT PHP Repository pmd 6.48.0 Apache-2.0 JAVA MegaLinter reference powershell 7.2.6 POWERSHELL Repository prettier 2.7.1 MIT JAVASCRIPT JSON TYPESCRIPT YAML Repository proselint 0.13.0 SPELL Repository protolint 0.41.0 PROTOBUF Repository psalm Psalm.5.x-dev@ MIT PHP Repository puppet-lint 2.5.2 MIT PUPPET Repository pylint 2.15.3 GPL-2.0 PYTHON Repository pyright 1.1.270 PYTHON Repository raku 2020.10 Artistic-2.0 RAKU Repository remark-lint 14.0.2 MIT MARKDOWN Repository revive N/A MIT GO Repository rst-lint 1.4.0 RST MegaLinter reference rstcheck 6.1.0 RST Pull Request rubocop 1.36.0 MIT RUBY MegaLinter reference scalafix 0.10.3 Other SCALA MegaLinter reference scss-lint 0.59.0 CSS Repository secretlint 5.2.4 MIT REPOSITORY MegaLinter reference semgrep 0.115.0 REPOSITORY Repository sfdx-scanner-apex 2.13.9 MIT SALESFORCE Pull Request sfdx-scanner-aura 2.13.9 MIT SALESFORCE Pull Request sfdx-scanner-lwc 2.13.9 MIT SALESFORCE Pull Request shellcheck 0.8.0 BASH Repository shfmt 3.6.0 BASH Repository snakefmt 0.6.1 SNAKEMAKE Repository snakemake 7.14.2 MIT SNAKEMAKE Repository spectral 5.9.2 Apache-2.0 OPENAPI Repository sql-lint 1.0.0 SQL Repository sqlfluff 1.3.2 MIT SQL Repository standard 17.0.0 MIT JAVASCRIPT TYPESCRIPT Repository stylelint 14.13.0 MIT CSS MegaLinter reference swiftlint 0.46.5 MIT SWIFT Repository syft 0.58.0 REPOSITORY Repository tekton-lint 0.6.0 TEKTON Repository terraform-fmt 1.3.1 MPL-2.0 TERRAFORM Repository terragrunt 0.39.0 MIT TERRAFORM Repository terrascan 1.15.2 Apache-2.0 TERRAFORM Repository tflint 0.41.0 TERRAFORM Repository trivy 0.29.2 Apache-2.0 REPOSITORY Repository tsqllint 1.14.5.0 MIT SQL Repository v8r 0.13.0 JSON YAML Repository xmllint 20914 XML Web Site yamllint 1.28.0 GPL-3.0 YAML Repository","title":"References"},{"location":"all_users/","text":"They use MegaLinter Here is a non-exhaustive list of open-source projects that use Megalinter According to posted issues, there are many more private and self-hosted repos using MegaLinter but as we don't track them I can't provide a list :)","title":"They use MegaLinter"},{"location":"all_users/#they-use-megalinter","text":"Here is a non-exhaustive list of open-source projects that use Megalinter According to posted issues, there are many more private and self-hosted repos using MegaLinter but as we don't track them I can't provide a list :)","title":"They use MegaLinter"},{"location":"articles/","text":"Articles Limit your technical debt and secure your code base using MegaLinter , by Nicolas Vuillamy MegaLinter sells his soul and joins OX Security , by Nicolas Vuillamy Linting a Jekyll blog with MegaLinter , by Alec Johnson Node.js Coding Standard Tools with MegaLinter on Gitlab CI , by Albion Bame Open-source linters landscape in 2021 , by C\u00e9dric Teyton How to linter basic things like trailing whitespaces and newlines , by Nicolai Antiferov How to apply security at the source using GitOps , by Edu Minguez Linting - What is all the fluff about? , by Neil Shepard , University Of Sheffield Talk about the Kotlin plugins Kover, Ktlint and Detekt. Made for the AmsterdamJUG meetup. , by Simone de Gijt","title":"Articles"},{"location":"articles/#articles","text":"Limit your technical debt and secure your code base using MegaLinter , by Nicolas Vuillamy MegaLinter sells his soul and joins OX Security , by Nicolas Vuillamy Linting a Jekyll blog with MegaLinter , by Alec Johnson Node.js Coding Standard Tools with MegaLinter on Gitlab CI , by Albion Bame Open-source linters landscape in 2021 , by C\u00e9dric Teyton How to linter basic things like trailing whitespaces and newlines , by Nicolai Antiferov How to apply security at the source using GitOps , by Edu Minguez Linting - What is all the fluff about? , by Neil Shepard , University Of Sheffield Talk about the Kotlin plugins Kover, Ktlint and Detekt. Made for the AmsterdamJUG meetup. , by Simone de Gijt","title":"Articles"},{"location":"badge/","text":"Badge You can show MegaLinter status with a badge in your repository README If your main branch is main , replace main by main in URLs Markdown Format [![MegaLinter](https://github.com/<OWNER>/<REPOSITORY>/workflows/MegaLinter/badge.svg?branch=main)](https://github.com/<OWNER>/<REPOSITORY>/actions?query=workflow%3AMegaLinter+branch%3Amain) Example [![MegaLinter](https://github.com/nvuillam/npm-groovy-lint/workflows/MegaLinter/badge.svg?branch=main)](https://github.com/nvuillam/npm-groovy-lint/actions?query=workflow%3AMegaLinter+branch%3Amain) reStructuredText Format .. |MegaLinter yes| image:: https://github.com/<OWNER>/<REPOSITORY>/workflows/MegaLinter/badge.svg?branch=main :target: https://github.com/<OWNER>/<REPOSITORY>/actions?query=workflow%3AMegaLinter+branch%3Amain Example .. |MegaLinter yes| image:: https://github.com/nvuillam/npm-groovy-lint/workflows/MegaLinter/badge.svg?branch=main :target: https://github.com/nvuillam/npm-groovy-lint/actions?query=workflow%3AMegaLinter+branch%3Amain Note: IF you did not use MegaLinter as GitHub Action name, please read GitHub Actions Badges documentation","title":"Badge"},{"location":"badge/#badge","text":"You can show MegaLinter status with a badge in your repository README If your main branch is main , replace main by main in URLs","title":"Badge"},{"location":"badge/#markdown","text":"Format [![MegaLinter](https://github.com/<OWNER>/<REPOSITORY>/workflows/MegaLinter/badge.svg?branch=main)](https://github.com/<OWNER>/<REPOSITORY>/actions?query=workflow%3AMegaLinter+branch%3Amain) Example [![MegaLinter](https://github.com/nvuillam/npm-groovy-lint/workflows/MegaLinter/badge.svg?branch=main)](https://github.com/nvuillam/npm-groovy-lint/actions?query=workflow%3AMegaLinter+branch%3Amain)","title":"Markdown"},{"location":"badge/#restructuredtext","text":"Format .. |MegaLinter yes| image:: https://github.com/<OWNER>/<REPOSITORY>/workflows/MegaLinter/badge.svg?branch=main :target: https://github.com/<OWNER>/<REPOSITORY>/actions?query=workflow%3AMegaLinter+branch%3Amain Example .. |MegaLinter yes| image:: https://github.com/nvuillam/npm-groovy-lint/workflows/MegaLinter/badge.svg?branch=main :target: https://github.com/nvuillam/npm-groovy-lint/actions?query=workflow%3AMegaLinter+branch%3Amain Note: IF you did not use MegaLinter as GitHub Action name, please read GitHub Actions Badges documentation","title":"reStructuredText"},{"location":"configuration/","text":"Configuration MegaLinter configuration variables can be defined in a .mega-linter.yml file at the root of the repository or with environment variables . You can see an example config file in this repo: .mega-linter.yml Configuration is assisted with auto-completion and validation in most commonly used IDEs, thanks to JSON schema stored on schemastore.org VsCode: You need a VsCode extension like Red Hat YAML IDEA family: Auto-completion natively supported Common variables ENV VAR Default Value Notes ADDITIONAL_EXCLUDED_DIRECTORIES [] List of additional excluded directory basenames. They are excluded at any nested level. APPLY_FIXES none Activates formatting and auto-fixing (more info) CLEAR_REPORT_FOLDER false Flag to clear files from report folder (usually megalinter-reports) before starting the linting process DEFAULT_BRANCH HEAD Deprecated: The name of the repository's default branch. DEFAULT_WORKSPACE /tmp/lint The location containing files to lint if you are running locally. DISABLE_ERRORS false Flag to have the linter complete with exit code 0 even if errors were detected. DISABLE List of disabled descriptors keys (more info) DISABLE_LINTERS List of disabled linters keys (more info) DISABLE_ERRORS_LINTERS List of enabled but not blocking linters keys (more info) ENABLE List of enabled descriptors keys (more info) ENABLE_LINTERS List of enabled linters keys (more info) EXCLUDED_DIRECTORIES [...many values...] List of excluded directory basenames. They are excluded at any nested level. EXTENDS Base mega-linter.yml config file(s) to extend local configuration from. Can be a single URL or a list of .mega-linter.yml config files URLs FAIL_IF_MISSING_LINTER_IN_FLAVOR false If set to true , MegaLinter fails if a linter is missing in the selected flavor FAIL_IF_UPDATED_SOURCES false If set to true , MegaLinter fails if a linter or formatter has auto-fixed sources, even if there are no errors FILTER_REGEX_EXCLUDE none Regular expression defining which files will be excluded from linting (more info) .ex: .*src/test.* ) FILTER_REGEX_INCLUDE all Regular expression defining which files will be processed by linters (more info) .ex: .*src/.* ) FLAVOR_SUGGESTIONS true Provides suggestions about different MegaLinter flavors to use to improve runtime performances FORMATTERS_DISABLE_ERRORS true Formatter errors will be reported as errors (and not warnings) if this variable is set to false GITHUB_WORKSPACE `` Base directory for REPORT_OUTPUT_FOLDER , for user-defined linter rules location, for location of linted files if DEFAULT_WORKSPACE is not set IGNORE_GENERATED_FILES false If set to true , MegaLinter will skip files containing @generated marker but without @not-generated marker (more info at https://generated.at ) IGNORE_GITIGNORED_FILES true If set to true , MegaLinter will skip files ignored by git using .gitignore file JAVASCRIPT_DEFAULT_STYLE standard Javascript default style to check/apply. standard , prettier LINTER_RULES_PATH .github/linters Directory for all linter configuration rules. Can be a local folder or a remote URL (ex: https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules ) LOG_FILE mega-linter.log The file name for outputting logs. All output is sent to the log file regardless of LOG_LEVEL . Use none to not generate this file. LOG_LEVEL INFO How much output the script will generate to the console. One of INFO , DEBUG , WARNING or ERROR . MARKDOWN_DEFAULT_STYLE markdownlint Markdown default style to check/apply. markdownlint , remark-lint MEGALINTER_CONFIG .mega-linter.yml Name of MegaLinter configuration file. Can be defined remotely, in that case set this environment variable with the remote URL of .mega-linter.yml config file MEGALINTER_FILES_TO_LINT [] Comma-separated list of files to analyze. Using this variable will bypass other file listing methods PARALLEL true Process linters in parallel to improve overall MegaLinter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files PLUGINS [] List of plugin urls to install and run during MegaLinter run POST_COMMANDS [] Custom bash commands to run after linters PRE_COMMANDS [] Custom bash commands to run before linters PRINT_ALPACA true Enable printing alpaca image to console PRINT_ALL_FILES false Display all files analyzed by the linter instead of only the number REPORT_OUTPUT_FOLDER ${GITHUB_WORKSPACE}/megalinter-reports Directory for generating report files. Send none to not generate reports SHOW_ELAPSED_TIME false Displays elapsed time in reports SHOW_SKIPPED_LINTERS true Displays all disabled linters mega-linter could have run SKIP_CLI_LINT_MODES [] Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: file,project ). Available values: file , cli_lint_mode , project . TYPESCRIPT_DEFAULT_STYLE standard Typescript default style to check/apply. standard , prettier VALIDATE_ALL_CODEBASE true Will parse the entire repository and find all files to validate across all types. NOTE: When set to false , only new or edited files will be parsed for validation. Activation and deactivation MegaLinter have all linters enabled by default, but allows to enable only some, or disable only some If ENABLE is not set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default If ENABLE_LINTERS is set, only listed linters will be processed If DISABLE is set, the linters in the listed descriptors will be skipped If DISABLE_LINTERS is set, the listed linters will be skipped If DISABLE_ERRORS_LINTERS is set, the linter linters will be run, but if errors are found, they will be considered as non blocking Examples: Run all javascript and groovy linters except STANDARD javascript linter. DevSkim errors will be non-blocking ENABLE: JAVASCRIPT,GROOVY DISABLE_LINTERS: JAVASCRIPT_STANDARD DISABLE_ERRORS_LINTERS: REPOSITORY_DEVSKIM Run all linters except PHP linters (PHP_BUILTIN, PHP_PHPCS, PHP_PHPSTAN, PHP_PSALM) DISABLE: PHP Run all linters except PHP_PHPSTAN and PHP_PSALM linters DISABLE_LINTERS: - PHP_PHPSTAN - PHP_PSALM Filter linted files If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE You can apply filters to a single linter by defining variable <LINTER_KEY>_FILTER_REGEX_INCLUDE and <LINTER_KEY>_FILTER_REGEX_EXCLUDE Examples: Lint only src folder: FILTER_REGEX_INCLUDE: (src/) Do not lint files inside test and example folders: FILTER_REGEX_EXCLUDE: (test/|examples/) Do not lint javascript files inside test folder: FILTER_REGEX_EXCLUDE: (test/.*\\.js) Warning: not applicable with linters using CLI lint mode project ( see details ) Apply fixes Mega-linter is able to apply fixes provided by linters. To use this capability, you need 3 env variables defined at top level APPLY_FIXES : all to apply fixes of all linters, or a list of linter keys (ex: JAVASCRIPT_ES , MARKDOWN_MARKDOWNLINT ) Only for GitHub Action Workflow file if you use it: APPLY_FIXES_EVENT : all , push , pull_request , none (use none in case of use of Updated sources reporter ) APPLY_FIXES_MODE : commit to create a new commit and push it on the same branch, or pull_request to create a new PR targeting the branch. Notes: You can use Updated sources reporter if you do not want fixes to be automatically applied on git branch, but download them in a zipped file and manually extract them in your project If used, APPLY_FIXES_EVENT and APPLY_FIXES_MODE can not be defined in .mega-linter.yml config file, they must be set as environment variables If you use APPLY_FIXES , add the following line in your .gitignore file megalinter-reports/ You may see github permission errors , or workflows not run on the new commit. To solve these issues: Create Personal Access Token , then copy the PAT value Define secret variable named PAT on your repository, and paste the PAT value Linter specific variables See variables related to a single linter behavior in linters documentations Pre-commands MegaLinter can run custom commands before running linters (for example, installing an plugin required by one of the linters you use) Example in .mega-linter.yml config file PRE_COMMANDS: - command: npm install eslint-plugin-whatever cwd: \"root\" # Will be run at the root of MegaLinter docker image - command: echo \"pre-test command has been called\" cwd: \"workspace\" # Will be run at the root of the workspace (usually your repository root) Post-commands MegaLinter can run custom commands after running linters (for example, running additional tests) Example in .mega-linter.yml config file POST_COMMANDS: - command: npm run test cwd: \"workspace\" # Will be run at the root of the workspace (usually your repository root) CLI lint mode Each linter has a lint mode by default, visible in its MegaLinter documentation ( example ): list_of_files : All files are sent in single call to the linter project : The linter is called from the root of the project, without specifying any file name file : The linter is called once by file (so the performances may not be very good) You can override the CLI_LINT_MODE by using configuration variable for each linter (see linters documentation ) Linters with project default lint mode can not be overridden to list_of_files or file Special considerations: As list of files is not sent to the linter command, linters using project lint mode do not take in account some variables like FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE. For those linters, you must check their documentation to define ignore configuration as it is awaited by the linter (for example with a .secretlintignore file for secretlint)","title":"Configuration"},{"location":"configuration/#configuration","text":"MegaLinter configuration variables can be defined in a .mega-linter.yml file at the root of the repository or with environment variables . You can see an example config file in this repo: .mega-linter.yml Configuration is assisted with auto-completion and validation in most commonly used IDEs, thanks to JSON schema stored on schemastore.org VsCode: You need a VsCode extension like Red Hat YAML IDEA family: Auto-completion natively supported","title":"Configuration"},{"location":"configuration/#common-variables","text":"ENV VAR Default Value Notes ADDITIONAL_EXCLUDED_DIRECTORIES [] List of additional excluded directory basenames. They are excluded at any nested level. APPLY_FIXES none Activates formatting and auto-fixing (more info) CLEAR_REPORT_FOLDER false Flag to clear files from report folder (usually megalinter-reports) before starting the linting process DEFAULT_BRANCH HEAD Deprecated: The name of the repository's default branch. DEFAULT_WORKSPACE /tmp/lint The location containing files to lint if you are running locally. DISABLE_ERRORS false Flag to have the linter complete with exit code 0 even if errors were detected. DISABLE List of disabled descriptors keys (more info) DISABLE_LINTERS List of disabled linters keys (more info) DISABLE_ERRORS_LINTERS List of enabled but not blocking linters keys (more info) ENABLE List of enabled descriptors keys (more info) ENABLE_LINTERS List of enabled linters keys (more info) EXCLUDED_DIRECTORIES [...many values...] List of excluded directory basenames. They are excluded at any nested level. EXTENDS Base mega-linter.yml config file(s) to extend local configuration from. Can be a single URL or a list of .mega-linter.yml config files URLs FAIL_IF_MISSING_LINTER_IN_FLAVOR false If set to true , MegaLinter fails if a linter is missing in the selected flavor FAIL_IF_UPDATED_SOURCES false If set to true , MegaLinter fails if a linter or formatter has auto-fixed sources, even if there are no errors FILTER_REGEX_EXCLUDE none Regular expression defining which files will be excluded from linting (more info) .ex: .*src/test.* ) FILTER_REGEX_INCLUDE all Regular expression defining which files will be processed by linters (more info) .ex: .*src/.* ) FLAVOR_SUGGESTIONS true Provides suggestions about different MegaLinter flavors to use to improve runtime performances FORMATTERS_DISABLE_ERRORS true Formatter errors will be reported as errors (and not warnings) if this variable is set to false GITHUB_WORKSPACE `` Base directory for REPORT_OUTPUT_FOLDER , for user-defined linter rules location, for location of linted files if DEFAULT_WORKSPACE is not set IGNORE_GENERATED_FILES false If set to true , MegaLinter will skip files containing @generated marker but without @not-generated marker (more info at https://generated.at ) IGNORE_GITIGNORED_FILES true If set to true , MegaLinter will skip files ignored by git using .gitignore file JAVASCRIPT_DEFAULT_STYLE standard Javascript default style to check/apply. standard , prettier LINTER_RULES_PATH .github/linters Directory for all linter configuration rules. Can be a local folder or a remote URL (ex: https://raw.githubusercontent.com/some_org/some_repo/mega-linter-rules ) LOG_FILE mega-linter.log The file name for outputting logs. All output is sent to the log file regardless of LOG_LEVEL . Use none to not generate this file. LOG_LEVEL INFO How much output the script will generate to the console. One of INFO , DEBUG , WARNING or ERROR . MARKDOWN_DEFAULT_STYLE markdownlint Markdown default style to check/apply. markdownlint , remark-lint MEGALINTER_CONFIG .mega-linter.yml Name of MegaLinter configuration file. Can be defined remotely, in that case set this environment variable with the remote URL of .mega-linter.yml config file MEGALINTER_FILES_TO_LINT [] Comma-separated list of files to analyze. Using this variable will bypass other file listing methods PARALLEL true Process linters in parallel to improve overall MegaLinter performance. If true, linters of same language or formats are grouped in the same parallel process to avoid lock issues if fixing the same files PLUGINS [] List of plugin urls to install and run during MegaLinter run POST_COMMANDS [] Custom bash commands to run after linters PRE_COMMANDS [] Custom bash commands to run before linters PRINT_ALPACA true Enable printing alpaca image to console PRINT_ALL_FILES false Display all files analyzed by the linter instead of only the number REPORT_OUTPUT_FOLDER ${GITHUB_WORKSPACE}/megalinter-reports Directory for generating report files. Send none to not generate reports SHOW_ELAPSED_TIME false Displays elapsed time in reports SHOW_SKIPPED_LINTERS true Displays all disabled linters mega-linter could have run SKIP_CLI_LINT_MODES [] Comma-separated list of cli_lint_modes. To use if you want to skip linters with some CLI lint modes (ex: file,project ). Available values: file , cli_lint_mode , project . TYPESCRIPT_DEFAULT_STYLE standard Typescript default style to check/apply. standard , prettier VALIDATE_ALL_CODEBASE true Will parse the entire repository and find all files to validate across all types. NOTE: When set to false , only new or edited files will be parsed for validation.","title":"Common variables"},{"location":"configuration/#activation-and-deactivation","text":"MegaLinter have all linters enabled by default, but allows to enable only some, or disable only some If ENABLE is not set, all descriptors are activated by default. If set, all linters of listed descriptors will be activated by default If ENABLE_LINTERS is set, only listed linters will be processed If DISABLE is set, the linters in the listed descriptors will be skipped If DISABLE_LINTERS is set, the listed linters will be skipped If DISABLE_ERRORS_LINTERS is set, the linter linters will be run, but if errors are found, they will be considered as non blocking Examples: Run all javascript and groovy linters except STANDARD javascript linter. DevSkim errors will be non-blocking ENABLE: JAVASCRIPT,GROOVY DISABLE_LINTERS: JAVASCRIPT_STANDARD DISABLE_ERRORS_LINTERS: REPOSITORY_DEVSKIM Run all linters except PHP linters (PHP_BUILTIN, PHP_PHPCS, PHP_PHPSTAN, PHP_PSALM) DISABLE: PHP Run all linters except PHP_PHPSTAN and PHP_PSALM linters DISABLE_LINTERS: - PHP_PHPSTAN - PHP_PSALM","title":"Activation and deactivation"},{"location":"configuration/#filter-linted-files","text":"If you need to lint only a folder or exclude some files from linting, you can use optional environment parameters FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE You can apply filters to a single linter by defining variable <LINTER_KEY>_FILTER_REGEX_INCLUDE and <LINTER_KEY>_FILTER_REGEX_EXCLUDE Examples: Lint only src folder: FILTER_REGEX_INCLUDE: (src/) Do not lint files inside test and example folders: FILTER_REGEX_EXCLUDE: (test/|examples/) Do not lint javascript files inside test folder: FILTER_REGEX_EXCLUDE: (test/.*\\.js) Warning: not applicable with linters using CLI lint mode project ( see details )","title":"Filter linted files"},{"location":"configuration/#apply-fixes","text":"Mega-linter is able to apply fixes provided by linters. To use this capability, you need 3 env variables defined at top level APPLY_FIXES : all to apply fixes of all linters, or a list of linter keys (ex: JAVASCRIPT_ES , MARKDOWN_MARKDOWNLINT ) Only for GitHub Action Workflow file if you use it: APPLY_FIXES_EVENT : all , push , pull_request , none (use none in case of use of Updated sources reporter ) APPLY_FIXES_MODE : commit to create a new commit and push it on the same branch, or pull_request to create a new PR targeting the branch. Notes: You can use Updated sources reporter if you do not want fixes to be automatically applied on git branch, but download them in a zipped file and manually extract them in your project If used, APPLY_FIXES_EVENT and APPLY_FIXES_MODE can not be defined in .mega-linter.yml config file, they must be set as environment variables If you use APPLY_FIXES , add the following line in your .gitignore file megalinter-reports/ You may see github permission errors , or workflows not run on the new commit. To solve these issues: Create Personal Access Token , then copy the PAT value Define secret variable named PAT on your repository, and paste the PAT value","title":"Apply fixes"},{"location":"configuration/#linter-specific-variables","text":"See variables related to a single linter behavior in linters documentations","title":"Linter specific variables"},{"location":"configuration/#pre-commands","text":"MegaLinter can run custom commands before running linters (for example, installing an plugin required by one of the linters you use) Example in .mega-linter.yml config file PRE_COMMANDS: - command: npm install eslint-plugin-whatever cwd: \"root\" # Will be run at the root of MegaLinter docker image - command: echo \"pre-test command has been called\" cwd: \"workspace\" # Will be run at the root of the workspace (usually your repository root)","title":"Pre-commands"},{"location":"configuration/#post-commands","text":"MegaLinter can run custom commands after running linters (for example, running additional tests) Example in .mega-linter.yml config file POST_COMMANDS: - command: npm run test cwd: \"workspace\" # Will be run at the root of the workspace (usually your repository root)","title":"Post-commands"},{"location":"configuration/#cli-lint-mode","text":"Each linter has a lint mode by default, visible in its MegaLinter documentation ( example ): list_of_files : All files are sent in single call to the linter project : The linter is called from the root of the project, without specifying any file name file : The linter is called once by file (so the performances may not be very good) You can override the CLI_LINT_MODE by using configuration variable for each linter (see linters documentation ) Linters with project default lint mode can not be overridden to list_of_files or file Special considerations: As list of files is not sent to the linter command, linters using project lint mode do not take in account some variables like FILTER_REGEX_INCLUDE and FILTER_REGEX_EXCLUDE. For those linters, you must check their documentation to define ignore configuration as it is awaited by the linter (for example with a .secretlintignore file for secretlint)","title":"CLI lint mode"},{"location":"contributing/","text":"Contributing Hi there! We're thrilled that you'd like to contribute to this project. Your help is essential for keeping it great. Submitting a pull request Pull Requests are used for adding new playbooks, roles, and documents to the repository, or editing the existing ones. Pre-requisites You need Python 3 (version 3.7 minimum) and Node.js (14+) to be installed on your computer. If you have issues running Python on Windows, you can uninstall it then reinstall it using this video tutorial , then copy python.exe and name it python3.exe Run the following commands at the root of the repository to install required dev dependencies python3 -m venv .venv . .venv/bin/activate echo \".venv/\" >> .git/info/exclude python3 -m pip install -U pip python3 -m pip install -r requirements.dev.txt If it does not work, just run the following script pip install -r requirements.dev.txt pip install mkdocs-material npm install markdown-table-formatter -g Second level dev dependencies are installed by running ./build.sh which is also a test if the installation worked ./build.sh 2021-03-30 19:40:03,790 [INFO] Validating ansible.megalinter-descriptor.yml 2021-03-30 19:40:03,879 [INFO] Validating arm.megalinter-descriptor.yml ... Formatting markdown tables... Need to install the following packages: markdown-table-formatter Ok to proceed? (y) ... INFO - Documentation built in 9.76 seconds (done.) (if you have a permission denied issue on Windows, please check this solution ) With write access Clone the repository (only if you have write access) Create a new branch: git checkout -b my-branch-name Make your change Update CHANGELOG.md (the root one, not the one in /docs) Run bash build.sh to regenerate dockerfile from updated sources (run bash build.sh --doc if you want to also regenerate documentation) Push and submit a pull request Pat yourself on the back and wait for your pull request to be reviewed and merged. Without write access Fork and clone the repository Create a new branch: git checkout -b my-branch-name Make your change Update CHANGELOG.md (the root one, not the one in /docs) Run bash build.sh to regenerate dockerfile from updated sources (run bash build.sh --doc if you want to also regenerate documentation) Push to your fork and submit a pull request Pat your self on the back and wait for your pull request to be reviewed and merged. Here are a few things you can do that will increase the likelihood of your pull request being accepted: Keep your change as focused as possible. If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests. Write good commit messages . Update CHANGELOG.md to briefly describe your changes Draft pull requests are also welcome to get feedback early on, or if there is something blocking you. Create a branch with a name that identifies the user and nature of the changes (similar to user/branch-purpose ) Open a pull request Add a new linter Each linter must: Be defined in a descriptor file. Few properties are required ( see json schema documentation ), but please think to input doc URLs and ide section for documentation Have two test files in .automation/test : one for success and one for failure Then run bash build.py and it will generate all the rest ! Documentation (markdown) Dockerfile (main and flavors) Test classes Configuration JSON schema Online documentation menus CI/CT/CD The MegaLinter has CI/CT/CD configured utilizing GitHub Actions. When a branch is created and code is pushed, a GitHub Action is triggered for building the new Docker container with the new codebase To test your updates during your development, you may have to create a draft Pull Request to trigger CI on the main repo During development, if all you updated is python code, you can write quick build in the commit message body to benefit from a quicker build (about 15 minutes): only python files are copied over oxsecurity/megalinter:test-YOURUSERNAME-YOURBRANCH or oxsecurity/megalinter:latest if a previous full run has not been performed yet You can filter the performed tests by writing TEST_KEYWORDS=my keywords in the commit message body. Example: TEST_KEYWORDS=kubernetes_kubeval_test The last commit before the validation of a Pull Request must be a full build with all tests (about 45 minutes) The Docker container is then ran against the test cases to validate all code sanity .automation/test contains all test cases for each language that should be validated These GitHub Actions utilize the Checks API and Protected Branches to help follow the SDLC When the Pull Request is merged to main, the MegaLinter Docker container is then updated and deployed with the new codebase Note: The branch's Docker container is also removed from DockerHub to cleanup after itself Releasing If you are the current maintainer of this action: If a major version number change: Update README.md and the wiki to reflect new version number in the example workflow file sections Draft Releases are created automatically. They just need to be checked over for accuracy before making it official. Ensure you check the box for publishing to the marketplace A GitHub Action will Publish the Docker image to GitHub Package Registry once a Release is created A GitHub Action will Publish the Docker image to Docker Hub once a Release is created Look for approval from CODEOWNERS Resources How to Contribute to Open Source Using Pull Requests GitHub Help","title":"Contributing Guide"},{"location":"contributing/#contributing","text":"Hi there! We're thrilled that you'd like to contribute to this project. Your help is essential for keeping it great.","title":"Contributing"},{"location":"contributing/#submitting-a-pull-request","text":"Pull Requests are used for adding new playbooks, roles, and documents to the repository, or editing the existing ones.","title":"Submitting a pull request"},{"location":"contributing/#pre-requisites","text":"You need Python 3 (version 3.7 minimum) and Node.js (14+) to be installed on your computer. If you have issues running Python on Windows, you can uninstall it then reinstall it using this video tutorial , then copy python.exe and name it python3.exe Run the following commands at the root of the repository to install required dev dependencies python3 -m venv .venv . .venv/bin/activate echo \".venv/\" >> .git/info/exclude python3 -m pip install -U pip python3 -m pip install -r requirements.dev.txt If it does not work, just run the following script pip install -r requirements.dev.txt pip install mkdocs-material npm install markdown-table-formatter -g Second level dev dependencies are installed by running ./build.sh which is also a test if the installation worked ./build.sh 2021-03-30 19:40:03,790 [INFO] Validating ansible.megalinter-descriptor.yml 2021-03-30 19:40:03,879 [INFO] Validating arm.megalinter-descriptor.yml ... Formatting markdown tables... Need to install the following packages: markdown-table-formatter Ok to proceed? (y) ... INFO - Documentation built in 9.76 seconds (done.) (if you have a permission denied issue on Windows, please check this solution )","title":"Pre-requisites"},{"location":"contributing/#with-write-access","text":"Clone the repository (only if you have write access) Create a new branch: git checkout -b my-branch-name Make your change Update CHANGELOG.md (the root one, not the one in /docs) Run bash build.sh to regenerate dockerfile from updated sources (run bash build.sh --doc if you want to also regenerate documentation) Push and submit a pull request Pat yourself on the back and wait for your pull request to be reviewed and merged.","title":"With write access"},{"location":"contributing/#without-write-access","text":"Fork and clone the repository Create a new branch: git checkout -b my-branch-name Make your change Update CHANGELOG.md (the root one, not the one in /docs) Run bash build.sh to regenerate dockerfile from updated sources (run bash build.sh --doc if you want to also regenerate documentation) Push to your fork and submit a pull request Pat your self on the back and wait for your pull request to be reviewed and merged. Here are a few things you can do that will increase the likelihood of your pull request being accepted: Keep your change as focused as possible. If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests. Write good commit messages . Update CHANGELOG.md to briefly describe your changes Draft pull requests are also welcome to get feedback early on, or if there is something blocking you. Create a branch with a name that identifies the user and nature of the changes (similar to user/branch-purpose ) Open a pull request","title":"Without write access"},{"location":"contributing/#add-a-new-linter","text":"Each linter must: Be defined in a descriptor file. Few properties are required ( see json schema documentation ), but please think to input doc URLs and ide section for documentation Have two test files in .automation/test : one for success and one for failure Then run bash build.py and it will generate all the rest ! Documentation (markdown) Dockerfile (main and flavors) Test classes Configuration JSON schema Online documentation menus","title":"Add a new linter"},{"location":"contributing/#cictcd","text":"The MegaLinter has CI/CT/CD configured utilizing GitHub Actions. When a branch is created and code is pushed, a GitHub Action is triggered for building the new Docker container with the new codebase To test your updates during your development, you may have to create a draft Pull Request to trigger CI on the main repo During development, if all you updated is python code, you can write quick build in the commit message body to benefit from a quicker build (about 15 minutes): only python files are copied over oxsecurity/megalinter:test-YOURUSERNAME-YOURBRANCH or oxsecurity/megalinter:latest if a previous full run has not been performed yet You can filter the performed tests by writing TEST_KEYWORDS=my keywords in the commit message body. Example: TEST_KEYWORDS=kubernetes_kubeval_test The last commit before the validation of a Pull Request must be a full build with all tests (about 45 minutes) The Docker container is then ran against the test cases to validate all code sanity .automation/test contains all test cases for each language that should be validated These GitHub Actions utilize the Checks API and Protected Branches to help follow the SDLC When the Pull Request is merged to main, the MegaLinter Docker container is then updated and deployed with the new codebase Note: The branch's Docker container is also removed from DockerHub to cleanup after itself","title":"CI/CT/CD"},{"location":"contributing/#releasing","text":"If you are the current maintainer of this action: If a major version number change: Update README.md and the wiki to reflect new version number in the example workflow file sections Draft Releases are created automatically. They just need to be checked over for accuracy before making it official. Ensure you check the box for publishing to the marketplace A GitHub Action will Publish the Docker image to GitHub Package Registry once a Release is created A GitHub Action will Publish the Docker image to Docker Hub once a Release is created Look for approval from CODEOWNERS","title":"Releasing"},{"location":"contributing/#resources","text":"How to Contribute to Open Source Using Pull Requests GitHub Help","title":"Resources"},{"location":"descriptor-schema/","text":"MegaLinter descriptor Descriptor definition for mega-linter Properties descriptor_id - Descriptor unique identifier - Uppercase unique identifier for the language, tooling format or identifier - Type: string - Example values: 1. \"PYTHON\" 2. \"XML\" 3. \"OPENAPI\" descriptor_type - Descriptor type - Descriptor type: language, format or tooling format - Type: string - Example values: 1. \"language\" 2. \"format\" 3. \"tooling_format\" - The value is restricted to the following: 1. \"language\" 2. \"format\" 3. \"tooling_format\" file_extensions - Allowed file extensions - File extension filters. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files. Can be overridden at linter level - Type: array - Example values: 1. .py 2. - Default: - Items - Type: string file_names_regex - File name regex filters - Regular expression list for filtering files by their base names using regex full match. Empty list includes all files. Can be overridden at linter level - Type: array - Example values: 1. Dockerfile(-.+)? 2. Jenkinsfile - Default: ` - **_Items_** - Type: string` file_contains_regex - File content regex filters - Regular expression list for filtering files by their content - Type: array - Example values: 1. AWSTemplateFormatVersion 2. (AWS|Alexa|Custom):: - Default: ` - **_Items_** - Type: string` files_sub_directory - Files sub-directory - Set when a linter only lints a sub-directory - Type: string - Example values: 1. ansible 2. kubernetes file_names_not_ends_with - Filter on end of file name - List of strings to filter the files according to their end of file name - Type: array - Example values: 1. vault.yml 2. galaxy.xml - Default: ` - **_Items_** - Type: string` test_folder - Test folder in .automation/ - Test folder containing _good and bad files. Default: lowercase(descriptor_id)_ - Type: string - Example values: 1. bash_shfmt 2. terraform_terrascan linters required - List of linters - List of linter definitions associated to the descriptor - Type: array - Items - Linter definition - Parameters defining behaviour and installation of a linter - Type: object - Properties - linter_name required - Linter name - Name of the linter (same as cli command if possible) - Type: string - Example values: 1. \"eslint\" - name - Linter configuration key - When several linters in a descriptor, set a different name that will be used for configuration - Type: string - Example values: 1. \"JAVASCRIPT_ES\" - linter_url required - Linter URL - URL of the linter home page - Type: string - Example values: 1. \"https://eslint.org\" - linter_banner_image_url - Linter banner image URL - URL of an image used to build header of linter Markdown documentation - Type: string - Example values: 1. \"https://github.com/stylelint/stylelint/raw/master/identity/stylelint-icon-and-text-white.png\" - linter_image_url - Linter image URL - URL of an image used in linter Markdown documentation - Type: string - Example values: 1. \"https://raku.org/camelia-logo.png\" - config_file_name - Default file name for the linter configuration file - An explanation about the purpose of this instance. - Type: string - Example values: 1. \".eslintrc.yml\" 2. \".markdown-lint.yml\" 3. \".python-black\" - cli_config_extra_args - Additional CLI arguments when config file is used - When a configuration file is used with the linter CLI, send these additional arguments - Type: array - Example values: 1. --no-eslintrc 2. --no-ignore - Default: ` - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/examples\">examples</b> required - Linter CLI commands examples - _Please add an example with and without configuration file in the command. They will appear in documentation_ - Type: array - Example values: 1. golangci-lint run myfile.go,golangci-lint run -c .golangci.yml myfile.go 2. eslint myfile.js,eslint -c .eslintrc.yml --no-eslintrc --no-ignore myfile.js - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install\">install</b> required - Installation requirements - _List of apk, dockerfile instructions, npm/pip/gem packages required to install the linter_ - Type: object - **_Properties_** - <b id=\"/properties/linters/items/properties/install/properties/dockerfile\">dockerfile</b> - List of Dockerfile instructions packages - _Will be automatically integrated in generated Dockerfile_ - Type: array - Example values: 1. FROM accurics/terrascan:d182f1c as terrascan 2. COPY --from=terrascan /go/bin/terrascan /usr/bin/ 3. RUN terrascan init - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/apk\">apk</b> - List of APK packages (Linux) - _APK packages identifiers (with or without version)_ - Type: array - Example values: 1. perl 2. perl-dev - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/npm\">npm</b> - List of NPM packages (Node.js) - _NPM packages identifiers (with or without version)_ - Type: array - Example values: 1. eslint 2. eslint-config-airbnb@3.2.1 - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/gem\">gem</b> - List of GEM packages (Ruby) - _GEM packages identifiers (with or without version)_ - Type: array - Example values: 1. rubocop:0.82.0 2. rubocop-github:0.16.0 3. rubocop-performance - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/pip\">pip</b> - List of PIP packages (Python) - _PIP packages identifiers (with or without version)_ - Type: array - Example values: 1. flake8 - **_Items_** - Type: string`","title":"Descriptor schema"},{"location":"descriptor-schema/#megalinter-descriptor","text":"Descriptor definition for mega-linter Properties descriptor_id - Descriptor unique identifier - Uppercase unique identifier for the language, tooling format or identifier - Type: string - Example values: 1. \"PYTHON\" 2. \"XML\" 3. \"OPENAPI\" descriptor_type - Descriptor type - Descriptor type: language, format or tooling format - Type: string - Example values: 1. \"language\" 2. \"format\" 3. \"tooling_format\" - The value is restricted to the following: 1. \"language\" 2. \"format\" 3. \"tooling_format\" file_extensions - Allowed file extensions - File extension filters. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files. Can be overridden at linter level - Type: array - Example values: 1. .py 2. - Default: - Items - Type: string file_names_regex - File name regex filters - Regular expression list for filtering files by their base names using regex full match. Empty list includes all files. Can be overridden at linter level - Type: array - Example values: 1. Dockerfile(-.+)? 2. Jenkinsfile - Default: ` - **_Items_** - Type: string` file_contains_regex - File content regex filters - Regular expression list for filtering files by their content - Type: array - Example values: 1. AWSTemplateFormatVersion 2. (AWS|Alexa|Custom):: - Default: ` - **_Items_** - Type: string` files_sub_directory - Files sub-directory - Set when a linter only lints a sub-directory - Type: string - Example values: 1. ansible 2. kubernetes file_names_not_ends_with - Filter on end of file name - List of strings to filter the files according to their end of file name - Type: array - Example values: 1. vault.yml 2. galaxy.xml - Default: ` - **_Items_** - Type: string` test_folder - Test folder in .automation/ - Test folder containing _good and bad files. Default: lowercase(descriptor_id)_ - Type: string - Example values: 1. bash_shfmt 2. terraform_terrascan linters required - List of linters - List of linter definitions associated to the descriptor - Type: array - Items - Linter definition - Parameters defining behaviour and installation of a linter - Type: object - Properties - linter_name required - Linter name - Name of the linter (same as cli command if possible) - Type: string - Example values: 1. \"eslint\" - name - Linter configuration key - When several linters in a descriptor, set a different name that will be used for configuration - Type: string - Example values: 1. \"JAVASCRIPT_ES\" - linter_url required - Linter URL - URL of the linter home page - Type: string - Example values: 1. \"https://eslint.org\" - linter_banner_image_url - Linter banner image URL - URL of an image used to build header of linter Markdown documentation - Type: string - Example values: 1. \"https://github.com/stylelint/stylelint/raw/master/identity/stylelint-icon-and-text-white.png\" - linter_image_url - Linter image URL - URL of an image used in linter Markdown documentation - Type: string - Example values: 1. \"https://raku.org/camelia-logo.png\" - config_file_name - Default file name for the linter configuration file - An explanation about the purpose of this instance. - Type: string - Example values: 1. \".eslintrc.yml\" 2. \".markdown-lint.yml\" 3. \".python-black\" - cli_config_extra_args - Additional CLI arguments when config file is used - When a configuration file is used with the linter CLI, send these additional arguments - Type: array - Example values: 1. --no-eslintrc 2. --no-ignore - Default: ` - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/examples\">examples</b> required - Linter CLI commands examples - _Please add an example with and without configuration file in the command. They will appear in documentation_ - Type: array - Example values: 1. golangci-lint run myfile.go,golangci-lint run -c .golangci.yml myfile.go 2. eslint myfile.js,eslint -c .eslintrc.yml --no-eslintrc --no-ignore myfile.js - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install\">install</b> required - Installation requirements - _List of apk, dockerfile instructions, npm/pip/gem packages required to install the linter_ - Type: object - **_Properties_** - <b id=\"/properties/linters/items/properties/install/properties/dockerfile\">dockerfile</b> - List of Dockerfile instructions packages - _Will be automatically integrated in generated Dockerfile_ - Type: array - Example values: 1. FROM accurics/terrascan:d182f1c as terrascan 2. COPY --from=terrascan /go/bin/terrascan /usr/bin/ 3. RUN terrascan init - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/apk\">apk</b> - List of APK packages (Linux) - _APK packages identifiers (with or without version)_ - Type: array - Example values: 1. perl 2. perl-dev - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/npm\">npm</b> - List of NPM packages (Node.js) - _NPM packages identifiers (with or without version)_ - Type: array - Example values: 1. eslint 2. eslint-config-airbnb@3.2.1 - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/gem\">gem</b> - List of GEM packages (Ruby) - _GEM packages identifiers (with or without version)_ - Type: array - Example values: 1. rubocop:0.82.0 2. rubocop-github:0.16.0 3. rubocop-performance - **_Items_** - Type: string - <b id=\"/properties/linters/items/properties/install/properties/pip\">pip</b> - List of PIP packages (Python) - _PIP packages identifiers (with or without version)_ - Type: array - Example values: 1. flake8 - **_Items_** - Type: string`","title":"MegaLinter descriptor"},{"location":"flavors-stats/","text":"const randomNum = () => Math.floor(Math.random() * (235 - 52 + 1) + 52); const randomRGB = () => `rgb(${randomNum()}, ${randomNum()}, ${randomNum()})`; fetch('https://raw.githubusercontent.com/oxsecurity/megalinter/master/.automation/generated/flavors-stats.json') .then(function (response) { if (!response.ok) { throw new Error(\"HTTP error, status = \" + response.status); } return response.json(); }) .then(function (flavorsStats) { const labels = []; const dataSets = []; for (const flavor of Object.keys(flavorsStats)) { if (flavor === \"dotnet\") { continue ; } const flavorData = []; for (const dateStat of flavorsStats[flavor]) { const dateDay = dateStat[0].substring(0, 10); labels.push(dateDay); flavorData.push(dateStat[1]) } const dataSet = { label: flavor, borderColor: randomRGB(), data: flavorData, yAxisID: 'y', }; dataSets.push(dataSet); } const data = { labels: labels.filter((it, i, ar) => ar.indexOf(it) === i), // make unique datasets: dataSets }; const config = { type: 'line', data: data, options: { responsive: true, interaction: { mode: 'index', intersect: false, }, stacked: false, plugins: { title: { display: true, text: 'MegaLinter flavors stats' } }, scales: { y: { type: 'linear', display: true, position: 'left', } } }, }; var myChart = new Chart( document.getElementById('myChart'), config ); });","title":"Flavors statistics"},{"location":"flavors/","text":"Flavors To improve run performances, we generate Flavored MegaLinter images containing only the list of linters related to a project type When using default MegaLinter, if a MegaLinter Flavor would cover all your project requirements, a message is added in the logs If your project uses a MegaLinter Flavor not covering linter requirements, an error message will be thrown with instructions about how to solve the issue The following table does not display docker pulls from MegaLinter v4 & v5 images . Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 If you need a new flavor, post an issue","title":"All flavors"},{"location":"flavors/#flavors","text":"To improve run performances, we generate Flavored MegaLinter images containing only the list of linters related to a project type When using default MegaLinter, if a MegaLinter Flavor would cover all your project requirements, a message is added in the logs If your project uses a MegaLinter Flavor not covering linter requirements, an error message will be thrown with instructions about how to solve the issue The following table does not display docker pulls from MegaLinter v4 & v5 images . Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 If you need a new flavor, post an issue","title":"Flavors"},{"location":"frequently-asked-questions/","text":"Frequently Asked Questions My repo CI already have linters and they are perfectly working, so why do I need MegaLinter ? You can perfectly continue using your installed linters and deactivate them in .mega-linter.yml . For example, in a javascript project using eslint, you can configure MegaLinter with DISABLE: JAVASCRIPT . That way, you will benefit from both your installed linters but also from other MegaLinter linters checking JSON, YAML, Markdown, Dockerfile, Bash, spelling mistakes, dead URLs... Ok but... how does it work ? MegaLinter is based on Docker images containing either all linters, or just a selection of linters if you are using a MegaLinter flavor for a project using a specific language / format The core architecture does the following: Initialization List all project files : except files in ignored folders ( node_modules , etc...) except files not matching FILTER_REGEX_INCLUDE (if defined by user) except files matching FILTER_REGEX_EXCLUDE (if defined by user) Collect files for each activated linter , matching their own filtering criteria : file extensions file names file content <descriptor_or_linter_key>_FILTER_REGEX_INCLUDE (if defined by user) <descriptor_or_linter_key>_FILTER_REGEX_EXCLUDE (if defined by user) Linting Parallelly , for each linter with matching files: Call the linter on matching files (or the whole project for some linters like copy-paste detector) Call activated linter-level reporters (GitHub Status Reporter...) Finalization Call activated global level reporters (GitHub Pull Request Comment Reporter, File.io Reporter, Email Reporter...) Manage return code: 0 if no error (or only non blocking errors if user defined DISABLE_ERRORS or <descriptor_or_linter_key>_DISABLE_ERRORS ) 1 if errors","title":"FAQ"},{"location":"frequently-asked-questions/#frequently-asked-questions","text":"My repo CI already have linters and they are perfectly working, so why do I need MegaLinter ? You can perfectly continue using your installed linters and deactivate them in .mega-linter.yml . For example, in a javascript project using eslint, you can configure MegaLinter with DISABLE: JAVASCRIPT . That way, you will benefit from both your installed linters but also from other MegaLinter linters checking JSON, YAML, Markdown, Dockerfile, Bash, spelling mistakes, dead URLs... Ok but... how does it work ? MegaLinter is based on Docker images containing either all linters, or just a selection of linters if you are using a MegaLinter flavor for a project using a specific language / format The core architecture does the following: Initialization List all project files : except files in ignored folders ( node_modules , etc...) except files not matching FILTER_REGEX_INCLUDE (if defined by user) except files matching FILTER_REGEX_EXCLUDE (if defined by user) Collect files for each activated linter , matching their own filtering criteria : file extensions file names file content <descriptor_or_linter_key>_FILTER_REGEX_INCLUDE (if defined by user) <descriptor_or_linter_key>_FILTER_REGEX_EXCLUDE (if defined by user) Linting Parallelly , for each linter with matching files: Call the linter on matching files (or the whole project for some linters like copy-paste detector) Call activated linter-level reporters (GitHub Status Reporter...) Finalization Call activated global level reporters (GitHub Pull Request Comment Reporter, File.io Reporter, Email Reporter...) Manage return code: 0 if no error (or only non blocking errors if user defined DISABLE_ERRORS or <descriptor_or_linter_key>_DISABLE_ERRORS ) 1 if errors","title":"Frequently Asked Questions"},{"location":"how-to-contribute/","text":"How to contribute Contributions to MegaLinter are very welcome, the more we are, the stronger MegaLinter is ! Please follow Contributing Guide To help, you can also: star the repository offer a beer ! report problems and request new features share on twitter","title":"How-to Contribute"},{"location":"how-to-contribute/#how-to-contribute","text":"Contributions to MegaLinter are very welcome, the more we are, the stronger MegaLinter is ! Please follow Contributing Guide To help, you can also: star the repository offer a beer ! report problems and request new features share on twitter","title":"How to contribute"},{"location":"installation/","text":"Installation Assisted installation Just run npx mega-linter-runner --install at the root of your repository and answer questions, it will generate ready to use configuration files for MegaLinter :) Upgrade to MegaLinter v6 Run npx mega-linter-runner --upgrade to automatically upgrade your configuration from v4 or v5 to v6 :) Manual installation The following instructions examples are using latest MegaLinter stable version ( v6 , always corresponding to the latest release ) Docker image: oxsecurity/megalinter:v6 GitHub Action: oxsecurity/megalinter@v6 You can also use beta version (corresponding to the content of main branch) Docker image: oxsecurity/megalinter:beta GitHub Action: oxsecurity/megalinter@beta GitHub Action Create a new file in your repository called .github/workflows/mega-linter.yml Copy the example workflow from below into that new file, no extra configuration required Commit that file to a new branch Open up a pull request and observe the action working Enjoy your more stable , and cleaner code base NOTES: If you pass the Environment variable GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} in your workflow, then the MegaLinter will mark the status of each individual linter run in the Checks section of a pull request. Without this you will only see the overall status of the full run. There is no need to set the GitHub Secret as it is automatically set by GitHub, it only needs to be passed to the action. You can also use it outside of GitHub Actions (CircleCI, Azure Pipelines, Jenkins, GitLab, or even locally with a docker run) , and have status on Github Pull Request if GITHUB_TARGET_URL environment variable exists. In your repository you should have a .github/workflows folder with GitHub Action similar to below: .github/workflows/mega-linter.yml This file should have this code --- # MegaLinter GitHub Action configuration file # More info at https://megalinter.github.io name: MegaLinter on: # Trigger mega-linter at every push. Action will also be visible from Pull Requests to main push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions) pull_request: branches: [master, main] env: # Comment env block if you do not want to apply fixes # Apply linter fixes configuration APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool) APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all) APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request) concurrency: group: ${{ github.ref }}-${{ github.workflow }} cancel-in-progress: true jobs: build: name: MegaLinter runs-on: ubuntu-latest steps: # Git Checkout - name: Checkout Code uses: actions/checkout@v2 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances # MegaLinter - name: MegaLinter id: ml # You can override MegaLinter flavor used to have faster performances # More info at https://megalinter.github.io/flavors/ uses: oxsecurity/megalinter@v6 env: # All available variables are described in documentation # https://megalinter.github.io/configuration/ VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks # Upload MegaLinter artifacts - name: Archive production artifacts if: ${{ success() }} || ${{ failure() }} uses: actions/upload-artifact@v2 with: name: MegaLinter reports path: | megalinter-reports mega-linter.log # Create pull request if applicable (for now works only on PR from same repository, not from forks) - name: Create Pull Request with applied fixes id: cpr if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} commit-message: \"[MegaLinter] Apply linters automatic fixes\" title: \"[MegaLinter] Apply linters automatic fixes\" labels: bot - name: Create PR output if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') run: | echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\" echo \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\" # Push new commit if applicable (for now works only on PR from same repository, not from forks) - name: Prepare commit if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') run: sudo chown -Rc $UID .git/ - name: Commit and push applied linter fixes if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') uses: stefanzweifel/git-auto-commit-action@v4 with: branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }} commit_message: \"[MegaLinter] Apply linters fixes\" GitLab CI Create or update .gitlab-ci.yml file at the root of your repository # MegaLinter GitLab CI job configuration file # More info at https://megalinter.github.io/ mega-linter: stage: test # You can override MegaLinter flavor used to have faster performances # More info at https://megalinter.github.io/flavors/ image: oxsecurity/megalinter:v6 script: [ \"true\" ] # if script: [\"true\"] does not work, you may try -> script: [ \"/bin/bash /entrypoint.sh\" ] variables: # All available variables are described in documentation # https://megalinter.github.io/configuration/ DEFAULT_WORKSPACE: $CI_PROJECT_DIR # ADD YOUR CUSTOM ENV VARIABLES HERE TO OVERRIDE VALUES OF .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY artifacts: when: always paths: - megalinter-reports expire_in: 1 week Create a Gitlab access token and define it in a variable GITLAB_ACCESS_TOKEN_MEGALINTER in the project CI/CD masked variables Azure Pipelines Use the following Azure Pipelines YAML template Add the following job in your azure-pipelines.yaml file # Run MegaLinter to detect linting and security issues - job: MegaLinter pool: vmImage: ubuntu-latest steps: # Pull MegaLinter docker image - script: docker pull oxsecurity/megalinter:v6 displayName: Pull MegaLinter # Run MegaLinter - script: | docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\ -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\ -e CI=true \\ -e TF_BUILD=true \\ -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\ -e SYSTEM_COLLECTIONURI=$(System.CollectionUri) \\ -e SYSTEM_PULLREQUEST_PULLREQUESTID=$(System.PullRequest.PullRequestId) \\ -e SYSTEM_TEAMPROJECT=$(System.TeamProject) \\ -e BUILD_BUILD_ID=$(Build.BuildId) \\ -e BUILD_REPOSITORY_ID=$(Build.Repository.ID) \\ oxsecurity/megalinter:v6 displayName: Run MegaLinter # Upload MegaLinter reports - task: PublishPipelineArtifact@1 condition: succeededOrFailed() displayName: Upload MegaLinter reports inputs: targetPath: \"$(System.DefaultWorkingDirectory)/megalinter-reports/\" artifactName: MegaLinterReport To benefit from Pull Request comments, please follow configuration instructions Jenkins Add the following stage in your Jenkinsfile You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source // Lint with MegaLinter: https://megalinter.github.io/ stage('MegaLinter') { agent { docker { image 'oxsecurity/megalinter:v6' args \"-u root -e VALIDATE_ALL_CODEBASE=true -v ${WORKSPACE}:/tmp/lint --entrypoint=''\" reuseNode true } } steps { sh '/entrypoint.sh' } post { always { archiveArtifacts allowEmptyArchive: true, artifacts: 'mega-linter.log,megalinter-reports/**/*', defaultExcludes: false, followSymlinks: false } } } Concourse Pipeline step Use the following job.step in your pipeline template Note: make sure you have job.plan.get step which gets repo containing your repository as shown in example --- - name: linting plan: - get: repo - task: linting config: platform: linux image_resource: type: docker-image source: repository: oxsecurity/megalinter tag: v6 inputs: - name: repo run: path: bash args: - -cxe - | cd repo export DEFAULT_WORKSPACE=$(pwd) bash -ex /entrypoint.sh # doing this because concourse does not work as other CI systems # params: # PARALLEL: true # DISABLE: SPELL # APPLY_FIXES: all # DISABLE_ERRORS: true # VALIDATE_ALL_CODEBASE: true OR Use it as reusable task Create reusable concourse task which can be used with multiple pipelines Create task file task-linting.yaml --- platform: linux image_resource: type: docker-image source: repository: oxsecurity/megalinter tag: v6 inputs: - name: repo # uncomment this if you want reports as task output # output: # - name: reports # path: repo/megalinter-reports run: path: bash args: - -cxe - | cd repo export DEFAULT_WORKSPACE=$(pwd) bash -ex /entrypoint.sh Use that task-linting.yaml task in pipeline Note: 1. make sure task-linting.yaml is available in that repo input at root 2. task output is not shown here resources: - name: linting plan: - get: repo - task: linting file: repo/task-linting.yaml # params: # PARALLEL: true # DISABLE: SPELL # APPLY_FIXES: all # DISABLE_ERRORS: true # VALIDATE_ALL_CODEBASE: true Run MegaLinter locally You can use mega-linter-runner to locally run MegaLinter with the same configuration defined in .mega-linter.yml file See mega-linter-runner installation instructions Example npx mega-linter-runner --flavor salesforce -e 'ENABLE=,DOCKERFILE,MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' Note: You can also use such command line in your custom CI/CD pipelines","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#assisted-installation","text":"Just run npx mega-linter-runner --install at the root of your repository and answer questions, it will generate ready to use configuration files for MegaLinter :)","title":"Assisted installation"},{"location":"installation/#upgrade-to-megalinter-v6","text":"Run npx mega-linter-runner --upgrade to automatically upgrade your configuration from v4 or v5 to v6 :)","title":"Upgrade to MegaLinter v6"},{"location":"installation/#manual-installation","text":"The following instructions examples are using latest MegaLinter stable version ( v6 , always corresponding to the latest release ) Docker image: oxsecurity/megalinter:v6 GitHub Action: oxsecurity/megalinter@v6 You can also use beta version (corresponding to the content of main branch) Docker image: oxsecurity/megalinter:beta GitHub Action: oxsecurity/megalinter@beta","title":"Manual installation"},{"location":"installation/#github-action","text":"Create a new file in your repository called .github/workflows/mega-linter.yml Copy the example workflow from below into that new file, no extra configuration required Commit that file to a new branch Open up a pull request and observe the action working Enjoy your more stable , and cleaner code base NOTES: If you pass the Environment variable GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} in your workflow, then the MegaLinter will mark the status of each individual linter run in the Checks section of a pull request. Without this you will only see the overall status of the full run. There is no need to set the GitHub Secret as it is automatically set by GitHub, it only needs to be passed to the action. You can also use it outside of GitHub Actions (CircleCI, Azure Pipelines, Jenkins, GitLab, or even locally with a docker run) , and have status on Github Pull Request if GITHUB_TARGET_URL environment variable exists. In your repository you should have a .github/workflows folder with GitHub Action similar to below: .github/workflows/mega-linter.yml This file should have this code --- # MegaLinter GitHub Action configuration file # More info at https://megalinter.github.io name: MegaLinter on: # Trigger mega-linter at every push. Action will also be visible from Pull Requests to main push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions) pull_request: branches: [master, main] env: # Comment env block if you do not want to apply fixes # Apply linter fixes configuration APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool) APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all) APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request) concurrency: group: ${{ github.ref }}-${{ github.workflow }} cancel-in-progress: true jobs: build: name: MegaLinter runs-on: ubuntu-latest steps: # Git Checkout - name: Checkout Code uses: actions/checkout@v2 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances # MegaLinter - name: MegaLinter id: ml # You can override MegaLinter flavor used to have faster performances # More info at https://megalinter.github.io/flavors/ uses: oxsecurity/megalinter@v6 env: # All available variables are described in documentation # https://megalinter.github.io/configuration/ VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks # Upload MegaLinter artifacts - name: Archive production artifacts if: ${{ success() }} || ${{ failure() }} uses: actions/upload-artifact@v2 with: name: MegaLinter reports path: | megalinter-reports mega-linter.log # Create pull request if applicable (for now works only on PR from same repository, not from forks) - name: Create Pull Request with applied fixes id: cpr if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') uses: peter-evans/create-pull-request@v4 with: token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }} commit-message: \"[MegaLinter] Apply linters automatic fixes\" title: \"[MegaLinter] Apply linters automatic fixes\" labels: bot - name: Create PR output if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') run: | echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\" echo \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\" # Push new commit if applicable (for now works only on PR from same repository, not from forks) - name: Prepare commit if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') run: sudo chown -Rc $UID .git/ - name: Commit and push applied linter fixes if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix') uses: stefanzweifel/git-auto-commit-action@v4 with: branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }} commit_message: \"[MegaLinter] Apply linters fixes\"","title":"GitHub Action"},{"location":"installation/#gitlab-ci","text":"Create or update .gitlab-ci.yml file at the root of your repository # MegaLinter GitLab CI job configuration file # More info at https://megalinter.github.io/ mega-linter: stage: test # You can override MegaLinter flavor used to have faster performances # More info at https://megalinter.github.io/flavors/ image: oxsecurity/megalinter:v6 script: [ \"true\" ] # if script: [\"true\"] does not work, you may try -> script: [ \"/bin/bash /entrypoint.sh\" ] variables: # All available variables are described in documentation # https://megalinter.github.io/configuration/ DEFAULT_WORKSPACE: $CI_PROJECT_DIR # ADD YOUR CUSTOM ENV VARIABLES HERE TO OVERRIDE VALUES OF .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY artifacts: when: always paths: - megalinter-reports expire_in: 1 week Create a Gitlab access token and define it in a variable GITLAB_ACCESS_TOKEN_MEGALINTER in the project CI/CD masked variables","title":"GitLab CI"},{"location":"installation/#azure-pipelines","text":"Use the following Azure Pipelines YAML template Add the following job in your azure-pipelines.yaml file # Run MegaLinter to detect linting and security issues - job: MegaLinter pool: vmImage: ubuntu-latest steps: # Pull MegaLinter docker image - script: docker pull oxsecurity/megalinter:v6 displayName: Pull MegaLinter # Run MegaLinter - script: | docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\ -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\ -e CI=true \\ -e TF_BUILD=true \\ -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\ -e SYSTEM_COLLECTIONURI=$(System.CollectionUri) \\ -e SYSTEM_PULLREQUEST_PULLREQUESTID=$(System.PullRequest.PullRequestId) \\ -e SYSTEM_TEAMPROJECT=$(System.TeamProject) \\ -e BUILD_BUILD_ID=$(Build.BuildId) \\ -e BUILD_REPOSITORY_ID=$(Build.Repository.ID) \\ oxsecurity/megalinter:v6 displayName: Run MegaLinter # Upload MegaLinter reports - task: PublishPipelineArtifact@1 condition: succeededOrFailed() displayName: Upload MegaLinter reports inputs: targetPath: \"$(System.DefaultWorkingDirectory)/megalinter-reports/\" artifactName: MegaLinterReport To benefit from Pull Request comments, please follow configuration instructions","title":"Azure Pipelines"},{"location":"installation/#jenkins","text":"Add the following stage in your Jenkinsfile You may activate File.io reporter or E-mail reporter to access detailed logs and fixed source // Lint with MegaLinter: https://megalinter.github.io/ stage('MegaLinter') { agent { docker { image 'oxsecurity/megalinter:v6' args \"-u root -e VALIDATE_ALL_CODEBASE=true -v ${WORKSPACE}:/tmp/lint --entrypoint=''\" reuseNode true } } steps { sh '/entrypoint.sh' } post { always { archiveArtifacts allowEmptyArchive: true, artifacts: 'mega-linter.log,megalinter-reports/**/*', defaultExcludes: false, followSymlinks: false } } }","title":"Jenkins"},{"location":"installation/#concourse","text":"","title":"Concourse"},{"location":"installation/#pipeline-step","text":"Use the following job.step in your pipeline template Note: make sure you have job.plan.get step which gets repo containing your repository as shown in example --- - name: linting plan: - get: repo - task: linting config: platform: linux image_resource: type: docker-image source: repository: oxsecurity/megalinter tag: v6 inputs: - name: repo run: path: bash args: - -cxe - | cd repo export DEFAULT_WORKSPACE=$(pwd) bash -ex /entrypoint.sh # doing this because concourse does not work as other CI systems # params: # PARALLEL: true # DISABLE: SPELL # APPLY_FIXES: all # DISABLE_ERRORS: true # VALIDATE_ALL_CODEBASE: true OR","title":"Pipeline step"},{"location":"installation/#use-it-as-reusable-task","text":"Create reusable concourse task which can be used with multiple pipelines Create task file task-linting.yaml --- platform: linux image_resource: type: docker-image source: repository: oxsecurity/megalinter tag: v6 inputs: - name: repo # uncomment this if you want reports as task output # output: # - name: reports # path: repo/megalinter-reports run: path: bash args: - -cxe - | cd repo export DEFAULT_WORKSPACE=$(pwd) bash -ex /entrypoint.sh Use that task-linting.yaml task in pipeline Note: 1. make sure task-linting.yaml is available in that repo input at root 2. task output is not shown here resources: - name: linting plan: - get: repo - task: linting file: repo/task-linting.yaml # params: # PARALLEL: true # DISABLE: SPELL # APPLY_FIXES: all # DISABLE_ERRORS: true # VALIDATE_ALL_CODEBASE: true","title":"Use it as reusable task"},{"location":"installation/#run-megalinter-locally","text":"You can use mega-linter-runner to locally run MegaLinter with the same configuration defined in .mega-linter.yml file See mega-linter-runner installation instructions Example npx mega-linter-runner --flavor salesforce -e 'ENABLE=,DOCKERFILE,MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' Note: You can also use such command line in your custom CI/CD pipelines","title":"Run MegaLinter locally"},{"location":"license/","text":"License GNU Affero General Public License GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see <https://www.gnu.org/licenses/>.","title":"License"},{"location":"license/#license","text":"","title":"License"},{"location":"license/#gnu-affero-general-public-license","text":"GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Remote Network Interaction; Use with the GNU General Public License. Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see <https://www.gnu.org/licenses/>.","title":"GNU Affero General Public License"},{"location":"mega-linter-runner/","text":"MegaLinter Runner This package allows to run MegaLinter locally before running it in your CD/CI workflow, or simply to locally apply reformatting and fixes without having to install up to date linters for your files Installation Pre-requisites You need to have NodeJS and Docker installed on your computer to run MegaLinter locally with MegaLinter Runner Global installation npm install mega-linter-runner -g Local installation npm install mega-linter-runner --save-dev No installation You can run mega-linter-runner without installation by using npx Example: npx mega-linter-runner -r beta -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' Pre-commit hook You can run mega-linter-runner as a pre-commit hook Sample .pre-commit-config.yaml : repos: - repo: https://github.com/oxsecurity/megalinter rev: v6.8.0 # Git tag specifying the hook, not mega-linter-runner, version hooks: - id: megalinter-incremental # Faster, less thorough stages: - commit - id: megalinter-full # Slower, more thorough stages: - push See .pre-commit-hooks.yaml for more details. Usage mega-linter-runner [OPTIONS] [FILES] The options are only related to mega-linter-runner. For MegaLinter options, please use a .mega-linter.yml configuration file Option Description Default -p --path Directory containing the files to lint current directory -f --flavor Set this parameter to use a MegaLinter flavor all -d --image You can override the used docker image, including if it is on another docker registry -e --env Environment variables for MegaLinter, following format 'ENV_VAR_NAME=VALUE' Warning: Quotes are mandatory --fix Automatically apply formatting and fixes in your files -r --release Allows to override MegaLinter version used v5 -h --help Show mega-linter-runner help -v --version Show mega-linter-runner version -i --install Generate MegaLinter configuration files --containername Specify MegaLinter container name --remove-container Remove MegaLinter Docker container when done You can also use npx mega-linter-runner if you do not want to install the package Examples mega-linter-runner mega-linter-runner -p myFolder --fix mega-linter-runner -r beta -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' mega-linter-runner --flavor python --release beta --filesonly path/to/my/file1.py another/path/to/a/file.js and/another/file.py Configuration You can generate a ready-to-use .mega-linter.yml configuration file by running npx mega-linter-runner --install at the root of your repository","title":"Run locally"},{"location":"mega-linter-runner/#megalinter-runner","text":"This package allows to run MegaLinter locally before running it in your CD/CI workflow, or simply to locally apply reformatting and fixes without having to install up to date linters for your files","title":"MegaLinter Runner"},{"location":"mega-linter-runner/#installation","text":"","title":"Installation"},{"location":"mega-linter-runner/#pre-requisites","text":"You need to have NodeJS and Docker installed on your computer to run MegaLinter locally with MegaLinter Runner","title":"Pre-requisites"},{"location":"mega-linter-runner/#global-installation","text":"npm install mega-linter-runner -g","title":"Global installation"},{"location":"mega-linter-runner/#local-installation","text":"npm install mega-linter-runner --save-dev","title":"Local installation"},{"location":"mega-linter-runner/#no-installation","text":"You can run mega-linter-runner without installation by using npx Example: npx mega-linter-runner -r beta -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true'","title":"No installation"},{"location":"mega-linter-runner/#pre-commit-hook","text":"You can run mega-linter-runner as a pre-commit hook Sample .pre-commit-config.yaml : repos: - repo: https://github.com/oxsecurity/megalinter rev: v6.8.0 # Git tag specifying the hook, not mega-linter-runner, version hooks: - id: megalinter-incremental # Faster, less thorough stages: - commit - id: megalinter-full # Slower, more thorough stages: - push See .pre-commit-hooks.yaml for more details.","title":"Pre-commit hook"},{"location":"mega-linter-runner/#usage","text":"mega-linter-runner [OPTIONS] [FILES] The options are only related to mega-linter-runner. For MegaLinter options, please use a .mega-linter.yml configuration file Option Description Default -p --path Directory containing the files to lint current directory -f --flavor Set this parameter to use a MegaLinter flavor all -d --image You can override the used docker image, including if it is on another docker registry -e --env Environment variables for MegaLinter, following format 'ENV_VAR_NAME=VALUE' Warning: Quotes are mandatory --fix Automatically apply formatting and fixes in your files -r --release Allows to override MegaLinter version used v5 -h --help Show mega-linter-runner help -v --version Show mega-linter-runner version -i --install Generate MegaLinter configuration files --containername Specify MegaLinter container name --remove-container Remove MegaLinter Docker container when done You can also use npx mega-linter-runner if you do not want to install the package","title":"Usage"},{"location":"mega-linter-runner/#examples","text":"mega-linter-runner mega-linter-runner -p myFolder --fix mega-linter-runner -r beta -e 'ENABLE=MARKDOWN,YAML' -e 'SHOW_ELAPSED_TIME=true' mega-linter-runner --flavor python --release beta --filesonly path/to/my/file1.py another/path/to/a/file.js and/another/file.py","title":"Examples"},{"location":"mega-linter-runner/#configuration","text":"You can generate a ready-to-use .mega-linter.yml configuration file by running npx mega-linter-runner --install at the root of your repository","title":"Configuration"},{"location":"mega-linter-vs-super-linter/","text":"MegaLinter vs Super-Linter The hard-fork of Super-Linter to be rewritten in Python is not just a language switch: use of python flexibility and libraries allowed to define lots of additional functions described below Performances MegaLinter Flavors allow to use smaller docker images , so the pull time is reduced Thanks to python multiprocessing capabilities, linters are run in parallel , which is way faster than Super-Linter bash script who runs all linters in sequence When the linter allows it, call it 1 time with N files , instead of calling N times with one file More languages and formats linted C , C++ , Copy-Paste detection , Credentials , GraphQL , JSON & YAML with JSON schemas , Markdown tables formatting , Puppet , reStructuredText , Rust , Scala , Spell checker , Swift , Visual Basic .NET ... Automatically apply formatting and fixes MegaLinter can automatically apply fixes performed by linters , and push them to the same branch , or create a Pull Request that you can validate This is pretty handy, especially for linter errors related to formatting (in that case, you don't have any manual update to perform) Run locally MegaLinter can be run locally thanks to mega-linter-runner Reports Capabilities Accuracy: Count the total number of errors and not only the number of files in error Show linter version and applied filters for each linter processed Reports stored as artefacts on GitHub Action run or other remote files General log One report file by linter Additional Reporters Console Text files GitHub Pull Request comments Gitlab Merge Request comments Azure Pull Request comments Updated sources Email File.io Enhanced Configuration Assisted installation and configuration using a yeoman generator and JSON schemas for configuration file Configure include and exclude regexes for a single language or linter : ex: JAVASCRIPT_FILTER_REGEX_INCLUDE (src) Configure additional CLI arguments for a linter: ex: JAVASCRIPT_ES_ARGUMENTS \"--debug --env-info\" Configure non blocking errors for a single language or linter : ex: JAVASCRIPT_DISABLE_ERRORS Simplify languages and linters variables ENABLE = list of languages and formats to apply lint on codebase (default: all) ENABLE_LINTERS = list of linters to apply lint on codebase (default: all) DISABLE = list of languages and formats to skip (default: none) DISABLE_LINTERS = list of linters to skip (default: none) Variables VALIDATE_XXX are still taken in account (but should not be used in association with ENABLE and DISABLE variables) Enhanced Documentation HTML documentation One page per linter documentation : All variables that can be used with this linter List of file extensions, names and filters applied by the linter Link to MegaLinter default linter configuration Link to linter Web-Site Link to official page explaining how to customize the linter rules Link to official page explaining how to disable rules from source comments Examples of linter command line calls behind the hood Help command text Installation commands Installation links for related IDEs README Separate languages, formats and tooling formats in the linters table Add logos for each descriptor Plugins management For linters less commonly used, MegaLinters offers a plugins architecture so anyone can publish plugins Simplify architecture and evolutive maintenance Refactoring runtime in Python, for easier handling than bash thanks to classes and python modules Everything related to each linter in a single descriptor YML file easier evolutive maintenance less conflicts to manage between PRs. Few special cases require a python linter class ) Default behaviours for all linters , with possibility to override part of them for special cases Hierarchical architecture: Apply fixes and new behaviours to all linters with a single code update Documentation as code Generate linters tables (ordered by type: language, format & tooling format) and include it in README. (see result) Generate one markdown file per Linter, containing all configuration variables, infos and examples (See examples) Automatic generation of Dockerfile using YML descriptors, always using the linter latest version Dockerfile commands (FROM, ARG, ENV, COPY, RUN ) APK packages (linux) NPM packages (node) PIP packages (python) GEM packages (ruby) Phive packages (PHP) Have a centralized exclude list (node_modules,.rbenv, etc...) Improve robustness & stability Test classes for each capability Test classes for each linter : Automatic generation of test classes using .automation/build.py Setup code coverage Development CD / CI Validate multi-status on PR inside each PR (posted from step \"Run against all code base\") Run test classes and code coverage with pytest during validation GitHub Action Validate descriptor YML files with json schema during build Automated job to upgrade linters to their latest stable version","title":"MegaLinter vs Super-Linter"},{"location":"mega-linter-vs-super-linter/#megalinter-vs-super-linter","text":"The hard-fork of Super-Linter to be rewritten in Python is not just a language switch: use of python flexibility and libraries allowed to define lots of additional functions described below","title":"MegaLinter vs Super-Linter"},{"location":"mega-linter-vs-super-linter/#performances","text":"MegaLinter Flavors allow to use smaller docker images , so the pull time is reduced Thanks to python multiprocessing capabilities, linters are run in parallel , which is way faster than Super-Linter bash script who runs all linters in sequence When the linter allows it, call it 1 time with N files , instead of calling N times with one file","title":"Performances"},{"location":"mega-linter-vs-super-linter/#more-languages-and-formats-linted","text":"C , C++ , Copy-Paste detection , Credentials , GraphQL , JSON & YAML with JSON schemas , Markdown tables formatting , Puppet , reStructuredText , Rust , Scala , Spell checker , Swift , Visual Basic .NET ...","title":"More languages and formats linted"},{"location":"mega-linter-vs-super-linter/#automatically-apply-formatting-and-fixes","text":"MegaLinter can automatically apply fixes performed by linters , and push them to the same branch , or create a Pull Request that you can validate This is pretty handy, especially for linter errors related to formatting (in that case, you don't have any manual update to perform)","title":"Automatically apply formatting and fixes"},{"location":"mega-linter-vs-super-linter/#run-locally","text":"MegaLinter can be run locally thanks to mega-linter-runner","title":"Run locally"},{"location":"mega-linter-vs-super-linter/#reports","text":"","title":"Reports"},{"location":"mega-linter-vs-super-linter/#capabilities","text":"Accuracy: Count the total number of errors and not only the number of files in error Show linter version and applied filters for each linter processed Reports stored as artefacts on GitHub Action run or other remote files General log One report file by linter","title":"Capabilities"},{"location":"mega-linter-vs-super-linter/#additional-reporters","text":"Console Text files GitHub Pull Request comments Gitlab Merge Request comments Azure Pull Request comments Updated sources Email File.io","title":"Additional Reporters"},{"location":"mega-linter-vs-super-linter/#enhanced-configuration","text":"Assisted installation and configuration using a yeoman generator and JSON schemas for configuration file Configure include and exclude regexes for a single language or linter : ex: JAVASCRIPT_FILTER_REGEX_INCLUDE (src) Configure additional CLI arguments for a linter: ex: JAVASCRIPT_ES_ARGUMENTS \"--debug --env-info\" Configure non blocking errors for a single language or linter : ex: JAVASCRIPT_DISABLE_ERRORS Simplify languages and linters variables ENABLE = list of languages and formats to apply lint on codebase (default: all) ENABLE_LINTERS = list of linters to apply lint on codebase (default: all) DISABLE = list of languages and formats to skip (default: none) DISABLE_LINTERS = list of linters to skip (default: none) Variables VALIDATE_XXX are still taken in account (but should not be used in association with ENABLE and DISABLE variables)","title":"Enhanced Configuration"},{"location":"mega-linter-vs-super-linter/#enhanced-documentation","text":"HTML documentation One page per linter documentation : All variables that can be used with this linter List of file extensions, names and filters applied by the linter Link to MegaLinter default linter configuration Link to linter Web-Site Link to official page explaining how to customize the linter rules Link to official page explaining how to disable rules from source comments Examples of linter command line calls behind the hood Help command text Installation commands Installation links for related IDEs README Separate languages, formats and tooling formats in the linters table Add logos for each descriptor","title":"Enhanced Documentation"},{"location":"mega-linter-vs-super-linter/#plugins-management","text":"For linters less commonly used, MegaLinters offers a plugins architecture so anyone can publish plugins","title":"Plugins management"},{"location":"mega-linter-vs-super-linter/#simplify-architecture-and-evolutive-maintenance","text":"Refactoring runtime in Python, for easier handling than bash thanks to classes and python modules Everything related to each linter in a single descriptor YML file easier evolutive maintenance less conflicts to manage between PRs. Few special cases require a python linter class ) Default behaviours for all linters , with possibility to override part of them for special cases Hierarchical architecture: Apply fixes and new behaviours to all linters with a single code update Documentation as code Generate linters tables (ordered by type: language, format & tooling format) and include it in README. (see result) Generate one markdown file per Linter, containing all configuration variables, infos and examples (See examples) Automatic generation of Dockerfile using YML descriptors, always using the linter latest version Dockerfile commands (FROM, ARG, ENV, COPY, RUN ) APK packages (linux) NPM packages (node) PIP packages (python) GEM packages (ruby) Phive packages (PHP) Have a centralized exclude list (node_modules,.rbenv, etc...)","title":"Simplify architecture and evolutive maintenance"},{"location":"mega-linter-vs-super-linter/#improve-robustness-stability","text":"Test classes for each capability Test classes for each linter : Automatic generation of test classes using .automation/build.py Setup code coverage Development CD / CI Validate multi-status on PR inside each PR (posted from step \"Run against all code base\") Run test classes and code coverage with pytest during validation GitHub Action Validate descriptor YML files with json schema during build Automated job to upgrade linters to their latest stable version","title":"Improve robustness &amp; stability"},{"location":"plugins/","text":"Plugins For security reasons, we try to embed in MegaLinter only linters that are widely adopted by open-source community. But any linter can be callable within MegaLinter thanks to the plugin mechanism ! Use plugins Add plugin URLs in PLUGINS property of .mega-linter.yml . URLs must either begin with \"https://\" or take the form of \"file://\\<path>\", where \\<path> points to a valid plugin descriptor file. Note: Both \\<path> and the default mount directory (/tmp/lint/\\<path>) will be checked for a valid descriptor. Example PLUGINS: - https://raw.githubusercontent.com/oxsecurity/megalinter/main/.automation/test/mega-linter-plugin-test/test.megalinter-descriptor.yml - https://raw.githubusercontent.com/cookiejar/mega-linter-plugin-cookietemple/main/cookietemple.megalinter-descriptor.yml - file://.automation/test/mega-linter-plugin-test/test.megalinter-descriptor.yml Plugins Catalog jupyfmt : The uncompromising Jupyter notebook formatter ( usage ) nitpick : Command-line tool and flake8 plugin to enforce the same settings across multiple language-independent projects. ( usage ) Submit a PR if you want your plugin to appear here :) Create plugins You can implement your own descriptors and load them as plugins during MegaLinter runtime Descriptor format is exactly the same than MegaLinter embedded ones ( see json schema documentation ) Plugins descriptor files must be named **.megalinter-descriptor.yml and respect MegaLinter Json Schema Plugins must be hosted in a url containing **/mega-linter-plugin-**/ File URLs must conform to the same directory and file naming criteria as defined above. Limitations For now, the only install attributes managed are dockerfile instructions starting by RUN","title":"Plugins"},{"location":"plugins/#plugins","text":"For security reasons, we try to embed in MegaLinter only linters that are widely adopted by open-source community. But any linter can be callable within MegaLinter thanks to the plugin mechanism !","title":"Plugins"},{"location":"plugins/#use-plugins","text":"Add plugin URLs in PLUGINS property of .mega-linter.yml . URLs must either begin with \"https://\" or take the form of \"file://\\<path>\", where \\<path> points to a valid plugin descriptor file. Note: Both \\<path> and the default mount directory (/tmp/lint/\\<path>) will be checked for a valid descriptor.","title":"Use plugins"},{"location":"plugins/#example","text":"PLUGINS: - https://raw.githubusercontent.com/oxsecurity/megalinter/main/.automation/test/mega-linter-plugin-test/test.megalinter-descriptor.yml - https://raw.githubusercontent.com/cookiejar/mega-linter-plugin-cookietemple/main/cookietemple.megalinter-descriptor.yml - file://.automation/test/mega-linter-plugin-test/test.megalinter-descriptor.yml","title":"Example"},{"location":"plugins/#plugins-catalog","text":"jupyfmt : The uncompromising Jupyter notebook formatter ( usage ) nitpick : Command-line tool and flake8 plugin to enforce the same settings across multiple language-independent projects. ( usage ) Submit a PR if you want your plugin to appear here :)","title":"Plugins Catalog"},{"location":"plugins/#create-plugins","text":"You can implement your own descriptors and load them as plugins during MegaLinter runtime Descriptor format is exactly the same than MegaLinter embedded ones ( see json schema documentation ) Plugins descriptor files must be named **.megalinter-descriptor.yml and respect MegaLinter Json Schema Plugins must be hosted in a url containing **/mega-linter-plugin-**/ File URLs must conform to the same directory and file naming criteria as defined above.","title":"Create plugins"},{"location":"plugins/#limitations","text":"For now, the only install attributes managed are dockerfile instructions starting by RUN","title":"Limitations"},{"location":"quick-start/","text":"Quick Start Run npx mega-linter-runner --install to generate configuration files (you need node.js to be installed) Commit, push, and create a pull request Watch ! Notes : This repo is a hard-fork of GitHub Super-Linter , rewritten in python to add lots of additional features If you are a Super-Linter user, you can transparently switch to MegaLinter and keep the same configuration (just replace github/super-linter@v3 by oxsecurity/megalinter@v4 in your GitHub Action YML file, like on this PR ) If you want to use MegaLinter extra features (recommended), please take 5 minutes to use MegaLinter assisted installation For a hand-holdy example of getting started with mega-linter check out this blog post by Alec Johnson","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"Run npx mega-linter-runner --install to generate configuration files (you need node.js to be installed) Commit, push, and create a pull request Watch ! Notes : This repo is a hard-fork of GitHub Super-Linter , rewritten in python to add lots of additional features If you are a Super-Linter user, you can transparently switch to MegaLinter and keep the same configuration (just replace github/super-linter@v3 by oxsecurity/megalinter@v4 in your GitHub Action YML file, like on this PR ) If you want to use MegaLinter extra features (recommended), please take 5 minutes to use MegaLinter assisted installation For a hand-holdy example of getting started with mega-linter check out this blog post by Alec Johnson","title":"Quick Start"},{"location":"reporters/","text":"Reporters MegaLinter can generate various reports that you can activate / deactivate and customize Reporter Description Default Text files Generates One log file by linter + suggestions for fixes that can not be automated Active GitHub Pull Request comments MegaLinter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if GitHub Action Gitlab Merge Request comments Mega-Linter posts a comment on the MR with a summary of lint results, and links to detailed logs Active if in Gitlab CI Azure Pipelines Pull Request comments Mega-Linter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if in Azure Pipelines Updated sources Zip containing all formatted and auto-fixed sources so you can extract them in your repository Active IDE Configuration Apply MegaLinter configuration in your local IDE with linter config files and IDE extensions Active GitHub Status One GitHub status by linter on the PR, with links to detailed logs Active if GitHub Action File.io Send reports on file.io so you can access them with a simple hyperlink provided at the end of console log Inactive JSON Generates a JSON output report file Inactive Email Receive all reports on your e-mail , if you can not use artifacts Active TAP files One file by linter following Test Anything Protocol format Active Console Execution logs visible in console with summary table and links to other reports at the end Active","title":"All reporters"},{"location":"reporters/#reporters","text":"MegaLinter can generate various reports that you can activate / deactivate and customize Reporter Description Default Text files Generates One log file by linter + suggestions for fixes that can not be automated Active GitHub Pull Request comments MegaLinter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if GitHub Action Gitlab Merge Request comments Mega-Linter posts a comment on the MR with a summary of lint results, and links to detailed logs Active if in Gitlab CI Azure Pipelines Pull Request comments Mega-Linter posts a comment on the PR with a summary of lint results, and links to detailed logs Active if in Azure Pipelines Updated sources Zip containing all formatted and auto-fixed sources so you can extract them in your repository Active IDE Configuration Apply MegaLinter configuration in your local IDE with linter config files and IDE extensions Active GitHub Status One GitHub status by linter on the PR, with links to detailed logs Active if GitHub Action File.io Send reports on file.io so you can access them with a simple hyperlink provided at the end of console log Inactive JSON Generates a JSON output report file Inactive Email Receive all reports on your e-mail , if you can not use artifacts Active TAP files One file by linter following Test Anything Protocol format Active Console Execution logs visible in console with summary table and links to other reports at the end Active","title":"Reporters"},{"location":"special-thanks/","text":"Special thanks Contributors Sites referring to MegaLinter Web Sites analysis-tools.dev awesome-linters schemastore.org r2devops.io abhith.net Linters checkstyle clj-kondo cspell dotenv-linter editorconfig-checker eslint eslint-plugin-jsonc hadolint htmlhint jscpd kics ktlint markdown-link-check npm-groovy-lint pmd rst-lint rubocop scalafix secretlint stylelint Open-source teams MegaLinter obviously would not exist without its linters and libraries, so many thanks to all the dedicated Open-Source teams maintaining all these awesome linters ! Super-Linter team MegaLinter has been built on the ashes of a rejected Pull Request on GitHub Super-Linter . Even if I disagree with their decision to remain in bash, the core team has always been nice and supporting during the time I was a Super-Linter contributor :)","title":"Special thanks"},{"location":"special-thanks/#special-thanks","text":"","title":"Special thanks"},{"location":"special-thanks/#contributors","text":"","title":"Contributors"},{"location":"special-thanks/#sites-referring-to-megalinter","text":"","title":"Sites referring to MegaLinter"},{"location":"special-thanks/#web-sites","text":"analysis-tools.dev awesome-linters schemastore.org r2devops.io abhith.net","title":"Web Sites"},{"location":"special-thanks/#linters","text":"checkstyle clj-kondo cspell dotenv-linter editorconfig-checker eslint eslint-plugin-jsonc hadolint htmlhint jscpd kics ktlint markdown-link-check npm-groovy-lint pmd rst-lint rubocop scalafix secretlint stylelint","title":"Linters"},{"location":"special-thanks/#open-source-teams","text":"MegaLinter obviously would not exist without its linters and libraries, so many thanks to all the dedicated Open-Source teams maintaining all these awesome linters !","title":"Open-source teams"},{"location":"special-thanks/#super-linter-team","text":"MegaLinter has been built on the ashes of a rejected Pull Request on GitHub Super-Linter . Even if I disagree with their decision to remain in bash, the core team has always been nice and supporting during the time I was a Super-Linter contributor :)","title":"Super-Linter team"},{"location":"sponsor/","text":"Sponsoring I maintain MegaLinter as a hobby, but when I'm not working on my job as Hardis Group SFDC CTO , I also have other hobbys like tasting good beers :) So if you like MegaLinter and want to support me with one or several beers a month, please have a look a my Github Sponsoring Page","title":"Sponsoring"},{"location":"sponsor/#sponsoring","text":"I maintain MegaLinter as a hobby, but when I'm not working on my job as Hardis Group SFDC CTO , I also have other hobbys like tasting good beers :) So if you like MegaLinter and want to support me with one or several beers a month, please have a look a my Github Sponsoring Page","title":"Sponsoring"},{"location":"standalone-linters/","text":"Standalone linter docker images Linter key Docker image Size ANSIBLE_ANSIBLE_LINT oxsecurity/megalinter-only-ansible_ansible_lint:beta BASH_SHELLCHECK oxsecurity/megalinter-only-bash_shellcheck:beta CLOUDFORMATION_CFN_LINT oxsecurity/megalinter-only-cloudformation_cfn_lint:beta DOCKERFILE_HADOLINT oxsecurity/megalinter-only-dockerfile_hadolint:beta GO_REVIVE oxsecurity/megalinter-only-go_revive:beta GROOVY_NPM_GROOVY_LINT oxsecurity/megalinter-only-groovy_npm_groovy_lint:beta JAVA_CHECKSTYLE oxsecurity/megalinter-only-java_checkstyle:beta JAVA_PMD oxsecurity/megalinter-only-java_pmd:beta JAVASCRIPT_ES oxsecurity/megalinter-only-javascript_es:beta JSON_ESLINT_PLUGIN_JSONC oxsecurity/megalinter-only-json_eslint_plugin_jsonc:beta JSX_ESLINT oxsecurity/megalinter-only-jsx_eslint:beta KOTLIN_KTLINT oxsecurity/megalinter-only-kotlin_ktlint:beta PHP_PSALM oxsecurity/megalinter-only-php_psalm:beta PYTHON_BANDIT oxsecurity/megalinter-only-python_bandit:beta REPOSITORY_CHECKOV oxsecurity/megalinter-only-repository_checkov:beta REPOSITORY_DEVSKIM oxsecurity/megalinter-only-repository_devskim:beta REPOSITORY_DUSTILOCK oxsecurity/megalinter-only-repository_dustilock:beta REPOSITORY_GITLEAKS oxsecurity/megalinter-only-repository_gitleaks:beta REPOSITORY_SECRETLINT oxsecurity/megalinter-only-repository_secretlint:beta REPOSITORY_SEMGREP oxsecurity/megalinter-only-repository_semgrep:beta REPOSITORY_SYFT oxsecurity/megalinter-only-repository_syft:beta REPOSITORY_TRIVY oxsecurity/megalinter-only-repository_trivy:beta TERRAFORM_TFLINT oxsecurity/megalinter-only-terraform_tflint:beta TERRAFORM_TERRASCAN oxsecurity/megalinter-only-terraform_terrascan:beta TERRAFORM_CHECKOV oxsecurity/megalinter-only-terraform_checkov:beta TSX_ESLINT oxsecurity/megalinter-only-tsx_eslint:beta TYPESCRIPT_ES oxsecurity/megalinter-only-typescript_es:beta","title":"Standalone linter docker images"},{"location":"standalone-linters/#standalone-linter-docker-images","text":"Linter key Docker image Size ANSIBLE_ANSIBLE_LINT oxsecurity/megalinter-only-ansible_ansible_lint:beta BASH_SHELLCHECK oxsecurity/megalinter-only-bash_shellcheck:beta CLOUDFORMATION_CFN_LINT oxsecurity/megalinter-only-cloudformation_cfn_lint:beta DOCKERFILE_HADOLINT oxsecurity/megalinter-only-dockerfile_hadolint:beta GO_REVIVE oxsecurity/megalinter-only-go_revive:beta GROOVY_NPM_GROOVY_LINT oxsecurity/megalinter-only-groovy_npm_groovy_lint:beta JAVA_CHECKSTYLE oxsecurity/megalinter-only-java_checkstyle:beta JAVA_PMD oxsecurity/megalinter-only-java_pmd:beta JAVASCRIPT_ES oxsecurity/megalinter-only-javascript_es:beta JSON_ESLINT_PLUGIN_JSONC oxsecurity/megalinter-only-json_eslint_plugin_jsonc:beta JSX_ESLINT oxsecurity/megalinter-only-jsx_eslint:beta KOTLIN_KTLINT oxsecurity/megalinter-only-kotlin_ktlint:beta PHP_PSALM oxsecurity/megalinter-only-php_psalm:beta PYTHON_BANDIT oxsecurity/megalinter-only-python_bandit:beta REPOSITORY_CHECKOV oxsecurity/megalinter-only-repository_checkov:beta REPOSITORY_DEVSKIM oxsecurity/megalinter-only-repository_devskim:beta REPOSITORY_DUSTILOCK oxsecurity/megalinter-only-repository_dustilock:beta REPOSITORY_GITLEAKS oxsecurity/megalinter-only-repository_gitleaks:beta REPOSITORY_SECRETLINT oxsecurity/megalinter-only-repository_secretlint:beta REPOSITORY_SEMGREP oxsecurity/megalinter-only-repository_semgrep:beta REPOSITORY_SYFT oxsecurity/megalinter-only-repository_syft:beta REPOSITORY_TRIVY oxsecurity/megalinter-only-repository_trivy:beta TERRAFORM_TFLINT oxsecurity/megalinter-only-terraform_tflint:beta TERRAFORM_TERRASCAN oxsecurity/megalinter-only-terraform_terrascan:beta TERRAFORM_CHECKOV oxsecurity/megalinter-only-terraform_checkov:beta TSX_ESLINT oxsecurity/megalinter-only-tsx_eslint:beta TYPESCRIPT_ES oxsecurity/megalinter-only-typescript_es:beta","title":"Standalone linter docker images"},{"location":"supported-linters/","text":"Supported Linters All linters are integrated in the MegaLinter docker image , which is frequently upgraded with their latest versions Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT revive GO_REVIVE GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE pmd JAVA_PMD JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT_PRETTIER JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK MAKEFILE checkmake MAKEFILE_CHECKMAKE PERL perlcritic PERL_PERLCRITIC PHP phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP_PHPLINT POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF tsqllint SQL_TSQLLINT SWIFT swiftlint SWIFT_SWIFTLINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT remark-lint MARKDOWN_REMARK_LINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV devskim REPOSITORY_DEVSKIM dustilock REPOSITORY_DUSTILOCK git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP syft REPOSITORY_SYFT trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"All supported linters"},{"location":"supported-linters/#supported-linters","text":"All linters are integrated in the MegaLinter docker image , which is frequently upgraded with their latest versions","title":"Supported Linters"},{"location":"supported-linters/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT CLOJURE clj-kondo CLOJURE_CLJ_KONDO COFFEE coffeelint COFFEE_COFFEELINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT DART dartanalyzer DART_DARTANALYZER GO golangci-lint GO_GOLANGCI_LINT revive GO_REVIVE GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE pmd JAVA_PMD JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT_PRETTIER JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT LUA luacheck LUA_LUACHECK MAKEFILE checkmake MAKEFILE_CHECKMAKE PERL perlcritic PERL_PERLCRITIC PHP phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP_PHPLINT POWERSHELL powershell POWERSHELL_POWERSHELL PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT R lintr R_LINTR RAKU raku RAKU_RAKU RUBY rubocop RUBY_RUBOCOP RUST clippy RUST_CLIPPY SALESFORCE sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC SCALA scalafix SCALA_SCALAFIX SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF tsqllint SQL_TSQLLINT SWIFT swiftlint SWIFT_SWIFTLINT TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT_PRETTIER Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT","title":"Languages"},{"location":"supported-linters/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER LATEX chktex LATEX_CHKTEX MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT remark-lint MARKDOWN_REMARK_LINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"supported-linters/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL PUPPET puppet-lint PUPPET_PUPPET_LINT SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS","title":"Tooling formats"},{"location":"supported-linters/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV devskim REPOSITORY_DEVSKIM dustilock REPOSITORY_DUSTILOCK git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP syft REPOSITORY_SYFT trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"descriptors/action/","text":"ACTION Linters Linter Configuration key Status actionlint ACTION Linted files File extensions: .yml .yaml Configuration in MegaLinter Variable Description Default value ACTION_FILTER_REGEX_INCLUDE Custom regex including filter ACTION_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): go","title":"All ACTION linters"},{"location":"descriptors/action/#action","text":"","title":"ACTION"},{"location":"descriptors/action/#linters","text":"Linter Configuration key Status actionlint ACTION","title":"Linters"},{"location":"descriptors/action/#linted-files","text":"File extensions: .yml .yaml","title":"Linted files"},{"location":"descriptors/action/#configuration-in-megalinter","text":"Variable Description Default value ACTION_FILTER_REGEX_INCLUDE Custom regex including filter ACTION_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/action/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/action/#installation","text":"APK packages (Linux): go","title":"Installation"},{"location":"descriptors/action_actionlint/","text":"actionlint Static checker for GitHub Actions workflow files actionlint documentation Version in MegaLinter: 1.6.16 Visit Official Web Site See How to configure actionlint rules Configuration in MegaLinter Enable actionlint by adding ACTION_ACTIONLINT in ENABLE_LINTERS variable Disable actionlint by adding ACTION_ACTIONLINT in DISABLE_LINTERS variable Variable Description Default value ACTION_ACTIONLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ACTION_ACTIONLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file ACTION_ACTIONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file ACTION_ACTIONLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files ACTION_ACTIONLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] ACTION_ACTIONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ACTION_ACTIONLINT_PRE_COMMANDS List of bash commands to run before the linter None ACTION_ACTIONLINT_POST_COMMANDS List of bash commands to run after the linter None ACTION_ACTIONLINT_CONFIG_FILE actionlint configuration file name Use LINTER_DEFAULT to let the linter find it actionlint.yml ACTION_ACTIONLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ACTION_ACTIONLINT_DISABLE_ERRORS Run linter but consider errors as warnings false ACTION_ACTIONLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 ACTION_DIRECTORY Directory containing ACTION files .github/workflows MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if sub-directory .github/workflows is found. (directory name can be overridden with ACTION_DIRECTORY ) File extensions: .yml , .yaml How the linting is performed actionlint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls actionlint /path/to/workflow1.yml /path/to/workflow2.yaml Help content Usage: actionlint [FLAGS] [FILES...] [-] actionlint is a linter for GitHub Actions workflow files. To check all YAML files in current repository, just run actionlint without arguments. It automatically finds the nearest '.github/workflows' directory: $ actionlint To check specific files, pass the file paths as arguments: $ actionlint file1.yaml file2.yaml To check content which is not saved in file yet (e.g. output from some command), pass - argument. It reads stdin and checks it as workflow file: $ actionlint - To serialize errors into JSON, use -format option. It allows to format error messages flexibly with Go template syntax. $ actionlint -format '{{json .}}' Documents: https://github.com/rhysd/actionlint/tree/main/docs Flags: -color Always enable colorful output. This is useful to force colorful outputs -config-file string File path to config file -debug Enable debug output (for development) -format string Custom template to format error messages in Go template syntax. See https://github.com/rhysd/actionlint/tree/main/docs/usage.md#format -ignore value Regular expression matching to error messages you want to ignore. This flag is repeatable -init-config Generate default config file at .github/actionlint.yaml in current project -no-color Disable colorful output -oneline Use one line per one error. Useful for reading error messages from programs -pyflakes string Command name or file path of \"pyflakes\" external command. If empty, pyflakes integration will be disabled (default \"pyflakes\") -shellcheck string Command name or file path of \"shellcheck\" external command. If empty, shellcheck integration will be disabled (default \"shellcheck\") -stdin-filename string File name when reading input from stdin -verbose Enable verbose output -version Show version and how this binary was installed Installation on mega-linter Docker image Dockerfile commands : ENV GO111MODULE=on RUN go install github.com/rhysd/actionlint/cmd/actionlint@v1.6.16 && go clean --cache","title":"actionlint"},{"location":"descriptors/action_actionlint/#actionlint","text":"Static checker for GitHub Actions workflow files","title":"actionlint"},{"location":"descriptors/action_actionlint/#actionlint-documentation","text":"Version in MegaLinter: 1.6.16 Visit Official Web Site See How to configure actionlint rules","title":"actionlint documentation"},{"location":"descriptors/action_actionlint/#configuration-in-megalinter","text":"Enable actionlint by adding ACTION_ACTIONLINT in ENABLE_LINTERS variable Disable actionlint by adding ACTION_ACTIONLINT in DISABLE_LINTERS variable Variable Description Default value ACTION_ACTIONLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ACTION_ACTIONLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file ACTION_ACTIONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file ACTION_ACTIONLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files ACTION_ACTIONLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] ACTION_ACTIONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ACTION_ACTIONLINT_PRE_COMMANDS List of bash commands to run before the linter None ACTION_ACTIONLINT_POST_COMMANDS List of bash commands to run after the linter None ACTION_ACTIONLINT_CONFIG_FILE actionlint configuration file name Use LINTER_DEFAULT to let the linter find it actionlint.yml ACTION_ACTIONLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ACTION_ACTIONLINT_DISABLE_ERRORS Run linter but consider errors as warnings false ACTION_ACTIONLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 ACTION_DIRECTORY Directory containing ACTION files .github/workflows","title":"Configuration in MegaLinter"},{"location":"descriptors/action_actionlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/action_actionlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/action_actionlint/#how-are-identified-applicable-files","text":"Activated only if sub-directory .github/workflows is found. (directory name can be overridden with ACTION_DIRECTORY ) File extensions: .yml , .yaml","title":"How are identified applicable files"},{"location":"descriptors/action_actionlint/#how-the-linting-is-performed","text":"actionlint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/action_actionlint/#example-calls","text":"actionlint /path/to/workflow1.yml /path/to/workflow2.yaml","title":"Example calls"},{"location":"descriptors/action_actionlint/#help-content","text":"Usage: actionlint [FLAGS] [FILES...] [-] actionlint is a linter for GitHub Actions workflow files. To check all YAML files in current repository, just run actionlint without arguments. It automatically finds the nearest '.github/workflows' directory: $ actionlint To check specific files, pass the file paths as arguments: $ actionlint file1.yaml file2.yaml To check content which is not saved in file yet (e.g. output from some command), pass - argument. It reads stdin and checks it as workflow file: $ actionlint - To serialize errors into JSON, use -format option. It allows to format error messages flexibly with Go template syntax. $ actionlint -format '{{json .}}' Documents: https://github.com/rhysd/actionlint/tree/main/docs Flags: -color Always enable colorful output. This is useful to force colorful outputs -config-file string File path to config file -debug Enable debug output (for development) -format string Custom template to format error messages in Go template syntax. See https://github.com/rhysd/actionlint/tree/main/docs/usage.md#format -ignore value Regular expression matching to error messages you want to ignore. This flag is repeatable -init-config Generate default config file at .github/actionlint.yaml in current project -no-color Disable colorful output -oneline Use one line per one error. Useful for reading error messages from programs -pyflakes string Command name or file path of \"pyflakes\" external command. If empty, pyflakes integration will be disabled (default \"pyflakes\") -shellcheck string Command name or file path of \"shellcheck\" external command. If empty, shellcheck integration will be disabled (default \"shellcheck\") -stdin-filename string File name when reading input from stdin -verbose Enable verbose output -version Show version and how this binary was installed","title":"Help content"},{"location":"descriptors/action_actionlint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : ENV GO111MODULE=on RUN go install github.com/rhysd/actionlint/cmd/actionlint@v1.6.16 && go clean --cache","title":"Installation on mega-linter Docker image"},{"location":"descriptors/ansible/","text":"ANSIBLE Linters Linter Configuration key Status ansible-lint ANSIBLE Linted files File extensions: .yml .yaml Configuration in MegaLinter Variable Description Default value ANSIBLE_FILTER_REGEX_INCLUDE Custom regex including filter ANSIBLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All ANSIBLE linters"},{"location":"descriptors/ansible/#ansible","text":"","title":"ANSIBLE"},{"location":"descriptors/ansible/#linters","text":"Linter Configuration key Status ansible-lint ANSIBLE","title":"Linters"},{"location":"descriptors/ansible/#linted-files","text":"File extensions: .yml .yaml","title":"Linted files"},{"location":"descriptors/ansible/#configuration-in-megalinter","text":"Variable Description Default value ANSIBLE_FILTER_REGEX_INCLUDE Custom regex including filter ANSIBLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/ansible_ansible_lint/","text":"ansible-lint ansible-lint documentation Version in MegaLinter: 6.7.0 Visit Official Web Site See How to configure ansible-lint rules See How to disable ansible-lint rules in files See Index of problems detected by ansible-lint Configuration in MegaLinter Enable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in ENABLE_LINTERS variable Disable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in DISABLE_LINTERS variable Variable Description Default value ANSIBLE_ANSIBLE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ANSIBLE_ANSIBLE_LINT_PRE_COMMANDS List of bash commands to run before the linter None ANSIBLE_ANSIBLE_LINT_POST_COMMANDS List of bash commands to run after the linter None ANSIBLE_ANSIBLE_LINT_CONFIG_FILE ansible-lint configuration file name Use LINTER_DEFAULT to let the linter find it .ansible-lint ANSIBLE_ANSIBLE_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 ANSIBLE_DIRECTORY Directory containing ANSIBLE files ansible MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if sub-directory ansible is found. (directory name can be overridden with ANSIBLE_DIRECTORY ) File extensions: .yml , .yaml File name do not ends with: vault.yml , vault.yaml , galaxy.yml , galaxy.yaml How the linting is performed ansible-lint is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using ansible-lint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make ansible-lint analyze only updated files Example calls ansible-lint -v ansible-lint -v -c .ansible-lint Help content usage: ansible-lint [-h] [-L | -T] [-f {rich,plain,md,json,codeclimate,quiet,pep8,sarif,docs}] [-q] [-P [{min,basic,moderate,safety,shared,production} ...]] [-p] [--progressive] [--project-dir PROJECT_DIR] [-r RULESDIR] [-R] [--write [WRITE_LIST]] [--show-relpath] [-t TAGS] [-v] [-x SKIP_LIST] [-w WARN_LIST] [--enable-list ENABLE_LIST] [--nocolor] [--force-color] [--exclude EXCLUDE_PATHS] [-c CONFIG_FILE] [--offline] [--version] [lintables ...] positional arguments: lintables One or more files or paths. When missing it will enable auto-detection mode. options: -h, --help show this help message and exit -L, --list-rules List all the rules. For listing rules only the following formats for argument -f are supported: {plain, rich, md} -T, --list-tags List all the tags and the rules they cover. Increase the verbosity level with `-v` to include 'opt-in' tag and its rules. -f {rich,plain,md,json,codeclimate,quiet,pep8,sarif,docs}, --format {rich,plain,md,json,codeclimate,quiet,pep8,sarif,docs} stdout formatting, json being an alias for codeclimate. (default: rich) -q quieter, reduce verbosity, can be specified twice. -P [{min,basic,moderate,safety,shared,production} ...], --profile [{min,basic,moderate,safety,shared,production} ...] Specify which rules profile to be used, or displays available profiles when no argument is given. -p, --parseable parseable output, same as '-f pep8' --progressive Return success if it detects a reduction in number of violations compared with previous git commit. This feature works only in git repositories. --project-dir PROJECT_DIR Location of project/repository, autodetected based on location of configuration file. -r RULESDIR, --rules-dir RULESDIR Specify custom rule directories. Add -R to keep using embedded rules from /venvs/ansible- lint/lib/python3.10/site-packages/ansiblelint/rules -R Keep default rules when using -r --write [WRITE_LIST] Allow ansible-lint to reformat YAML files and run rule transforms (Reformatting YAML files standardizes spacing, quotes, etc. A rule transform can fix or simplify fixing issues identified by that rule). You can limit the effective rule transforms (the 'write_list') by passing a keywords 'all' or 'none' or a comma separated list of rule ids or rule tags. YAML reformatting happens whenever '--write' or '--write=' is used. '--write' and '--write=all' are equivalent: they allow all transforms to run. The effective list of transforms comes from 'write_list' in the config file, followed whatever '--write' args are provided on the commandline. '--write=none' resets the list of transforms to allow reformatting YAML without running any of the transforms (ie '--write=none,rule-id' will ignore write_list in the config file and only run the rule-id transform). --show-relpath Display path relative to CWD -t TAGS, --tags TAGS only check rules whose id/tags match these values -v Increase verbosity level (-vv for more) -x SKIP_LIST, --skip-list SKIP_LIST only check rules whose id/tags do not match these values -w WARN_LIST, --warn-list WARN_LIST only warn about these rules, unless overridden in config file. Current version default value is: experimental, jinja[spacing], name[casing], name[play], role-name --enable-list ENABLE_LIST activate optional rules by their tag name --nocolor disable colored output, same as NO_COLOR=1 --force-color Force colored output, same as FORCE_COLOR=1 --exclude EXCLUDE_PATHS path to directories or files to skip. This option is repeatable. -c CONFIG_FILE, --config-file CONFIG_FILE Specify configuration file to use. By default it will look for '.ansible-lint' or '.config/ansible-lint.yml' --offline Disable installation of requirements.yml --version Installation on mega-linter Docker image PIP packages (Python): ansible-lint","title":"ansible-lint"},{"location":"descriptors/ansible_ansible_lint/#ansible-lint","text":"","title":"ansible-lint"},{"location":"descriptors/ansible_ansible_lint/#ansible-lint-documentation","text":"Version in MegaLinter: 6.7.0 Visit Official Web Site See How to configure ansible-lint rules See How to disable ansible-lint rules in files See Index of problems detected by ansible-lint","title":"ansible-lint documentation"},{"location":"descriptors/ansible_ansible_lint/#configuration-in-megalinter","text":"Enable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in ENABLE_LINTERS variable Disable ansible-lint by adding ANSIBLE_ANSIBLE_LINT in DISABLE_LINTERS variable Variable Description Default value ANSIBLE_ANSIBLE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ANSIBLE_ANSIBLE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] ANSIBLE_ANSIBLE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ANSIBLE_ANSIBLE_LINT_PRE_COMMANDS List of bash commands to run before the linter None ANSIBLE_ANSIBLE_LINT_POST_COMMANDS List of bash commands to run after the linter None ANSIBLE_ANSIBLE_LINT_CONFIG_FILE ansible-lint configuration file name Use LINTER_DEFAULT to let the linter find it .ansible-lint ANSIBLE_ANSIBLE_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false ANSIBLE_ANSIBLE_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 ANSIBLE_DIRECTORY Directory containing ANSIBLE files ansible","title":"Configuration in MegaLinter"},{"location":"descriptors/ansible_ansible_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/ansible_ansible_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/ansible_ansible_lint/#how-are-identified-applicable-files","text":"Activated only if sub-directory ansible is found. (directory name can be overridden with ANSIBLE_DIRECTORY ) File extensions: .yml , .yaml File name do not ends with: vault.yml , vault.yaml , galaxy.yml , galaxy.yaml","title":"How are identified applicable files"},{"location":"descriptors/ansible_ansible_lint/#how-the-linting-is-performed","text":"ansible-lint is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using ansible-lint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make ansible-lint analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/ansible_ansible_lint/#example-calls","text":"ansible-lint -v ansible-lint -v -c .ansible-lint","title":"Example calls"},{"location":"descriptors/ansible_ansible_lint/#help-content","text":"usage: ansible-lint [-h] [-L | -T] [-f {rich,plain,md,json,codeclimate,quiet,pep8,sarif,docs}] [-q] [-P [{min,basic,moderate,safety,shared,production} ...]] [-p] [--progressive] [--project-dir PROJECT_DIR] [-r RULESDIR] [-R] [--write [WRITE_LIST]] [--show-relpath] [-t TAGS] [-v] [-x SKIP_LIST] [-w WARN_LIST] [--enable-list ENABLE_LIST] [--nocolor] [--force-color] [--exclude EXCLUDE_PATHS] [-c CONFIG_FILE] [--offline] [--version] [lintables ...] positional arguments: lintables One or more files or paths. When missing it will enable auto-detection mode. options: -h, --help show this help message and exit -L, --list-rules List all the rules. For listing rules only the following formats for argument -f are supported: {plain, rich, md} -T, --list-tags List all the tags and the rules they cover. Increase the verbosity level with `-v` to include 'opt-in' tag and its rules. -f {rich,plain,md,json,codeclimate,quiet,pep8,sarif,docs}, --format {rich,plain,md,json,codeclimate,quiet,pep8,sarif,docs} stdout formatting, json being an alias for codeclimate. (default: rich) -q quieter, reduce verbosity, can be specified twice. -P [{min,basic,moderate,safety,shared,production} ...], --profile [{min,basic,moderate,safety,shared,production} ...] Specify which rules profile to be used, or displays available profiles when no argument is given. -p, --parseable parseable output, same as '-f pep8' --progressive Return success if it detects a reduction in number of violations compared with previous git commit. This feature works only in git repositories. --project-dir PROJECT_DIR Location of project/repository, autodetected based on location of configuration file. -r RULESDIR, --rules-dir RULESDIR Specify custom rule directories. Add -R to keep using embedded rules from /venvs/ansible- lint/lib/python3.10/site-packages/ansiblelint/rules -R Keep default rules when using -r --write [WRITE_LIST] Allow ansible-lint to reformat YAML files and run rule transforms (Reformatting YAML files standardizes spacing, quotes, etc. A rule transform can fix or simplify fixing issues identified by that rule). You can limit the effective rule transforms (the 'write_list') by passing a keywords 'all' or 'none' or a comma separated list of rule ids or rule tags. YAML reformatting happens whenever '--write' or '--write=' is used. '--write' and '--write=all' are equivalent: they allow all transforms to run. The effective list of transforms comes from 'write_list' in the config file, followed whatever '--write' args are provided on the commandline. '--write=none' resets the list of transforms to allow reformatting YAML without running any of the transforms (ie '--write=none,rule-id' will ignore write_list in the config file and only run the rule-id transform). --show-relpath Display path relative to CWD -t TAGS, --tags TAGS only check rules whose id/tags match these values -v Increase verbosity level (-vv for more) -x SKIP_LIST, --skip-list SKIP_LIST only check rules whose id/tags do not match these values -w WARN_LIST, --warn-list WARN_LIST only warn about these rules, unless overridden in config file. Current version default value is: experimental, jinja[spacing], name[casing], name[play], role-name --enable-list ENABLE_LIST activate optional rules by their tag name --nocolor disable colored output, same as NO_COLOR=1 --force-color Force colored output, same as FORCE_COLOR=1 --exclude EXCLUDE_PATHS path to directories or files to skip. This option is repeatable. -c CONFIG_FILE, --config-file CONFIG_FILE Specify configuration file to use. By default it will look for '.ansible-lint' or '.config/ansible-lint.yml' --offline Disable installation of requirements.yml --version","title":"Help content"},{"location":"descriptors/ansible_ansible_lint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): ansible-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/arm/","text":"ARM Linters Linter Configuration key Status arm-ttk ARM Linted files File extensions: .json Detected file content: schema\\.management\\.azure\\.com Configuration in MegaLinter Variable Description Default value ARM_FILTER_REGEX_INCLUDE Custom regex including filter ARM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh APK packages (Linux): icu-libs","title":"All ARM linters"},{"location":"descriptors/arm/#arm","text":"","title":"ARM"},{"location":"descriptors/arm/#linters","text":"Linter Configuration key Status arm-ttk ARM","title":"Linters"},{"location":"descriptors/arm/#linted-files","text":"File extensions: .json Detected file content: schema\\.management\\.azure\\.com","title":"Linted files"},{"location":"descriptors/arm/#configuration-in-megalinter","text":"Variable Description Default value ARM_FILTER_REGEX_INCLUDE Custom regex including filter ARM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/arm/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/arm/#installation","text":"Dockerfile commands : ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh APK packages (Linux): icu-libs","title":"Installation"},{"location":"descriptors/arm_arm_ttk/","text":"arm-ttk arm-ttk documentation Visit Official Web Site See How to configure arm-ttk rules If custom .arm-ttk.psd1 config file is not found, .arm-ttk.psd1 will be used Configuration in MegaLinter Enable arm-ttk by adding ARM_ARM_TTK in ENABLE_LINTERS variable Disable arm-ttk by adding ARM_ARM_TTK in DISABLE_LINTERS variable Variable Description Default value ARM_ARM_TTK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ARM_ARM_TTK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file ARM_ARM_TTK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file ARM_ARM_TTK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file ARM_ARM_TTK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] ARM_ARM_TTK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ARM_ARM_TTK_PRE_COMMANDS List of bash commands to run before the linter None ARM_ARM_TTK_POST_COMMANDS List of bash commands to run after the linter None ARM_ARM_TTK_CONFIG_FILE arm-ttk configuration file name Use LINTER_DEFAULT to let the linter find it .arm-ttk.psd1 ARM_ARM_TTK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ARM_ARM_TTK_DISABLE_ERRORS Run linter but consider errors as warnings false ARM_ARM_TTK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use arm-ttk in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code ARMTTKExtension MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .json Detected file content (regex): schema\\.management\\.azure\\.com How the linting is performed arm-ttk is called one time by identified file ( file CLI lint mode) Example calls pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; Test-AzTemplate -TemplatePath myfile.json; if (${Error}.Count) {exit 1}\" \" \"pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; ${config} = $(Import-PowerShellDataFile -Path \".arm-ttk.psd1\"); Test-AzTemplate @config -TemplatePath myfile.json; if (${Error}.Count) {exit 1} \" Help content \u001b[91mTest-AzTemplate: \u001b[96mLine | \u001b[96m 2 | \u001b[0m $TAZ_V = (Test-AzTemplate \u001b[96m-help\u001b[0m); \u001b[96m | \u001b[91m ~~~~~ \u001b[91m\u001b[96m | \u001b[91mA parameter cannot be found that matches parameter name 'help'.\u001b[0m Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh # Linter install ARG ARM_TTK_NAME='master.zip' ARG ARM_TTK_URI='https://github.com/Azure/arm-ttk/archive/master.zip' ARG ARM_TTK_DIRECTORY='/opt/microsoft' ENV ARM_TTK_PSD1=\"${ARM_TTK_DIRECTORY}/arm-ttk-master/arm-ttk/arm-ttk.psd1\" RUN curl --retry 5 --retry-delay 5 -sLO \"${ARM_TTK_URI}\" \\ && unzip \"${ARM_TTK_NAME}\" -d \"${ARM_TTK_DIRECTORY}\" \\ && rm \"${ARM_TTK_NAME}\" \\ && ln -sTf \"${ARM_TTK_PSD1}\" /usr/bin/arm-ttk \\ && chmod a+x /usr/bin/arm-ttk","title":"arm-ttk"},{"location":"descriptors/arm_arm_ttk/#arm-ttk","text":"","title":"arm-ttk"},{"location":"descriptors/arm_arm_ttk/#arm-ttk-documentation","text":"Visit Official Web Site See How to configure arm-ttk rules If custom .arm-ttk.psd1 config file is not found, .arm-ttk.psd1 will be used","title":"arm-ttk documentation"},{"location":"descriptors/arm_arm_ttk/#configuration-in-megalinter","text":"Enable arm-ttk by adding ARM_ARM_TTK in ENABLE_LINTERS variable Disable arm-ttk by adding ARM_ARM_TTK in DISABLE_LINTERS variable Variable Description Default value ARM_ARM_TTK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ARM_ARM_TTK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file ARM_ARM_TTK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file ARM_ARM_TTK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file ARM_ARM_TTK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] ARM_ARM_TTK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ARM_ARM_TTK_PRE_COMMANDS List of bash commands to run before the linter None ARM_ARM_TTK_POST_COMMANDS List of bash commands to run after the linter None ARM_ARM_TTK_CONFIG_FILE arm-ttk configuration file name Use LINTER_DEFAULT to let the linter find it .arm-ttk.psd1 ARM_ARM_TTK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules ARM_ARM_TTK_DISABLE_ERRORS Run linter but consider errors as warnings false ARM_ARM_TTK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/arm_arm_ttk/#ide-integration","text":"Use arm-ttk in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code ARMTTKExtension","title":"IDE Integration"},{"location":"descriptors/arm_arm_ttk/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/arm_arm_ttk/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/arm_arm_ttk/#how-are-identified-applicable-files","text":"File extensions: .json Detected file content (regex): schema\\.management\\.azure\\.com","title":"How are identified applicable files"},{"location":"descriptors/arm_arm_ttk/#how-the-linting-is-performed","text":"arm-ttk is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/arm_arm_ttk/#example-calls","text":"pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; Test-AzTemplate -TemplatePath myfile.json; if (${Error}.Count) {exit 1}\" \" \"pwsh -NoProfile -NoLogo -Command \" Import-Module /usr/bin/arm-ttk; ${config} = $(Import-PowerShellDataFile -Path \".arm-ttk.psd1\"); Test-AzTemplate @config -TemplatePath myfile.json; if (${Error}.Count) {exit 1} \"","title":"Example calls"},{"location":"descriptors/arm_arm_ttk/#help-content","text":"\u001b[91mTest-AzTemplate: \u001b[96mLine | \u001b[96m 2 | \u001b[0m $TAZ_V = (Test-AzTemplate \u001b[96m-help\u001b[0m); \u001b[96m | \u001b[91m ~~~~~ \u001b[91m\u001b[96m | \u001b[91mA parameter cannot be found that matches parameter name 'help'.\u001b[0m","title":"Help content"},{"location":"descriptors/arm_arm_ttk/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh # Linter install ARG ARM_TTK_NAME='master.zip' ARG ARM_TTK_URI='https://github.com/Azure/arm-ttk/archive/master.zip' ARG ARM_TTK_DIRECTORY='/opt/microsoft' ENV ARM_TTK_PSD1=\"${ARM_TTK_DIRECTORY}/arm-ttk-master/arm-ttk/arm-ttk.psd1\" RUN curl --retry 5 --retry-delay 5 -sLO \"${ARM_TTK_URI}\" \\ && unzip \"${ARM_TTK_NAME}\" -d \"${ARM_TTK_DIRECTORY}\" \\ && rm \"${ARM_TTK_NAME}\" \\ && ln -sTf \"${ARM_TTK_PSD1}\" /usr/bin/arm-ttk \\ && chmod a+x /usr/bin/arm-ttk","title":"Installation on mega-linter Docker image"},{"location":"descriptors/bash/","text":"BASH Linters Linter Configuration key Status bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT Linted files File extensions: .sh .bash .dash .ksh Configuration in MegaLinter Variable Description Default value BASH_FILTER_REGEX_INCLUDE Custom regex including filter BASH_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): bash","title":"All BASH linters"},{"location":"descriptors/bash/#bash","text":"","title":"BASH"},{"location":"descriptors/bash/#linters","text":"Linter Configuration key Status bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT","title":"Linters"},{"location":"descriptors/bash/#linted-files","text":"File extensions: .sh .bash .dash .ksh","title":"Linted files"},{"location":"descriptors/bash/#configuration-in-megalinter","text":"Variable Description Default value BASH_FILTER_REGEX_INCLUDE Custom regex including filter BASH_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/bash/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash/#installation","text":"APK packages (Linux): bash","title":"Installation"},{"location":"descriptors/bash_bash_exec/","text":"bash-exec Checks if shell files are executable Note: You can run git add --chmod=+x myfile.sh to make a file executable on Windows bash-exec documentation Version in MegaLinter: 5.1.16 Visit Official Web Site Configuration in MegaLinter Enable bash-exec by adding BASH_EXEC in ENABLE_LINTERS variable Disable bash-exec by adding BASH_EXEC in DISABLE_LINTERS variable Variable Description Default value ERROR_ON_MISSING_EXEC_BIT If set to false , the bash-exec linter will report a warning if a shell script is not executable. If set to true , the bash-exec linter will report an error instead false BASH_EXEC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_EXEC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file BASH_EXEC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file BASH_EXEC_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file BASH_EXEC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_EXEC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_EXEC_PRE_COMMANDS List of bash commands to run before the linter None BASH_EXEC_POST_COMMANDS List of bash commands to run after the linter None BASH_EXEC_DISABLE_ERRORS Run linter but consider errors as warnings false BASH_EXEC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .sh , .bash , .dash , .ksh How the linting is performed bash-exec is called one time by identified file ( file CLI lint mode) Example calls bash-exec myfile.sh Help content GNU bash, version 5.1.16(1)-release-(x86_64-alpine-linux-musl) Usage: bash [GNU long option] [option] ... bash [GNU long option] [option] script-file ... GNU long options: --debug --debugger --dump-po-strings --dump-strings --help --init-file --login --noediting --noprofile --norc --posix --pretty-print --rcfile --restricted --verbose --version Shell options: -ilrsD or -c command or -O shopt_option (invocation only) -abefhkmnptuvxBCHP or -o option Type `bash -c \"help set\"' for more information about shell options. Type `bash -c help' for more information about shell builtin commands. Use the `bashbug' command to report bugs. bash home page: <http://www.gnu.org/software/bash> General help using GNU software: <http://www.gnu.org/gethelp/> Installation on mega-linter Docker image Dockerfile commands : RUN printf '#!/bin/bash \\\\n\\\\nif [[ -x \"$1\" ]]; then exit 0; else echo \"Error: File:[$1] is not executable\"; exit 1; fi' > /usr/bin/bash-exec \\ && chmod +x /usr/bin/bash-exec","title":"bash-exec"},{"location":"descriptors/bash_bash_exec/#bash-exec","text":"Checks if shell files are executable Note: You can run git add --chmod=+x myfile.sh to make a file executable on Windows","title":"bash-exec"},{"location":"descriptors/bash_bash_exec/#bash-exec-documentation","text":"Version in MegaLinter: 5.1.16 Visit Official Web Site","title":"bash-exec documentation"},{"location":"descriptors/bash_bash_exec/#configuration-in-megalinter","text":"Enable bash-exec by adding BASH_EXEC in ENABLE_LINTERS variable Disable bash-exec by adding BASH_EXEC in DISABLE_LINTERS variable Variable Description Default value ERROR_ON_MISSING_EXEC_BIT If set to false , the bash-exec linter will report a warning if a shell script is not executable. If set to true , the bash-exec linter will report an error instead false BASH_EXEC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_EXEC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file BASH_EXEC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file BASH_EXEC_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file BASH_EXEC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_EXEC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_EXEC_PRE_COMMANDS List of bash commands to run before the linter None BASH_EXEC_POST_COMMANDS List of bash commands to run after the linter None BASH_EXEC_DISABLE_ERRORS Run linter but consider errors as warnings false BASH_EXEC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/bash_bash_exec/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/bash_bash_exec/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash_bash_exec/#how-are-identified-applicable-files","text":"File extensions: .sh , .bash , .dash , .ksh","title":"How are identified applicable files"},{"location":"descriptors/bash_bash_exec/#how-the-linting-is-performed","text":"bash-exec is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/bash_bash_exec/#example-calls","text":"bash-exec myfile.sh","title":"Example calls"},{"location":"descriptors/bash_bash_exec/#help-content","text":"GNU bash, version 5.1.16(1)-release-(x86_64-alpine-linux-musl) Usage: bash [GNU long option] [option] ... bash [GNU long option] [option] script-file ... GNU long options: --debug --debugger --dump-po-strings --dump-strings --help --init-file --login --noediting --noprofile --norc --posix --pretty-print --rcfile --restricted --verbose --version Shell options: -ilrsD or -c command or -O shopt_option (invocation only) -abefhkmnptuvxBCHP or -o option Type `bash -c \"help set\"' for more information about shell options. Type `bash -c help' for more information about shell builtin commands. Use the `bashbug' command to report bugs. bash home page: <http://www.gnu.org/software/bash> General help using GNU software: <http://www.gnu.org/gethelp/>","title":"Help content"},{"location":"descriptors/bash_bash_exec/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN printf '#!/bin/bash \\\\n\\\\nif [[ -x \"$1\" ]]; then exit 0; else echo \"Error: File:[$1] is not executable\"; exit 1; fi' > /usr/bin/bash-exec \\ && chmod +x /usr/bin/bash-exec","title":"Installation on mega-linter Docker image"},{"location":"descriptors/bash_shellcheck/","text":"shellcheck shellcheck documentation Version in MegaLinter: 0.8.0 Visit Official Web Site See How to disable shellcheck rules in files See Index of problems detected by shellcheck Configuration in MegaLinter Enable shellcheck by adding BASH_SHELLCHECK in ENABLE_LINTERS variable Disable shellcheck by adding BASH_SHELLCHECK in DISABLE_LINTERS variable Variable Description Default value BASH_SHELLCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHELLCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file BASH_SHELLCHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files BASH_SHELLCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHELLCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHELLCHECK_PRE_COMMANDS List of bash commands to run before the linter None BASH_SHELLCHECK_POST_COMMANDS List of bash commands to run after the linter None BASH_SHELLCHECK_DISABLE_ERRORS Run linter but consider errors as warnings false BASH_SHELLCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use shellcheck in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-shellcheck Visit Web Site Emacs flycheck Visit Web Site Emacs flymake-shellcheck Visit Web Site Sublime Text SublimeLinter-shellcheck Visit Web Site vim ale Visit Web Site vim neomake Visit Web Site vim syntastic Visit Web Site Visual Studio Code vscode-shellcheck MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .sh , .bash , .dash , .ksh How the linting is performed shellcheck is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls shellcheck --color=auto --external-sources myfile.sh Help content Usage: shellcheck [OPTIONS...] FILES... -a --check-sourced Include warnings from sourced files -C[WHEN] --color[=WHEN] Use color (auto, always, never) -i CODE1,CODE2.. --include=CODE1,CODE2.. Consider only given types of warnings -e CODE1,CODE2.. --exclude=CODE1,CODE2.. Exclude types of warnings -f FORMAT --format=FORMAT Output format (checkstyle, diff, gcc, json, json1, quiet, tty) --list-optional List checks disabled by default --norc Don't look for .shellcheckrc files -o check1,check2.. --enable=check1,check2.. List of optional checks to enable (or 'all') -P SOURCEPATHS --source-path=SOURCEPATHS Specify path when looking for sourced files (\"SCRIPTDIR\" for script's dir) -s SHELLNAME --shell=SHELLNAME Specify dialect (sh, bash, dash, ksh) -S SEVERITY --severity=SEVERITY Minimum severity of errors to consider (error, warning, info, style) -V --version Print version information -W NUM --wiki-link-count=NUM The number of wiki links to show, when applicable -x --external-sources Allow 'source' outside of FILES --help Show this usage summary and exit Installation on mega-linter Docker image Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/shellcheck\" \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz\" | tar -xJv --directory ${ML_THIRD_PARTY_DIR} \\ && mv \"${ML_THIRD_PARTY_DIR}/shellcheck-stable/shellcheck\" /usr/bin/ \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete","title":"shellcheck"},{"location":"descriptors/bash_shellcheck/#shellcheck","text":"","title":"shellcheck"},{"location":"descriptors/bash_shellcheck/#shellcheck-documentation","text":"Version in MegaLinter: 0.8.0 Visit Official Web Site See How to disable shellcheck rules in files See Index of problems detected by shellcheck","title":"shellcheck documentation"},{"location":"descriptors/bash_shellcheck/#configuration-in-megalinter","text":"Enable shellcheck by adding BASH_SHELLCHECK in ENABLE_LINTERS variable Disable shellcheck by adding BASH_SHELLCHECK in DISABLE_LINTERS variable Variable Description Default value BASH_SHELLCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHELLCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file BASH_SHELLCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file BASH_SHELLCHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files BASH_SHELLCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHELLCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHELLCHECK_PRE_COMMANDS List of bash commands to run before the linter None BASH_SHELLCHECK_POST_COMMANDS List of bash commands to run after the linter None BASH_SHELLCHECK_DISABLE_ERRORS Run linter but consider errors as warnings false BASH_SHELLCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/bash_shellcheck/#ide-integration","text":"Use shellcheck in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-shellcheck Visit Web Site Emacs flycheck Visit Web Site Emacs flymake-shellcheck Visit Web Site Sublime Text SublimeLinter-shellcheck Visit Web Site vim ale Visit Web Site vim neomake Visit Web Site vim syntastic Visit Web Site Visual Studio Code vscode-shellcheck","title":"IDE Integration"},{"location":"descriptors/bash_shellcheck/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/bash_shellcheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash_shellcheck/#how-are-identified-applicable-files","text":"File extensions: .sh , .bash , .dash , .ksh","title":"How are identified applicable files"},{"location":"descriptors/bash_shellcheck/#how-the-linting-is-performed","text":"shellcheck is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/bash_shellcheck/#example-calls","text":"shellcheck --color=auto --external-sources myfile.sh","title":"Example calls"},{"location":"descriptors/bash_shellcheck/#help-content","text":"Usage: shellcheck [OPTIONS...] FILES... -a --check-sourced Include warnings from sourced files -C[WHEN] --color[=WHEN] Use color (auto, always, never) -i CODE1,CODE2.. --include=CODE1,CODE2.. Consider only given types of warnings -e CODE1,CODE2.. --exclude=CODE1,CODE2.. Exclude types of warnings -f FORMAT --format=FORMAT Output format (checkstyle, diff, gcc, json, json1, quiet, tty) --list-optional List checks disabled by default --norc Don't look for .shellcheckrc files -o check1,check2.. --enable=check1,check2.. List of optional checks to enable (or 'all') -P SOURCEPATHS --source-path=SOURCEPATHS Specify path when looking for sourced files (\"SCRIPTDIR\" for script's dir) -s SHELLNAME --shell=SHELLNAME Specify dialect (sh, bash, dash, ksh) -S SEVERITY --severity=SEVERITY Minimum severity of errors to consider (error, warning, info, style) -V --version Print version information -W NUM --wiki-link-count=NUM The number of wiki links to show, when applicable -x --external-sources Allow 'source' outside of FILES --help Show this usage summary and exit","title":"Help content"},{"location":"descriptors/bash_shellcheck/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/shellcheck\" \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && wget -qO- \"https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz\" | tar -xJv --directory ${ML_THIRD_PARTY_DIR} \\ && mv \"${ML_THIRD_PARTY_DIR}/shellcheck-stable/shellcheck\" /usr/bin/ \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete","title":"Installation on mega-linter Docker image"},{"location":"descriptors/bash_shfmt/","text":"shfmt shfmt documentation Version in MegaLinter: 3.6.0 Visit Official Web Site Configuration in MegaLinter Enable shfmt by adding BASH_SHFMT in ENABLE_LINTERS variable Disable shfmt by adding BASH_SHFMT in DISABLE_LINTERS variable Enable auto-fixes by adding BASH_SHFMT in APPLY_FIXES variable Variable Description Default value BASH_SHFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file BASH_SHFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file BASH_SHFMT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files BASH_SHFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHFMT_PRE_COMMANDS List of bash commands to run before the linter None BASH_SHFMT_POST_COMMANDS List of bash commands to run after the linter None BASH_SHFMT_DISABLE_ERRORS Run linter but consider errors as warnings true BASH_SHFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use shfmt in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom format-shell Visit Web Site Emacs emacs-shfmt Visit Web Site IDEA shell-scripts Visit Web Site micro micro Visit Web Site Sublime Text Sublime-Pretty-Shell Visit Web Site vim vim-shfmt Visit Web Site Visual Studio Code shell-format MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .sh , .bash , .dash , .ksh How the linting is performed shfmt is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls shfmt -d myfile.sh shfmt -w myfile.sh Help content usage: shfmt [flags] [path ...] shfmt formats shell programs. If the only argument is a dash ('-') or no arguments are given, standard input will be used. If a given path is a directory, all shell scripts found under that directory will be used. --version show version and exit -l, --list list files whose formatting differs from shfmt's -w, --write write result to file instead of stdout -d, --diff error with a diff when the formatting differs -s, --simplify simplify the code -mn, --minify minify the code to reduce its size (implies -s) Parser options: -ln, --language-dialect str bash/posix/mksh/bats, default \"auto\" -p, --posix shorthand for -ln=posix --filename str provide a name for the standard input file Printer options: -i, --indent uint 0 for tabs (default), >0 for number of spaces -bn, --binary-next-line binary ops like && and | may start a line -ci, --case-indent switch cases will be indented -sr, --space-redirects redirect operators will be followed by a space -kp, --keep-padding keep column alignment paddings -fn, --func-next-line function opening braces are placed on a separate line Utilities: -f, --find recursively find all shell files and print the paths --to-json print syntax tree to stdout as a typed JSON --from-json read syntax tree from stdin as a typed JSON For more information, see 'man shfmt' and https://github.com/mvdan/sh. Installation on mega-linter Docker image Dockerfile commands : FROM mvdan/shfmt:latest-alpine as shfmt COPY --from=shfmt /bin/shfmt /usr/bin/ APK packages (Linux): bash go","title":"shfmt"},{"location":"descriptors/bash_shfmt/#shfmt","text":"","title":"shfmt"},{"location":"descriptors/bash_shfmt/#shfmt-documentation","text":"Version in MegaLinter: 3.6.0 Visit Official Web Site","title":"shfmt documentation"},{"location":"descriptors/bash_shfmt/#configuration-in-megalinter","text":"Enable shfmt by adding BASH_SHFMT in ENABLE_LINTERS variable Disable shfmt by adding BASH_SHFMT in DISABLE_LINTERS variable Enable auto-fixes by adding BASH_SHFMT in APPLY_FIXES variable Variable Description Default value BASH_SHFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" BASH_SHFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file BASH_SHFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file BASH_SHFMT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files BASH_SHFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sh\", \".bash\", \".dash\", \".ksh\"] BASH_SHFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file BASH_SHFMT_PRE_COMMANDS List of bash commands to run before the linter None BASH_SHFMT_POST_COMMANDS List of bash commands to run after the linter None BASH_SHFMT_DISABLE_ERRORS Run linter but consider errors as warnings true BASH_SHFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/bash_shfmt/#ide-integration","text":"Use shfmt in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom format-shell Visit Web Site Emacs emacs-shfmt Visit Web Site IDEA shell-scripts Visit Web Site micro micro Visit Web Site Sublime Text Sublime-Pretty-Shell Visit Web Site vim vim-shfmt Visit Web Site Visual Studio Code shell-format","title":"IDE Integration"},{"location":"descriptors/bash_shfmt/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/bash_shfmt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/bash_shfmt/#how-are-identified-applicable-files","text":"File extensions: .sh , .bash , .dash , .ksh","title":"How are identified applicable files"},{"location":"descriptors/bash_shfmt/#how-the-linting-is-performed","text":"shfmt is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/bash_shfmt/#example-calls","text":"shfmt -d myfile.sh shfmt -w myfile.sh","title":"Example calls"},{"location":"descriptors/bash_shfmt/#help-content","text":"usage: shfmt [flags] [path ...] shfmt formats shell programs. If the only argument is a dash ('-') or no arguments are given, standard input will be used. If a given path is a directory, all shell scripts found under that directory will be used. --version show version and exit -l, --list list files whose formatting differs from shfmt's -w, --write write result to file instead of stdout -d, --diff error with a diff when the formatting differs -s, --simplify simplify the code -mn, --minify minify the code to reduce its size (implies -s) Parser options: -ln, --language-dialect str bash/posix/mksh/bats, default \"auto\" -p, --posix shorthand for -ln=posix --filename str provide a name for the standard input file Printer options: -i, --indent uint 0 for tabs (default), >0 for number of spaces -bn, --binary-next-line binary ops like && and | may start a line -ci, --case-indent switch cases will be indented -sr, --space-redirects redirect operators will be followed by a space -kp, --keep-padding keep column alignment paddings -fn, --func-next-line function opening braces are placed on a separate line Utilities: -f, --find recursively find all shell files and print the paths --to-json print syntax tree to stdout as a typed JSON --from-json read syntax tree from stdin as a typed JSON For more information, see 'man shfmt' and https://github.com/mvdan/sh.","title":"Help content"},{"location":"descriptors/bash_shfmt/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM mvdan/shfmt:latest-alpine as shfmt COPY --from=shfmt /bin/shfmt /usr/bin/ APK packages (Linux): bash go","title":"Installation on mega-linter Docker image"},{"location":"descriptors/c/","text":"C Linters Linter Configuration key Status cpplint C_CPPLINT Linted files File extensions: .c .h Configuration in MegaLinter Variable Description Default value C_FILTER_REGEX_INCLUDE Custom regex including filter C_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All C linters"},{"location":"descriptors/c/#c","text":"","title":"C"},{"location":"descriptors/c/#linters","text":"Linter Configuration key Status cpplint C_CPPLINT","title":"Linters"},{"location":"descriptors/c/#linted-files","text":"File extensions: .c .h","title":"Linted files"},{"location":"descriptors/c/#configuration-in-megalinter","text":"Variable Description Default value C_FILTER_REGEX_INCLUDE Custom regex including filter C_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/c_cpplint/","text":"cpplint cpplint documentation Version in MegaLinter: 1.6.1 Visit Official Web Site See Index of problems detected by cpplint Configuration in MegaLinter Enable cpplint by adding C_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding C_CPPLINT in DISABLE_LINTERS variable Variable Description Default value C_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" C_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file C_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file C_CPPLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files C_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".c\", \".h\"] C_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file C_CPPLINT_PRE_COMMANDS List of bash commands to run before the linter None C_CPPLINT_POST_COMMANDS List of bash commands to run after the linter None C_CPPLINT_DISABLE_ERRORS Run linter but consider errors as warnings false C_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .c , .h How the linting is performed cpplint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls cpplint myfile.cpp Help content Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['c', 'c++', 'cc', 'cpp', 'cu', 'cuh', 'cxx', 'h', 'h++', 'hh', 'hpp', 'hxx']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=-whitespace,-runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=c,c++,cc,cpp,cu,cuh,cxx,h,h++,hh,hpp,hxx includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions ['cuh', 'h', 'h++', 'hh', 'hpp', 'hxx'] will be assumed to be headers) Examples: --headers=cuh,h,h++,hh,hpp,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories. Installation on mega-linter Docker image PIP packages (Python): cpplint","title":"cpplint"},{"location":"descriptors/c_cpplint/#cpplint","text":"","title":"cpplint"},{"location":"descriptors/c_cpplint/#cpplint-documentation","text":"Version in MegaLinter: 1.6.1 Visit Official Web Site See Index of problems detected by cpplint","title":"cpplint documentation"},{"location":"descriptors/c_cpplint/#configuration-in-megalinter","text":"Enable cpplint by adding C_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding C_CPPLINT in DISABLE_LINTERS variable Variable Description Default value C_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" C_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file C_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file C_CPPLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files C_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".c\", \".h\"] C_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file C_CPPLINT_PRE_COMMANDS List of bash commands to run before the linter None C_CPPLINT_POST_COMMANDS List of bash commands to run after the linter None C_CPPLINT_DISABLE_ERRORS Run linter but consider errors as warnings false C_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/c_cpplint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/c_cpplint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/c_cpplint/#how-are-identified-applicable-files","text":"File extensions: .c , .h","title":"How are identified applicable files"},{"location":"descriptors/c_cpplint/#how-the-linting-is-performed","text":"cpplint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/c_cpplint/#example-calls","text":"cpplint myfile.cpp","title":"Example calls"},{"location":"descriptors/c_cpplint/#help-content","text":"Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['c', 'c++', 'cc', 'cpp', 'cu', 'cuh', 'cxx', 'h', 'h++', 'hh', 'hpp', 'hxx']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=-whitespace,-runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=c,c++,cc,cpp,cu,cuh,cxx,h,h++,hh,hpp,hxx includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions ['cuh', 'h', 'h++', 'hh', 'hpp', 'hxx'] will be assumed to be headers) Examples: --headers=cuh,h,h++,hh,hpp,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories.","title":"Help content"},{"location":"descriptors/c_cpplint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): cpplint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/clojure/","text":"CLOJURE Linters Linter Configuration key Status clj-kondo CLOJURE Linted files File extensions: .clj .cljs .cljc .edn Configuration in MegaLinter Variable Description Default value CLOJURE_FILTER_REGEX_INCLUDE Custom regex including filter CLOJURE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All CLOJURE linters"},{"location":"descriptors/clojure/#clojure","text":"","title":"CLOJURE"},{"location":"descriptors/clojure/#linters","text":"Linter Configuration key Status clj-kondo CLOJURE","title":"Linters"},{"location":"descriptors/clojure/#linted-files","text":"File extensions: .clj .cljs .cljc .edn","title":"Linted files"},{"location":"descriptors/clojure/#configuration-in-megalinter","text":"Variable Description Default value CLOJURE_FILTER_REGEX_INCLUDE Custom regex including filter CLOJURE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/clojure_clj_kondo/","text":"clj-kondo documentation Version in MegaLinter: 2022.09.08 Visit Official Web Site See How to configure clj-kondo rules If custom .clj-kondo/config.edn config file is not found, .clj-kondo/config.edn will be used See How to disable clj-kondo rules in files See Index of problems detected by clj-kondo Configuration in MegaLinter Enable clj-kondo by adding CLOJURE_CLJ_KONDO in ENABLE_LINTERS variable Disable clj-kondo by adding CLOJURE_CLJ_KONDO in DISABLE_LINTERS variable Variable Description Default value CLOJURE_CLJ_KONDO_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CLOJURE_CLJ_KONDO_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file CLOJURE_CLJ_KONDO_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".clj\", \".cljs\", \".cljc\", \".edn\"] CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOJURE_CLJ_KONDO_PRE_COMMANDS List of bash commands to run before the linter None CLOJURE_CLJ_KONDO_POST_COMMANDS List of bash commands to run after the linter None CLOJURE_CLJ_KONDO_CONFIG_FILE clj-kondo configuration file name Use LINTER_DEFAULT to let the linter find it .clj-kondo/config.edn CLOJURE_CLJ_KONDO_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOJURE_CLJ_KONDO_DISABLE_ERRORS Run linter but consider errors as warnings false CLOJURE_CLJ_KONDO_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use clj-kondo in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-kondo Visit Web Site Emacs flycheck-clj-kondo Visit Web Site Visual Studio Code clj-kondo Visual Studio Code Clojure lint Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 java Optimized for JAVA based projects 50 Behind the scenes How are identified applicable files File extensions: .clj , .cljs , .cljc , .edn How the linting is performed clj-kondo is called one time by identified file ( file CLI lint mode) Example calls clj-kondo --lint myfile.clj clj-kondo --lint --config .clj-kondo/config.edn myfile.clj Help content clj-kondo v2022.09.08 Options: --lint <file>: a file can either be a normal file, directory or classpath. In the case of a directory or classpath, only .clj, .cljs and .cljc will be processed. Use - as filename for reading from stdin. --lang <lang>: if lang cannot be derived from the file extension this option will be used. Supported values: clj, cljs, cljc. --filename <file>: in case stdin is used for linting, use this to set the reported filename. --cache-dir: when this option is provided, the cache will be resolved to this directory. If --cache is false, this option will be ignored. --cache: if false, won't use cache. Otherwise, will try to resolve cache using `--cache-dir`. If `--cache-dir` is not set, cache is resolved using the nearest `.clj-kondo` directory in the current and parent directories. --config <config>: config may be a file or an EDN expression. See https://cljdoc.org/d/clj-kondo/clj-kondo/2022.09.08/doc/configuration --config-dir <config-dir>: use this config directory instead of auto-detected .clj-kondo dir. --parallel: lint sources in parallel. --dependencies: don't report any findings. Useful for populating cache while linting dependencies. --copy-configs: copy configs from dependencies while linting. --skip-lint: skip lint/analysis, still check for other tasks like copy-configs. --fail-level <level>: minimum severity for exit with error code. Supported values: warning, error. The default level if unspecified is warning. --debug: print debug information. Installation on mega-linter Docker image Dockerfile commands : FROM cljkondo/clj-kondo:2022.09.08-alpine as clj-kondo COPY --from=clj-kondo /bin/clj-kondo /usr/bin/","title":"clj-kondo"},{"location":"descriptors/clojure_clj_kondo/#clj-kondo-documentation","text":"Version in MegaLinter: 2022.09.08 Visit Official Web Site See How to configure clj-kondo rules If custom .clj-kondo/config.edn config file is not found, .clj-kondo/config.edn will be used See How to disable clj-kondo rules in files See Index of problems detected by clj-kondo","title":"clj-kondo documentation"},{"location":"descriptors/clojure_clj_kondo/#configuration-in-megalinter","text":"Enable clj-kondo by adding CLOJURE_CLJ_KONDO in ENABLE_LINTERS variable Disable clj-kondo by adding CLOJURE_CLJ_KONDO in DISABLE_LINTERS variable Variable Description Default value CLOJURE_CLJ_KONDO_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOJURE_CLJ_KONDO_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CLOJURE_CLJ_KONDO_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CLOJURE_CLJ_KONDO_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file CLOJURE_CLJ_KONDO_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".clj\", \".cljs\", \".cljc\", \".edn\"] CLOJURE_CLJ_KONDO_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOJURE_CLJ_KONDO_PRE_COMMANDS List of bash commands to run before the linter None CLOJURE_CLJ_KONDO_POST_COMMANDS List of bash commands to run after the linter None CLOJURE_CLJ_KONDO_CONFIG_FILE clj-kondo configuration file name Use LINTER_DEFAULT to let the linter find it .clj-kondo/config.edn CLOJURE_CLJ_KONDO_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOJURE_CLJ_KONDO_DISABLE_ERRORS Run linter but consider errors as warnings false CLOJURE_CLJ_KONDO_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/clojure_clj_kondo/#ide-integration","text":"Use clj-kondo in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-kondo Visit Web Site Emacs flycheck-clj-kondo Visit Web Site Visual Studio Code clj-kondo Visual Studio Code Clojure lint Visit Web Site","title":"IDE Integration"},{"location":"descriptors/clojure_clj_kondo/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 java Optimized for JAVA based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/clojure_clj_kondo/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/clojure_clj_kondo/#how-are-identified-applicable-files","text":"File extensions: .clj , .cljs , .cljc , .edn","title":"How are identified applicable files"},{"location":"descriptors/clojure_clj_kondo/#how-the-linting-is-performed","text":"clj-kondo is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/clojure_clj_kondo/#example-calls","text":"clj-kondo --lint myfile.clj clj-kondo --lint --config .clj-kondo/config.edn myfile.clj","title":"Example calls"},{"location":"descriptors/clojure_clj_kondo/#help-content","text":"clj-kondo v2022.09.08 Options: --lint <file>: a file can either be a normal file, directory or classpath. In the case of a directory or classpath, only .clj, .cljs and .cljc will be processed. Use - as filename for reading from stdin. --lang <lang>: if lang cannot be derived from the file extension this option will be used. Supported values: clj, cljs, cljc. --filename <file>: in case stdin is used for linting, use this to set the reported filename. --cache-dir: when this option is provided, the cache will be resolved to this directory. If --cache is false, this option will be ignored. --cache: if false, won't use cache. Otherwise, will try to resolve cache using `--cache-dir`. If `--cache-dir` is not set, cache is resolved using the nearest `.clj-kondo` directory in the current and parent directories. --config <config>: config may be a file or an EDN expression. See https://cljdoc.org/d/clj-kondo/clj-kondo/2022.09.08/doc/configuration --config-dir <config-dir>: use this config directory instead of auto-detected .clj-kondo dir. --parallel: lint sources in parallel. --dependencies: don't report any findings. Useful for populating cache while linting dependencies. --copy-configs: copy configs from dependencies while linting. --skip-lint: skip lint/analysis, still check for other tasks like copy-configs. --fail-level <level>: minimum severity for exit with error code. Supported values: warning, error. The default level if unspecified is warning. --debug: print debug information.","title":"Help content"},{"location":"descriptors/clojure_clj_kondo/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM cljkondo/clj-kondo:2022.09.08-alpine as clj-kondo COPY --from=clj-kondo /bin/clj-kondo /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/cloudformation/","text":"CLOUDFORMATION Linters Linter Configuration key Status cfn-lint CLOUDFORMATION Linted files File extensions: .yml .yaml .json Detected file content: AWSTemplateFormatVersion (AWS|Alexa|Custom):: Configuration in MegaLinter Variable Description Default value CLOUDFORMATION_FILTER_REGEX_INCLUDE Custom regex including filter CLOUDFORMATION_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All CLOUDFORMATION linters"},{"location":"descriptors/cloudformation/#cloudformation","text":"","title":"CLOUDFORMATION"},{"location":"descriptors/cloudformation/#linters","text":"Linter Configuration key Status cfn-lint CLOUDFORMATION","title":"Linters"},{"location":"descriptors/cloudformation/#linted-files","text":"File extensions: .yml .yaml .json Detected file content: AWSTemplateFormatVersion (AWS|Alexa|Custom)::","title":"Linted files"},{"location":"descriptors/cloudformation/#configuration-in-megalinter","text":"Variable Description Default value CLOUDFORMATION_FILTER_REGEX_INCLUDE Custom regex including filter CLOUDFORMATION_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/cloudformation_cfn_lint/","text":"cfn-lint documentation Version in MegaLinter: 0.66.0 Visit Official Web Site If custom .cfnlintrc.yml config file is not found, .cfnlintrc.yml will be used See Index of problems detected by cfn-lint Configuration in MegaLinter Enable cfn-lint by adding CLOUDFORMATION_CFN_LINT in ENABLE_LINTERS variable Disable cfn-lint by adding CLOUDFORMATION_CFN_LINT in DISABLE_LINTERS variable Variable Description Default value CLOUDFORMATION_CFN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CLOUDFORMATION_CFN_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOUDFORMATION_CFN_LINT_PRE_COMMANDS List of bash commands to run before the linter None CLOUDFORMATION_CFN_LINT_POST_COMMANDS List of bash commands to run after the linter None CLOUDFORMATION_CFN_LINT_CONFIG_FILE cfn-lint configuration file name Use LINTER_DEFAULT to let the linter find it .cfnlintrc.yml CLOUDFORMATION_CFN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use cfn-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom atom-cfn-lint Visit Web Site IDEA cfn-lint Sublime Text SublimeLinter CloudFormation Visit Web Site Visual Studio Code vscode-cfn-lint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 Behind the scenes How are identified applicable files File extensions: .yml , .yaml , .json Detected file content (regex): AWSTemplateFormatVersion , (AWS|Alexa|Custom):: How the linting is performed cfn-lint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls cfn-lint myfile.yml cfn-lint --config-file .cfnlintrc.yml myfile.yml Help content usage: Basic: cfn-lint test.yaml Ignore a rule: cfn-lint -i E3012 -- test.yaml Configure a rule: cfn-lint -x E3012:strict=false -t test.yaml Lint all yaml files in a folder: cfn-lint dir/**/*.yaml CloudFormation Linter options: -h, --help show this help message and exit Standard: TEMPLATE The CloudFormation template to be linted -t TEMPLATE [TEMPLATE ...], --template TEMPLATE [TEMPLATE ...] The CloudFormation template to be linted -b, --ignore-bad-template Ignore failures with Bad template --ignore-templates IGNORE_TEMPLATES [IGNORE_TEMPLATES ...] Ignore templates -f {quiet,parseable,json,junit,pretty,sarif}, --format {quiet,parseable,json,junit,pretty,sarif} Output Format -l, --list-rules list all the rules -r REGIONS [REGIONS ...], --regions REGIONS [REGIONS ...] list the regions to validate against. -i IGNORE_CHECKS [IGNORE_CHECKS ...], --ignore-checks IGNORE_CHECKS [IGNORE_CHECKS ...] only check rules whose id do not match these values -c INCLUDE_CHECKS [INCLUDE_CHECKS ...], --include-checks INCLUDE_CHECKS [INCLUDE_CHECKS ...] include rules whose id match these values -m MANDATORY_CHECKS [MANDATORY_CHECKS ...], --mandatory-checks MANDATORY_CHECKS [MANDATORY_CHECKS ...] always check rules whose id match these values, regardless of template exclusions -e, --include-experimental Include experimental rules -x CONFIGURE_RULES [CONFIGURE_RULES ...], --configure-rule CONFIGURE_RULES [CONFIGURE_RULES ...] Provide configuration for a rule. Format RuleId:key=value. Example: E3012:strict=false --config-file CONFIG_FILE Specify the cfnlintrc file to use -z CUSTOM_RULES, --custom-rules CUSTOM_RULES Allows specification of a custom rule file. -v, --version Version of cfn-lint --output-file OUTPUT_FILE Writes the output to the specified file, ideal for producing reports --merge-configs Merges lists between configuration layers Advanced / Debugging: -D, --debug Enable debug logging -I, --info Enable information logging -a APPEND_RULES [APPEND_RULES ...], --append-rules APPEND_RULES [APPEND_RULES ...] specify one or more rules directories using one or more --append-rules arguments. -o OVERRIDE_SPEC, --override-spec OVERRIDE_SPEC A CloudFormation Spec override file that allows customization -g, --build-graph Creates a file in the same directory as the template that models the template's resources in DOT format -s REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...], --registry-schemas REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...] one or more directories of CloudFormation Registry Schemas -u, --update-specs Update the CloudFormation Specs Installation on mega-linter Docker image PIP packages (Python): cfn-lint","title":"cfn-lint"},{"location":"descriptors/cloudformation_cfn_lint/#cfn-lint-documentation","text":"Version in MegaLinter: 0.66.0 Visit Official Web Site If custom .cfnlintrc.yml config file is not found, .cfnlintrc.yml will be used See Index of problems detected by cfn-lint","title":"cfn-lint documentation"},{"location":"descriptors/cloudformation_cfn_lint/#configuration-in-megalinter","text":"Enable cfn-lint by adding CLOUDFORMATION_CFN_LINT in ENABLE_LINTERS variable Disable cfn-lint by adding CLOUDFORMATION_CFN_LINT in DISABLE_LINTERS variable Variable Description Default value CLOUDFORMATION_CFN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CLOUDFORMATION_CFN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CLOUDFORMATION_CFN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CLOUDFORMATION_CFN_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files CLOUDFORMATION_CFN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] CLOUDFORMATION_CFN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CLOUDFORMATION_CFN_LINT_PRE_COMMANDS List of bash commands to run before the linter None CLOUDFORMATION_CFN_LINT_POST_COMMANDS List of bash commands to run after the linter None CLOUDFORMATION_CFN_LINT_CONFIG_FILE cfn-lint configuration file name Use LINTER_DEFAULT to let the linter find it .cfnlintrc.yml CLOUDFORMATION_CFN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false CLOUDFORMATION_CFN_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/cloudformation_cfn_lint/#ide-integration","text":"Use cfn-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom atom-cfn-lint Visit Web Site IDEA cfn-lint Sublime Text SublimeLinter CloudFormation Visit Web Site Visual Studio Code vscode-cfn-lint","title":"IDE Integration"},{"location":"descriptors/cloudformation_cfn_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21","title":"MegaLinter Flavours"},{"location":"descriptors/cloudformation_cfn_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/cloudformation_cfn_lint/#how-are-identified-applicable-files","text":"File extensions: .yml , .yaml , .json Detected file content (regex): AWSTemplateFormatVersion , (AWS|Alexa|Custom)::","title":"How are identified applicable files"},{"location":"descriptors/cloudformation_cfn_lint/#how-the-linting-is-performed","text":"cfn-lint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/cloudformation_cfn_lint/#example-calls","text":"cfn-lint myfile.yml cfn-lint --config-file .cfnlintrc.yml myfile.yml","title":"Example calls"},{"location":"descriptors/cloudformation_cfn_lint/#help-content","text":"usage: Basic: cfn-lint test.yaml Ignore a rule: cfn-lint -i E3012 -- test.yaml Configure a rule: cfn-lint -x E3012:strict=false -t test.yaml Lint all yaml files in a folder: cfn-lint dir/**/*.yaml CloudFormation Linter options: -h, --help show this help message and exit Standard: TEMPLATE The CloudFormation template to be linted -t TEMPLATE [TEMPLATE ...], --template TEMPLATE [TEMPLATE ...] The CloudFormation template to be linted -b, --ignore-bad-template Ignore failures with Bad template --ignore-templates IGNORE_TEMPLATES [IGNORE_TEMPLATES ...] Ignore templates -f {quiet,parseable,json,junit,pretty,sarif}, --format {quiet,parseable,json,junit,pretty,sarif} Output Format -l, --list-rules list all the rules -r REGIONS [REGIONS ...], --regions REGIONS [REGIONS ...] list the regions to validate against. -i IGNORE_CHECKS [IGNORE_CHECKS ...], --ignore-checks IGNORE_CHECKS [IGNORE_CHECKS ...] only check rules whose id do not match these values -c INCLUDE_CHECKS [INCLUDE_CHECKS ...], --include-checks INCLUDE_CHECKS [INCLUDE_CHECKS ...] include rules whose id match these values -m MANDATORY_CHECKS [MANDATORY_CHECKS ...], --mandatory-checks MANDATORY_CHECKS [MANDATORY_CHECKS ...] always check rules whose id match these values, regardless of template exclusions -e, --include-experimental Include experimental rules -x CONFIGURE_RULES [CONFIGURE_RULES ...], --configure-rule CONFIGURE_RULES [CONFIGURE_RULES ...] Provide configuration for a rule. Format RuleId:key=value. Example: E3012:strict=false --config-file CONFIG_FILE Specify the cfnlintrc file to use -z CUSTOM_RULES, --custom-rules CUSTOM_RULES Allows specification of a custom rule file. -v, --version Version of cfn-lint --output-file OUTPUT_FILE Writes the output to the specified file, ideal for producing reports --merge-configs Merges lists between configuration layers Advanced / Debugging: -D, --debug Enable debug logging -I, --info Enable information logging -a APPEND_RULES [APPEND_RULES ...], --append-rules APPEND_RULES [APPEND_RULES ...] specify one or more rules directories using one or more --append-rules arguments. -o OVERRIDE_SPEC, --override-spec OVERRIDE_SPEC A CloudFormation Spec override file that allows customization -g, --build-graph Creates a file in the same directory as the template that models the template's resources in DOT format -s REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...], --registry-schemas REGISTRY_SCHEMAS [REGISTRY_SCHEMAS ...] one or more directories of CloudFormation Registry Schemas -u, --update-specs Update the CloudFormation Specs","title":"Help content"},{"location":"descriptors/cloudformation_cfn_lint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): cfn-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/coffee/","text":"COFFEE Linters Linter Configuration key Status coffeelint COFFEE Linted files File extensions: .coffee Configuration in MegaLinter Variable Description Default value COFFEE_FILTER_REGEX_INCLUDE Custom regex including filter COFFEE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All COFFEE linters"},{"location":"descriptors/coffee/#coffee","text":"","title":"COFFEE"},{"location":"descriptors/coffee/#linters","text":"Linter Configuration key Status coffeelint COFFEE","title":"Linters"},{"location":"descriptors/coffee/#linted-files","text":"File extensions: .coffee","title":"Linted files"},{"location":"descriptors/coffee/#configuration-in-megalinter","text":"Variable Description Default value COFFEE_FILTER_REGEX_INCLUDE Custom regex including filter COFFEE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/coffee_coffeelint/","text":"coffeelint coffeelint documentation Version in MegaLinter: 5.2.10 Visit Official Web Site See How to configure coffeelint rules If custom .coffee-lint.json config file is not found, .coffee-lint.json will be used See How to disable coffeelint rules in files See Index of problems detected by coffeelint Configuration in MegaLinter Enable coffeelint by adding COFFEE_COFFEELINT in ENABLE_LINTERS variable Disable coffeelint by adding COFFEE_COFFEELINT in DISABLE_LINTERS variable Variable Description Default value COFFEE_COFFEELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file COFFEE_COFFEELINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file COFFEE_COFFEELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".coffee\"] COFFEE_COFFEELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file COFFEE_COFFEELINT_PRE_COMMANDS List of bash commands to run before the linter None COFFEE_COFFEELINT_POST_COMMANDS List of bash commands to run after the linter None COFFEE_COFFEELINT_CONFIG_FILE coffeelint configuration file name Use LINTER_DEFAULT to let the linter find it .coffee-lint.json COFFEE_COFFEELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules COFFEE_COFFEELINT_DISABLE_ERRORS Run linter but consider errors as warnings false COFFEE_COFFEELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use coffeelint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-coffeelint Visit Web Site IDEA coffeelint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files File extensions: .coffee How the linting is performed coffeelint is called one time by identified file ( file CLI lint mode) Example calls coffeelint myfile.coffee coffeelint -f .coffee-lint.json myfile.coffee Help content Usage: coffeelint [options] source [...] Options: -f, --file Specify a custom configuration file. --rules Specify a custom rule or directory of rules. --makeconfig Prints a default config file [boolean] --trimconfig Compares your config with the default and prints a minimal configuration [boolean] --noconfig Ignores any config file. [boolean] -h, --help Show help [boolean] -v, --version Show version number [boolean] -r (not used, but left for backward compatibility) [boolean] --reporter built in reporter (default, csv, jslint, checkstyle, raw), or module, or path to reporter file. --csv [deprecated] use --reporter csv [boolean] --jslint [deprecated] use --reporter jslint [boolean] --nocolor [deprecated] use --color=never [boolean] --checkstyle [deprecated] use --reporter checkstyle [boolean] --color=<when> When to colorize the output. <when> can be one of always, never , or auto. -s, --stdin Lint the source from stdin [boolean] -q, --quiet Only print errors. [boolean] --literate Used with --stdin to process as Literate CoffeeScript [boolean] -c, --cache Cache linting results [boolean] --ext Specify an additional file extension, separated by comma. Installation on mega-linter Docker image NPM packages (node.js): @coffeelint/cli","title":"coffeelint"},{"location":"descriptors/coffee_coffeelint/#coffeelint","text":"","title":"coffeelint"},{"location":"descriptors/coffee_coffeelint/#coffeelint-documentation","text":"Version in MegaLinter: 5.2.10 Visit Official Web Site See How to configure coffeelint rules If custom .coffee-lint.json config file is not found, .coffee-lint.json will be used See How to disable coffeelint rules in files See Index of problems detected by coffeelint","title":"coffeelint documentation"},{"location":"descriptors/coffee_coffeelint/#configuration-in-megalinter","text":"Enable coffeelint by adding COFFEE_COFFEELINT in ENABLE_LINTERS variable Disable coffeelint by adding COFFEE_COFFEELINT in DISABLE_LINTERS variable Variable Description Default value COFFEE_COFFEELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COFFEE_COFFEELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file COFFEE_COFFEELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file COFFEE_COFFEELINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file COFFEE_COFFEELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".coffee\"] COFFEE_COFFEELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file COFFEE_COFFEELINT_PRE_COMMANDS List of bash commands to run before the linter None COFFEE_COFFEELINT_POST_COMMANDS List of bash commands to run after the linter None COFFEE_COFFEELINT_CONFIG_FILE coffeelint configuration file name Use LINTER_DEFAULT to let the linter find it .coffee-lint.json COFFEE_COFFEELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules COFFEE_COFFEELINT_DISABLE_ERRORS Run linter but consider errors as warnings false COFFEE_COFFEELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/coffee_coffeelint/#ide-integration","text":"Use coffeelint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-coffeelint Visit Web Site IDEA coffeelint","title":"IDE Integration"},{"location":"descriptors/coffee_coffeelint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/coffee_coffeelint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/coffee_coffeelint/#how-are-identified-applicable-files","text":"File extensions: .coffee","title":"How are identified applicable files"},{"location":"descriptors/coffee_coffeelint/#how-the-linting-is-performed","text":"coffeelint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/coffee_coffeelint/#example-calls","text":"coffeelint myfile.coffee coffeelint -f .coffee-lint.json myfile.coffee","title":"Example calls"},{"location":"descriptors/coffee_coffeelint/#help-content","text":"Usage: coffeelint [options] source [...] Options: -f, --file Specify a custom configuration file. --rules Specify a custom rule or directory of rules. --makeconfig Prints a default config file [boolean] --trimconfig Compares your config with the default and prints a minimal configuration [boolean] --noconfig Ignores any config file. [boolean] -h, --help Show help [boolean] -v, --version Show version number [boolean] -r (not used, but left for backward compatibility) [boolean] --reporter built in reporter (default, csv, jslint, checkstyle, raw), or module, or path to reporter file. --csv [deprecated] use --reporter csv [boolean] --jslint [deprecated] use --reporter jslint [boolean] --nocolor [deprecated] use --color=never [boolean] --checkstyle [deprecated] use --reporter checkstyle [boolean] --color=<when> When to colorize the output. <when> can be one of always, never , or auto. -s, --stdin Lint the source from stdin [boolean] -q, --quiet Only print errors. [boolean] --literate Used with --stdin to process as Literate CoffeeScript [boolean] -c, --cache Cache linting results [boolean] --ext Specify an additional file extension, separated by comma.","title":"Help content"},{"location":"descriptors/coffee_coffeelint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): @coffeelint/cli","title":"Installation on mega-linter Docker image"},{"location":"descriptors/copypaste/","text":"COPYPASTE Linters Linter Configuration key Status jscpd COPYPASTE Linted files Configuration in MegaLinter Variable Description Default value COPYPASTE_FILTER_REGEX_INCLUDE Custom regex including filter COPYPASTE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All COPYPASTE linters"},{"location":"descriptors/copypaste/#copypaste","text":"","title":"COPYPASTE"},{"location":"descriptors/copypaste/#linters","text":"Linter Configuration key Status jscpd COPYPASTE","title":"Linters"},{"location":"descriptors/copypaste/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/copypaste/#configuration-in-megalinter","text":"Variable Description Default value COPYPASTE_FILTER_REGEX_INCLUDE Custom regex including filter COPYPASTE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/copypaste_jscpd/","text":"JSCPD browses all files of your repository to detect excessive copy-pastes If you need to ignore folders,files or file extensions, use glob expressions ignore property of local .jscpd.json file Example: { \"threshold\": 0, \"reporters\": [\"html\", \"markdown\"], \"ignore\": [ \"**/node_modules/**\", \"**/.git/**\", \"**/*.md\", \"**/myFolderToSkip/**\" ] } jscpd documentation Version in MegaLinter: 3.3.26 Visit Official Web Site See How to configure jscpd rules If custom .jscpd.json config file is not found, .jscpd.json will be used See How to disable jscpd rules in files Configuration in MegaLinter Enable jscpd by adding COPYPASTE_JSCPD in ENABLE_LINTERS variable Disable jscpd by adding COPYPASTE_JSCPD in DISABLE_LINTERS variable Variable Description Default value COPYPASTE_JSCPD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COPYPASTE_JSCPD_PRE_COMMANDS List of bash commands to run before the linter None COPYPASTE_JSCPD_POST_COMMANDS List of bash commands to run after the linter None COPYPASTE_JSCPD_CONFIG_FILE jscpd configuration file name Use LINTER_DEFAULT to let the linter find it .jscpd.json COPYPASTE_JSCPD_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules COPYPASTE_JSCPD_DISABLE_ERRORS Run linter but consider errors as warnings false COPYPASTE_JSCPD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed jscpd is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using jscpd configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make jscpd analyze only updated files Example calls jscpd --output ./report/copy-paste/ . jscpd --output ./report/copy-paste/ -c .jscpd.json . Help content Usage: jscpd [options] <path ...> detector of copy/paste in files Options: -V, --version output the version number -l, --min-lines [number] min size of duplication in code lines (Default is 5) -k, --min-tokens [number] min size of duplication in code tokens (Default is 50) -x, --max-lines [number] max size of source in lines (Default is 1000) -z, --max-size [string] max size of source in bytes, examples: 1kb, 1mb, 120kb (Default is 100kb) -t, --threshold [number] threshold for duplication, in case duplications >= threshold jscpd will exit with error -c, --config [string] path to config file (Default is .jscpd.json in <path>) -i, --ignore [string] glob pattern for files what should be excluded from duplication detection -r, --reporters [string] reporters or list of reporters separated with comma to use (Default is time,console) -o, --output [string] reporters to use (Default is ./report/) -m, --mode [string] mode of quality of search, can be \"strict\", \"mild\" and \"weak\" (Default is \"function mild(token) { return strict(token) && token.type !== 'empty' && token.type !== 'new_line'; }\") -f, --format [string] format or formats separated by comma (Example php,javascript,python) -p, --pattern [string] glob pattern to file search (Example **/*.txt) -b, --blame blame authors of duplications (get information about authors from git) -s, --silent do not write detection progress and result to a console --store [string] use for define custom store (e.g. --store leveldb used for big codebase) -a, --absolute use absolute path in reports -n, --noSymlinks dont use symlinks for detection in files --ignoreCase ignore case of symbols in code (experimental) -g, --gitignore ignore all files from .gitignore file --formats-exts [string] list of formats with file extensions (javascript:es,es6;dart:dt) -d, --debug show debug information, not run detection process(options list and selected files) -v, --verbose show full information during detection process --list show list of total supported formats --skipLocal skip duplicates in local folders, just detect cross folders duplications -h, --help display help for command Installation on mega-linter Docker image APK packages (Linux): nodejs npm yarn NPM packages (node.js): jscpd@3.3.26","title":"jscpd"},{"location":"descriptors/copypaste_jscpd/#jscpd-documentation","text":"Version in MegaLinter: 3.3.26 Visit Official Web Site See How to configure jscpd rules If custom .jscpd.json config file is not found, .jscpd.json will be used See How to disable jscpd rules in files","title":"jscpd documentation"},{"location":"descriptors/copypaste_jscpd/#configuration-in-megalinter","text":"Enable jscpd by adding COPYPASTE_JSCPD in ENABLE_LINTERS variable Disable jscpd by adding COPYPASTE_JSCPD in DISABLE_LINTERS variable Variable Description Default value COPYPASTE_JSCPD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" COPYPASTE_JSCPD_PRE_COMMANDS List of bash commands to run before the linter None COPYPASTE_JSCPD_POST_COMMANDS List of bash commands to run after the linter None COPYPASTE_JSCPD_CONFIG_FILE jscpd configuration file name Use LINTER_DEFAULT to let the linter find it .jscpd.json COPYPASTE_JSCPD_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules COPYPASTE_JSCPD_DISABLE_ERRORS Run linter but consider errors as warnings false COPYPASTE_JSCPD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/copypaste_jscpd/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/copypaste_jscpd/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/copypaste_jscpd/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/copypaste_jscpd/#how-the-linting-is-performed","text":"jscpd is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using jscpd configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make jscpd analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/copypaste_jscpd/#example-calls","text":"jscpd --output ./report/copy-paste/ . jscpd --output ./report/copy-paste/ -c .jscpd.json .","title":"Example calls"},{"location":"descriptors/copypaste_jscpd/#help-content","text":"Usage: jscpd [options] <path ...> detector of copy/paste in files Options: -V, --version output the version number -l, --min-lines [number] min size of duplication in code lines (Default is 5) -k, --min-tokens [number] min size of duplication in code tokens (Default is 50) -x, --max-lines [number] max size of source in lines (Default is 1000) -z, --max-size [string] max size of source in bytes, examples: 1kb, 1mb, 120kb (Default is 100kb) -t, --threshold [number] threshold for duplication, in case duplications >= threshold jscpd will exit with error -c, --config [string] path to config file (Default is .jscpd.json in <path>) -i, --ignore [string] glob pattern for files what should be excluded from duplication detection -r, --reporters [string] reporters or list of reporters separated with comma to use (Default is time,console) -o, --output [string] reporters to use (Default is ./report/) -m, --mode [string] mode of quality of search, can be \"strict\", \"mild\" and \"weak\" (Default is \"function mild(token) { return strict(token) && token.type !== 'empty' && token.type !== 'new_line'; }\") -f, --format [string] format or formats separated by comma (Example php,javascript,python) -p, --pattern [string] glob pattern to file search (Example **/*.txt) -b, --blame blame authors of duplications (get information about authors from git) -s, --silent do not write detection progress and result to a console --store [string] use for define custom store (e.g. --store leveldb used for big codebase) -a, --absolute use absolute path in reports -n, --noSymlinks dont use symlinks for detection in files --ignoreCase ignore case of symbols in code (experimental) -g, --gitignore ignore all files from .gitignore file --formats-exts [string] list of formats with file extensions (javascript:es,es6;dart:dt) -d, --debug show debug information, not run detection process(options list and selected files) -v, --verbose show full information during detection process --list show list of total supported formats --skipLocal skip duplicates in local folders, just detect cross folders duplications -h, --help display help for command","title":"Help content"},{"location":"descriptors/copypaste_jscpd/#installation-on-mega-linter-docker-image","text":"APK packages (Linux): nodejs npm yarn NPM packages (node.js): jscpd@3.3.26","title":"Installation on mega-linter Docker image"},{"location":"descriptors/cpp/","text":"C++ Linters Linter Configuration key Status cpplint CPP_CPPLINT Linted files File extensions: .cpp .h .cc .hpp .cxx .cu .hxx .c++ .hh .h++ .cuh Configuration in MegaLinter Variable Description Default value CPP_FILTER_REGEX_INCLUDE Custom regex including filter CPP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All C++ (CPP) linters"},{"location":"descriptors/cpp/#c","text":"","title":"C++"},{"location":"descriptors/cpp/#linters","text":"Linter Configuration key Status cpplint CPP_CPPLINT","title":"Linters"},{"location":"descriptors/cpp/#linted-files","text":"File extensions: .cpp .h .cc .hpp .cxx .cu .hxx .c++ .hh .h++ .cuh","title":"Linted files"},{"location":"descriptors/cpp/#configuration-in-megalinter","text":"Variable Description Default value CPP_FILTER_REGEX_INCLUDE Custom regex including filter CPP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/cpp_cpplint/","text":"cpplint cpplint documentation Version in MegaLinter: 1.6.1 Visit Official Web Site See Index of problems detected by cpplint Configuration in MegaLinter Enable cpplint by adding CPP_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding CPP_CPPLINT in DISABLE_LINTERS variable Variable Description Default value CPP_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CPP_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CPP_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CPP_CPPLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files CPP_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"] CPP_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CPP_CPPLINT_PRE_COMMANDS List of bash commands to run before the linter None CPP_CPPLINT_POST_COMMANDS List of bash commands to run after the linter None CPP_CPPLINT_DISABLE_ERRORS Run linter but consider errors as warnings false CPP_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .cpp , .h , .cc , .hpp , .cxx , .cu , .hxx , .c++ , .hh , .h++ , .cuh How the linting is performed cpplint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls cpplint myfile.cpp Help content Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['c', 'c++', 'cc', 'cpp', 'cu', 'cuh', 'cxx', 'h', 'h++', 'hh', 'hpp', 'hxx']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=-whitespace,-runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=c,c++,cc,cpp,cu,cuh,cxx,h,h++,hh,hpp,hxx includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions ['cuh', 'h', 'h++', 'hh', 'hpp', 'hxx'] will be assumed to be headers) Examples: --headers=cuh,h,h++,hh,hpp,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories. Installation on mega-linter Docker image PIP packages (Python): cpplint","title":"cpplint"},{"location":"descriptors/cpp_cpplint/#cpplint","text":"","title":"cpplint"},{"location":"descriptors/cpp_cpplint/#cpplint-documentation","text":"Version in MegaLinter: 1.6.1 Visit Official Web Site See Index of problems detected by cpplint","title":"cpplint documentation"},{"location":"descriptors/cpp_cpplint/#configuration-in-megalinter","text":"Enable cpplint by adding CPP_CPPLINT in ENABLE_LINTERS variable Disable cpplint by adding CPP_CPPLINT in DISABLE_LINTERS variable Variable Description Default value CPP_CPPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CPP_CPPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CPP_CPPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CPP_CPPLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files CPP_CPPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cpp\", \".h\", \".cc\", \".hpp\", \".cxx\", \".cu\", \".hxx\", \".c++\", \".hh\", \".h++\", \".cuh\"] CPP_CPPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CPP_CPPLINT_PRE_COMMANDS List of bash commands to run before the linter None CPP_CPPLINT_POST_COMMANDS List of bash commands to run after the linter None CPP_CPPLINT_DISABLE_ERRORS Run linter but consider errors as warnings false CPP_CPPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/cpp_cpplint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/cpp_cpplint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/cpp_cpplint/#how-are-identified-applicable-files","text":"File extensions: .cpp , .h , .cc , .hpp , .cxx , .cu , .hxx , .c++ , .hh , .h++ , .cuh","title":"How are identified applicable files"},{"location":"descriptors/cpp_cpplint/#how-the-linting-is-performed","text":"cpplint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/cpp_cpplint/#example-calls","text":"cpplint myfile.cpp","title":"Example calls"},{"location":"descriptors/cpp_cpplint/#help-content","text":"Syntax: cpplint.py [--verbose=#] [--output=emacs|eclipse|vs7|junit|sed|gsed] [--filter=-x,+y,...] [--counting=total|toplevel|detailed] [--root=subdir] [--repository=path] [--linelength=digits] [--headers=x,y,...] [--recursive] [--exclude=path] [--extensions=hpp,cpp,...] [--includeorder=default|standardcfirst] [--quiet] [--version] <file> [file] ... Style checker for C/C++ source files. This is a fork of the Google style checker with minor extensions. The style guidelines this tries to follow are those in https://google.github.io/styleguide/cppguide.html Every problem is given a confidence score from 1-5, with 5 meaning we are certain of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review. To suppress false-positive errors of a certain category, add a 'NOLINT(category)' comment to the line. NOLINT or NOLINT(*) suppresses errors of all categories on that line. The files passed in will be linted; at least one file must be provided. Default linted extensions are ['c', 'c++', 'cc', 'cpp', 'cu', 'cuh', 'cxx', 'h', 'h++', 'hh', 'hpp', 'hxx']. Other file types will be ignored. Change the extensions with the --extensions flag. Flags: output=emacs|eclipse|vs7|junit|sed|gsed By default, the output is formatted to ease emacs parsing. Visual Studio compatible output (vs7) may also be used. Further support exists for eclipse (eclipse), and JUnit (junit). XML parsers such as those used in Jenkins and Bamboo may also be used. The sed format outputs sed commands that should fix some of the errors. Note that this requires gnu sed. If that is installed as gsed on your system (common e.g. on macOS with homebrew) you can use the gsed output format. Sed commands are written to stdout, not stderr, so you should be able to pipe output straight to a shell to run the fixes. verbose=# Specify a number 0-5 to restrict errors to certain verbosity levels. Errors with lower verbosity levels have lower confidence and are more likely to be false positives. quiet Don't print anything if no errors are found. filter=-x,+y,... Specify a comma-separated list of category-filters to apply: only error messages whose category names pass the filters will be printed. (Category names are printed with the message and look like \"[whitespace/indent]\".) Filters are evaluated left to right. \"-FOO\" means \"do not print categories that start with FOO\". \"+FOO\" means \"do print categories that start with FOO\". Examples: --filter=-whitespace,+whitespace/braces --filter=-whitespace,-runtime/printf,+runtime/printf_format --filter=-,+build/include_what_you_use To see a list of all the categories used in cpplint, pass no arg: --filter= counting=total|toplevel|detailed The total number of errors found is always printed. If 'toplevel' is provided, then the count of errors in each of the top-level categories like 'build' and 'whitespace' will also be printed. If 'detailed' is provided, then a count is provided for each category like 'build/class'. repository=path The top level directory of the repository, used to derive the header guard CPP variable. By default, this is determined by searching for a path that contains .git, .hg, or .svn. When this flag is specified, the given path is used instead. This option allows the header guard CPP variable to remain consistent even if members of a team have different repository root directories (such as when checking out a subdirectory with SVN). In addition, users of non-mainstream version control systems can use this flag to ensure readable header guard CPP variables. Examples: Assuming that Alice checks out ProjectName and Bob checks out ProjectName/trunk and trunk contains src/chrome/ui/browser.h, then with no --repository flag, the header guard CPP variable will be: Alice => TRUNK_SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ If Alice uses the --repository=trunk flag and Bob omits the flag or uses --repository=. then the header guard CPP variable will be: Alice => SRC_CHROME_BROWSER_UI_BROWSER_H_ Bob => SRC_CHROME_BROWSER_UI_BROWSER_H_ root=subdir The root directory used for deriving header guard CPP variable. This directory is relative to the top level directory of the repository which by default is determined by searching for a directory that contains .git, .hg, or .svn but can also be controlled with the --repository flag. If the specified directory does not exist, this flag is ignored. Examples: Assuming that src is the top level directory of the repository (and cwd=top/src), the header guard CPP variables for src/chrome/browser/ui/browser.h are: No flag => CHROME_BROWSER_UI_BROWSER_H_ --root=chrome => BROWSER_UI_BROWSER_H_ --root=chrome/browser => UI_BROWSER_H_ --root=.. => SRC_CHROME_BROWSER_UI_BROWSER_H_ linelength=digits This is the allowed line length for the project. The default value is 80 characters. Examples: --linelength=120 recursive Search for files to lint recursively. Each directory given in the list of files to be linted is replaced by all files that descend from that directory. Files with extensions not in the valid extensions list are excluded. exclude=path Exclude the given path from the list of files to be linted. Relative paths are evaluated relative to the current directory and shell globbing is performed. This flag can be provided multiple times to exclude multiple files. Examples: --exclude=one.cc --exclude=src/*.cc --exclude=src/*.cc --exclude=test/*.cc extensions=extension,extension,... The allowed file extensions that cpplint will check Examples: --extensions=c,c++,cc,cpp,cu,cuh,cxx,h,h++,hh,hpp,hxx includeorder=default|standardcfirst For the build/include_order rule, the default is to blindly assume angle bracket includes with file extension are c-system-headers (default), even knowing this will have false classifications. The default is established at google. standardcfirst means to instead use an allow-list of known c headers and treat all others as separate group of \"other system headers\". The C headers included are those of the C-standard lib and closely related ones. headers=x,y,... The header extensions that cpplint will treat as .h in checks. Values are automatically added to --extensions list. (by default, only files with extensions ['cuh', 'h', 'h++', 'hh', 'hpp', 'hxx'] will be assumed to be headers) Examples: --headers=cuh,h,h++,hh,hpp,hxx --headers=hpp,hxx --headers=hpp cpplint.py supports per-directory configurations specified in CPPLINT.cfg files. CPPLINT.cfg file can contain a number of key=value pairs. Currently the following options are supported: set noparent filter=+filter1,-filter2,... exclude_files=regex linelength=80 root=subdir headers=x,y,... \"set noparent\" option prevents cpplint from traversing directory tree upwards looking for more .cfg files in parent directories. This option is usually placed in the top-level project directory. The \"filter\" option is similar in function to --filter flag. It specifies message filters in addition to the |_DEFAULT_FILTERS| and those specified through --filter command-line flag. \"exclude_files\" allows to specify a regular expression to be matched against a file name. If the expression matches, the file is skipped and not run through the linter. \"linelength\" allows to specify the allowed line length for the project. The \"root\" option is similar in function to the --root flag (see example above). Paths are relative to the directory of the CPPLINT.cfg. The \"headers\" option is similar in function to the --headers flag (see example above). CPPLINT.cfg has an effect on files in the same directory and all sub-directories, unless overridden by a nested configuration file. Example file: filter=-build/include_order,+build/include_alpha exclude_files=.*\\.cc The above example disables build/include_order warning and enables build/include_alpha as well as excludes all .cc from being processed by linter, in the current directory (where the .cfg file is located) and all sub-directories.","title":"Help content"},{"location":"descriptors/cpp_cpplint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): cpplint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/credentials/","text":"CREDENTIALS Linters Linter Configuration key Status secretlint CREDENTIALS Linted files Configuration in MegaLinter Variable Description Default value CREDENTIALS_FILTER_REGEX_INCLUDE Custom regex including filter CREDENTIALS_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Credentials"},{"location":"descriptors/credentials/#credentials","text":"","title":"CREDENTIALS"},{"location":"descriptors/credentials/#linters","text":"Linter Configuration key Status secretlint CREDENTIALS","title":"Linters"},{"location":"descriptors/credentials/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/credentials/#configuration-in-megalinter","text":"Variable Description Default value CREDENTIALS_FILTER_REGEX_INCLUDE Custom regex including filter CREDENTIALS_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/credentials_secretlint/","text":"secretlint documentation Version in MegaLinter: 4.1.0 Visit Official Web Site See How to configure secretlint rules If custom .secretlintrc.json config file is not found, .secretlintrc.json will be used See Index of problems detected by secretlint Configuration in MegaLinter Enable secretlint by adding CREDENTIALS_SECRETLINT in ENABLE_LINTERS variable Disable secretlint by adding CREDENTIALS_SECRETLINT in DISABLE_LINTERS variable Variable Description Default value CREDENTIALS_SECRETLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CREDENTIALS_SECRETLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file CREDENTIALS_SECRETLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CREDENTIALS_SECRETLINT_PRE_COMMANDS List of bash commands to run before the linter None CREDENTIALS_SECRETLINT_POST_COMMANDS List of bash commands to run after the linter None CREDENTIALS_SECRETLINT_CONFIG_FILE secretlint configuration file name Use LINTER_DEFAULT to let the linter find it .secretlintrc.json CREDENTIALS_SECRETLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CREDENTIALS_SECRETLINT_DISABLE_ERRORS Run linter but consider errors as warnings false CREDENTIALS_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 dart Optimized for DART based projects 42 documentation MegaLinter for documentation projects 41 dotnet Optimized for C, C++, C# or VB based projects 49 go Optimized for GO based projects 43 java Optimized for JAVA based projects 43 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 50 php Optimized for PHP based projects 46 python Optimized for PYTHON based projects 49 ruby Optimized for RUBY based projects 42 rust Optimized for RUST based projects 42 salesforce Optimized for Salesforce based projects 44 scala Optimized for SCALA based projects 42 swift Optimized for SWIFT based projects 42 terraform Optimized for TERRAFORM based projects 47 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed secretlint is called once on the whole project directory filtering can not be done using MegaLinter configuration variables,it must be done using secretlint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make secretlint analyze only updated files Example calls secretlint \"*/**\" secretlint --secretlintrc .secretlintrc.json \"**/*\" Help content Secretlint CLI that scan secret/credential data. Usage $ secretlint [file|glob*] Note supported glob syntax is based on microglob https://github.com/micromatch/micromatch#matching-features Options --init setup config file. Create .secretlintrc.json file from your package.json --format [String] formatter name. Default: \"stylish\". Available Formatter: checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, tap, unix, table.d, table --output [path:String] output file path that is written of reported result. --no-color disable ANSI-color of output. --no-terminalLink disable terminalLink of output. --maskSecrets enable masking of secret values. replace actual secrets with \"***\". --secretlintrc [path:String] path to .secretlintrc config file. Default: .secretlintrc.* --secretlintignore [path:String] path to .secretlintignore file. Default: .secretlintignore Options for Developer --profile Enable performance profile. --secretlintrcJSON [String] a JSON string of .secretlintrc. use JSON string instead of rc file. Experimental Options --locale [String] locale tag for translating message. Default: en Examples $ secretlint ./README.md # glob pattern should be wrapped with double quote $ secretlint \"**/*\" $ secretlint \"source/**/*.ini\" Installation on mega-linter Docker image NPM packages (node.js): secretlint@4.1.0 @secretlint/secretlint-rule-preset-recommend@4.1.0","title":"Credentials secretlint"},{"location":"descriptors/credentials_secretlint/#secretlint-documentation","text":"Version in MegaLinter: 4.1.0 Visit Official Web Site See How to configure secretlint rules If custom .secretlintrc.json config file is not found, .secretlintrc.json will be used See Index of problems detected by secretlint","title":"secretlint documentation"},{"location":"descriptors/credentials_secretlint/#configuration-in-megalinter","text":"Enable secretlint by adding CREDENTIALS_SECRETLINT in ENABLE_LINTERS variable Disable secretlint by adding CREDENTIALS_SECRETLINT in DISABLE_LINTERS variable Variable Description Default value CREDENTIALS_SECRETLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CREDENTIALS_SECRETLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file CREDENTIALS_SECRETLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CREDENTIALS_SECRETLINT_PRE_COMMANDS List of bash commands to run before the linter None CREDENTIALS_SECRETLINT_POST_COMMANDS List of bash commands to run after the linter None CREDENTIALS_SECRETLINT_CONFIG_FILE secretlint configuration file name Use LINTER_DEFAULT to let the linter find it .secretlintrc.json CREDENTIALS_SECRETLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CREDENTIALS_SECRETLINT_DISABLE_ERRORS Run linter but consider errors as warnings false CREDENTIALS_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/credentials_secretlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 dart Optimized for DART based projects 42 documentation MegaLinter for documentation projects 41 dotnet Optimized for C, C++, C# or VB based projects 49 go Optimized for GO based projects 43 java Optimized for JAVA based projects 43 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 50 php Optimized for PHP based projects 46 python Optimized for PYTHON based projects 49 ruby Optimized for RUBY based projects 42 rust Optimized for RUST based projects 42 salesforce Optimized for Salesforce based projects 44 scala Optimized for SCALA based projects 42 swift Optimized for SWIFT based projects 42 terraform Optimized for TERRAFORM based projects 47","title":"MegaLinter Flavours"},{"location":"descriptors/credentials_secretlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/credentials_secretlint/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/credentials_secretlint/#how-the-linting-is-performed","text":"secretlint is called once on the whole project directory filtering can not be done using MegaLinter configuration variables,it must be done using secretlint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make secretlint analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/credentials_secretlint/#example-calls","text":"secretlint \"*/**\" secretlint --secretlintrc .secretlintrc.json \"**/*\"","title":"Example calls"},{"location":"descriptors/credentials_secretlint/#help-content","text":"Secretlint CLI that scan secret/credential data. Usage $ secretlint [file|glob*] Note supported glob syntax is based on microglob https://github.com/micromatch/micromatch#matching-features Options --init setup config file. Create .secretlintrc.json file from your package.json --format [String] formatter name. Default: \"stylish\". Available Formatter: checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, tap, unix, table.d, table --output [path:String] output file path that is written of reported result. --no-color disable ANSI-color of output. --no-terminalLink disable terminalLink of output. --maskSecrets enable masking of secret values. replace actual secrets with \"***\". --secretlintrc [path:String] path to .secretlintrc config file. Default: .secretlintrc.* --secretlintignore [path:String] path to .secretlintignore file. Default: .secretlintignore Options for Developer --profile Enable performance profile. --secretlintrcJSON [String] a JSON string of .secretlintrc. use JSON string instead of rc file. Experimental Options --locale [String] locale tag for translating message. Default: en Examples $ secretlint ./README.md # glob pattern should be wrapped with double quote $ secretlint \"**/*\" $ secretlint \"source/**/*.ini\"","title":"Help content"},{"location":"descriptors/credentials_secretlint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): secretlint@4.1.0 @secretlint/secretlint-rule-preset-recommend@4.1.0","title":"Installation on mega-linter Docker image"},{"location":"descriptors/csharp/","text":"C Linters Linter Configuration key Status dotnet-format CSHARP Linted files File extensions: .cs Configuration in MegaLinter Variable Description Default value CSHARP_FILTER_REGEX_INCLUDE Custom regex including filter CSHARP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"All C# (CSHARP) linters"},{"location":"descriptors/csharp/#c","text":"","title":"C"},{"location":"descriptors/csharp/#linters","text":"Linter Configuration key Status dotnet-format CSHARP","title":"Linters"},{"location":"descriptors/csharp/#linted-files","text":"File extensions: .cs","title":"Linted files"},{"location":"descriptors/csharp/#configuration-in-megalinter","text":"Variable Description Default value CSHARP_FILTER_REGEX_INCLUDE Custom regex including filter CSHARP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/csharp/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/csharp/#installation","text":"Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"Installation"},{"location":"descriptors/csharp_dotnet_format/","text":"dotnet-format dotnet-format documentation Version in MegaLinter: 000 Visit Official Web Site Configuration in MegaLinter Enable dotnet-format by adding CSHARP_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding CSHARP_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding CSHARP_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value CSHARP_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSHARP_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CSHARP_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CSHARP_DOTNET_FORMAT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cs\"] CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSHARP_DOTNET_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None CSHARP_DOTNET_FORMAT_POST_COMMANDS List of bash commands to run after the linter None CSHARP_DOTNET_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings true CSHARP_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .cs How the linting is performed dotnet-format is called one time by identified file ( file CLI lint mode) Example calls dotnet-format --folder --check --exclude / --include myfile.cs dotnet-format --folder --exclude / --include myfile.cs Help content dotnet-format dotnet-format Usage: dotnet-format [options] [<workspace>] Arguments: <workspace> A path to a solution file, a project file, or a folder containing a solution or project file. If a path is not specified then the current directory is used. [default: ] Options: --no-restore Doesn't execute an implicit restore before formatting. -f, --folder Whether to treat the `<workspace>` argument as a simple folder of files. -w, --fix-whitespace Run whitespace formatting. Run by default when not applying fixes. -s, --fix-style <error|info|warn> Run code style analyzers and apply fixes. -a, --fix-analyzers <error|info|warn> Run 3rd party analyzers and apply fixes. --diagnostics <diagnostics> A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. [default: ] --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: ] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: ] --check Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report-path> Accepts a file path, which if provided, will produce a json report in the given directory. -v, --verbosity <d|detailed|diag|diagnostic|m|minimal|n|normal|q|quiet> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --binarylog <binary-log-path> Log all project or solution load information to a binary log file. --version Show version information -?, -h, --help Show help and usage information Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" # Linter install RUN /usr/share/dotnet/dotnet tool install -g dotnet-format","title":"dotnet-format"},{"location":"descriptors/csharp_dotnet_format/#dotnet-format","text":"","title":"dotnet-format"},{"location":"descriptors/csharp_dotnet_format/#dotnet-format-documentation","text":"Version in MegaLinter: 000 Visit Official Web Site","title":"dotnet-format documentation"},{"location":"descriptors/csharp_dotnet_format/#configuration-in-megalinter","text":"Enable dotnet-format by adding CSHARP_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding CSHARP_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding CSHARP_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value CSHARP_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSHARP_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CSHARP_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CSHARP_DOTNET_FORMAT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file CSHARP_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".cs\"] CSHARP_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSHARP_DOTNET_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None CSHARP_DOTNET_FORMAT_POST_COMMANDS List of bash commands to run after the linter None CSHARP_DOTNET_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings true CSHARP_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/csharp_dotnet_format/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/csharp_dotnet_format/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/csharp_dotnet_format/#how-are-identified-applicable-files","text":"File extensions: .cs","title":"How are identified applicable files"},{"location":"descriptors/csharp_dotnet_format/#how-the-linting-is-performed","text":"dotnet-format is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/csharp_dotnet_format/#example-calls","text":"dotnet-format --folder --check --exclude / --include myfile.cs dotnet-format --folder --exclude / --include myfile.cs","title":"Example calls"},{"location":"descriptors/csharp_dotnet_format/#help-content","text":"dotnet-format dotnet-format Usage: dotnet-format [options] [<workspace>] Arguments: <workspace> A path to a solution file, a project file, or a folder containing a solution or project file. If a path is not specified then the current directory is used. [default: ] Options: --no-restore Doesn't execute an implicit restore before formatting. -f, --folder Whether to treat the `<workspace>` argument as a simple folder of files. -w, --fix-whitespace Run whitespace formatting. Run by default when not applying fixes. -s, --fix-style <error|info|warn> Run code style analyzers and apply fixes. -a, --fix-analyzers <error|info|warn> Run 3rd party analyzers and apply fixes. --diagnostics <diagnostics> A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. [default: ] --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: ] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: ] --check Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report-path> Accepts a file path, which if provided, will produce a json report in the given directory. -v, --verbosity <d|detailed|diag|diagnostic|m|minimal|n|normal|q|quiet> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --binarylog <binary-log-path> Log all project or solution load information to a binary log file. --version Show version information -?, -h, --help Show help and usage information","title":"Help content"},{"location":"descriptors/csharp_dotnet_format/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" # Linter install RUN /usr/share/dotnet/dotnet tool install -g dotnet-format","title":"Installation on mega-linter Docker image"},{"location":"descriptors/css/","text":"CSS Linters Linter Configuration key Status stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT Linted files File extensions: .css .scss .saas Configuration in MegaLinter Variable Description Default value CSS_FILTER_REGEX_INCLUDE Custom regex including filter CSS_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All CSS linters"},{"location":"descriptors/css/#css","text":"","title":"CSS"},{"location":"descriptors/css/#linters","text":"Linter Configuration key Status stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT","title":"Linters"},{"location":"descriptors/css/#linted-files","text":"File extensions: .css .scss .saas","title":"Linted files"},{"location":"descriptors/css/#configuration-in-megalinter","text":"Variable Description Default value CSS_FILTER_REGEX_INCLUDE Custom regex including filter CSS_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/css_scss_lint/","text":"scss-lint documentation Version in MegaLinter: 0.59.0 Visit Official Web Site See How to configure scss-lint rules See How to disable scss-lint rules in files Configuration in MegaLinter Enable scss-lint by adding CSS_SCSS_LINT in ENABLE_LINTERS variable Disable scss-lint by adding CSS_SCSS_LINT in DISABLE_LINTERS variable Variable Description Default value CSS_SCSS_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_SCSS_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CSS_SCSS_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file CSS_SCSS_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scss\", \".saas\"] CSS_SCSS_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_SCSS_LINT_PRE_COMMANDS List of bash commands to run before the linter None CSS_SCSS_LINT_POST_COMMANDS List of bash commands to run after the linter None CSS_SCSS_LINT_CONFIG_FILE scss-lint configuration file name Use LINTER_DEFAULT to let the linter find it .scss-lint.yml CSS_SCSS_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CSS_SCSS_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false CSS_SCSS_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use scss-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-scss-lint Visit Web Site IDEA scss-lint-plugin Visual Studio Code scss-lint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .scss , .saas How the linting is performed scss-lint is called one time by identified file ( file CLI lint mode) Example calls scss-lint myfile.scss scss-lint -config .scss-lint.yml myfile.scss Help content Usage: scss-lint [options] [scss-files] -f, --format Formatter Specify how to display lints -r, --require path Require Ruby file -i, --include-linter linter,... Specify which linters you want to run -x, --exclude-linter linter,... Specify which linters you don't want to run -c, --config config-file Specify which configuration file you want to use -e, --exclude file,... List of file names to exclude --stdin-file-path file-path Specify the path to assume for the file passed via STDIN -o, --out path Write output to a file instead of STDOUT --[no-]color Force output to be colorized --show-formatters Shows available formatters --show-linters Display available linters -h, --help Display help documentation -v, --version Display version Installation on mega-linter Docker image GEM packages (Ruby) : scss_lint","title":"scss-lint"},{"location":"descriptors/css_scss_lint/#scss-lint-documentation","text":"Version in MegaLinter: 0.59.0 Visit Official Web Site See How to configure scss-lint rules See How to disable scss-lint rules in files","title":"scss-lint documentation"},{"location":"descriptors/css_scss_lint/#configuration-in-megalinter","text":"Enable scss-lint by adding CSS_SCSS_LINT in ENABLE_LINTERS variable Disable scss-lint by adding CSS_SCSS_LINT in DISABLE_LINTERS variable Variable Description Default value CSS_SCSS_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_SCSS_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CSS_SCSS_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CSS_SCSS_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file CSS_SCSS_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scss\", \".saas\"] CSS_SCSS_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_SCSS_LINT_PRE_COMMANDS List of bash commands to run before the linter None CSS_SCSS_LINT_POST_COMMANDS List of bash commands to run after the linter None CSS_SCSS_LINT_CONFIG_FILE scss-lint configuration file name Use LINTER_DEFAULT to let the linter find it .scss-lint.yml CSS_SCSS_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CSS_SCSS_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false CSS_SCSS_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/css_scss_lint/#ide-integration","text":"Use scss-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-scss-lint Visit Web Site IDEA scss-lint-plugin Visual Studio Code scss-lint","title":"IDE Integration"},{"location":"descriptors/css_scss_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/css_scss_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/css_scss_lint/#how-are-identified-applicable-files","text":"File extensions: .scss , .saas","title":"How are identified applicable files"},{"location":"descriptors/css_scss_lint/#how-the-linting-is-performed","text":"scss-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/css_scss_lint/#example-calls","text":"scss-lint myfile.scss scss-lint -config .scss-lint.yml myfile.scss","title":"Example calls"},{"location":"descriptors/css_scss_lint/#help-content","text":"Usage: scss-lint [options] [scss-files] -f, --format Formatter Specify how to display lints -r, --require path Require Ruby file -i, --include-linter linter,... Specify which linters you want to run -x, --exclude-linter linter,... Specify which linters you don't want to run -c, --config config-file Specify which configuration file you want to use -e, --exclude file,... List of file names to exclude --stdin-file-path file-path Specify the path to assume for the file passed via STDIN -o, --out path Write output to a file instead of STDOUT --[no-]color Force output to be colorized --show-formatters Shows available formatters --show-linters Display available linters -h, --help Display help documentation -v, --version Display version","title":"Help content"},{"location":"descriptors/css_scss_lint/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : scss_lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/css_stylelint/","text":"stylelint documentation Version in MegaLinter: 14.13.0 Visit Official Web Site See How to configure stylelint rules If custom .stylelintrc.json config file is not found, .stylelintrc.json will be used See How to disable stylelint rules in files See Index of problems detected by stylelint Configuration in MegaLinter Enable stylelint by adding CSS_STYLELINT in ENABLE_LINTERS variable Disable stylelint by adding CSS_STYLELINT in DISABLE_LINTERS variable Enable auto-fixes by adding CSS_STYLELINT in APPLY_FIXES variable Variable Description Default value CSS_STYLELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_STYLELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CSS_STYLELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CSS_STYLELINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files CSS_STYLELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".css\", \".scss\", \".saas\"] CSS_STYLELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_STYLELINT_PRE_COMMANDS List of bash commands to run before the linter None CSS_STYLELINT_POST_COMMANDS List of bash commands to run after the linter None CSS_STYLELINT_CONFIG_FILE stylelint configuration file name Use LINTER_DEFAULT to let the linter find it .stylelintrc.json CSS_STYLELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CSS_STYLELINT_DISABLE_ERRORS Run linter but consider errors as warnings false CSS_STYLELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use stylelint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-stylelint Visit Web Site Emacs flycheck Visit Web Site Sublime Text SublimeLinter-stylelint Visit Web Site Sublime Text SublimeLinter-contrib-stylelint_d Visit Web Site vim ale Visit Web Site Visual Studio Code vscode-stylelint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .css , .scss , .saas How the linting is performed stylelint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls stylelint myfile.css stylelint --config .stylelintrc.json myfile.css myfile2.css myfile3.css stylelint --fix --config .stylelintrc.json myfile.css myfile2.css myfile3.css Help content A mighty, modern CSS linter. Usage: stylelint [input] [options] Input: Files(s), glob(s), or nothing to use stdin. If an input argument is wrapped in quotation marks, it will be passed to globby for cross-platform glob support. node_modules are always ignored. You can also pass no input and use stdin, instead. Options: --config Path to a specific configuration file (JSON, YAML, or CommonJS), or the name of a module in node_modules that points to one. If no --config argument is provided, stylelint will search for configuration files in the following places, in this order: - a stylelint property in package.json - a .stylelintrc file (with or without filename extension: .json, .yaml, .yml, and .js are available) - a stylelint.config.js file exporting a JS object The search will begin in the working directory and move up the directory tree until a configuration file is found. --config-basedir An absolute path to the directory that relative paths defining \"extends\" and \"plugins\" are *relative to*. Only necessary if these values are relative paths. --print-config Print the configuration for the given path. --ignore-path, -i Path to a file containing patterns that describe files to ignore. The path can be absolute or relative to process.cwd(). You can repeat the option to provide multiple paths. By default, Stylelint looks for .stylelintignore in process.cwd(). --ignore-pattern, --ip Pattern of files to ignore (in addition to those in .stylelintignore) --fix Automatically fix problems of certain rules. --custom-syntax Module name or path to a JS file exporting a PostCSS-compatible syntax. --stdin Accept stdin input even if it is empty. --stdin-filename A filename to assign stdin input. --ignore-disables, --id Ignore stylelint-disable comments. --disable-default-ignores, --di Allow linting of node_modules. --cache [default: false] Store the info about processed files in order to only operate on the changed ones the next time you run stylelint. By default, the cache is stored in \"./.stylelintcache\". To adjust this, use --cache-location. --cache-location [default: '.stylelintcache'] Path to a file or directory to be used for the cache location. Default is \"./.stylelintcache\". If a directory is specified, a cache file will be created inside the specified folder, with a name derived from a hash of the current working directory. If the directory for the cache does not exist, make sure you add a trailing \"/\" on *nix systems or \"\\\" on Windows. Otherwise the path will be assumed to be a file. --cache-strategy [default: \"metadata\"] Strategy for the cache to use for detecting changed files. Can be either \"metadata\" or \"content\". The \"content\" strategy can be useful in cases where the modification time of your files changes even if their contents have not. For example, this can happen during git operations like \"git clone\" because git does not track file modification time. --formatter, -f [default: \"string\"] The output formatter: \"compact\", \"github\", \"json\", \"string\", \"tap\", \"unix\" or \"verbose\". --custom-formatter Path to a JS file exporting a custom formatting function. The file can either be a filesystem path, a module name, or a file to load from a dependency. --quiet, -q Only register problems for rules with an \"error\"-level severity (ignore \"warning\"-level). --color --no-color Force enabling/disabling of color. --report-needless-disables, --rd Also report errors for stylelint-disable comments that are not blocking a lint warning. The process will exit with code 2 if needless disables are found. --report-invalid-scope-disables, --risd Report stylelint-disable comments that used for rules that don't exist within the configuration object. The process will exit with code 2 if invalid scope disables are found. --report-descriptionless-disables, --rdd Report stylelint-disable comments without a description. The process will exit with code 2 if descriptionless disables are found. --max-warnings, --mw Number of warnings above which the process will exit with code 2. Useful when setting \"defaultSeverity\" to \"warning\" and expecting the process to fail on warnings (e.g. CI build). --output-file, -o Path of file to write report. --version, -v Show the currently installed version of stylelint. --allow-empty-input, --aei When glob pattern matches no files, the process will exit without throwing an error. Installation on mega-linter Docker image NPM packages (node.js): stylelint stylelint-config-standard stylelint-config-sass-guidelines stylelint-scss","title":"stylelint"},{"location":"descriptors/css_stylelint/#stylelint-documentation","text":"Version in MegaLinter: 14.13.0 Visit Official Web Site See How to configure stylelint rules If custom .stylelintrc.json config file is not found, .stylelintrc.json will be used See How to disable stylelint rules in files See Index of problems detected by stylelint","title":"stylelint documentation"},{"location":"descriptors/css_stylelint/#configuration-in-megalinter","text":"Enable stylelint by adding CSS_STYLELINT in ENABLE_LINTERS variable Disable stylelint by adding CSS_STYLELINT in DISABLE_LINTERS variable Enable auto-fixes by adding CSS_STYLELINT in APPLY_FIXES variable Variable Description Default value CSS_STYLELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" CSS_STYLELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file CSS_STYLELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file CSS_STYLELINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files CSS_STYLELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".css\", \".scss\", \".saas\"] CSS_STYLELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file CSS_STYLELINT_PRE_COMMANDS List of bash commands to run before the linter None CSS_STYLELINT_POST_COMMANDS List of bash commands to run after the linter None CSS_STYLELINT_CONFIG_FILE stylelint configuration file name Use LINTER_DEFAULT to let the linter find it .stylelintrc.json CSS_STYLELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules CSS_STYLELINT_DISABLE_ERRORS Run linter but consider errors as warnings false CSS_STYLELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/css_stylelint/#ide-integration","text":"Use stylelint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-stylelint Visit Web Site Emacs flycheck Visit Web Site Sublime Text SublimeLinter-stylelint Visit Web Site Sublime Text SublimeLinter-contrib-stylelint_d Visit Web Site vim ale Visit Web Site Visual Studio Code vscode-stylelint","title":"IDE Integration"},{"location":"descriptors/css_stylelint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/css_stylelint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/css_stylelint/#how-are-identified-applicable-files","text":"File extensions: .css , .scss , .saas","title":"How are identified applicable files"},{"location":"descriptors/css_stylelint/#how-the-linting-is-performed","text":"stylelint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/css_stylelint/#example-calls","text":"stylelint myfile.css stylelint --config .stylelintrc.json myfile.css myfile2.css myfile3.css stylelint --fix --config .stylelintrc.json myfile.css myfile2.css myfile3.css","title":"Example calls"},{"location":"descriptors/css_stylelint/#help-content","text":"A mighty, modern CSS linter. Usage: stylelint [input] [options] Input: Files(s), glob(s), or nothing to use stdin. If an input argument is wrapped in quotation marks, it will be passed to globby for cross-platform glob support. node_modules are always ignored. You can also pass no input and use stdin, instead. Options: --config Path to a specific configuration file (JSON, YAML, or CommonJS), or the name of a module in node_modules that points to one. If no --config argument is provided, stylelint will search for configuration files in the following places, in this order: - a stylelint property in package.json - a .stylelintrc file (with or without filename extension: .json, .yaml, .yml, and .js are available) - a stylelint.config.js file exporting a JS object The search will begin in the working directory and move up the directory tree until a configuration file is found. --config-basedir An absolute path to the directory that relative paths defining \"extends\" and \"plugins\" are *relative to*. Only necessary if these values are relative paths. --print-config Print the configuration for the given path. --ignore-path, -i Path to a file containing patterns that describe files to ignore. The path can be absolute or relative to process.cwd(). You can repeat the option to provide multiple paths. By default, Stylelint looks for .stylelintignore in process.cwd(). --ignore-pattern, --ip Pattern of files to ignore (in addition to those in .stylelintignore) --fix Automatically fix problems of certain rules. --custom-syntax Module name or path to a JS file exporting a PostCSS-compatible syntax. --stdin Accept stdin input even if it is empty. --stdin-filename A filename to assign stdin input. --ignore-disables, --id Ignore stylelint-disable comments. --disable-default-ignores, --di Allow linting of node_modules. --cache [default: false] Store the info about processed files in order to only operate on the changed ones the next time you run stylelint. By default, the cache is stored in \"./.stylelintcache\". To adjust this, use --cache-location. --cache-location [default: '.stylelintcache'] Path to a file or directory to be used for the cache location. Default is \"./.stylelintcache\". If a directory is specified, a cache file will be created inside the specified folder, with a name derived from a hash of the current working directory. If the directory for the cache does not exist, make sure you add a trailing \"/\" on *nix systems or \"\\\" on Windows. Otherwise the path will be assumed to be a file. --cache-strategy [default: \"metadata\"] Strategy for the cache to use for detecting changed files. Can be either \"metadata\" or \"content\". The \"content\" strategy can be useful in cases where the modification time of your files changes even if their contents have not. For example, this can happen during git operations like \"git clone\" because git does not track file modification time. --formatter, -f [default: \"string\"] The output formatter: \"compact\", \"github\", \"json\", \"string\", \"tap\", \"unix\" or \"verbose\". --custom-formatter Path to a JS file exporting a custom formatting function. The file can either be a filesystem path, a module name, or a file to load from a dependency. --quiet, -q Only register problems for rules with an \"error\"-level severity (ignore \"warning\"-level). --color --no-color Force enabling/disabling of color. --report-needless-disables, --rd Also report errors for stylelint-disable comments that are not blocking a lint warning. The process will exit with code 2 if needless disables are found. --report-invalid-scope-disables, --risd Report stylelint-disable comments that used for rules that don't exist within the configuration object. The process will exit with code 2 if invalid scope disables are found. --report-descriptionless-disables, --rdd Report stylelint-disable comments without a description. The process will exit with code 2 if descriptionless disables are found. --max-warnings, --mw Number of warnings above which the process will exit with code 2. Useful when setting \"defaultSeverity\" to \"warning\" and expecting the process to fail on warnings (e.g. CI build). --output-file, -o Path of file to write report. --version, -v Show the currently installed version of stylelint. --allow-empty-input, --aei When glob pattern matches no files, the process will exit without throwing an error.","title":"Help content"},{"location":"descriptors/css_stylelint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): stylelint stylelint-config-standard stylelint-config-sass-guidelines stylelint-scss","title":"Installation on mega-linter Docker image"},{"location":"descriptors/dart/","text":"DART Linters Linter Configuration key Status dartanalyzer DART Linted files File extensions: .dart Configuration in MegaLinter Variable Description Default value DART_FILTER_REGEX_INCLUDE Custom regex including filter DART_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All DART linters"},{"location":"descriptors/dart/#dart","text":"","title":"DART"},{"location":"descriptors/dart/#linters","text":"Linter Configuration key Status dartanalyzer DART","title":"Linters"},{"location":"descriptors/dart/#linted-files","text":"File extensions: .dart","title":"Linted files"},{"location":"descriptors/dart/#configuration-in-megalinter","text":"Variable Description Default value DART_FILTER_REGEX_INCLUDE Custom regex including filter DART_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/dart_dartanalyzer/","text":"dartanalyzer documentation Visit Official Web Site See How to configure dartanalyzer rules If custom analysis_options.yml config file is not found, analysis_options.yml will be used See How to disable dartanalyzer rules in files Configuration in MegaLinter Enable dartanalyzer by adding DART_DARTANALYZER in ENABLE_LINTERS variable Disable dartanalyzer by adding DART_DARTANALYZER in DISABLE_LINTERS variable Variable Description Default value DART_DARTANALYZER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DART_DARTANALYZER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file DART_DARTANALYZER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file DART_DARTANALYZER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file DART_DARTANALYZER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".dart\"] DART_DARTANALYZER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file DART_DARTANALYZER_PRE_COMMANDS List of bash commands to run before the linter None DART_DARTANALYZER_POST_COMMANDS List of bash commands to run after the linter None DART_DARTANALYZER_CONFIG_FILE dartanalyzer configuration file name Use LINTER_DEFAULT to let the linter find it analysis_options.yml DART_DARTANALYZER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules DART_DARTANALYZER_DISABLE_ERRORS Run linter but consider errors as warnings false DART_DARTANALYZER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use dartanalyzer in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA dart-jetbrains-plugin Visual Studio Code dart-code MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .dart How the linting is performed dartanalyzer is called one time by identified file ( file CLI lint mode) Example calls dartanalyzer --fatal-infos --fatal-warnings myfile.dart dartanalyzer --fatal-infos --fatal-warnings --options analysis_options.yml myfile.dart Help content Usage: dartanalyzer [options...] <directory or list of files> --dart-sdk The path to the Dart SDK. --options Path to an analysis options file. --package-root The path to a package root directory (deprecated). This option cannot be used with --packages. --[no-]declaration-casts Disable declaration casts in strong mode (https://goo.gl/cTLz40) This option is now ignored and will be removed in a future release. --[no-]implicit-casts Disable implicit casts in strong mode (https://goo.gl/cTLz40). --no-implicit-dynamic Disable implicit dynamic (https://goo.gl/m0UgXD). --packages The path to the package resolution configuration file, which supplies a mapping of package names to paths. This option cannot be used with --package-root. --[no-]lints Show lint results. --format Specifies the format in which errors are displayed; the only currently allowed value is 'machine'. --version Print the analyzer version. --enable-experiment Enable one or more experimental features. If multiple features are being added, they should be comma separated. --no-hints Do not show hint results. --fatal-infos Treat infos as fatal. --fatal-warnings Treat non-type warnings as fatal. -h, --help Display this help message. Add --verbose to show hidden options. -v, --verbose Verbose output. --default-language-version The default language version when it is not specified via other ways (internal, tests only). Run \"dartanalyzer -h -v\" for verbose help output, including less commonly used options. For more information, see https://www.dartlang.org/tools/analyzer. Installation on mega-linter Docker image Dockerfile commands : ARG DART_VERSION='2.8.4' ARG GLIBC_VERSION='2.31-r0' RUN wget --tries=50 -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\ && wget --tries=5 -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk \\ && apk add --no-cache glibc-${GLIBC_VERSION}.apk && rm glibc-${GLIBC_VERSION}.apk \\ && wget --tries=5 https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-x64-release.zip -O - -q | unzip -q - \\ && chmod +x dart-sdk/bin/dart* \\ && mv dart-sdk/bin/* /usr/bin/ && mv dart-sdk/lib/* /usr/lib/ && mv dart-sdk/include/* /usr/include/ \\ && rm -r dart-sdk/","title":"dartanalyzer"},{"location":"descriptors/dart_dartanalyzer/#dartanalyzer-documentation","text":"Visit Official Web Site See How to configure dartanalyzer rules If custom analysis_options.yml config file is not found, analysis_options.yml will be used See How to disable dartanalyzer rules in files","title":"dartanalyzer documentation"},{"location":"descriptors/dart_dartanalyzer/#configuration-in-megalinter","text":"Enable dartanalyzer by adding DART_DARTANALYZER in ENABLE_LINTERS variable Disable dartanalyzer by adding DART_DARTANALYZER in DISABLE_LINTERS variable Variable Description Default value DART_DARTANALYZER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DART_DARTANALYZER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file DART_DARTANALYZER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file DART_DARTANALYZER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file DART_DARTANALYZER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".dart\"] DART_DARTANALYZER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file DART_DARTANALYZER_PRE_COMMANDS List of bash commands to run before the linter None DART_DARTANALYZER_POST_COMMANDS List of bash commands to run after the linter None DART_DARTANALYZER_CONFIG_FILE dartanalyzer configuration file name Use LINTER_DEFAULT to let the linter find it analysis_options.yml DART_DARTANALYZER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules DART_DARTANALYZER_DISABLE_ERRORS Run linter but consider errors as warnings false DART_DARTANALYZER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/dart_dartanalyzer/#ide-integration","text":"Use dartanalyzer in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA dart-jetbrains-plugin Visual Studio Code dart-code","title":"IDE Integration"},{"location":"descriptors/dart_dartanalyzer/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/dart_dartanalyzer/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/dart_dartanalyzer/#how-are-identified-applicable-files","text":"File extensions: .dart","title":"How are identified applicable files"},{"location":"descriptors/dart_dartanalyzer/#how-the-linting-is-performed","text":"dartanalyzer is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/dart_dartanalyzer/#example-calls","text":"dartanalyzer --fatal-infos --fatal-warnings myfile.dart dartanalyzer --fatal-infos --fatal-warnings --options analysis_options.yml myfile.dart","title":"Example calls"},{"location":"descriptors/dart_dartanalyzer/#help-content","text":"Usage: dartanalyzer [options...] <directory or list of files> --dart-sdk The path to the Dart SDK. --options Path to an analysis options file. --package-root The path to a package root directory (deprecated). This option cannot be used with --packages. --[no-]declaration-casts Disable declaration casts in strong mode (https://goo.gl/cTLz40) This option is now ignored and will be removed in a future release. --[no-]implicit-casts Disable implicit casts in strong mode (https://goo.gl/cTLz40). --no-implicit-dynamic Disable implicit dynamic (https://goo.gl/m0UgXD). --packages The path to the package resolution configuration file, which supplies a mapping of package names to paths. This option cannot be used with --package-root. --[no-]lints Show lint results. --format Specifies the format in which errors are displayed; the only currently allowed value is 'machine'. --version Print the analyzer version. --enable-experiment Enable one or more experimental features. If multiple features are being added, they should be comma separated. --no-hints Do not show hint results. --fatal-infos Treat infos as fatal. --fatal-warnings Treat non-type warnings as fatal. -h, --help Display this help message. Add --verbose to show hidden options. -v, --verbose Verbose output. --default-language-version The default language version when it is not specified via other ways (internal, tests only). Run \"dartanalyzer -h -v\" for verbose help output, including less commonly used options. For more information, see https://www.dartlang.org/tools/analyzer.","title":"Help content"},{"location":"descriptors/dart_dartanalyzer/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : ARG DART_VERSION='2.8.4' ARG GLIBC_VERSION='2.31-r0' RUN wget --tries=50 -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub \\ && wget --tries=5 -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VERSION}/glibc-${GLIBC_VERSION}.apk \\ && apk add --no-cache glibc-${GLIBC_VERSION}.apk && rm glibc-${GLIBC_VERSION}.apk \\ && wget --tries=5 https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-x64-release.zip -O - -q | unzip -q - \\ && chmod +x dart-sdk/bin/dart* \\ && mv dart-sdk/bin/* /usr/bin/ && mv dart-sdk/lib/* /usr/lib/ && mv dart-sdk/include/* /usr/include/ \\ && rm -r dart-sdk/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/dockerfile/","text":"DOCKERFILE Linters Linter Configuration key Status hadolint DOCKERFILE_HADOLINT Linted files File names: Dockerfile Configuration in MegaLinter Variable Description Default value DOCKERFILE_FILTER_REGEX_INCLUDE Custom regex including filter DOCKERFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All DOCKERFILE linters"},{"location":"descriptors/dockerfile/#dockerfile","text":"","title":"DOCKERFILE"},{"location":"descriptors/dockerfile/#linters","text":"Linter Configuration key Status hadolint DOCKERFILE_HADOLINT","title":"Linters"},{"location":"descriptors/dockerfile/#linted-files","text":"File names: Dockerfile","title":"Linted files"},{"location":"descriptors/dockerfile/#configuration-in-megalinter","text":"Variable Description Default value DOCKERFILE_FILTER_REGEX_INCLUDE Custom regex including filter DOCKERFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/dockerfile_hadolint/","text":"hadolint hadolint documentation Version in MegaLinter: 2.10.0 Visit Official Web Site See How to configure hadolint rules See How to disable hadolint rules in files See Index of problems detected by hadolint Configuration in MegaLinter Enable hadolint by adding DOCKERFILE_HADOLINT in ENABLE_LINTERS variable Disable hadolint by adding DOCKERFILE_HADOLINT in DISABLE_LINTERS variable Variable Description Default value DOCKERFILE_HADOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file DOCKERFILE_HADOLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files DOCKERFILE_HADOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file DOCKERFILE_HADOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Dockerfile\"] DOCKERFILE_HADOLINT_PRE_COMMANDS List of bash commands to run before the linter None DOCKERFILE_HADOLINT_POST_COMMANDS List of bash commands to run after the linter None DOCKERFILE_HADOLINT_CONFIG_FILE hadolint configuration file name Use LINTER_DEFAULT to let the linter find it .hadolint.yaml DOCKERFILE_HADOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules DOCKERFILE_HADOLINT_DISABLE_ERRORS Run linter but consider errors as warnings false DOCKERFILE_HADOLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use hadolint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-hadolint Visit Web Site Visual Studio Code hadolint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File names (regex): Dockerfile How the linting is performed hadolint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls hadolint Dockerfile hadolint --config .hadolint.yml Dockerfile Help content hadolint - Dockerfile Linter written in Haskell Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...] [--file-path-in-report FILEPATHINREPORT] [--no-fail] [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE] [--warning RULECODE] [--info RULECODE] [--style RULECODE] [--ignore RULECODE] [--trusted-registry REGISTRY (e.g. docker.io)] [--require-label LABELSCHEMA (e.g. maintainer:text)] [--strict-labels] [--disable-ignore-pragma] [-t|--failure-threshold THRESHOLD] Lint Dockerfile for errors and best practices Available options: -h,--help Show this help text -v,--version Show version -c,--config FILENAME Path to the configuration file --file-path-in-report FILEPATHINREPORT The file path referenced in the generated report. This only applies for the 'checkstyle' format and is useful when running Hadolint with Docker to set the correct file path. --no-fail Don't exit with a failure status code when any rule is violated --no-color Don't colorize output -V,--verbose Enables verbose logging of hadolint's output to stderr -f,--format ARG The output format for the results [tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sonarqube | sarif] (default: tty) --error RULECODE Make the rule `RULECODE` have the level `error` --warning RULECODE Make the rule `RULECODE` have the level `warning` --info RULECODE Make the rule `RULECODE` have the level `info` --style RULECODE Make the rule `RULECODE` have the level `style` --ignore RULECODE A rule to ignore. If present, the ignore list in the config file is ignored --trusted-registry REGISTRY (e.g. docker.io) A docker registry to allow to appear in FROM instructions --require-label LABELSCHEMA (e.g. maintainer:text) The option --require-label=label:format makes Hadolint check that the label `label` conforms to format requirement `format` --strict-labels Do not permit labels other than specified in `label-schema` --disable-ignore-pragma Disable inline ignore pragmas `# hadolint ignore=DLxxxx` -t,--failure-threshold THRESHOLD Exit with failure code only when rules with a severity equal to or above THRESHOLD are violated. Accepted values: [error | warning | info | style | ignore | none] (default: info) Installation on mega-linter Docker image Dockerfile commands : FROM hadolint/hadolint:v2.10.0-alpine as hadolint COPY --from=hadolint /bin/hadolint /usr/bin/hadolint","title":"hadolint"},{"location":"descriptors/dockerfile_hadolint/#hadolint","text":"","title":"hadolint"},{"location":"descriptors/dockerfile_hadolint/#hadolint-documentation","text":"Version in MegaLinter: 2.10.0 Visit Official Web Site See How to configure hadolint rules See How to disable hadolint rules in files See Index of problems detected by hadolint","title":"hadolint documentation"},{"location":"descriptors/dockerfile_hadolint/#configuration-in-megalinter","text":"Enable hadolint by adding DOCKERFILE_HADOLINT in ENABLE_LINTERS variable Disable hadolint by adding DOCKERFILE_HADOLINT in DISABLE_LINTERS variable Variable Description Default value DOCKERFILE_HADOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" DOCKERFILE_HADOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file DOCKERFILE_HADOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file DOCKERFILE_HADOLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files DOCKERFILE_HADOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file DOCKERFILE_HADOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Dockerfile\"] DOCKERFILE_HADOLINT_PRE_COMMANDS List of bash commands to run before the linter None DOCKERFILE_HADOLINT_POST_COMMANDS List of bash commands to run after the linter None DOCKERFILE_HADOLINT_CONFIG_FILE hadolint configuration file name Use LINTER_DEFAULT to let the linter find it .hadolint.yaml DOCKERFILE_HADOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules DOCKERFILE_HADOLINT_DISABLE_ERRORS Run linter but consider errors as warnings false DOCKERFILE_HADOLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/dockerfile_hadolint/#ide-integration","text":"Use hadolint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-hadolint Visit Web Site Visual Studio Code hadolint","title":"IDE Integration"},{"location":"descriptors/dockerfile_hadolint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/dockerfile_hadolint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/dockerfile_hadolint/#how-are-identified-applicable-files","text":"File names (regex): Dockerfile","title":"How are identified applicable files"},{"location":"descriptors/dockerfile_hadolint/#how-the-linting-is-performed","text":"hadolint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/dockerfile_hadolint/#example-calls","text":"hadolint Dockerfile hadolint --config .hadolint.yml Dockerfile","title":"Example calls"},{"location":"descriptors/dockerfile_hadolint/#help-content","text":"hadolint - Dockerfile Linter written in Haskell Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...] [--file-path-in-report FILEPATHINREPORT] [--no-fail] [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE] [--warning RULECODE] [--info RULECODE] [--style RULECODE] [--ignore RULECODE] [--trusted-registry REGISTRY (e.g. docker.io)] [--require-label LABELSCHEMA (e.g. maintainer:text)] [--strict-labels] [--disable-ignore-pragma] [-t|--failure-threshold THRESHOLD] Lint Dockerfile for errors and best practices Available options: -h,--help Show this help text -v,--version Show version -c,--config FILENAME Path to the configuration file --file-path-in-report FILEPATHINREPORT The file path referenced in the generated report. This only applies for the 'checkstyle' format and is useful when running Hadolint with Docker to set the correct file path. --no-fail Don't exit with a failure status code when any rule is violated --no-color Don't colorize output -V,--verbose Enables verbose logging of hadolint's output to stderr -f,--format ARG The output format for the results [tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sonarqube | sarif] (default: tty) --error RULECODE Make the rule `RULECODE` have the level `error` --warning RULECODE Make the rule `RULECODE` have the level `warning` --info RULECODE Make the rule `RULECODE` have the level `info` --style RULECODE Make the rule `RULECODE` have the level `style` --ignore RULECODE A rule to ignore. If present, the ignore list in the config file is ignored --trusted-registry REGISTRY (e.g. docker.io) A docker registry to allow to appear in FROM instructions --require-label LABELSCHEMA (e.g. maintainer:text) The option --require-label=label:format makes Hadolint check that the label `label` conforms to format requirement `format` --strict-labels Do not permit labels other than specified in `label-schema` --disable-ignore-pragma Disable inline ignore pragmas `# hadolint ignore=DLxxxx` -t,--failure-threshold THRESHOLD Exit with failure code only when rules with a severity equal to or above THRESHOLD are violated. Accepted values: [error | warning | info | style | ignore | none] (default: info)","title":"Help content"},{"location":"descriptors/dockerfile_hadolint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM hadolint/hadolint:v2.10.0-alpine as hadolint COPY --from=hadolint /bin/hadolint /usr/bin/hadolint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/editorconfig/","text":"EDITORCONFIG Linters Linter Configuration key Status editorconfig-checker EDITORCONFIG Linted files Activated only if at least one of these files is found: .editorconfig File extensions: * Configuration in MegaLinter Variable Description Default value EDITORCONFIG_FILTER_REGEX_INCLUDE Custom regex including filter EDITORCONFIG_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All EDITORCONFIG linters"},{"location":"descriptors/editorconfig/#editorconfig","text":"","title":"EDITORCONFIG"},{"location":"descriptors/editorconfig/#linters","text":"Linter Configuration key Status editorconfig-checker EDITORCONFIG","title":"Linters"},{"location":"descriptors/editorconfig/#linted-files","text":"Activated only if at least one of these files is found: .editorconfig File extensions: *","title":"Linted files"},{"location":"descriptors/editorconfig/#configuration-in-megalinter","text":"Variable Description Default value EDITORCONFIG_FILTER_REGEX_INCLUDE Custom regex including filter EDITORCONFIG_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/editorconfig_editorconfig_checker/","text":"editorconfig-checker documentation Version in MegaLinter: 2.4.0 Visit Official Web Site See How to configure editorconfig-checker rules See How to disable editorconfig-checker rules in files Configuration in MegaLinter Enable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in ENABLE_LINTERS variable Disable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in DISABLE_LINTERS variable Variable Description Default value EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\"*\"] EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_PRE_COMMANDS List of bash commands to run before the linter None EDITORCONFIG_EDITORCONFIG_CHECKER_POST_COMMANDS List of bash commands to run after the linter None EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE editorconfig-checker configuration file name Use LINTER_DEFAULT to let the linter find it .ecrc EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS Run linter but consider errors as warnings false EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if one of these files is found: .editorconfig File extensions: * How the linting is performed editorconfig-checker is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls editorconfig-checker myfile.js Help content USAGE: -config string config -debug print debugging information -disable-end-of-line disables the trailing whitespace check -disable-indent-size disables only the indent-size check -disable-indentation disables the indentation check -disable-insert-final-newline disables the final newline check -disable-max-line-length disables only the max-line-length check -disable-trim-trailing-whitespace disables the trailing whitespace check -dry-run show which files would be checked -exclude string a regex which files should be excluded from checking - needs to be a valid regular expression -h print the help -help print the help -ignore-defaults ignore default excludes -init creates an initial configuration -no-color dont print colors -v print debugging information -verbose print debugging information -version print the version number Installation on mega-linter Docker image Dockerfile commands : FROM mstruebing/editorconfig-checker:2.4.0 as editorconfig-checker COPY --from=editorconfig-checker /usr/bin/ec /usr/bin/editorconfig-checker","title":"editorconfig-checker"},{"location":"descriptors/editorconfig_editorconfig_checker/#editorconfig-checker-documentation","text":"Version in MegaLinter: 2.4.0 Visit Official Web Site See How to configure editorconfig-checker rules See How to disable editorconfig-checker rules in files","title":"editorconfig-checker documentation"},{"location":"descriptors/editorconfig_editorconfig_checker/#configuration-in-megalinter","text":"Enable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in ENABLE_LINTERS variable Disable editorconfig-checker by adding EDITORCONFIG_EDITORCONFIG_CHECKER in DISABLE_LINTERS variable Variable Description Default value EDITORCONFIG_EDITORCONFIG_CHECKER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file EDITORCONFIG_EDITORCONFIG_CHECKER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\"*\"] EDITORCONFIG_EDITORCONFIG_CHECKER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file EDITORCONFIG_EDITORCONFIG_CHECKER_PRE_COMMANDS List of bash commands to run before the linter None EDITORCONFIG_EDITORCONFIG_CHECKER_POST_COMMANDS List of bash commands to run after the linter None EDITORCONFIG_EDITORCONFIG_CHECKER_CONFIG_FILE editorconfig-checker configuration file name Use LINTER_DEFAULT to let the linter find it .ecrc EDITORCONFIG_EDITORCONFIG_CHECKER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS Run linter but consider errors as warnings false EDITORCONFIG_EDITORCONFIG_CHECKER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/editorconfig_editorconfig_checker/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/editorconfig_editorconfig_checker/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/editorconfig_editorconfig_checker/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .editorconfig File extensions: *","title":"How are identified applicable files"},{"location":"descriptors/editorconfig_editorconfig_checker/#how-the-linting-is-performed","text":"editorconfig-checker is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/editorconfig_editorconfig_checker/#example-calls","text":"editorconfig-checker myfile.js","title":"Example calls"},{"location":"descriptors/editorconfig_editorconfig_checker/#help-content","text":"USAGE: -config string config -debug print debugging information -disable-end-of-line disables the trailing whitespace check -disable-indent-size disables only the indent-size check -disable-indentation disables the indentation check -disable-insert-final-newline disables the final newline check -disable-max-line-length disables only the max-line-length check -disable-trim-trailing-whitespace disables the trailing whitespace check -dry-run show which files would be checked -exclude string a regex which files should be excluded from checking - needs to be a valid regular expression -h print the help -help print the help -ignore-defaults ignore default excludes -init creates an initial configuration -no-color dont print colors -v print debugging information -verbose print debugging information -version print the version number","title":"Help content"},{"location":"descriptors/editorconfig_editorconfig_checker/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM mstruebing/editorconfig-checker:2.4.0 as editorconfig-checker COPY --from=editorconfig-checker /usr/bin/ec /usr/bin/editorconfig-checker","title":"Installation on mega-linter Docker image"},{"location":"descriptors/env/","text":"ENV Linters Linter Configuration key Status dotenv-linter ENV Linted files File extensions: .env Configuration in MegaLinter Variable Description Default value ENV_FILTER_REGEX_INCLUDE Custom regex including filter ENV_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All ENV linters"},{"location":"descriptors/env/#env","text":"","title":"ENV"},{"location":"descriptors/env/#linters","text":"Linter Configuration key Status dotenv-linter ENV","title":"Linters"},{"location":"descriptors/env/#linted-files","text":"File extensions: .env","title":"Linted files"},{"location":"descriptors/env/#configuration-in-megalinter","text":"Variable Description Default value ENV_FILTER_REGEX_INCLUDE Custom regex including filter ENV_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/env_dotenv_linter/","text":"dotenv-linter documentation Version in MegaLinter: 3.2.0 Visit Official Web Site See Index of problems detected by dotenv-linter Configuration in MegaLinter Enable dotenv-linter by adding ENV_DOTENV_LINTER in ENABLE_LINTERS variable Disable dotenv-linter by adding ENV_DOTENV_LINTER in DISABLE_LINTERS variable Enable auto-fixes by adding ENV_DOTENV_LINTER in APPLY_FIXES variable Variable Description Default value ENV_DOTENV_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file ENV_DOTENV_LINTER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file ENV_DOTENV_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".env\"] ENV_DOTENV_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ENV_DOTENV_LINTER_PRE_COMMANDS List of bash commands to run before the linter None ENV_DOTENV_LINTER_POST_COMMANDS List of bash commands to run after the linter None ENV_DOTENV_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings false ENV_DOTENV_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .env How the linting is performed dotenv-linter is called one time by identified file ( file CLI lint mode) Example calls dotenv-linter myfile.env dotenv-linter fix myfile.env Help content dotenv-linter 3.2.0 Mikhail Grachev <work@mgrachev.com> Lightning-fast linter for .env files USAGE: dotenv-linter [FLAGS] [OPTIONS] <input>... [SUBCOMMAND] FLAGS: -h, --help Prints help information --no-color Turns off the colored output --not-check-updates Doesn't check for updates -q, --quiet Doesn't display additional information -r, --recursive Recursively searches and checks .env files -v, --version Prints version information OPTIONS: -e, --exclude <FILE_NAME>... Excludes files from check -s, --skip <CHECK_NAME>... Skips checks ARGS: <input>... files or paths [default: /] SUBCOMMANDS: compare Compares if files have the same keys [aliases: c] fix Automatically fixes warnings [aliases: f] list Shows list of available checks [aliases: l] Installation on mega-linter Docker image Dockerfile commands : RUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s","title":"dotenv-linter"},{"location":"descriptors/env_dotenv_linter/#dotenv-linter-documentation","text":"Version in MegaLinter: 3.2.0 Visit Official Web Site See Index of problems detected by dotenv-linter","title":"dotenv-linter documentation"},{"location":"descriptors/env_dotenv_linter/#configuration-in-megalinter","text":"Enable dotenv-linter by adding ENV_DOTENV_LINTER in ENABLE_LINTERS variable Disable dotenv-linter by adding ENV_DOTENV_LINTER in DISABLE_LINTERS variable Enable auto-fixes by adding ENV_DOTENV_LINTER in APPLY_FIXES variable Variable Description Default value ENV_DOTENV_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" ENV_DOTENV_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file ENV_DOTENV_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file ENV_DOTENV_LINTER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file ENV_DOTENV_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".env\"] ENV_DOTENV_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file ENV_DOTENV_LINTER_PRE_COMMANDS List of bash commands to run before the linter None ENV_DOTENV_LINTER_POST_COMMANDS List of bash commands to run after the linter None ENV_DOTENV_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings false ENV_DOTENV_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/env_dotenv_linter/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/env_dotenv_linter/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/env_dotenv_linter/#how-are-identified-applicable-files","text":"File extensions: .env","title":"How are identified applicable files"},{"location":"descriptors/env_dotenv_linter/#how-the-linting-is-performed","text":"dotenv-linter is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/env_dotenv_linter/#example-calls","text":"dotenv-linter myfile.env dotenv-linter fix myfile.env","title":"Example calls"},{"location":"descriptors/env_dotenv_linter/#help-content","text":"dotenv-linter 3.2.0 Mikhail Grachev <work@mgrachev.com> Lightning-fast linter for .env files USAGE: dotenv-linter [FLAGS] [OPTIONS] <input>... [SUBCOMMAND] FLAGS: -h, --help Prints help information --no-color Turns off the colored output --not-check-updates Doesn't check for updates -q, --quiet Doesn't display additional information -r, --recursive Recursively searches and checks .env files -v, --version Prints version information OPTIONS: -e, --exclude <FILE_NAME>... Excludes files from check -s, --skip <CHECK_NAME>... Skips checks ARGS: <input>... files or paths [default: /] SUBCOMMANDS: compare Compares if files have the same keys [aliases: c] fix Automatically fixes warnings [aliases: f] list Shows list of available checks [aliases: l]","title":"Help content"},{"location":"descriptors/env_dotenv_linter/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s","title":"Installation on mega-linter Docker image"},{"location":"descriptors/gherkin/","text":"GHERKIN Linters Linter Configuration key Status gherkin-lint GHERKIN Linted files File extensions: .feature Configuration in MegaLinter Variable Description Default value GHERKIN_FILTER_REGEX_INCLUDE Custom regex including filter GHERKIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All GHERKIN linters"},{"location":"descriptors/gherkin/#gherkin","text":"","title":"GHERKIN"},{"location":"descriptors/gherkin/#linters","text":"Linter Configuration key Status gherkin-lint GHERKIN","title":"Linters"},{"location":"descriptors/gherkin/#linted-files","text":"File extensions: .feature","title":"Linted files"},{"location":"descriptors/gherkin/#configuration-in-megalinter","text":"Variable Description Default value GHERKIN_FILTER_REGEX_INCLUDE Custom regex including filter GHERKIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/gherkin_gherkin_lint/","text":"gherkin-lint gherkin-lint documentation Visit Official Web Site See How to configure gherkin-lint rules If custom .gherkin-lintrc config file is not found, .gherkin-lintrc will be used See Index of problems detected by gherkin-lint Configuration in MegaLinter Enable gherkin-lint by adding GHERKIN_GHERKIN_LINT in ENABLE_LINTERS variable Disable gherkin-lint by adding GHERKIN_GHERKIN_LINT in DISABLE_LINTERS variable Variable Description Default value GHERKIN_GHERKIN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GHERKIN_GHERKIN_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".feature\"] GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GHERKIN_GHERKIN_LINT_PRE_COMMANDS List of bash commands to run before the linter None GHERKIN_GHERKIN_LINT_POST_COMMANDS List of bash commands to run after the linter None GHERKIN_GHERKIN_LINT_CONFIG_FILE gherkin-lint configuration file name Use LINTER_DEFAULT to let the linter find it .gherkin-lintrc GHERKIN_GHERKIN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GHERKIN_GHERKIN_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false GHERKIN_GHERKIN_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .feature How the linting is performed gherkin-lint is called one time by identified file ( file CLI lint mode) Example calls gherkin-lint myfile.feature gherkin-lint -c .gherkin-lintrc myfile.feature Help content Usage: gherkin-lint [options] <feature-files> Options: -f, --format [format] output format. Possible values: json, stylish, xunit. Defaults to stylish -i, --ignore <...> comma seperated list of files/glob patterns that the linter should ignore, overrides .gherkin-lintignore file -c, --config [config] configuration file, defaults to .gherkin-lintrc -r, --rulesdir <...> additional rule directories (default: []) -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): gherkin-lint","title":"gherkin-lint"},{"location":"descriptors/gherkin_gherkin_lint/#gherkin-lint","text":"","title":"gherkin-lint"},{"location":"descriptors/gherkin_gherkin_lint/#gherkin-lint-documentation","text":"Visit Official Web Site See How to configure gherkin-lint rules If custom .gherkin-lintrc config file is not found, .gherkin-lintrc will be used See Index of problems detected by gherkin-lint","title":"gherkin-lint documentation"},{"location":"descriptors/gherkin_gherkin_lint/#configuration-in-megalinter","text":"Enable gherkin-lint by adding GHERKIN_GHERKIN_LINT in ENABLE_LINTERS variable Disable gherkin-lint by adding GHERKIN_GHERKIN_LINT in DISABLE_LINTERS variable Variable Description Default value GHERKIN_GHERKIN_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GHERKIN_GHERKIN_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GHERKIN_GHERKIN_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GHERKIN_GHERKIN_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file GHERKIN_GHERKIN_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".feature\"] GHERKIN_GHERKIN_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GHERKIN_GHERKIN_LINT_PRE_COMMANDS List of bash commands to run before the linter None GHERKIN_GHERKIN_LINT_POST_COMMANDS List of bash commands to run after the linter None GHERKIN_GHERKIN_LINT_CONFIG_FILE gherkin-lint configuration file name Use LINTER_DEFAULT to let the linter find it .gherkin-lintrc GHERKIN_GHERKIN_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GHERKIN_GHERKIN_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false GHERKIN_GHERKIN_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/gherkin_gherkin_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/gherkin_gherkin_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/gherkin_gherkin_lint/#how-are-identified-applicable-files","text":"File extensions: .feature","title":"How are identified applicable files"},{"location":"descriptors/gherkin_gherkin_lint/#how-the-linting-is-performed","text":"gherkin-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/gherkin_gherkin_lint/#example-calls","text":"gherkin-lint myfile.feature gherkin-lint -c .gherkin-lintrc myfile.feature","title":"Example calls"},{"location":"descriptors/gherkin_gherkin_lint/#help-content","text":"Usage: gherkin-lint [options] <feature-files> Options: -f, --format [format] output format. Possible values: json, stylish, xunit. Defaults to stylish -i, --ignore <...> comma seperated list of files/glob patterns that the linter should ignore, overrides .gherkin-lintignore file -c, --config [config] configuration file, defaults to .gherkin-lintrc -r, --rulesdir <...> additional rule directories (default: []) -h, --help display help for command","title":"Help content"},{"location":"descriptors/gherkin_gherkin_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): gherkin-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/git/","text":"GIT Linters Linter Configuration key Status git_diff GIT Linted files Configuration in MegaLinter Variable Description Default value GIT_FILTER_REGEX_INCLUDE Custom regex including filter GIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN git config --global core.autocrlf true","title":"Git"},{"location":"descriptors/git/#git","text":"","title":"GIT"},{"location":"descriptors/git/#linters","text":"Linter Configuration key Status git_diff GIT","title":"Linters"},{"location":"descriptors/git/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/git/#configuration-in-megalinter","text":"Variable Description Default value GIT_FILTER_REGEX_INCLUDE Custom regex including filter GIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/git/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/git/#installation","text":"Dockerfile commands : RUN git config --global core.autocrlf true","title":"Installation"},{"location":"descriptors/git_git_diff/","text":"git_diff Git diff checks for git conflicts markers in files git_diff documentation Version in MegaLinter: 2.30.3 Visit Official Web Site Configuration in MegaLinter Enable git_diff by adding GIT_GIT_DIFF in ENABLE_LINTERS variable Disable git_diff by adding GIT_GIT_DIFF in DISABLE_LINTERS variable Variable Description Default value GIT_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GIT_GIT_DIFF_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file GIT_GIT_DIFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GIT_GIT_DIFF_PRE_COMMANDS List of bash commands to run before the linter None GIT_GIT_DIFF_POST_COMMANDS List of bash commands to run after the linter None GIT_GIT_DIFF_DISABLE_ERRORS Run linter but consider errors as warnings false GIT_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 16 dart Optimized for DART based projects 42 documentation MegaLinter for documentation projects 41 dotnet Optimized for C, C++, C# or VB based projects 49 go Optimized for GO based projects 43 java Optimized for JAVA based projects 43 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 50 php Optimized for PHP based projects 46 python Optimized for PYTHON based projects 49 ruby Optimized for RUBY based projects 42 rust Optimized for RUST based projects 42 salesforce Optimized for Salesforce based projects 44 scala Optimized for SCALA based projects 42 swift Optimized for SWIFT based projects 42 terraform Optimized for TERRAFORM based projects 47 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed git_diff is called once on the whole project directory filtering can not be done using MegaLinter configuration variables,it must be done using git_diff configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make git_diff analyze only updated files Example calls git diff --check Help content usage: git [--version] [--help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] <command> [<args>] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index sparse-checkout Initialize and modify the sparse-checkout examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept. See 'git help git' for an overview of the system. Installation on mega-linter Docker image Example success log Results of git_diff linter (version 2.26.2) See documentation on https://megalinter.github.io/descriptors/git_git_diff/ ----------------------------------------------- [SUCCESS] .automation/test/git_diff/good","title":"Git git diff"},{"location":"descriptors/git_git_diff/#git_diff","text":"Git diff checks for git conflicts markers in files","title":"git_diff"},{"location":"descriptors/git_git_diff/#git_diff-documentation","text":"Version in MegaLinter: 2.30.3 Visit Official Web Site","title":"git_diff documentation"},{"location":"descriptors/git_git_diff/#configuration-in-megalinter","text":"Enable git_diff by adding GIT_GIT_DIFF in ENABLE_LINTERS variable Disable git_diff by adding GIT_GIT_DIFF in DISABLE_LINTERS variable Variable Description Default value GIT_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GIT_GIT_DIFF_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file GIT_GIT_DIFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GIT_GIT_DIFF_PRE_COMMANDS List of bash commands to run before the linter None GIT_GIT_DIFF_POST_COMMANDS List of bash commands to run after the linter None GIT_GIT_DIFF_DISABLE_ERRORS Run linter but consider errors as warnings false GIT_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/git_git_diff/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 16 dart Optimized for DART based projects 42 documentation MegaLinter for documentation projects 41 dotnet Optimized for C, C++, C# or VB based projects 49 go Optimized for GO based projects 43 java Optimized for JAVA based projects 43 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 50 php Optimized for PHP based projects 46 python Optimized for PYTHON based projects 49 ruby Optimized for RUBY based projects 42 rust Optimized for RUST based projects 42 salesforce Optimized for Salesforce based projects 44 scala Optimized for SCALA based projects 42 swift Optimized for SWIFT based projects 42 terraform Optimized for TERRAFORM based projects 47","title":"MegaLinter Flavours"},{"location":"descriptors/git_git_diff/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/git_git_diff/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/git_git_diff/#how-the-linting-is-performed","text":"git_diff is called once on the whole project directory filtering can not be done using MegaLinter configuration variables,it must be done using git_diff configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make git_diff analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/git_git_diff/#example-calls","text":"git diff --check","title":"Example calls"},{"location":"descriptors/git_git_diff/#help-content","text":"usage: git [--version] [--help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] <command> [<args>] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index sparse-checkout Initialize and modify the sparse-checkout examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"Help content"},{"location":"descriptors/git_git_diff/#installation-on-mega-linter-docker-image","text":"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/git_git_diff/#example-success-log","text":"Results of git_diff linter (version 2.26.2) See documentation on https://megalinter.github.io/descriptors/git_git_diff/ ----------------------------------------------- [SUCCESS] .automation/test/git_diff/good","title":"Example success log"},{"location":"descriptors/go/","text":"GO Linters Linter Configuration key Status golangci-lint GO revive GO Linted files File extensions: .go Configuration in MegaLinter Variable Description Default value GO_FILTER_REGEX_INCLUDE Custom regex including filter GO_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): go","title":"All GO linters"},{"location":"descriptors/go/#go","text":"","title":"GO"},{"location":"descriptors/go/#linters","text":"Linter Configuration key Status golangci-lint GO revive GO","title":"Linters"},{"location":"descriptors/go/#linted-files","text":"File extensions: .go","title":"Linted files"},{"location":"descriptors/go/#configuration-in-megalinter","text":"Variable Description Default value GO_FILTER_REGEX_INCLUDE Custom regex including filter GO_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/go/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/go/#installation","text":"APK packages (Linux): go","title":"Installation"},{"location":"descriptors/go_golangci_lint/","text":"golangci-lint documentation Version in MegaLinter: 1.49.0 Visit Official Web Site See How to configure golangci-lint rules If custom .golangci.yml config file is not found, .golangci.yml will be used See How to disable golangci-lint rules in files See Index of problems detected by golangci-lint Configuration in MegaLinter Enable golangci-lint by adding GO_GOLANGCI_LINT in ENABLE_LINTERS variable Disable golangci-lint by adding GO_GOLANGCI_LINT in DISABLE_LINTERS variable Variable Description Default value GO_GOLANGCI_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GO_GOLANGCI_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GO_GOLANGCI_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GO_GOLANGCI_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files GO_GOLANGCI_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".go\"] GO_GOLANGCI_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GO_GOLANGCI_LINT_PRE_COMMANDS List of bash commands to run before the linter None GO_GOLANGCI_LINT_POST_COMMANDS List of bash commands to run after the linter None GO_GOLANGCI_LINT_CONFIG_FILE golangci-lint configuration file name Use LINTER_DEFAULT to let the linter find it .golangci.yml GO_GOLANGCI_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GO_GOLANGCI_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false GO_GOLANGCI_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use golangci-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom go-plus Visit Web Site Emacs flycheck-golandci-lint Visit Web Site Emacs SpaceMacs Visit Web Site goland goland Visit Web Site Sublime Text SublimeLinter-contrib-golang-cilint Visit Web Site vim vim-go Visit Web Site Visual Studio Code vscode.Go MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 go Optimized for GO based projects 48 Behind the scenes How are identified applicable files File extensions: .go How the linting is performed golangci-lint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls golangci-lint run myfile.go golangci-lint run -c .golangci.yml myfile.go Help content Smart, fast linters runner. Run it in cloud for every GitHub pull request on https://golangci.com Usage: golangci-lint [flags] golangci-lint [command] Available Commands: cache Cache control and information completion Generate the autocompletion script for the specified shell config Config help Help linters List current linters configuration run Run the linters version Version Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -j, --concurrency int Concurrency (default NumCPU) (default 2) --cpu-profile-path string Path to CPU profile output file -h, --help help for golangci-lint --mem-profile-path string Path to memory profile output file --trace-path string Path to trace output file -v, --verbose verbose output --version Print version Use \"golangci-lint [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : RUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \\ && golangci-lint --version","title":"golangci-lint"},{"location":"descriptors/go_golangci_lint/#golangci-lint-documentation","text":"Version in MegaLinter: 1.49.0 Visit Official Web Site See How to configure golangci-lint rules If custom .golangci.yml config file is not found, .golangci.yml will be used See How to disable golangci-lint rules in files See Index of problems detected by golangci-lint","title":"golangci-lint documentation"},{"location":"descriptors/go_golangci_lint/#configuration-in-megalinter","text":"Enable golangci-lint by adding GO_GOLANGCI_LINT in ENABLE_LINTERS variable Disable golangci-lint by adding GO_GOLANGCI_LINT in DISABLE_LINTERS variable Variable Description Default value GO_GOLANGCI_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GO_GOLANGCI_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GO_GOLANGCI_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GO_GOLANGCI_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files GO_GOLANGCI_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".go\"] GO_GOLANGCI_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GO_GOLANGCI_LINT_PRE_COMMANDS List of bash commands to run before the linter None GO_GOLANGCI_LINT_POST_COMMANDS List of bash commands to run after the linter None GO_GOLANGCI_LINT_CONFIG_FILE golangci-lint configuration file name Use LINTER_DEFAULT to let the linter find it .golangci.yml GO_GOLANGCI_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GO_GOLANGCI_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false GO_GOLANGCI_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/go_golangci_lint/#ide-integration","text":"Use golangci-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom go-plus Visit Web Site Emacs flycheck-golandci-lint Visit Web Site Emacs SpaceMacs Visit Web Site goland goland Visit Web Site Sublime Text SublimeLinter-contrib-golang-cilint Visit Web Site vim vim-go Visit Web Site Visual Studio Code vscode.Go","title":"IDE Integration"},{"location":"descriptors/go_golangci_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 go Optimized for GO based projects 48","title":"MegaLinter Flavours"},{"location":"descriptors/go_golangci_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/go_golangci_lint/#how-are-identified-applicable-files","text":"File extensions: .go","title":"How are identified applicable files"},{"location":"descriptors/go_golangci_lint/#how-the-linting-is-performed","text":"golangci-lint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/go_golangci_lint/#example-calls","text":"golangci-lint run myfile.go golangci-lint run -c .golangci.yml myfile.go","title":"Example calls"},{"location":"descriptors/go_golangci_lint/#help-content","text":"Smart, fast linters runner. Run it in cloud for every GitHub pull request on https://golangci.com Usage: golangci-lint [flags] golangci-lint [command] Available Commands: cache Cache control and information completion Generate the autocompletion script for the specified shell config Config help Help linters List current linters configuration run Run the linters version Version Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -j, --concurrency int Concurrency (default NumCPU) (default 2) --cpu-profile-path string Path to CPU profile output file -h, --help help for golangci-lint --mem-profile-path string Path to memory profile output file --trace-path string Path to trace output file -v, --verbose verbose output --version Print version Use \"golangci-lint [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/go_golangci_lint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \\ && golangci-lint --version","title":"Installation on mega-linter Docker image"},{"location":"descriptors/go_revive/","text":"revive revive documentation Visit Official Web Site See How to configure revive rules See Index of problems detected by revive Configuration in MegaLinter Enable revive by adding GO_REVIVE in ENABLE_LINTERS variable Disable revive by adding GO_REVIVE in DISABLE_LINTERS variable Variable Description Default value GO_REVIVE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GO_REVIVE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GO_REVIVE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GO_REVIVE_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files GO_REVIVE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".go\"] GO_REVIVE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GO_REVIVE_PRE_COMMANDS List of bash commands to run before the linter None GO_REVIVE_POST_COMMANDS List of bash commands to run after the linter None GO_REVIVE_CONFIG_FILE revive configuration file name Use LINTER_DEFAULT to let the linter find it revive.toml GO_REVIVE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GO_REVIVE_DISABLE_ERRORS Run linter but consider errors as warnings false GO_REVIVE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use revive in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-revive Visit Web Site vim ale Visit Web Site Visual Studio Code vscode.Go MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 go Optimized for GO based projects 48 Behind the scenes How are identified applicable files File extensions: .go How the linting is performed revive is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls revive myfile.go revive -config myfile.go Help content _ __ _____ _(_)__ _____ | '__/ _ \\ \\ / / \\ \\ / / _ \\ | | | __/\\ V /| |\\ V / __/ |_| \\___| \\_/ |_| \\_/ \\___| Example: revive -config c.toml -formatter friendly -exclude a.go -exclude b.go ./... Usage of revive: -config string path to the configuration TOML file, defaults to $HOME/revive.toml, if present (i.e. -config myconf.toml) -exclude value list of globs which specify files to be excluded (i.e. -exclude foo/...) -formatter string formatter to be used for the output (i.e. -formatter stylish) -max_open_files int maximum number of open files at the same time -set_exit_status set exit status to 1 if any issues are found, overwrites errorCode and warningCode in config -version get revive version Installation on mega-linter Docker image Dockerfile commands : RUN go install github.com/mgechev/revive@latest && go clean --cache","title":"revive"},{"location":"descriptors/go_revive/#revive","text":"","title":"revive"},{"location":"descriptors/go_revive/#revive-documentation","text":"Visit Official Web Site See How to configure revive rules See Index of problems detected by revive","title":"revive documentation"},{"location":"descriptors/go_revive/#configuration-in-megalinter","text":"Enable revive by adding GO_REVIVE in ENABLE_LINTERS variable Disable revive by adding GO_REVIVE in DISABLE_LINTERS variable Variable Description Default value GO_REVIVE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GO_REVIVE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GO_REVIVE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GO_REVIVE_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files GO_REVIVE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".go\"] GO_REVIVE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GO_REVIVE_PRE_COMMANDS List of bash commands to run before the linter None GO_REVIVE_POST_COMMANDS List of bash commands to run after the linter None GO_REVIVE_CONFIG_FILE revive configuration file name Use LINTER_DEFAULT to let the linter find it revive.toml GO_REVIVE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GO_REVIVE_DISABLE_ERRORS Run linter but consider errors as warnings false GO_REVIVE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/go_revive/#ide-integration","text":"Use revive in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-revive Visit Web Site vim ale Visit Web Site Visual Studio Code vscode.Go","title":"IDE Integration"},{"location":"descriptors/go_revive/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 go Optimized for GO based projects 48","title":"MegaLinter Flavours"},{"location":"descriptors/go_revive/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/go_revive/#how-are-identified-applicable-files","text":"File extensions: .go","title":"How are identified applicable files"},{"location":"descriptors/go_revive/#how-the-linting-is-performed","text":"revive is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/go_revive/#example-calls","text":"revive myfile.go revive -config myfile.go","title":"Example calls"},{"location":"descriptors/go_revive/#help-content","text":"_ __ _____ _(_)__ _____ | '__/ _ \\ \\ / / \\ \\ / / _ \\ | | | __/\\ V /| |\\ V / __/ |_| \\___| \\_/ |_| \\_/ \\___| Example: revive -config c.toml -formatter friendly -exclude a.go -exclude b.go ./... Usage of revive: -config string path to the configuration TOML file, defaults to $HOME/revive.toml, if present (i.e. -config myconf.toml) -exclude value list of globs which specify files to be excluded (i.e. -exclude foo/...) -formatter string formatter to be used for the output (i.e. -formatter stylish) -max_open_files int maximum number of open files at the same time -set_exit_status set exit status to 1 if any issues are found, overwrites errorCode and warningCode in config -version get revive version","title":"Help content"},{"location":"descriptors/go_revive/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN go install github.com/mgechev/revive@latest && go clean --cache","title":"Installation on mega-linter Docker image"},{"location":"descriptors/graphql/","text":"GRAPHQL Linters Linter Configuration key Status graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER Linted files File extensions: .graphql Configuration in MegaLinter Variable Description Default value GRAPHQL_FILTER_REGEX_INCLUDE Custom regex including filter GRAPHQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All GRAPHQL linters"},{"location":"descriptors/graphql/#graphql","text":"","title":"GRAPHQL"},{"location":"descriptors/graphql/#linters","text":"Linter Configuration key Status graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER","title":"Linters"},{"location":"descriptors/graphql/#linted-files","text":"File extensions: .graphql","title":"Linted files"},{"location":"descriptors/graphql/#configuration-in-megalinter","text":"Variable Description Default value GRAPHQL_FILTER_REGEX_INCLUDE Custom regex including filter GRAPHQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/graphql_graphql_schema_linter/","text":"graphql-schema-linter graphql-schema-linter documentation Version in MegaLinter: 3.0.1 Visit Official Web Site See How to configure graphql-schema-linter rules See How to disable graphql-schema-linter rules in files See Index of problems detected by graphql-schema-linter Configuration in MegaLinter Enable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in ENABLE_LINTERS variable Disable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in DISABLE_LINTERS variable Variable Description Default value GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".graphql\"] GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_PRE_COMMANDS List of bash commands to run before the linter None GRAPHQL_GRAPHQL_SCHEMA_LINTER_POST_COMMANDS List of bash commands to run after the linter None GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE graphql-schema-linter configuration file name Use LINTER_DEFAULT to let the linter find it .graphql-schema-linterrc GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings false GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .graphql How the linting is performed graphql-schema-linter is called one time by identified file ( file CLI lint mode) Example calls graphql-schema-linter myfile.graphql Help content Usage: graphql-schema-linter [options] [schema.graphql ...] Options: -r, --rules <rules> only the rules specified will be used to validate the schema. Example: fields-have-descriptions,types-have-descriptions -o, --rules-options <rulesOptions> configure the specified rules with the passed in configuration options. example: {\"enum-values-sorted-alphabetically\":{\"sortOrder\":\"lexicographical\"}} -i, --ignore <ignore list> ignore errors for specific schema members, example: {'fields-have-descriptions':['Obvious','Query.obvious','Query.something.obvious']} -f, --format <format> choose the output format of the report. Possible values: json, text, compact -s, --stdin schema definition will be read from STDIN instead of specified file. -c, --config-directory <path> path to begin searching for config files. -p, --custom-rule-paths <paths> path to additional custom rules to be loaded. Example: rules/*.js --comment-descriptions use old way of defining descriptions in GraphQL SDL --old-implements-syntax use old way of defining implemented interfaces in GraphQL SDL -o, --only <rules> This option is DEPRECATED. Use `--rules` instead. -e, --except <rules> This option is DEPRECATED. Use `--rules` instead. --version output the version number -h, --help output usage information Installation on mega-linter Docker image NPM packages (node.js): graphql graphql-schema-linter","title":"graphql-schema-linter"},{"location":"descriptors/graphql_graphql_schema_linter/#graphql-schema-linter","text":"","title":"graphql-schema-linter"},{"location":"descriptors/graphql_graphql_schema_linter/#graphql-schema-linter-documentation","text":"Version in MegaLinter: 3.0.1 Visit Official Web Site See How to configure graphql-schema-linter rules See How to disable graphql-schema-linter rules in files See Index of problems detected by graphql-schema-linter","title":"graphql-schema-linter documentation"},{"location":"descriptors/graphql_graphql_schema_linter/#configuration-in-megalinter","text":"Enable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in ENABLE_LINTERS variable Disable graphql-schema-linter by adding GRAPHQL_GRAPHQL_SCHEMA_LINTER in DISABLE_LINTERS variable Variable Description Default value GRAPHQL_GRAPHQL_SCHEMA_LINTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GRAPHQL_GRAPHQL_SCHEMA_LINTER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".graphql\"] GRAPHQL_GRAPHQL_SCHEMA_LINTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file GRAPHQL_GRAPHQL_SCHEMA_LINTER_PRE_COMMANDS List of bash commands to run before the linter None GRAPHQL_GRAPHQL_SCHEMA_LINTER_POST_COMMANDS List of bash commands to run after the linter None GRAPHQL_GRAPHQL_SCHEMA_LINTER_CONFIG_FILE graphql-schema-linter configuration file name Use LINTER_DEFAULT to let the linter find it .graphql-schema-linterrc GRAPHQL_GRAPHQL_SCHEMA_LINTER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS Run linter but consider errors as warnings false GRAPHQL_GRAPHQL_SCHEMA_LINTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/graphql_graphql_schema_linter/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/graphql_graphql_schema_linter/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/graphql_graphql_schema_linter/#how-are-identified-applicable-files","text":"File extensions: .graphql","title":"How are identified applicable files"},{"location":"descriptors/graphql_graphql_schema_linter/#how-the-linting-is-performed","text":"graphql-schema-linter is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/graphql_graphql_schema_linter/#example-calls","text":"graphql-schema-linter myfile.graphql","title":"Example calls"},{"location":"descriptors/graphql_graphql_schema_linter/#help-content","text":"Usage: graphql-schema-linter [options] [schema.graphql ...] Options: -r, --rules <rules> only the rules specified will be used to validate the schema. Example: fields-have-descriptions,types-have-descriptions -o, --rules-options <rulesOptions> configure the specified rules with the passed in configuration options. example: {\"enum-values-sorted-alphabetically\":{\"sortOrder\":\"lexicographical\"}} -i, --ignore <ignore list> ignore errors for specific schema members, example: {'fields-have-descriptions':['Obvious','Query.obvious','Query.something.obvious']} -f, --format <format> choose the output format of the report. Possible values: json, text, compact -s, --stdin schema definition will be read from STDIN instead of specified file. -c, --config-directory <path> path to begin searching for config files. -p, --custom-rule-paths <paths> path to additional custom rules to be loaded. Example: rules/*.js --comment-descriptions use old way of defining descriptions in GraphQL SDL --old-implements-syntax use old way of defining implemented interfaces in GraphQL SDL -o, --only <rules> This option is DEPRECATED. Use `--rules` instead. -e, --except <rules> This option is DEPRECATED. Use `--rules` instead. --version output the version number -h, --help output usage information","title":"Help content"},{"location":"descriptors/graphql_graphql_schema_linter/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): graphql graphql-schema-linter","title":"Installation on mega-linter Docker image"},{"location":"descriptors/groovy/","text":"GROOVY Linters Linter Configuration key Status npm-groovy-lint GROOVY Linted files File extensions: .groovy .gvy .gradle .nf File names: Jenkinsfile Configuration in MegaLinter Variable Description Default value GROOVY_FILTER_REGEX_INCLUDE Custom regex including filter GROOVY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All GROOVY linters"},{"location":"descriptors/groovy/#groovy","text":"","title":"GROOVY"},{"location":"descriptors/groovy/#linters","text":"Linter Configuration key Status npm-groovy-lint GROOVY","title":"Linters"},{"location":"descriptors/groovy/#linted-files","text":"File extensions: .groovy .gvy .gradle .nf File names: Jenkinsfile","title":"Linted files"},{"location":"descriptors/groovy/#configuration-in-megalinter","text":"Variable Description Default value GROOVY_FILTER_REGEX_INCLUDE Custom regex including filter GROOVY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/groovy_npm_groovy_lint/","text":"npm-groovy-lint npm-groovy-lint documentation Version in MegaLinter: 10.1.0 Visit Official Web Site See How to configure npm-groovy-lint rules If custom .groovylintrc.json config file is not found, .groovylintrc.json will be used See How to disable npm-groovy-lint rules in files See Index of problems detected by npm-groovy-lint Configuration in MegaLinter Enable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in ENABLE_LINTERS variable Disable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding GROOVY_NPM_GROOVY_LINT in APPLY_FIXES variable Variable Description Default value GROOVY_NPM_GROOVY_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GROOVY_NPM_GROOVY_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".groovy\", \".gvy\", \".gradle\", \".nf\"] GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Jenkinsfile\"] GROOVY_NPM_GROOVY_LINT_PRE_COMMANDS List of bash commands to run before the linter None GROOVY_NPM_GROOVY_LINT_POST_COMMANDS List of bash commands to run after the linter None GROOVY_NPM_GROOVY_LINT_CONFIG_FILE npm-groovy-lint configuration file name Use LINTER_DEFAULT to let the linter find it .groovylintrc.json GROOVY_NPM_GROOVY_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use npm-groovy-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode Groovy Lint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .groovy , .gvy , .gradle , .nf File names (regex): Jenkinsfile How the linting is performed npm-groovy-lint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls npm-groovy-lint myfile.groovy npm-groovy-lint -c .groovylintrc.json npm-groovy-lint -c .groovylintrc.json --fix myfile.groovy myfile2.groovy Help content npm-groovy-lint [options] --ext [String] Specify Groovy file extensions -s, --source String Source text to lint (if no path/files arguments) --sourcefilepath String Full path of the file whose content is sent in source argument --parse Try to parse the source code with GroovyShell and return errors (use argument --no-parse if you want to deactivate) -c, --config String Custom path to directory containing GroovyLint config file. Default: Found groovylintrc.js/json/yml/package.json config file, or default npm-groovy-lint config if not defined. Note: command-line arguments have priority on config file properties - default: / --format Format source code --fix Automatically fix problems when possible -x, --fixrules String Option for --fix argument: List of rule identifiers to fix (if not specified, all available fixes will be applied) - default: all -i, --ignorepattern String Comma-separated list of Ant-style file patterns specifying files that must be ignored. Default: none -r, --rulesets String RuleSet file(s) to use for linting. If it is a directory, all rulesets will be used. RuleSet file definition: http://codenarc.github.io/CodeNarc/codenarc-creating-ruleset.html. If not specified, npm-groovy-script default one will be used. Can also be a list of rule identifiers with parameters --rulesetsoverridetype String If list of rules sent in rulesets option, defines if they replace rules defined in .groovylintrc.json, or if they are appended - either: replaceConfig or appendConfig - default: replaceConfig -o, --output String Output format (txt,json,sarif,html,xml), or path to a file with one of these extensions - default: txt -l, --loglevel String Log level (error,warning,info) - either: error, warning, or info - default: info --verbose More outputs in console, including performed fixes --failon String Defines the error level where CLI will fail (return code = 1). error,warning,info or none. Every failure level includes the more critical ones. - either: error, warning, info, or none - default: none --failonerror (Deprecated) Fails if at least one error is found --failonwarning (Deprecated) Fails if at least one warning is found --failoninfo (Deprecated) Fails if at least one error is found --codenarcargs Use core CodeNarc arguments (all npm-groovy-lint arguments will be ignored). Doc: http://codenarc.github.io/CodeNarc/codenarc-command-line.html --noserver For better performances, npm-groovy-lint runs a local server to eep CodeNarc alive instead of loading java/groovy at each call. If you don't want that, send this argument --serverhost String If use of CodeNarc server, host where is the CodeNarc server (default: localhost) - default: http://localhost --serverport String If use of CodeNarc server, port of the CodeNarc server (default: 7484) - default: 7484 -j, --javaexecutable String If you do not want to use default java executable to run CodeNarcServer, you can override it - default: java --javaoptions String Override java options - default: -Xms256m,-Xmx2048m --killserver Terminate the CodeNarcServer if running --nolintafter Do not lint again after format and fix options (useful for client calling Npm Groovy Lint) --returnrules Return rule descriptions and url if this argument is set --insight npm-groovy-lint collects anonymous usage statistics using package https://www.npmjs.com/package/insight. If you want to enable them, use --insight option -h, --help Show help (npm-groovy-lint -help OPTIONNAME to see option detail) -v, --version Show version -p, --path path::String (DEPRECATED) Directory containing the files to lint (default: current directory) - default: . -f, --files String (DEPRECATED) Comma-separated list of Ant-style file patterns specifying files that must be included Installation on mega-linter Docker image APK packages (Linux): openjdk11 NPM packages (node.js): npm-groovy-lint","title":"npm-groovy-lint"},{"location":"descriptors/groovy_npm_groovy_lint/#npm-groovy-lint","text":"","title":"npm-groovy-lint"},{"location":"descriptors/groovy_npm_groovy_lint/#npm-groovy-lint-documentation","text":"Version in MegaLinter: 10.1.0 Visit Official Web Site See How to configure npm-groovy-lint rules If custom .groovylintrc.json config file is not found, .groovylintrc.json will be used See How to disable npm-groovy-lint rules in files See Index of problems detected by npm-groovy-lint","title":"npm-groovy-lint documentation"},{"location":"descriptors/groovy_npm_groovy_lint/#configuration-in-megalinter","text":"Enable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in ENABLE_LINTERS variable Disable npm-groovy-lint by adding GROOVY_NPM_GROOVY_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding GROOVY_NPM_GROOVY_LINT in APPLY_FIXES variable Variable Description Default value GROOVY_NPM_GROOVY_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file GROOVY_NPM_GROOVY_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file GROOVY_NPM_GROOVY_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files GROOVY_NPM_GROOVY_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".groovy\", \".gvy\", \".gradle\", \".nf\"] GROOVY_NPM_GROOVY_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Jenkinsfile\"] GROOVY_NPM_GROOVY_LINT_PRE_COMMANDS List of bash commands to run before the linter None GROOVY_NPM_GROOVY_LINT_POST_COMMANDS List of bash commands to run after the linter None GROOVY_NPM_GROOVY_LINT_CONFIG_FILE npm-groovy-lint configuration file name Use LINTER_DEFAULT to let the linter find it .groovylintrc.json GROOVY_NPM_GROOVY_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false GROOVY_NPM_GROOVY_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/groovy_npm_groovy_lint/#ide-integration","text":"Use npm-groovy-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode Groovy Lint","title":"IDE Integration"},{"location":"descriptors/groovy_npm_groovy_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/groovy_npm_groovy_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/groovy_npm_groovy_lint/#how-are-identified-applicable-files","text":"File extensions: .groovy , .gvy , .gradle , .nf File names (regex): Jenkinsfile","title":"How are identified applicable files"},{"location":"descriptors/groovy_npm_groovy_lint/#how-the-linting-is-performed","text":"npm-groovy-lint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/groovy_npm_groovy_lint/#example-calls","text":"npm-groovy-lint myfile.groovy npm-groovy-lint -c .groovylintrc.json npm-groovy-lint -c .groovylintrc.json --fix myfile.groovy myfile2.groovy","title":"Example calls"},{"location":"descriptors/groovy_npm_groovy_lint/#help-content","text":"npm-groovy-lint [options] --ext [String] Specify Groovy file extensions -s, --source String Source text to lint (if no path/files arguments) --sourcefilepath String Full path of the file whose content is sent in source argument --parse Try to parse the source code with GroovyShell and return errors (use argument --no-parse if you want to deactivate) -c, --config String Custom path to directory containing GroovyLint config file. Default: Found groovylintrc.js/json/yml/package.json config file, or default npm-groovy-lint config if not defined. Note: command-line arguments have priority on config file properties - default: / --format Format source code --fix Automatically fix problems when possible -x, --fixrules String Option for --fix argument: List of rule identifiers to fix (if not specified, all available fixes will be applied) - default: all -i, --ignorepattern String Comma-separated list of Ant-style file patterns specifying files that must be ignored. Default: none -r, --rulesets String RuleSet file(s) to use for linting. If it is a directory, all rulesets will be used. RuleSet file definition: http://codenarc.github.io/CodeNarc/codenarc-creating-ruleset.html. If not specified, npm-groovy-script default one will be used. Can also be a list of rule identifiers with parameters --rulesetsoverridetype String If list of rules sent in rulesets option, defines if they replace rules defined in .groovylintrc.json, or if they are appended - either: replaceConfig or appendConfig - default: replaceConfig -o, --output String Output format (txt,json,sarif,html,xml), or path to a file with one of these extensions - default: txt -l, --loglevel String Log level (error,warning,info) - either: error, warning, or info - default: info --verbose More outputs in console, including performed fixes --failon String Defines the error level where CLI will fail (return code = 1). error,warning,info or none. Every failure level includes the more critical ones. - either: error, warning, info, or none - default: none --failonerror (Deprecated) Fails if at least one error is found --failonwarning (Deprecated) Fails if at least one warning is found --failoninfo (Deprecated) Fails if at least one error is found --codenarcargs Use core CodeNarc arguments (all npm-groovy-lint arguments will be ignored). Doc: http://codenarc.github.io/CodeNarc/codenarc-command-line.html --noserver For better performances, npm-groovy-lint runs a local server to eep CodeNarc alive instead of loading java/groovy at each call. If you don't want that, send this argument --serverhost String If use of CodeNarc server, host where is the CodeNarc server (default: localhost) - default: http://localhost --serverport String If use of CodeNarc server, port of the CodeNarc server (default: 7484) - default: 7484 -j, --javaexecutable String If you do not want to use default java executable to run CodeNarcServer, you can override it - default: java --javaoptions String Override java options - default: -Xms256m,-Xmx2048m --killserver Terminate the CodeNarcServer if running --nolintafter Do not lint again after format and fix options (useful for client calling Npm Groovy Lint) --returnrules Return rule descriptions and url if this argument is set --insight npm-groovy-lint collects anonymous usage statistics using package https://www.npmjs.com/package/insight. If you want to enable them, use --insight option -h, --help Show help (npm-groovy-lint -help OPTIONNAME to see option detail) -v, --version Show version -p, --path path::String (DEPRECATED) Directory containing the files to lint (default: current directory) - default: . -f, --files String (DEPRECATED) Comma-separated list of Ant-style file patterns specifying files that must be included","title":"Help content"},{"location":"descriptors/groovy_npm_groovy_lint/#installation-on-mega-linter-docker-image","text":"APK packages (Linux): openjdk11 NPM packages (node.js): npm-groovy-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/html/","text":"HTML Linters Linter Configuration key Status djlint HTML htmlhint HTML Linted files File extensions: .html .htm Configuration in MegaLinter Variable Description Default value HTML_FILTER_REGEX_INCLUDE Custom regex including filter HTML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All HTML linters"},{"location":"descriptors/html/#html","text":"","title":"HTML"},{"location":"descriptors/html/#linters","text":"Linter Configuration key Status djlint HTML htmlhint HTML","title":"Linters"},{"location":"descriptors/html/#linted-files","text":"File extensions: .html .htm","title":"Linted files"},{"location":"descriptors/html/#configuration-in-megalinter","text":"Variable Description Default value HTML_FILTER_REGEX_INCLUDE Custom regex including filter HTML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/html_djlint/","text":"DjLint can analyse multiple formats of HTML: html (default) django jinja nunjucks (for nunjucks and twig) handlebars (for handlebars and mustache) golang angular For example, define HTML_DJLINT_HTMLHINT_ARGUMENTS: [\"--profile\", \"django\"] to select django format djlint documentation Version in MegaLinter: 1.18.0 Visit Official Web Site See How to configure djlint rules See How to disable djlint rules in files See Index of problems detected by djlint Configuration in MegaLinter Enable djlint by adding HTML_DJLINT in ENABLE_LINTERS variable Disable djlint by adding HTML_DJLINT in DISABLE_LINTERS variable Variable Description Default value HTML_DJLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" HTML_DJLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file HTML_DJLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file HTML_DJLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files HTML_DJLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".html\", \".htm\"] HTML_DJLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file HTML_DJLINT_PRE_COMMANDS List of bash commands to run before the linter None HTML_DJLINT_POST_COMMANDS List of bash commands to run after the linter None HTML_DJLINT_DISABLE_ERRORS Run linter but consider errors as warnings false HTML_DJLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use djlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Sublime Text SublimeLinter-contrib-djlint Visit Web Site Visual Studio Code djlint-vscode MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .html , .htm How the linting is performed djlint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls djlint myfile1.html myfile2.html Help content Usage: djlint [OPTIONS] SRC ... djLint \u00b7 HTML template linter and formatter. Options: --version Show the version and exit. -e, --extension TEXT File extension to check [default: html] -i, --ignore TEXT Codes to ignore. ex: \"H014,H017\" --reformat Reformat the file(s). --check Check formatting on the file(s). --indent INTEGER Indent spacing. [default: 4] --quiet Do not print diff when reformatting. --profile TEXT Enable defaults by template language. ops: django, jinja, nunjucks, handlebars, golang, angular, html [default: html] --require-pragma Only format or lint files that starts with a comment with the text 'djlint:on' --lint Lint for common issues. [default option] --use-gitignore Use .gitignore file to extend excludes. --warn Return errors as warnings. --preserve-leading-space Attempt to preserve leading space on text. --preserve-blank-lines Attempt to preserve blank lines. --format-css Also format contents of <style> tags. --format-js Also format contents of <script> tags. --configuration PATH Path to global configuration file in .djlintrc format --statistics Count the number of occurrences of each error/warning code. -h, --help Show this message and exit. Installation on mega-linter Docker image PIP packages (Python): djlint","title":"djlint"},{"location":"descriptors/html_djlint/#djlint-documentation","text":"Version in MegaLinter: 1.18.0 Visit Official Web Site See How to configure djlint rules See How to disable djlint rules in files See Index of problems detected by djlint","title":"djlint documentation"},{"location":"descriptors/html_djlint/#configuration-in-megalinter","text":"Enable djlint by adding HTML_DJLINT in ENABLE_LINTERS variable Disable djlint by adding HTML_DJLINT in DISABLE_LINTERS variable Variable Description Default value HTML_DJLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" HTML_DJLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file HTML_DJLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file HTML_DJLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files HTML_DJLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".html\", \".htm\"] HTML_DJLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file HTML_DJLINT_PRE_COMMANDS List of bash commands to run before the linter None HTML_DJLINT_POST_COMMANDS List of bash commands to run after the linter None HTML_DJLINT_DISABLE_ERRORS Run linter but consider errors as warnings false HTML_DJLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/html_djlint/#ide-integration","text":"Use djlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Sublime Text SublimeLinter-contrib-djlint Visit Web Site Visual Studio Code djlint-vscode","title":"IDE Integration"},{"location":"descriptors/html_djlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/html_djlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/html_djlint/#how-are-identified-applicable-files","text":"File extensions: .html , .htm","title":"How are identified applicable files"},{"location":"descriptors/html_djlint/#how-the-linting-is-performed","text":"djlint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/html_djlint/#example-calls","text":"djlint myfile1.html myfile2.html","title":"Example calls"},{"location":"descriptors/html_djlint/#help-content","text":"Usage: djlint [OPTIONS] SRC ... djLint \u00b7 HTML template linter and formatter. Options: --version Show the version and exit. -e, --extension TEXT File extension to check [default: html] -i, --ignore TEXT Codes to ignore. ex: \"H014,H017\" --reformat Reformat the file(s). --check Check formatting on the file(s). --indent INTEGER Indent spacing. [default: 4] --quiet Do not print diff when reformatting. --profile TEXT Enable defaults by template language. ops: django, jinja, nunjucks, handlebars, golang, angular, html [default: html] --require-pragma Only format or lint files that starts with a comment with the text 'djlint:on' --lint Lint for common issues. [default option] --use-gitignore Use .gitignore file to extend excludes. --warn Return errors as warnings. --preserve-leading-space Attempt to preserve leading space on text. --preserve-blank-lines Attempt to preserve blank lines. --format-css Also format contents of <style> tags. --format-js Also format contents of <script> tags. --configuration PATH Path to global configuration file in .djlintrc format --statistics Count the number of occurrences of each error/warning code. -h, --help Show this message and exit.","title":"Help content"},{"location":"descriptors/html_djlint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): djlint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/html_htmlhint/","text":"htmlhint htmlhint documentation Version in MegaLinter: 1.1.4 Visit Official Web Site See How to configure htmlhint rules If custom .htmlhintrc config file is not found, .htmlhintrc will be used See How to disable htmlhint rules in files See Index of problems detected by htmlhint Configuration in MegaLinter Enable htmlhint by adding HTML_HTMLHINT in ENABLE_LINTERS variable Disable htmlhint by adding HTML_HTMLHINT in DISABLE_LINTERS variable Variable Description Default value HTML_HTMLHINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" HTML_HTMLHINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file HTML_HTMLHINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file HTML_HTMLHINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files HTML_HTMLHINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".html\", \".htm\"] HTML_HTMLHINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file HTML_HTMLHINT_PRE_COMMANDS List of bash commands to run before the linter None HTML_HTMLHINT_POST_COMMANDS List of bash commands to run after the linter None HTML_HTMLHINT_CONFIG_FILE htmlhint configuration file name Use LINTER_DEFAULT to let the linter find it .htmlhintrc HTML_HTMLHINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules HTML_HTMLHINT_DISABLE_ERRORS Run linter but consider errors as warnings false HTML_HTMLHINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use htmlhint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom atom-htmlhint Visit Web Site Brackets brackets-htmlhint Visit Web Site Sublime Text SublimeLinter-contrib-htmlhint Visit Web Site Visual Studio Code vscode-htmlhint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .html , .htm How the linting is performed htmlhint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls htmlhint myfile.html htmlhint --config .htmlhintrc myfile.html Help content Usage: htmlhint <file|folder|pattern|stdin|url ...> [options] Options: -V, --version output the version number -l, --list show all of the rules available -c, --config <file> custom configuration file -r, --rules <ruleid, ruleid=value ...> set all of the rules available -R, --rulesdir <file|folder> load custom rules from file or folder -f, --format <checkstyle|compact|html|json|junit|markdown|unix> output messages as custom format -i, --ignore <pattern, pattern ...> add pattern to exclude matches --nocolor disable color --warn Warn only, exit with 0 -h, --help display help for command Examples: htmlhint htmlhint www htmlhint www/test.html htmlhint www/**/*.xhtml htmlhint www/**/*.{htm,html} htmlhint http://www.alibaba.com/ cat test.html | htmlhint stdin htmlhint --list htmlhint --rules tag-pair,id-class-value=underline test.html htmlhint --config .htmlhintrc test.html htmlhint --ignore **/build/**,**/test/** htmlhint --rulesdir ./rules/ Installation on mega-linter Docker image NPM packages (node.js): htmlhint","title":"htmlhint"},{"location":"descriptors/html_htmlhint/#htmlhint","text":"","title":"htmlhint"},{"location":"descriptors/html_htmlhint/#htmlhint-documentation","text":"Version in MegaLinter: 1.1.4 Visit Official Web Site See How to configure htmlhint rules If custom .htmlhintrc config file is not found, .htmlhintrc will be used See How to disable htmlhint rules in files See Index of problems detected by htmlhint","title":"htmlhint documentation"},{"location":"descriptors/html_htmlhint/#configuration-in-megalinter","text":"Enable htmlhint by adding HTML_HTMLHINT in ENABLE_LINTERS variable Disable htmlhint by adding HTML_HTMLHINT in DISABLE_LINTERS variable Variable Description Default value HTML_HTMLHINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" HTML_HTMLHINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file HTML_HTMLHINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file HTML_HTMLHINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files HTML_HTMLHINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".html\", \".htm\"] HTML_HTMLHINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file HTML_HTMLHINT_PRE_COMMANDS List of bash commands to run before the linter None HTML_HTMLHINT_POST_COMMANDS List of bash commands to run after the linter None HTML_HTMLHINT_CONFIG_FILE htmlhint configuration file name Use LINTER_DEFAULT to let the linter find it .htmlhintrc HTML_HTMLHINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules HTML_HTMLHINT_DISABLE_ERRORS Run linter but consider errors as warnings false HTML_HTMLHINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/html_htmlhint/#ide-integration","text":"Use htmlhint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom atom-htmlhint Visit Web Site Brackets brackets-htmlhint Visit Web Site Sublime Text SublimeLinter-contrib-htmlhint Visit Web Site Visual Studio Code vscode-htmlhint","title":"IDE Integration"},{"location":"descriptors/html_htmlhint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/html_htmlhint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/html_htmlhint/#how-are-identified-applicable-files","text":"File extensions: .html , .htm","title":"How are identified applicable files"},{"location":"descriptors/html_htmlhint/#how-the-linting-is-performed","text":"htmlhint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/html_htmlhint/#example-calls","text":"htmlhint myfile.html htmlhint --config .htmlhintrc myfile.html","title":"Example calls"},{"location":"descriptors/html_htmlhint/#help-content","text":"Usage: htmlhint <file|folder|pattern|stdin|url ...> [options] Options: -V, --version output the version number -l, --list show all of the rules available -c, --config <file> custom configuration file -r, --rules <ruleid, ruleid=value ...> set all of the rules available -R, --rulesdir <file|folder> load custom rules from file or folder -f, --format <checkstyle|compact|html|json|junit|markdown|unix> output messages as custom format -i, --ignore <pattern, pattern ...> add pattern to exclude matches --nocolor disable color --warn Warn only, exit with 0 -h, --help display help for command Examples: htmlhint htmlhint www htmlhint www/test.html htmlhint www/**/*.xhtml htmlhint www/**/*.{htm,html} htmlhint http://www.alibaba.com/ cat test.html | htmlhint stdin htmlhint --list htmlhint --rules tag-pair,id-class-value=underline test.html htmlhint --config .htmlhintrc test.html htmlhint --ignore **/build/**,**/test/** htmlhint --rulesdir ./rules/","title":"Help content"},{"location":"descriptors/html_htmlhint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): htmlhint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/java/","text":"JAVA Linters Linter Configuration key Status checkstyle JAVA pmd JAVA Linted files File extensions: .java Configuration in MegaLinter Variable Description Default value JAVA_FILTER_REGEX_INCLUDE Custom regex including filter JAVA_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" APK packages (Linux): openjdk11","title":"All JAVA linters"},{"location":"descriptors/java/#java","text":"","title":"JAVA"},{"location":"descriptors/java/#linters","text":"Linter Configuration key Status checkstyle JAVA pmd JAVA","title":"Linters"},{"location":"descriptors/java/#linted-files","text":"File extensions: .java","title":"Linted files"},{"location":"descriptors/java/#configuration-in-megalinter","text":"Variable Description Default value JAVA_FILTER_REGEX_INCLUDE Custom regex including filter JAVA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/java/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/java/#installation","text":"Dockerfile commands : ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" APK packages (Linux): openjdk11","title":"Installation"},{"location":"descriptors/java_checkstyle/","text":"checkstyle documentation Version in MegaLinter: 10.3.4 Visit Official Web Site See How to configure checkstyle rules If custom sun_checks.xml config file is not found, sun_checks.xml will be used See How to disable checkstyle rules in files See Index of problems detected by checkstyle Configuration in MegaLinter Enable checkstyle by adding JAVA_CHECKSTYLE in ENABLE_LINTERS variable Disable checkstyle by adding JAVA_CHECKSTYLE in DISABLE_LINTERS variable Variable Description Default value JAVA_CHECKSTYLE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVA_CHECKSTYLE_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVA_CHECKSTYLE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".java\"] JAVA_CHECKSTYLE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVA_CHECKSTYLE_PRE_COMMANDS List of bash commands to run before the linter None JAVA_CHECKSTYLE_POST_COMMANDS List of bash commands to run after the linter None JAVA_CHECKSTYLE_CONFIG_FILE checkstyle configuration file name Use LINTER_DEFAULT to let the linter find it sun_checks.xml JAVA_CHECKSTYLE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVA_CHECKSTYLE_DISABLE_ERRORS Run linter but consider errors as warnings false JAVA_CHECKSTYLE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use checkstyle in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse eclipse-cs Visit Web Site IDEA checkstyle-idea Visual Studio Code vscode-checkstyle MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 java Optimized for JAVA based projects 50 Behind the scenes How are identified applicable files File extensions: .java How the linting is performed checkstyle is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls java -jar /usr/bin/checkstyle myfile.java java -jar /usr/bin/checkstyle -c sun_checks.xml myfile.java Help content Usage: java [options] <mainclass> [args...] (to execute a class) or java [options] -jar <jarfile> [args...] (to execute a jar file) or java [options] -m <module>[/<mainclass>] [args...] java [options] --module <module>[/<mainclass>] [args...] (to execute the main class in a module) or java [options] <sourcefile> [args] (to execute a single source-file program) Arguments following the main class, source file, -jar <jarfile>, -m or --module <module>/<mainclass> are passed as the arguments to main class. where options include: -cp <class search path of directories and zip/jar files> -classpath <class search path of directories and zip/jar files> --class-path <class search path of directories and zip/jar files> A : separated list of directories, JAR archives, and ZIP archives to search for class files. -p <module path> --module-path <module path>... A : separated list of directories, each directory is a directory of modules. --upgrade-module-path <module path>... A : separated list of directories, each directory is a directory of modules that replace upgradeable modules in the runtime image --add-modules <module name>[,<module name>...] root modules to resolve in addition to the initial module. <module name> can also be ALL-DEFAULT, ALL-SYSTEM, ALL-MODULE-PATH. --list-modules list observable modules and exit -d <module name> --describe-module <module name> describe a module and exit --dry-run create VM and load main class but do not execute main method. The --dry-run option may be useful for validating the command-line options such as the module system configuration. --validate-modules validate all modules and exit The --validate-modules option may be useful for finding conflicts and other errors with modules on the module path. -D<name>=<value> set a system property -verbose:[class|module|gc|jni] enable verbose output -version print product version to the error stream and exit --version print product version to the output stream and exit -showversion print product version to the error stream and continue --show-version print product version to the output stream and continue --show-module-resolution show module resolution output during startup -? -h -help print this help message to the error stream --help print this help message to the output stream -X print help on extra options to the error stream --help-extra print help on extra options to the output stream -ea[:<packagename>...|:<classname>] -enableassertions[:<packagename>...|:<classname>] enable assertions with specified granularity -da[:<packagename>...|:<classname>] -disableassertions[:<packagename>...|:<classname>] disable assertions with specified granularity -esa | -enablesystemassertions enable system assertions -dsa | -disablesystemassertions disable system assertions -agentlib:<libname>[=<options>] load native agent library <libname>, e.g. -agentlib:jdwp see also -agentlib:jdwp=help -agentpath:<pathname>[=<options>] load native agent library by full pathname -javaagent:<jarpath>[=<options>] load Java programming language agent, see java.lang.instrument -splash:<imagepath> show splash screen with specified image HiDPI scaled images are automatically supported and used if available. The unscaled image filename, e.g. image.ext, should always be passed as the argument to the -splash option. The most appropriate scaled image provided will be picked up automatically. See the SplashScreen API documentation for more information @argument files one or more argument files containing options -disable-@files prevent further argument file expansion --enable-preview allow classes to depend on preview features of this release To specify an argument for a long option, you can use --<name>=<value> or --<name> <value>. Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install RUN CHECKSTYLE_LATEST=$(curl -s https://api.github.com/repos/checkstyle/checkstyle/releases/latest \\ | grep browser_download_url \\ | grep \".jar\" \\ | cut -d '\"' -f 4) \\ && curl --retry 5 --retry-delay 5 -sSL $CHECKSTYLE_LATEST \\ --output /usr/bin/checkstyle","title":"checkstyle"},{"location":"descriptors/java_checkstyle/#checkstyle-documentation","text":"Version in MegaLinter: 10.3.4 Visit Official Web Site See How to configure checkstyle rules If custom sun_checks.xml config file is not found, sun_checks.xml will be used See How to disable checkstyle rules in files See Index of problems detected by checkstyle","title":"checkstyle documentation"},{"location":"descriptors/java_checkstyle/#configuration-in-megalinter","text":"Enable checkstyle by adding JAVA_CHECKSTYLE in ENABLE_LINTERS variable Disable checkstyle by adding JAVA_CHECKSTYLE in DISABLE_LINTERS variable Variable Description Default value JAVA_CHECKSTYLE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVA_CHECKSTYLE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVA_CHECKSTYLE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVA_CHECKSTYLE_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVA_CHECKSTYLE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".java\"] JAVA_CHECKSTYLE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVA_CHECKSTYLE_PRE_COMMANDS List of bash commands to run before the linter None JAVA_CHECKSTYLE_POST_COMMANDS List of bash commands to run after the linter None JAVA_CHECKSTYLE_CONFIG_FILE checkstyle configuration file name Use LINTER_DEFAULT to let the linter find it sun_checks.xml JAVA_CHECKSTYLE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVA_CHECKSTYLE_DISABLE_ERRORS Run linter but consider errors as warnings false JAVA_CHECKSTYLE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/java_checkstyle/#ide-integration","text":"Use checkstyle in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse eclipse-cs Visit Web Site IDEA checkstyle-idea Visual Studio Code vscode-checkstyle","title":"IDE Integration"},{"location":"descriptors/java_checkstyle/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 java Optimized for JAVA based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/java_checkstyle/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/java_checkstyle/#how-are-identified-applicable-files","text":"File extensions: .java","title":"How are identified applicable files"},{"location":"descriptors/java_checkstyle/#how-the-linting-is-performed","text":"checkstyle is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/java_checkstyle/#example-calls","text":"java -jar /usr/bin/checkstyle myfile.java java -jar /usr/bin/checkstyle -c sun_checks.xml myfile.java","title":"Example calls"},{"location":"descriptors/java_checkstyle/#help-content","text":"Usage: java [options] <mainclass> [args...] (to execute a class) or java [options] -jar <jarfile> [args...] (to execute a jar file) or java [options] -m <module>[/<mainclass>] [args...] java [options] --module <module>[/<mainclass>] [args...] (to execute the main class in a module) or java [options] <sourcefile> [args] (to execute a single source-file program) Arguments following the main class, source file, -jar <jarfile>, -m or --module <module>/<mainclass> are passed as the arguments to main class. where options include: -cp <class search path of directories and zip/jar files> -classpath <class search path of directories and zip/jar files> --class-path <class search path of directories and zip/jar files> A : separated list of directories, JAR archives, and ZIP archives to search for class files. -p <module path> --module-path <module path>... A : separated list of directories, each directory is a directory of modules. --upgrade-module-path <module path>... A : separated list of directories, each directory is a directory of modules that replace upgradeable modules in the runtime image --add-modules <module name>[,<module name>...] root modules to resolve in addition to the initial module. <module name> can also be ALL-DEFAULT, ALL-SYSTEM, ALL-MODULE-PATH. --list-modules list observable modules and exit -d <module name> --describe-module <module name> describe a module and exit --dry-run create VM and load main class but do not execute main method. The --dry-run option may be useful for validating the command-line options such as the module system configuration. --validate-modules validate all modules and exit The --validate-modules option may be useful for finding conflicts and other errors with modules on the module path. -D<name>=<value> set a system property -verbose:[class|module|gc|jni] enable verbose output -version print product version to the error stream and exit --version print product version to the output stream and exit -showversion print product version to the error stream and continue --show-version print product version to the output stream and continue --show-module-resolution show module resolution output during startup -? -h -help print this help message to the error stream --help print this help message to the output stream -X print help on extra options to the error stream --help-extra print help on extra options to the output stream -ea[:<packagename>...|:<classname>] -enableassertions[:<packagename>...|:<classname>] enable assertions with specified granularity -da[:<packagename>...|:<classname>] -disableassertions[:<packagename>...|:<classname>] disable assertions with specified granularity -esa | -enablesystemassertions enable system assertions -dsa | -disablesystemassertions disable system assertions -agentlib:<libname>[=<options>] load native agent library <libname>, e.g. -agentlib:jdwp see also -agentlib:jdwp=help -agentpath:<pathname>[=<options>] load native agent library by full pathname -javaagent:<jarpath>[=<options>] load Java programming language agent, see java.lang.instrument -splash:<imagepath> show splash screen with specified image HiDPI scaled images are automatically supported and used if available. The unscaled image filename, e.g. image.ext, should always be passed as the argument to the -splash option. The most appropriate scaled image provided will be picked up automatically. See the SplashScreen API documentation for more information @argument files one or more argument files containing options -disable-@files prevent further argument file expansion --enable-preview allow classes to depend on preview features of this release To specify an argument for a long option, you can use --<name>=<value> or --<name> <value>.","title":"Help content"},{"location":"descriptors/java_checkstyle/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install RUN CHECKSTYLE_LATEST=$(curl -s https://api.github.com/repos/checkstyle/checkstyle/releases/latest \\ | grep browser_download_url \\ | grep \".jar\" \\ | cut -d '\"' -f 4) \\ && curl --retry 5 --retry-delay 5 -sSL $CHECKSTYLE_LATEST \\ --output /usr/bin/checkstyle","title":"Installation on mega-linter Docker image"},{"location":"descriptors/java_pmd/","text":"pmd pmd documentation Version in MegaLinter: 6.48.0 Visit Official Web Site See How to configure pmd rules If custom java-pmd-ruleset.xml config file is not found, java-pmd-ruleset.xml will be used See How to disable pmd rules in files See Index of problems detected by pmd Configuration in MegaLinter Enable pmd by adding JAVA_PMD in ENABLE_LINTERS variable Disable pmd by adding JAVA_PMD in DISABLE_LINTERS variable Variable Description Default value JAVA_PMD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVA_PMD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVA_PMD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVA_PMD_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVA_PMD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".java\"] JAVA_PMD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVA_PMD_PRE_COMMANDS List of bash commands to run before the linter None JAVA_PMD_POST_COMMANDS List of bash commands to run after the linter None JAVA_PMD_CONFIG_FILE pmd configuration file name Use LINTER_DEFAULT to let the linter find it java-pmd-ruleset.xml JAVA_PMD_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVA_PMD_DISABLE_ERRORS Run linter but consider errors as warnings false JAVA_PMD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 java Optimized for JAVA based projects 50 Behind the scenes How are identified applicable files File extensions: .java How the linting is performed pmd is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls pmd --rulesets java-pmd-ruleset.xml --dir myfile.java pmd --rulesets java-pmd-ruleset.xml --file-list /tmp/list-off-files-generated-by-megalinter.txt pmd --rulesets java-pmd-ruleset.xml --dir /path/to/sources Help content Usage: <main class> [options] Options: --aux-classpath, -auxclasspath Specifies the classpath for libraries used by the source code. This is used to resolve types in Java source files. The platform specific path delimiter (\":\" on Linux, \";\" on Windows) is used to separate the entries. Alternatively, a single 'file:' URL to a text file containing path elements on consecutive lines can be specified. --benchmark, -benchmark, -b Benchmark mode - output a benchmark report upon completion; default to System.err. Default: false --cache, -cache Specify the location of the cache file for incremental analysis. This should be the full path to the file, including the desired file name (not just the parent directory). If the file doesn't exist, it will be created on the first run. The file will be overwritten on each run with the most up-to-date rule violations. --dir, -dir, -d Path to a source file, or directory containing source files to analyze. Note that a file is only effectively added if it matches a language known by PMD. Zip and Jar files are also supported, if they are specified directly (archive files found while exploring a directory are not recursively expanded). This option can be repeated, and multiple arguments can be provided to a single occurrence of the option. One of --dir, --file-list or --uri must be provided. Default: [] --encoding, -encoding, -e Specifies the character set encoding of the source code files PMD is reading (i.e., UTF-8). Default: UTF-8 --fail-on-violation, --failOnViolation, -failOnViolation By default PMD exits with status 4 if violations are found. Disable this option with '-failOnViolation false' to exit with 0 instead and just write the report. Default: true --file-list, -filelist Path to a file containing a list of files to analyze, one path per line. One of --dir, --file-list or --uri must be provided. --force-language, -force-language Force a language to be used for all input files, irrespective of file names. When using this option, the automatic language selection by extension is disabled, and PMD tries to parse all input files with the given language's parser. Parsing errors are ignored. --format, -format, -f Report format type. Default: text --help, -help, -h, -H Display help on usage. Default: false --ignore-list, -ignorelist Path to a file containing a list of files to exclude from the analysis, one path per line. This option can be combined with --dir and --file-list. --minimum-priority, -minimumpriority, -min Rule priority threshold; rules with lower priority than configured here won't be used. Valid values are integers between 1 and 5 (inclusive), with 5 being the lowest priority. Default: 5 --no-cache, -no-cache Explicitly disable incremental analysis. The '-cache' option is ignored if this switch is present in the command line. Default: false --no-ruleset-compatibility, -norulesetcompatibility Disable the ruleset compatibility filter. The filter is active by default and tries automatically 'fix' old ruleset files with old rule names Default: false --property, -property, -P {name}={value}: Define a property for the report format. Default: [] --report-file, -reportfile, -r Path to a file to which report output is written. The file is created if it does not exist. If this option is not specified, the report is rendered to standard output. * --rulesets, -rulesets, -R Path to a ruleset xml file. The path may reference a resource on the classpath of the application, be a local file system path, or a URL. The option can be repeated, and multiple arguments can be provided to a single occurrence of the option. --short-names, -shortnames Prints shortened filenames in the report. Default: false --show-suppressed, -showsuppressed Report should show suppressed rule violations. Default: false --stress, -stress, -S Performs a stress test. Default: false --suppress-marker, -suppressmarker Specifies the string that marks a line which PMD should ignore; default is NOPMD. Default: NOPMD --threads, -threads, -t Sets the number of threads used by PMD. Default: 1 --uri, -uri, -u Database URI for sources. One of --dir, --file-list or --uri must be provided. --debug, --verbose, -debug, -verbose, -D, -V Debug mode. Default: false --version Display current version of PMD and exit without performing any analysis. Default: false -language, -l Specify a language PMD should use. -version, -v Specify version of a language PMD should use. Mandatory arguments: 1) A java source code filename or directory 2) A report format 3) A ruleset filename or a comma-delimited string of ruleset filenames For example: C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -d c:\\my\\source\\code -f html -R java-unusedcode Languages and version suported: apex, ecmascript, html, java, jsp, modelica, plsql, pom, scala, vf, vm, wsdl, xml, xsl Available report formats and their configuration properties are: codeclimate: Code Climate integration. csv: Comma-separated values tabular format. problem - Include Problem column default: true package - Include Package column default: true file - Include File column default: true priority - Include Priority column default: true line - Include Line column default: true desc - Include Description column default: true ruleSet - Include Rule set column default: true rule - Include Rule column default: true emacs: GNU Emacs integration. empty: Empty, nothing. html: HTML format linePrefix - Prefix for line number anchor in the source file. linkPrefix - Path to HTML source. htmlExtension - Replace file extension with .html for the links (default: false) default: false ideaj: IntelliJ IDEA integration. classAndMethodName - Class and Method name, pass '.method' when processing a directory. default: sourcePath - Source path. default: fileName - File name. default: json: JSON format. sarif: Static Analysis Results Interchange Format (SARIF) summaryhtml: Summary HTML format. linePrefix - Prefix for line number anchor in the source file. linkPrefix - Path to HTML source. htmlExtension - Replace file extension with .html for the links (default: false) default: false text: Text format. textcolor: Text format, with color support (requires ANSI console support, e.g. xterm, rxvt, etc.). color - Enables colors with anything other than 'false' or '0'. default: yes textpad: TextPad integration. vbhtml: Vladimir Bossicard HTML format. xml: XML format. encoding - XML encoding format, defaults to UTF-8. default: UTF-8 xslt: XML with a XSL Transformation applied. encoding - XML encoding format, defaults to UTF-8. default: UTF-8 xsltFilename - The XSLT file name. yahtml: Yet Another HTML format. outputDir - Output directory. For example on windows: C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -dir c:\\my\\source\\code -format text -R rulesets/java/quickstart.xml -version 1.5 -language java -debug C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -dir c:\\my\\source\\code -f xml -rulesets rulesets/java/quickstart.xml,category/java/codestyle.xml -encoding UTF-8 C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -d c:\\my\\source\\code -rulesets rulesets/java/quickstart.xml -auxclasspath lib\\commons-collections.jar;lib\\derby.jar C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -d c:\\my\\source\\code -f html -R rulesets/java/quickstart.xml -auxclasspath file:///C:/my/classpathfile For example on *nix: $ pmd-bin-6.48.0/bin/run.sh pmd -dir /home/workspace/src/main/java/code -f html -rulesets rulesets/java/quickstart.xml,category/java/codestyle.xml $ pmd-bin-6.48.0/bin/run.sh pmd -d ./src/main/java/code -R rulesets/java/quickstart.xml -f xslt -property xsltFilename=my-own.xsl $ pmd-bin-6.48.0/bin/run.sh pmd -d ./src/main/java/code -f html -R rulesets/java/quickstart.xml -auxclasspath commons-collections.jar:derby.jar Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install ARG PMD_VERSION=6.48.0 RUN wget --quiet https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-bin-${PMD_VERSION}.zip && \\ unzip pmd-bin-${PMD_VERSION}.zip && \\ rm pmd-bin-${PMD_VERSION}.zip && \\ mv pmd-bin-${PMD_VERSION} /usr/bin/pmd && \\ chmod +x /usr/bin/pmd/bin/run.sh","title":"pmd"},{"location":"descriptors/java_pmd/#pmd","text":"","title":"pmd"},{"location":"descriptors/java_pmd/#pmd-documentation","text":"Version in MegaLinter: 6.48.0 Visit Official Web Site See How to configure pmd rules If custom java-pmd-ruleset.xml config file is not found, java-pmd-ruleset.xml will be used See How to disable pmd rules in files See Index of problems detected by pmd","title":"pmd documentation"},{"location":"descriptors/java_pmd/#configuration-in-megalinter","text":"Enable pmd by adding JAVA_PMD in ENABLE_LINTERS variable Disable pmd by adding JAVA_PMD in DISABLE_LINTERS variable Variable Description Default value JAVA_PMD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVA_PMD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVA_PMD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVA_PMD_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVA_PMD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".java\"] JAVA_PMD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVA_PMD_PRE_COMMANDS List of bash commands to run before the linter None JAVA_PMD_POST_COMMANDS List of bash commands to run after the linter None JAVA_PMD_CONFIG_FILE pmd configuration file name Use LINTER_DEFAULT to let the linter find it java-pmd-ruleset.xml JAVA_PMD_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVA_PMD_DISABLE_ERRORS Run linter but consider errors as warnings false JAVA_PMD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/java_pmd/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 java Optimized for JAVA based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/java_pmd/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/java_pmd/#how-are-identified-applicable-files","text":"File extensions: .java","title":"How are identified applicable files"},{"location":"descriptors/java_pmd/#how-the-linting-is-performed","text":"pmd is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/java_pmd/#example-calls","text":"pmd --rulesets java-pmd-ruleset.xml --dir myfile.java pmd --rulesets java-pmd-ruleset.xml --file-list /tmp/list-off-files-generated-by-megalinter.txt pmd --rulesets java-pmd-ruleset.xml --dir /path/to/sources","title":"Example calls"},{"location":"descriptors/java_pmd/#help-content","text":"Usage: <main class> [options] Options: --aux-classpath, -auxclasspath Specifies the classpath for libraries used by the source code. This is used to resolve types in Java source files. The platform specific path delimiter (\":\" on Linux, \";\" on Windows) is used to separate the entries. Alternatively, a single 'file:' URL to a text file containing path elements on consecutive lines can be specified. --benchmark, -benchmark, -b Benchmark mode - output a benchmark report upon completion; default to System.err. Default: false --cache, -cache Specify the location of the cache file for incremental analysis. This should be the full path to the file, including the desired file name (not just the parent directory). If the file doesn't exist, it will be created on the first run. The file will be overwritten on each run with the most up-to-date rule violations. --dir, -dir, -d Path to a source file, or directory containing source files to analyze. Note that a file is only effectively added if it matches a language known by PMD. Zip and Jar files are also supported, if they are specified directly (archive files found while exploring a directory are not recursively expanded). This option can be repeated, and multiple arguments can be provided to a single occurrence of the option. One of --dir, --file-list or --uri must be provided. Default: [] --encoding, -encoding, -e Specifies the character set encoding of the source code files PMD is reading (i.e., UTF-8). Default: UTF-8 --fail-on-violation, --failOnViolation, -failOnViolation By default PMD exits with status 4 if violations are found. Disable this option with '-failOnViolation false' to exit with 0 instead and just write the report. Default: true --file-list, -filelist Path to a file containing a list of files to analyze, one path per line. One of --dir, --file-list or --uri must be provided. --force-language, -force-language Force a language to be used for all input files, irrespective of file names. When using this option, the automatic language selection by extension is disabled, and PMD tries to parse all input files with the given language's parser. Parsing errors are ignored. --format, -format, -f Report format type. Default: text --help, -help, -h, -H Display help on usage. Default: false --ignore-list, -ignorelist Path to a file containing a list of files to exclude from the analysis, one path per line. This option can be combined with --dir and --file-list. --minimum-priority, -minimumpriority, -min Rule priority threshold; rules with lower priority than configured here won't be used. Valid values are integers between 1 and 5 (inclusive), with 5 being the lowest priority. Default: 5 --no-cache, -no-cache Explicitly disable incremental analysis. The '-cache' option is ignored if this switch is present in the command line. Default: false --no-ruleset-compatibility, -norulesetcompatibility Disable the ruleset compatibility filter. The filter is active by default and tries automatically 'fix' old ruleset files with old rule names Default: false --property, -property, -P {name}={value}: Define a property for the report format. Default: [] --report-file, -reportfile, -r Path to a file to which report output is written. The file is created if it does not exist. If this option is not specified, the report is rendered to standard output. * --rulesets, -rulesets, -R Path to a ruleset xml file. The path may reference a resource on the classpath of the application, be a local file system path, or a URL. The option can be repeated, and multiple arguments can be provided to a single occurrence of the option. --short-names, -shortnames Prints shortened filenames in the report. Default: false --show-suppressed, -showsuppressed Report should show suppressed rule violations. Default: false --stress, -stress, -S Performs a stress test. Default: false --suppress-marker, -suppressmarker Specifies the string that marks a line which PMD should ignore; default is NOPMD. Default: NOPMD --threads, -threads, -t Sets the number of threads used by PMD. Default: 1 --uri, -uri, -u Database URI for sources. One of --dir, --file-list or --uri must be provided. --debug, --verbose, -debug, -verbose, -D, -V Debug mode. Default: false --version Display current version of PMD and exit without performing any analysis. Default: false -language, -l Specify a language PMD should use. -version, -v Specify version of a language PMD should use. Mandatory arguments: 1) A java source code filename or directory 2) A report format 3) A ruleset filename or a comma-delimited string of ruleset filenames For example: C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -d c:\\my\\source\\code -f html -R java-unusedcode Languages and version suported: apex, ecmascript, html, java, jsp, modelica, plsql, pom, scala, vf, vm, wsdl, xml, xsl Available report formats and their configuration properties are: codeclimate: Code Climate integration. csv: Comma-separated values tabular format. problem - Include Problem column default: true package - Include Package column default: true file - Include File column default: true priority - Include Priority column default: true line - Include Line column default: true desc - Include Description column default: true ruleSet - Include Rule set column default: true rule - Include Rule column default: true emacs: GNU Emacs integration. empty: Empty, nothing. html: HTML format linePrefix - Prefix for line number anchor in the source file. linkPrefix - Path to HTML source. htmlExtension - Replace file extension with .html for the links (default: false) default: false ideaj: IntelliJ IDEA integration. classAndMethodName - Class and Method name, pass '.method' when processing a directory. default: sourcePath - Source path. default: fileName - File name. default: json: JSON format. sarif: Static Analysis Results Interchange Format (SARIF) summaryhtml: Summary HTML format. linePrefix - Prefix for line number anchor in the source file. linkPrefix - Path to HTML source. htmlExtension - Replace file extension with .html for the links (default: false) default: false text: Text format. textcolor: Text format, with color support (requires ANSI console support, e.g. xterm, rxvt, etc.). color - Enables colors with anything other than 'false' or '0'. default: yes textpad: TextPad integration. vbhtml: Vladimir Bossicard HTML format. xml: XML format. encoding - XML encoding format, defaults to UTF-8. default: UTF-8 xslt: XML with a XSL Transformation applied. encoding - XML encoding format, defaults to UTF-8. default: UTF-8 xsltFilename - The XSLT file name. yahtml: Yet Another HTML format. outputDir - Output directory. For example on windows: C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -dir c:\\my\\source\\code -format text -R rulesets/java/quickstart.xml -version 1.5 -language java -debug C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -dir c:\\my\\source\\code -f xml -rulesets rulesets/java/quickstart.xml,category/java/codestyle.xml -encoding UTF-8 C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -d c:\\my\\source\\code -rulesets rulesets/java/quickstart.xml -auxclasspath lib\\commons-collections.jar;lib\\derby.jar C:\\>pmd-bin-6.48.0\\bin\\pmd.bat -d c:\\my\\source\\code -f html -R rulesets/java/quickstart.xml -auxclasspath file:///C:/my/classpathfile For example on *nix: $ pmd-bin-6.48.0/bin/run.sh pmd -dir /home/workspace/src/main/java/code -f html -rulesets rulesets/java/quickstart.xml,category/java/codestyle.xml $ pmd-bin-6.48.0/bin/run.sh pmd -d ./src/main/java/code -R rulesets/java/quickstart.xml -f xslt -property xsltFilename=my-own.xsl $ pmd-bin-6.48.0/bin/run.sh pmd -d ./src/main/java/code -f html -R rulesets/java/quickstart.xml -auxclasspath commons-collections.jar:derby.jar","title":"Help content"},{"location":"descriptors/java_pmd/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install ARG PMD_VERSION=6.48.0 RUN wget --quiet https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-bin-${PMD_VERSION}.zip && \\ unzip pmd-bin-${PMD_VERSION}.zip && \\ rm pmd-bin-${PMD_VERSION}.zip && \\ mv pmd-bin-${PMD_VERSION} /usr/bin/pmd && \\ chmod +x /usr/bin/pmd/bin/run.sh","title":"Installation on mega-linter Docker image"},{"location":"descriptors/javascript/","text":"JAVASCRIPT Linters Linter Configuration key Status eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT Linted files File extensions: .js Configuration in MegaLinter Variable Description Default value JAVASCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter JAVASCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All JAVASCRIPT linters"},{"location":"descriptors/javascript/#javascript","text":"","title":"JAVASCRIPT"},{"location":"descriptors/javascript/#linters","text":"Linter Configuration key Status eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT","title":"Linters"},{"location":"descriptors/javascript/#linted-files","text":"File extensions: .js","title":"Linted files"},{"location":"descriptors/javascript/#configuration-in-megalinter","text":"Variable Description Default value JAVASCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter JAVASCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/javascript_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint Configuration in MegaLinter Enable eslint by adding JAVASCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding JAVASCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_ES in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVASCRIPT_ES_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVASCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\", \".vue\"] JAVASCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_ES_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_ES_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_ES_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JAVASCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVASCRIPT_ES_DISABLE_ERRORS Run linter but consider errors as warnings false JAVASCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .js , .vue How the linting is performed eslint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls eslint myfile.js eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.js eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.js Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-vue babel-eslint @babel/core @babel/eslint-parser @microsoft/eslint-formatter-sarif","title":"eslint"},{"location":"descriptors/javascript_eslint/#eslint-documentation","text":"Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/javascript_eslint/#configuration-in-megalinter","text":"Enable eslint by adding JAVASCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding JAVASCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_ES in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVASCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVASCRIPT_ES_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVASCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\", \".vue\"] JAVASCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_ES_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_ES_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_ES_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JAVASCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVASCRIPT_ES_DISABLE_ERRORS Run linter but consider errors as warnings false JAVASCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/javascript_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/javascript_eslint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/javascript_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/javascript_eslint/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .js , .vue","title":"How are identified applicable files"},{"location":"descriptors/javascript_eslint/#how-the-linting-is-performed","text":"eslint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/javascript_eslint/#example-calls","text":"eslint myfile.js eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.js eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.js","title":"Example calls"},{"location":"descriptors/javascript_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/javascript_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise eslint-plugin-vue babel-eslint @babel/core @babel/eslint-parser @microsoft/eslint-formatter-sarif","title":"Installation on mega-linter Docker image"},{"location":"descriptors/javascript_prettier/","text":"prettier documentation Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier Configuration in MegaLinter Enable prettier by adding JAVASCRIPT_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding JAVASCRIPT_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_PRETTIER in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For prettier to be active, JAVASCRIPT_DEFAULT_STYLE must be prettier standard JAVASCRIPT_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVASCRIPT_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVASCRIPT_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\"] JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json JAVASCRIPT_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVASCRIPT_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true JAVASCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files File extensions: .js How the linting is performed prettier is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls prettier --check myfile.js prettier --config .prettierrc.json --check myfile.js prettier --config .prettierrc.json --write myfile.js Help content Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version. Installation on mega-linter Docker image NPM packages (node.js): prettier","title":"prettier"},{"location":"descriptors/javascript_prettier/#prettier-documentation","text":"Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier","title":"prettier documentation"},{"location":"descriptors/javascript_prettier/#configuration-in-megalinter","text":"Enable prettier by adding JAVASCRIPT_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding JAVASCRIPT_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_PRETTIER in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For prettier to be active, JAVASCRIPT_DEFAULT_STYLE must be prettier standard JAVASCRIPT_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVASCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVASCRIPT_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVASCRIPT_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\"] JAVASCRIPT_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json JAVASCRIPT_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JAVASCRIPT_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true JAVASCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/javascript_prettier/#ide-integration","text":"Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode","title":"IDE Integration"},{"location":"descriptors/javascript_prettier/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/javascript_prettier/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/javascript_prettier/#how-are-identified-applicable-files","text":"File extensions: .js","title":"How are identified applicable files"},{"location":"descriptors/javascript_prettier/#how-the-linting-is-performed","text":"prettier is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/javascript_prettier/#example-calls","text":"prettier --check myfile.js prettier --config .prettierrc.json --check myfile.js prettier --config .prettierrc.json --write myfile.js","title":"Example calls"},{"location":"descriptors/javascript_prettier/#help-content","text":"Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version.","title":"Help content"},{"location":"descriptors/javascript_prettier/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): prettier","title":"Installation on mega-linter Docker image"},{"location":"descriptors/javascript_standard/","text":"standard documentation Version in MegaLinter: 17.0.0 Visit Official Web Site See Index of problems detected by standard Configuration in MegaLinter Enable standard by adding JAVASCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding JAVASCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For standard to be active, JAVASCRIPT_DEFAULT_STYLE must be standard standard JAVASCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVASCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVASCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\"] JAVASCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings false JAVASCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use standard in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-js-standard Visit Web Site Atom linter-js-standard-engine Visit Web Site Atom standard-formatter Visit Web Site Brackets brackets-standard Visit Web Site IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code vscode-standard MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files File extensions: .js How the linting is performed standard is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls standard myfile.js standard --fix myfile.js Help content standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --ext Specify JavaScript file extensions --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint) Installation on mega-linter Docker image NPM packages (node.js): standard","title":"standard"},{"location":"descriptors/javascript_standard/#standard-documentation","text":"Version in MegaLinter: 17.0.0 Visit Official Web Site See Index of problems detected by standard","title":"standard documentation"},{"location":"descriptors/javascript_standard/#configuration-in-megalinter","text":"Enable standard by adding JAVASCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding JAVASCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding JAVASCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For standard to be active, JAVASCRIPT_DEFAULT_STYLE must be standard standard JAVASCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JAVASCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JAVASCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JAVASCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JAVASCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".js\"] JAVASCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JAVASCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None JAVASCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None JAVASCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings false JAVASCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/javascript_standard/#ide-integration","text":"Use standard in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-js-standard Visit Web Site Atom linter-js-standard-engine Visit Web Site Atom standard-formatter Visit Web Site Brackets brackets-standard Visit Web Site IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code vscode-standard","title":"IDE Integration"},{"location":"descriptors/javascript_standard/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/javascript_standard/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/javascript_standard/#how-are-identified-applicable-files","text":"File extensions: .js","title":"How are identified applicable files"},{"location":"descriptors/javascript_standard/#how-the-linting-is-performed","text":"standard is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/javascript_standard/#example-calls","text":"standard myfile.js standard --fix myfile.js","title":"Example calls"},{"location":"descriptors/javascript_standard/#help-content","text":"standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --ext Specify JavaScript file extensions --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint)","title":"Help content"},{"location":"descriptors/javascript_standard/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): standard","title":"Installation on mega-linter Docker image"},{"location":"descriptors/json/","text":"JSON Linters Linter Configuration key Status jsonlint JSON eslint-plugin-jsonc JSON v8r JSON prettier JSON Linted files File extensions: .json Configuration in MegaLinter Variable Description Default value JSON_FILTER_REGEX_INCLUDE Custom regex including filter JSON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All JSON linters"},{"location":"descriptors/json/#json","text":"","title":"JSON"},{"location":"descriptors/json/#linters","text":"Linter Configuration key Status jsonlint JSON eslint-plugin-jsonc JSON v8r JSON prettier JSON","title":"Linters"},{"location":"descriptors/json/#linted-files","text":"File extensions: .json","title":"Linted files"},{"location":"descriptors/json/#configuration-in-megalinter","text":"Variable Description Default value JSON_FILTER_REGEX_INCLUDE Custom regex including filter JSON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/json_eslint_plugin_jsonc/","text":"eslint-plugin-jsonc uses eslint to lint json , jsonc and json5 (extended JSON with comments & more). To override default configuration, create a .eslintrc-json.json custom configuration file applicable to your project If you have .json files with comments in your project, you may disable jsonlint to avoid false positive errors, by adding the following content in your .mega-linter.yml configuration file DISABLE_LINTERS: - JSON_JSONLINT If you have your own local .eslintrc.json (or .yaml or .js equivalent) config in your project, you must add JSON_ESLINT_PLUGIN_JSONC_FILE_NAME: .eslintrc.json (or .yaml or .js equivalent) in your .mega-linter.yml config file add overrides property in it See code { \"overrides\": [ { \"files\": [\" .json\"], \"extends\": [ \"plugin:jsonc/recommended-with-json\" ], \"parser\": \"jsonc-eslint-parser\", \"parserOptions\": { \"jsonSyntax\": \"JSON\" } }, { \"files\": [\" .jsonc\"], \"extends\": [ \"plugin:jsonc/recommended-with-jsonc\" ], \"parser\": \"jsonc-eslint-parser\", \"parserOptions\": { \"jsonSyntax\": \"JSONC\" } }, { \"files\": [\"*.json5\"], \"extends\": [ \"plugin:jsonc/recommended-with-json5\" ], \"parser\": \"jsonc-eslint-parser\", \"parserOptions\": { \"jsonSyntax\": \"JSON5\" } } ] } eslint-plugin-jsonc documentation Version in MegaLinter: 2.4.0 Visit Official Web Site See How to configure eslint-plugin-jsonc rules If custom .eslintrc-json.json config file is not found, .eslintrc-json.json will be used See How to disable eslint-plugin-jsonc rules in files See How to ignore files and directories with eslint-plugin-jsonc You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint-plugin-jsonc Configuration in MegaLinter Enable eslint-plugin-jsonc by adding JSON_ESLINT_PLUGIN_JSONC in ENABLE_LINTERS variable Disable eslint-plugin-jsonc by adding JSON_ESLINT_PLUGIN_JSONC in DISABLE_LINTERS variable Enable auto-fixes by adding JSON_ESLINT_PLUGIN_JSONC in APPLY_FIXES variable Variable Description Default value JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_ESLINT_PLUGIN_JSONC_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\", \".json5\", \".jsonc\"] JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_ESLINT_PLUGIN_JSONC_PRE_COMMANDS List of bash commands to run before the linter None JSON_ESLINT_PLUGIN_JSONC_POST_COMMANDS List of bash commands to run after the linter None JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE eslint-plugin-jsonc configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc-json.json JSON_ESLINT_PLUGIN_JSONC_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS Run linter but consider errors as warnings false JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use eslint-plugin-jsonc in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code vscode-eslint Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .json , .json5 , .jsonc How the linting is performed eslint-plugin-jsonc is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls eslint myfile.json eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json5 eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.jsonc eslint --fix -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): eslint eslint-plugin-jsonc @microsoft/eslint-formatter-sarif","title":"eslint-plugin-jsonc"},{"location":"descriptors/json_eslint_plugin_jsonc/#eslint-plugin-jsonc-documentation","text":"Version in MegaLinter: 2.4.0 Visit Official Web Site See How to configure eslint-plugin-jsonc rules If custom .eslintrc-json.json config file is not found, .eslintrc-json.json will be used See How to disable eslint-plugin-jsonc rules in files See How to ignore files and directories with eslint-plugin-jsonc You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint-plugin-jsonc","title":"eslint-plugin-jsonc documentation"},{"location":"descriptors/json_eslint_plugin_jsonc/#configuration-in-megalinter","text":"Enable eslint-plugin-jsonc by adding JSON_ESLINT_PLUGIN_JSONC in ENABLE_LINTERS variable Disable eslint-plugin-jsonc by adding JSON_ESLINT_PLUGIN_JSONC in DISABLE_LINTERS variable Enable auto-fixes by adding JSON_ESLINT_PLUGIN_JSONC in APPLY_FIXES variable Variable Description Default value JSON_ESLINT_PLUGIN_JSONC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_ESLINT_PLUGIN_JSONC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_ESLINT_PLUGIN_JSONC_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_ESLINT_PLUGIN_JSONC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\", \".json5\", \".jsonc\"] JSON_ESLINT_PLUGIN_JSONC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_ESLINT_PLUGIN_JSONC_PRE_COMMANDS List of bash commands to run before the linter None JSON_ESLINT_PLUGIN_JSONC_POST_COMMANDS List of bash commands to run after the linter None JSON_ESLINT_PLUGIN_JSONC_CONFIG_FILE eslint-plugin-jsonc configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc-json.json JSON_ESLINT_PLUGIN_JSONC_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS Run linter but consider errors as warnings false JSON_ESLINT_PLUGIN_JSONC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/json_eslint_plugin_jsonc/#ide-integration","text":"Use eslint-plugin-jsonc in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code vscode-eslint Visit Web Site","title":"IDE Integration"},{"location":"descriptors/json_eslint_plugin_jsonc/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/json_eslint_plugin_jsonc/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/json_eslint_plugin_jsonc/#how-are-identified-applicable-files","text":"File extensions: .json , .json5 , .jsonc","title":"How are identified applicable files"},{"location":"descriptors/json_eslint_plugin_jsonc/#how-the-linting-is-performed","text":"eslint-plugin-jsonc is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/json_eslint_plugin_jsonc/#example-calls","text":"eslint myfile.json eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json5 eslint -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.jsonc eslint --fix -c .eslintrc-json.json --no-eslintrc --no-ignore myfile.json","title":"Example calls"},{"location":"descriptors/json_eslint_plugin_jsonc/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/json_eslint_plugin_jsonc/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): eslint eslint-plugin-jsonc @microsoft/eslint-formatter-sarif","title":"Installation on mega-linter Docker image"},{"location":"descriptors/json_jsonlint/","text":"jsonlint jsonlint documentation Version in MegaLinter: 11.7.0 Visit Official Web Site See How to configure jsonlint rules See Index of problems detected by jsonlint Configuration in MegaLinter Enable jsonlint by adding JSON_JSONLINT in ENABLE_LINTERS variable Disable jsonlint by adding JSON_JSONLINT in DISABLE_LINTERS variable Variable Description Default value JSON_JSONLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_JSONLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_JSONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_JSONLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_JSONLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_JSONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_JSONLINT_PRE_COMMANDS List of bash commands to run before the linter None JSON_JSONLINT_POST_COMMANDS List of bash commands to run after the linter None JSON_JSONLINT_CONFIG_FILE jsonlint configuration file name Use LINTER_DEFAULT to let the linter find it .jsonlintrc JSON_JSONLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_JSONLINT_DISABLE_ERRORS Run linter but consider errors as warnings false JSON_JSONLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .json How the linting is performed jsonlint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls jsonlint myfile1.json myfile2.json Help content Usage: jsonlint [options] [<file, directory, pattern> ...] JSON/CJSON/JSON5 parser, syntax and schema validator and pretty-printer. Options: -f, --config [file] read options from a custom configuration file -F, --no-config disable searching for configuration files -s, --sort-keys sort object keys (not when prettifying) -E, --extensions [ext] file extensions to process for directory walk (default: [\"json\",\"JSON\"]) -i, --in-place overwrite the input files -j, --diff print difference instead of writing the output -k, --check check that the input is equal to the output -t, --indent [num|char] number of spaces or specific characters to use for indentation (default: 2) -c, --compact compact error display -M, --mode [mode] set other parsing flags according to a format type (default: \"json\") -B, --bom ignore the leading UTF-8 byte-order mark -C, --comments recognize and ignore JavaScript-style comments -S, --single-quoted-strings support single quotes as string delimiters -T, --trailing-commas ignore trailing commas in objects and arrays -D, --no-duplicate-keys report duplicate object keys as an error -V, --validate [file] JSON schema file to use for validation -e, --environment [env] which specification of JSON Schema the validation file uses -x, --context [num] line count used as the diff context (default: 3) -l, --log-files print only the parsed file names to stdout -q, --quiet do not print the parsed json to stdout -n, --continue continue with other files if an error occurs -p, --pretty-print prettify the input instead of stringifying the parsed object -P, --pretty-print-invalid force pretty-printing even for invalid input -r, --trailing-newline ensure a line break at the end of the output -R, --no-trailing-newline ensure no line break at the end of the output --prune-comments omit comments from the prettified output --strip-object-keys strip quotes from object keys if possible (JSON5) --enforce-double-quotes surrounds all strings with double quotes --enforce-single-quotes surrounds all strings with single quotes (JSON5) --trim-trailing-commas omit trailing commas from objects and arrays (JSON5) -v, --version output the version number -h, --help display help for command You can use BASH patterns for including and excluding files (only files). Patterns are case-sensitive and have to use slashes as directory separators. A pattern to exclude from processing starts with \"!\". Parsing mode can be \"cjson\" or \"json5\" to enable other flags automatically. If no files or directories are specified, stdin will be parsed. Environments for JSON schema validation are \"json-schema-draft-04\", \"json-schema-draft-06\" or \"json-schema-draft-07\". If not specified, it will be auto-detected. Installation on mega-linter Docker image NPM packages (node.js): @prantlf/jsonlint","title":"jsonlint"},{"location":"descriptors/json_jsonlint/#jsonlint","text":"","title":"jsonlint"},{"location":"descriptors/json_jsonlint/#jsonlint-documentation","text":"Version in MegaLinter: 11.7.0 Visit Official Web Site See How to configure jsonlint rules See Index of problems detected by jsonlint","title":"jsonlint documentation"},{"location":"descriptors/json_jsonlint/#configuration-in-megalinter","text":"Enable jsonlint by adding JSON_JSONLINT in ENABLE_LINTERS variable Disable jsonlint by adding JSON_JSONLINT in DISABLE_LINTERS variable Variable Description Default value JSON_JSONLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_JSONLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_JSONLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_JSONLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_JSONLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_JSONLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_JSONLINT_PRE_COMMANDS List of bash commands to run before the linter None JSON_JSONLINT_POST_COMMANDS List of bash commands to run after the linter None JSON_JSONLINT_CONFIG_FILE jsonlint configuration file name Use LINTER_DEFAULT to let the linter find it .jsonlintrc JSON_JSONLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_JSONLINT_DISABLE_ERRORS Run linter but consider errors as warnings false JSON_JSONLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/json_jsonlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/json_jsonlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/json_jsonlint/#how-are-identified-applicable-files","text":"File extensions: .json","title":"How are identified applicable files"},{"location":"descriptors/json_jsonlint/#how-the-linting-is-performed","text":"jsonlint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/json_jsonlint/#example-calls","text":"jsonlint myfile1.json myfile2.json","title":"Example calls"},{"location":"descriptors/json_jsonlint/#help-content","text":"Usage: jsonlint [options] [<file, directory, pattern> ...] JSON/CJSON/JSON5 parser, syntax and schema validator and pretty-printer. Options: -f, --config [file] read options from a custom configuration file -F, --no-config disable searching for configuration files -s, --sort-keys sort object keys (not when prettifying) -E, --extensions [ext] file extensions to process for directory walk (default: [\"json\",\"JSON\"]) -i, --in-place overwrite the input files -j, --diff print difference instead of writing the output -k, --check check that the input is equal to the output -t, --indent [num|char] number of spaces or specific characters to use for indentation (default: 2) -c, --compact compact error display -M, --mode [mode] set other parsing flags according to a format type (default: \"json\") -B, --bom ignore the leading UTF-8 byte-order mark -C, --comments recognize and ignore JavaScript-style comments -S, --single-quoted-strings support single quotes as string delimiters -T, --trailing-commas ignore trailing commas in objects and arrays -D, --no-duplicate-keys report duplicate object keys as an error -V, --validate [file] JSON schema file to use for validation -e, --environment [env] which specification of JSON Schema the validation file uses -x, --context [num] line count used as the diff context (default: 3) -l, --log-files print only the parsed file names to stdout -q, --quiet do not print the parsed json to stdout -n, --continue continue with other files if an error occurs -p, --pretty-print prettify the input instead of stringifying the parsed object -P, --pretty-print-invalid force pretty-printing even for invalid input -r, --trailing-newline ensure a line break at the end of the output -R, --no-trailing-newline ensure no line break at the end of the output --prune-comments omit comments from the prettified output --strip-object-keys strip quotes from object keys if possible (JSON5) --enforce-double-quotes surrounds all strings with double quotes --enforce-single-quotes surrounds all strings with single quotes (JSON5) --trim-trailing-commas omit trailing commas from objects and arrays (JSON5) -v, --version output the version number -h, --help display help for command You can use BASH patterns for including and excluding files (only files). Patterns are case-sensitive and have to use slashes as directory separators. A pattern to exclude from processing starts with \"!\". Parsing mode can be \"cjson\" or \"json5\" to enable other flags automatically. If no files or directories are specified, stdin will be parsed. Environments for JSON schema validation are \"json-schema-draft-04\", \"json-schema-draft-06\" or \"json-schema-draft-07\". If not specified, it will be auto-detected.","title":"Help content"},{"location":"descriptors/json_jsonlint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): @prantlf/jsonlint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/json_prettier/","text":"prettier documentation Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier Configuration in MegaLinter Enable prettier by adding JSON_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding JSON_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding JSON_PRETTIER in APPLY_FIXES variable Variable Description Default value JSON_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None JSON_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None JSON_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json JSON_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true JSON_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .json How the linting is performed prettier is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls prettier --check myfile.json prettier --config .prettierrc.json --check myfile.json prettier --config .prettierrc.json --write myfile.json Help content Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version. Installation on mega-linter Docker image NPM packages (node.js): prettier","title":"prettier"},{"location":"descriptors/json_prettier/#prettier-documentation","text":"Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier","title":"prettier documentation"},{"location":"descriptors/json_prettier/#configuration-in-megalinter","text":"Enable prettier by adding JSON_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding JSON_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding JSON_PRETTIER in APPLY_FIXES variable Variable Description Default value JSON_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None JSON_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None JSON_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json JSON_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSON_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true JSON_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/json_prettier/#ide-integration","text":"Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode","title":"IDE Integration"},{"location":"descriptors/json_prettier/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/json_prettier/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/json_prettier/#how-are-identified-applicable-files","text":"File extensions: .json","title":"How are identified applicable files"},{"location":"descriptors/json_prettier/#how-the-linting-is-performed","text":"prettier is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/json_prettier/#example-calls","text":"prettier --check myfile.json prettier --config .prettierrc.json --check myfile.json prettier --config .prettierrc.json --write myfile.json","title":"Example calls"},{"location":"descriptors/json_prettier/#help-content","text":"Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version.","title":"Help content"},{"location":"descriptors/json_prettier/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): prettier","title":"Installation on mega-linter Docker image"},{"location":"descriptors/json_v8r/","text":"v8r v8r checks the validity of JSON/YAML files if they have a matching schema defined on schemastore.org v8r documentation Version in MegaLinter: 0.13.0 Visit Official Web Site See Index of problems detected by v8r Configuration in MegaLinter Enable v8r by adding JSON_V8R in ENABLE_LINTERS variable Disable v8r by adding JSON_V8R in DISABLE_LINTERS variable Variable Description Default value JSON_V8R_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_V8R_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_V8R_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_V8R_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_V8R_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_V8R_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_V8R_PRE_COMMANDS List of bash commands to run before the linter None JSON_V8R_POST_COMMANDS List of bash commands to run after the linter None JSON_V8R_DISABLE_ERRORS Run linter but consider errors as warnings false JSON_V8R_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use v8r in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse native support Visit Web Site IDEA native support Visit Web Site vim vison Visit Web Site Visual Studio Code native support Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .json How the linting is performed v8r is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls v8r --ignore-errors myfile.json Help content \u2139 No config file found v8r <patterns..> Validate local json/yaml files against schema(s) Positionals: patterns One or more filenames or glob patterns describing local file or file s to validate Options: --help Show help [boolean] --version Show version number [boolean] -v, --verbose Run with verbose logging. Can be stacked e.g: -vv -vvv [count] -s, --schema Local path or URL of a schema to validate against. If not supplied, we will attempt to find an appropriate schema on schemastore.org using the filename. If passed with glo b pattern(s) matching multiple files, all matching files will be validated against this schema [string] -c, --catalogs Local path or URL of custom catalogs to use prior to sche mastore.org [array] --ignore-errors Exit with code 0 even if an error was encountered. Passin g this flag means a non-zero exit code is only issued if validation could be completed successfully and one or mor e files were invalid [boolean] [default: false] --cache-ttl Remove cached HTTP responses older than <cache-ttl> secon ds old. Passing 0 clears and disables cache completely [number] [default: 600] --format Output format for validation results [string] [choices: \"text\", \"json\"] [default: \"text\"] Examples: v8r file.json Validate a single file v8r file1.json file2.json Validate multiple files v8r 'dir/*.yml' 'dir/*.yaml' Specify files to validate with glob patterns Installation on mega-linter Docker image NPM packages (node.js): v8r","title":"v8r"},{"location":"descriptors/json_v8r/#v8r","text":"v8r checks the validity of JSON/YAML files if they have a matching schema defined on schemastore.org","title":"v8r"},{"location":"descriptors/json_v8r/#v8r-documentation","text":"Version in MegaLinter: 0.13.0 Visit Official Web Site See Index of problems detected by v8r","title":"v8r documentation"},{"location":"descriptors/json_v8r/#configuration-in-megalinter","text":"Enable v8r by adding JSON_V8R in ENABLE_LINTERS variable Disable v8r by adding JSON_V8R in DISABLE_LINTERS variable Variable Description Default value JSON_V8R_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSON_V8R_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSON_V8R_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSON_V8R_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSON_V8R_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".json\"] JSON_V8R_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSON_V8R_PRE_COMMANDS List of bash commands to run before the linter None JSON_V8R_POST_COMMANDS List of bash commands to run after the linter None JSON_V8R_DISABLE_ERRORS Run linter but consider errors as warnings false JSON_V8R_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/json_v8r/#ide-integration","text":"Use v8r in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse native support Visit Web Site IDEA native support Visit Web Site vim vison Visit Web Site Visual Studio Code native support Visit Web Site","title":"IDE Integration"},{"location":"descriptors/json_v8r/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/json_v8r/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/json_v8r/#how-are-identified-applicable-files","text":"File extensions: .json","title":"How are identified applicable files"},{"location":"descriptors/json_v8r/#how-the-linting-is-performed","text":"v8r is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/json_v8r/#example-calls","text":"v8r --ignore-errors myfile.json","title":"Example calls"},{"location":"descriptors/json_v8r/#help-content","text":"\u2139 No config file found v8r <patterns..> Validate local json/yaml files against schema(s) Positionals: patterns One or more filenames or glob patterns describing local file or file s to validate Options: --help Show help [boolean] --version Show version number [boolean] -v, --verbose Run with verbose logging. Can be stacked e.g: -vv -vvv [count] -s, --schema Local path or URL of a schema to validate against. If not supplied, we will attempt to find an appropriate schema on schemastore.org using the filename. If passed with glo b pattern(s) matching multiple files, all matching files will be validated against this schema [string] -c, --catalogs Local path or URL of custom catalogs to use prior to sche mastore.org [array] --ignore-errors Exit with code 0 even if an error was encountered. Passin g this flag means a non-zero exit code is only issued if validation could be completed successfully and one or mor e files were invalid [boolean] [default: false] --cache-ttl Remove cached HTTP responses older than <cache-ttl> secon ds old. Passing 0 clears and disables cache completely [number] [default: 600] --format Output format for validation results [string] [choices: \"text\", \"json\"] [default: \"text\"] Examples: v8r file.json Validate a single file v8r file1.json file2.json Validate multiple files v8r 'dir/*.yml' 'dir/*.yaml' Specify files to validate with glob patterns","title":"Help content"},{"location":"descriptors/json_v8r/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): v8r","title":"Installation on mega-linter Docker image"},{"location":"descriptors/jsx/","text":"JSX Linters Linter Configuration key Status eslint JSX Linted files File extensions: .jsx Configuration in MegaLinter Variable Description Default value JSX_FILTER_REGEX_INCLUDE Custom regex including filter JSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All JSX linters"},{"location":"descriptors/jsx/#jsx","text":"","title":"JSX"},{"location":"descriptors/jsx/#linters","text":"Linter Configuration key Status eslint JSX","title":"Linters"},{"location":"descriptors/jsx/#linted-files","text":"File extensions: .jsx","title":"Linted files"},{"location":"descriptors/jsx/#configuration-in-megalinter","text":"Variable Description Default value JSX_FILTER_REGEX_INCLUDE Custom regex including filter JSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/jsx_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint Configuration in MegaLinter Enable eslint by adding JSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding JSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding JSX_ESLINT in APPLY_FIXES variable Variable Description Default value JSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSX_ESLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".jsx\"] JSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSX_ESLINT_PRE_COMMANDS List of bash commands to run before the linter None JSX_ESLINT_POST_COMMANDS List of bash commands to run after the linter None JSX_ESLINT_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSX_ESLINT_DISABLE_ERRORS Run linter but consider errors as warnings false JSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .jsx How the linting is performed eslint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls eslint myfile.jsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): eslint eslint-plugin-react eslint-plugin-jsx-a11y @microsoft/eslint-formatter-sarif","title":"eslint"},{"location":"descriptors/jsx_eslint/#eslint-documentation","text":"Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/jsx_eslint/#configuration-in-megalinter","text":"Enable eslint by adding JSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding JSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding JSX_ESLINT in APPLY_FIXES variable Variable Description Default value JSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" JSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file JSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file JSX_ESLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files JSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".jsx\"] JSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file JSX_ESLINT_PRE_COMMANDS List of bash commands to run before the linter None JSX_ESLINT_POST_COMMANDS List of bash commands to run after the linter None JSX_ESLINT_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json JSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules JSX_ESLINT_DISABLE_ERRORS Run linter but consider errors as warnings false JSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/jsx_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/jsx_eslint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/jsx_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/jsx_eslint/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .jsx","title":"How are identified applicable files"},{"location":"descriptors/jsx_eslint/#how-the-linting-is-performed","text":"eslint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/jsx_eslint/#example-calls","text":"eslint myfile.jsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.jsx","title":"Example calls"},{"location":"descriptors/jsx_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/jsx_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): eslint eslint-plugin-react eslint-plugin-jsx-a11y @microsoft/eslint-formatter-sarif","title":"Installation on mega-linter Docker image"},{"location":"descriptors/kotlin/","text":"KOTLIN Linters Linter Configuration key Status ktlint KOTLIN Linted files File extensions: .kt .kts Configuration in MegaLinter Variable Description Default value KOTLIN_FILTER_REGEX_INCLUDE Custom regex including filter KOTLIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): openjdk11","title":"All KOTLIN linters"},{"location":"descriptors/kotlin/#kotlin","text":"","title":"KOTLIN"},{"location":"descriptors/kotlin/#linters","text":"Linter Configuration key Status ktlint KOTLIN","title":"Linters"},{"location":"descriptors/kotlin/#linted-files","text":"File extensions: .kt .kts","title":"Linted files"},{"location":"descriptors/kotlin/#configuration-in-megalinter","text":"Variable Description Default value KOTLIN_FILTER_REGEX_INCLUDE Custom regex including filter KOTLIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/kotlin/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/kotlin/#installation","text":"APK packages (Linux): openjdk11","title":"Installation"},{"location":"descriptors/kotlin_ktlint/","text":"ktlint documentation Version in MegaLinter: 0.47.1 Visit Official Web Site See Index of problems detected by ktlint Configuration in MegaLinter Enable ktlint by adding KOTLIN_KTLINT in ENABLE_LINTERS variable Disable ktlint by adding KOTLIN_KTLINT in DISABLE_LINTERS variable Enable auto-fixes by adding KOTLIN_KTLINT in APPLY_FIXES variable Variable Description Default value KOTLIN_KTLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KOTLIN_KTLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file KOTLIN_KTLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file KOTLIN_KTLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".kt\", \".kts\"] KOTLIN_KTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KOTLIN_KTLINT_PRE_COMMANDS List of bash commands to run before the linter None KOTLIN_KTLINT_POST_COMMANDS List of bash commands to run after the linter None KOTLIN_KTLINT_DISABLE_ERRORS Run linter but consider errors as warnings false KOTLIN_KTLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use ktlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Emacs flycheck-kotlin Visit Web Site vim ale Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .kt , .kts How the linting is performed ktlint is called one time by identified file ( file CLI lint mode) Example calls ktlint myfile.kt ktlint --format myfile.kt Help content An anti-bikeshedding Kotlin linter with built-in formatter. (https://github.com/pinterest/ktlint). Usage: ktlint <flags> [patterns] java -jar ktlint.jar <flags> [patterns] Examples: # Check the style of all Kotlin files (ending with '.kt' or '.kts') inside the current dir (recursively). # # Hidden folders will be skipped. ktlint # Check only certain locations starting from the current directory. # # Prepend ! to negate the pattern, KtLint uses .gitignore pattern style syntax. # Globs are applied starting from the last one. # # Hidden folders will be skipped. # Check all '.kt' files in 'src/' directory, but ignore files ending with 'Test.kt': ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\" # Check all '.kt' files in 'src/' directory, but ignore 'generated' directory and its subdirectories: ktlint \"src/**/*.kt\" \"!src/**/generated/**\" # Auto-correct style violations. ktlint -F \"src/**/*.kt\" # Using custom reporter jar and overriding report location ktlint --reporter=csv,artifact=/path/to/reporter/csv.jar, output=my-custom-report.csv Flags: -a, --android Turn on Android Kotlin Style Guide compatibility --color Make output colorful --color-name=<colorName> Customize the output color --debug Turn on debug output --trace Turn on trace output --disabled_rules=<disabledRules> Comma-separated list of rules to globally disable. To disable standard ktlint rule-set use --disabled_rules=standard -F, --format Fix any deviations from the code style --limit=<limit> Maximum number of errors to show (default: show all) --relative Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt) --reporter=<reporters> A reporter to use (built-in: plain (default), plain? group_by_file, json, sarif, checkstyle, html). To use a third-party reporter specify a path to a JAR file on the filesystem via ',artifact=' option. To override reporter output, use ',output=' option. -R, --ruleset=<rulesetJarFiles> A path to a JAR file containing additional ruleset(s) --stdin Read file from stdin -v, --verbose Show error codes --editorconfig=<editorConfigPath> Path to the default '.editorconfig'. A property value from this file is used only when no '.editorconfig' file on the path to the source file specifies that property. Note: up until ktlint 0.46 the property value in this file used to override values found in '. editorconfig' files on the path to the source file. --experimental Enabled experimental rules (ktlint-ruleset-experimental) --baseline=<baselinePath> Defines a baseline file to check against -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: installGitPreCommitHook, --install-git-pre-commit-hook Install git hook to automatically check files for style violations on commit installGitPrePushHook, --install-git-pre-push-hook Install git hook to automatically check files for style violations before push printAST, --print-ast Print AST (useful when writing/debugging rules) generateEditorConfig EXPERIMENTAL!!! Generate kotlin style section for '. editorconfig' file. Installation on mega-linter Docker image Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \\ chmod a+x ktlint && \\ mv \"ktlint\" /usr/bin/","title":"ktlint"},{"location":"descriptors/kotlin_ktlint/#ktlint-documentation","text":"Version in MegaLinter: 0.47.1 Visit Official Web Site See Index of problems detected by ktlint","title":"ktlint documentation"},{"location":"descriptors/kotlin_ktlint/#configuration-in-megalinter","text":"Enable ktlint by adding KOTLIN_KTLINT in ENABLE_LINTERS variable Disable ktlint by adding KOTLIN_KTLINT in DISABLE_LINTERS variable Enable auto-fixes by adding KOTLIN_KTLINT in APPLY_FIXES variable Variable Description Default value KOTLIN_KTLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KOTLIN_KTLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file KOTLIN_KTLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file KOTLIN_KTLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file KOTLIN_KTLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".kt\", \".kts\"] KOTLIN_KTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KOTLIN_KTLINT_PRE_COMMANDS List of bash commands to run before the linter None KOTLIN_KTLINT_POST_COMMANDS List of bash commands to run after the linter None KOTLIN_KTLINT_DISABLE_ERRORS Run linter but consider errors as warnings false KOTLIN_KTLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/kotlin_ktlint/#ide-integration","text":"Use ktlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Emacs flycheck-kotlin Visit Web Site vim ale Visit Web Site","title":"IDE Integration"},{"location":"descriptors/kotlin_ktlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/kotlin_ktlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/kotlin_ktlint/#how-are-identified-applicable-files","text":"File extensions: .kt , .kts","title":"How are identified applicable files"},{"location":"descriptors/kotlin_ktlint/#how-the-linting-is-performed","text":"ktlint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/kotlin_ktlint/#example-calls","text":"ktlint myfile.kt ktlint --format myfile.kt","title":"Example calls"},{"location":"descriptors/kotlin_ktlint/#help-content","text":"An anti-bikeshedding Kotlin linter with built-in formatter. (https://github.com/pinterest/ktlint). Usage: ktlint <flags> [patterns] java -jar ktlint.jar <flags> [patterns] Examples: # Check the style of all Kotlin files (ending with '.kt' or '.kts') inside the current dir (recursively). # # Hidden folders will be skipped. ktlint # Check only certain locations starting from the current directory. # # Prepend ! to negate the pattern, KtLint uses .gitignore pattern style syntax. # Globs are applied starting from the last one. # # Hidden folders will be skipped. # Check all '.kt' files in 'src/' directory, but ignore files ending with 'Test.kt': ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\" # Check all '.kt' files in 'src/' directory, but ignore 'generated' directory and its subdirectories: ktlint \"src/**/*.kt\" \"!src/**/generated/**\" # Auto-correct style violations. ktlint -F \"src/**/*.kt\" # Using custom reporter jar and overriding report location ktlint --reporter=csv,artifact=/path/to/reporter/csv.jar, output=my-custom-report.csv Flags: -a, --android Turn on Android Kotlin Style Guide compatibility --color Make output colorful --color-name=<colorName> Customize the output color --debug Turn on debug output --trace Turn on trace output --disabled_rules=<disabledRules> Comma-separated list of rules to globally disable. To disable standard ktlint rule-set use --disabled_rules=standard -F, --format Fix any deviations from the code style --limit=<limit> Maximum number of errors to show (default: show all) --relative Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt) --reporter=<reporters> A reporter to use (built-in: plain (default), plain? group_by_file, json, sarif, checkstyle, html). To use a third-party reporter specify a path to a JAR file on the filesystem via ',artifact=' option. To override reporter output, use ',output=' option. -R, --ruleset=<rulesetJarFiles> A path to a JAR file containing additional ruleset(s) --stdin Read file from stdin -v, --verbose Show error codes --editorconfig=<editorConfigPath> Path to the default '.editorconfig'. A property value from this file is used only when no '.editorconfig' file on the path to the source file specifies that property. Note: up until ktlint 0.46 the property value in this file used to override values found in '. editorconfig' files on the path to the source file. --experimental Enabled experimental rules (ktlint-ruleset-experimental) --baseline=<baselinePath> Defines a baseline file to check against -h, --help Show this help message and exit. -V, --version Print version information and exit. Commands: installGitPreCommitHook, --install-git-pre-commit-hook Install git hook to automatically check files for style violations on commit installGitPrePushHook, --install-git-pre-push-hook Install git hook to automatically check files for style violations before push printAST, --print-ast Print AST (useful when writing/debugging rules) generateEditorConfig EXPERIMENTAL!!! Generate kotlin style section for '. editorconfig' file.","title":"Help content"},{"location":"descriptors/kotlin_ktlint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \\ chmod a+x ktlint && \\ mv \"ktlint\" /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/kubernetes/","text":"KUBERNETES Linters Linter Configuration key Status kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM Linted files File extensions: .yml .yaml .json Detected file content: apiVersion: kustomize\\.config\\.k8s\\.io tekton Configuration in MegaLinter Variable Description Default value KUBERNETES_FILTER_REGEX_INCLUDE Custom regex including filter KUBERNETES_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All KUBERNETES linters"},{"location":"descriptors/kubernetes/#kubernetes","text":"","title":"KUBERNETES"},{"location":"descriptors/kubernetes/#linters","text":"Linter Configuration key Status kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM","title":"Linters"},{"location":"descriptors/kubernetes/#linted-files","text":"File extensions: .yml .yaml .json Detected file content: apiVersion: kustomize\\.config\\.k8s\\.io tekton","title":"Linted files"},{"location":"descriptors/kubernetes/#configuration-in-megalinter","text":"Variable Description Default value KUBERNETES_FILTER_REGEX_INCLUDE Custom regex including filter KUBERNETES_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/kubernetes_kubeconform/","text":"kubeconform is a schema-aware Kubernetes manifest validation tool, that tends to have more up-to-date schema definitions than kubeval . kubeconform documentation Version in MegaLinter: 0.4.12 Visit Official Web Site Configuration in MegaLinter Enable kubeconform by adding KUBERNETES_KUBECONFORM in ENABLE_LINTERS variable Disable kubeconform by adding KUBERNETES_KUBECONFORM in DISABLE_LINTERS variable Variable Description Default value KUBERNETES_KUBECONFORM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KUBERNETES_KUBECONFORM_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file KUBERNETES_KUBECONFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file KUBERNETES_KUBECONFORM_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files KUBERNETES_KUBECONFORM_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] KUBERNETES_KUBECONFORM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KUBERNETES_KUBECONFORM_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_KUBECONFORM_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_KUBECONFORM_DISABLE_ERRORS Run linter but consider errors as warnings false KUBERNETES_KUBECONFORM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 KUBERNETES_DIRECTORY Directory containing KUBERNETES files kubernetes MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if sub-directory kubernetes is found. (directory name can be overridden with KUBERNETES_DIRECTORY ) File extensions: .yml , .yaml , .json Detected file content (regex): apiVersion: , kustomize\\.config\\.k8s\\.io , tekton How the linting is performed kubeconform is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls kubeconform myfile.yml kubeconform -ignore-missing-schemas -skip SomeCRD,AnotherCRD -kubernetes-version '1.18.0' -strict myfile.yml Help content Usage: kubeconform [OPTION]... [FILE OR FOLDER]... -cache string cache schemas downloaded via HTTP to this folder -cpu-prof string debug - log CPU profiling to file -exit-on-error immediately stop execution when the first error is encountered -h show help information -ignore-filename-pattern value regular expression specifying paths to ignore (can be specified multiple times) -ignore-missing-schemas skip files with missing schemas instead of failing -insecure-skip-tls-verify disable verification of the server's SSL certificate. This will make your HTTPS connections insecure -kubernetes-version string version of Kubernetes to validate against, e.g.: 1.18.0 (default \"master\") -n int number of goroutines to run concurrently (default 4) -output string output format - json, junit, tap, text (default \"text\") -reject string comma-separated list of kinds to reject -schema-location value override schemas location search path (can be specified multiple times) -skip string comma-separated list of kinds to ignore -strict disallow additional properties not in schema -summary print a summary at the end (ignored for junit output) -verbose print results for all resources (ignored for tap and junit output) Installation on mega-linter Docker image Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/kubeconform\" \\ && KUBECONFORM_VERSION=v0.4.12 \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && wget -P ${ML_THIRD_PARTY_DIR} -q https://github.com/yannh/kubeconform/releases/download/$KUBECONFORM_VERSION/kubeconform-linux-amd64.tar.gz \\ && tar xf ${ML_THIRD_PARTY_DIR}/kubeconform-linux-amd64.tar.gz --directory ${ML_THIRD_PARTY_DIR} \\ && mv ${ML_THIRD_PARTY_DIR}/kubeconform /usr/local/bin \\ && rm ${ML_THIRD_PARTY_DIR}/kubeconform-linux-amd64.tar.gz \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete","title":"kubeconform"},{"location":"descriptors/kubernetes_kubeconform/#kubeconform-documentation","text":"Version in MegaLinter: 0.4.12 Visit Official Web Site","title":"kubeconform documentation"},{"location":"descriptors/kubernetes_kubeconform/#configuration-in-megalinter","text":"Enable kubeconform by adding KUBERNETES_KUBECONFORM in ENABLE_LINTERS variable Disable kubeconform by adding KUBERNETES_KUBECONFORM in DISABLE_LINTERS variable Variable Description Default value KUBERNETES_KUBECONFORM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KUBERNETES_KUBECONFORM_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file KUBERNETES_KUBECONFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file KUBERNETES_KUBECONFORM_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files KUBERNETES_KUBECONFORM_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] KUBERNETES_KUBECONFORM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KUBERNETES_KUBECONFORM_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_KUBECONFORM_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_KUBECONFORM_DISABLE_ERRORS Run linter but consider errors as warnings false KUBERNETES_KUBECONFORM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 KUBERNETES_DIRECTORY Directory containing KUBERNETES files kubernetes","title":"Configuration in MegaLinter"},{"location":"descriptors/kubernetes_kubeconform/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/kubernetes_kubeconform/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/kubernetes_kubeconform/#how-are-identified-applicable-files","text":"Activated only if sub-directory kubernetes is found. (directory name can be overridden with KUBERNETES_DIRECTORY ) File extensions: .yml , .yaml , .json Detected file content (regex): apiVersion: , kustomize\\.config\\.k8s\\.io , tekton","title":"How are identified applicable files"},{"location":"descriptors/kubernetes_kubeconform/#how-the-linting-is-performed","text":"kubeconform is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/kubernetes_kubeconform/#example-calls","text":"kubeconform myfile.yml kubeconform -ignore-missing-schemas -skip SomeCRD,AnotherCRD -kubernetes-version '1.18.0' -strict myfile.yml","title":"Example calls"},{"location":"descriptors/kubernetes_kubeconform/#help-content","text":"Usage: kubeconform [OPTION]... [FILE OR FOLDER]... -cache string cache schemas downloaded via HTTP to this folder -cpu-prof string debug - log CPU profiling to file -exit-on-error immediately stop execution when the first error is encountered -h show help information -ignore-filename-pattern value regular expression specifying paths to ignore (can be specified multiple times) -ignore-missing-schemas skip files with missing schemas instead of failing -insecure-skip-tls-verify disable verification of the server's SSL certificate. This will make your HTTPS connections insecure -kubernetes-version string version of Kubernetes to validate against, e.g.: 1.18.0 (default \"master\") -n int number of goroutines to run concurrently (default 4) -output string output format - json, junit, tap, text (default \"text\") -reject string comma-separated list of kinds to reject -schema-location value override schemas location search path (can be specified multiple times) -skip string comma-separated list of kinds to ignore -strict disallow additional properties not in schema -summary print a summary at the end (ignored for junit output) -verbose print results for all resources (ignored for tap and junit output)","title":"Help content"},{"location":"descriptors/kubernetes_kubeconform/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/kubeconform\" \\ && KUBECONFORM_VERSION=v0.4.12 \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && wget -P ${ML_THIRD_PARTY_DIR} -q https://github.com/yannh/kubeconform/releases/download/$KUBECONFORM_VERSION/kubeconform-linux-amd64.tar.gz \\ && tar xf ${ML_THIRD_PARTY_DIR}/kubeconform-linux-amd64.tar.gz --directory ${ML_THIRD_PARTY_DIR} \\ && mv ${ML_THIRD_PARTY_DIR}/kubeconform /usr/local/bin \\ && rm ${ML_THIRD_PARTY_DIR}/kubeconform-linux-amd64.tar.gz \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete","title":"Installation on mega-linter Docker image"},{"location":"descriptors/kubernetes_kubeval/","text":"kubeval kubeval documentation Version in MegaLinter: 0.16.1 Visit Official Web Site Configuration in MegaLinter Enable kubeval by adding KUBERNETES_KUBEVAL in ENABLE_LINTERS variable Disable kubeval by adding KUBERNETES_KUBEVAL in DISABLE_LINTERS variable Variable Description Default value KUBERNETES_KUBEVAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file KUBERNETES_KUBEVAL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file KUBERNETES_KUBEVAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] KUBERNETES_KUBEVAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KUBERNETES_KUBEVAL_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_KUBEVAL_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_KUBEVAL_DISABLE_ERRORS Run linter but consider errors as warnings false KUBERNETES_KUBEVAL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 KUBERNETES_DIRECTORY Directory containing KUBERNETES files kubernetes MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if sub-directory kubernetes is found. (directory name can be overridden with KUBERNETES_DIRECTORY ) File extensions: .yml , .yaml , .json Detected file content (regex): apiVersion: , kustomize\\.config\\.k8s\\.io , tekton How the linting is performed kubeval is called one time by identified file ( file CLI lint mode) Example calls kubeval -strict myfile.yml Help content Validate a Kubernetes YAML file against the relevant schema Usage: kubeval <file> [file...] [flags] Flags: --additional-schema-locations strings Comma-seperated list of secondary base URLs used to download schemas -n, --default-namespace string Namespace to assume in resources if no namespace is set in metadata:namespace (default \"default\") -d, --directories strings A comma-separated list of directories to recursively search for YAML documents --exit-on-error Immediately stop execution when the first error is encountered -f, --filename string filename to be displayed when testing manifests read from stdin (default \"stdin\") --force-color Force colored output even if stdout is not a TTY -h, --help help for kubeval --ignore-missing-schemas Skip validation for resource definitions without a schema --ignored-filename-patterns strings An alias for ignored-path-patterns -i, --ignored-path-patterns strings A comma-separated list of regular expressions specifying paths to ignore --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure -v, --kubernetes-version string Version of Kubernetes to validate against (default \"master\") --openshift Use OpenShift schemas instead of upstream Kubernetes -o, --output string The format of the output of this script. Options are: [stdout json tap] --quiet Silences any output aside from the direct results --reject-kinds strings Comma-separated list of case-sensitive kinds to prohibit validating against schemas -s, --schema-location string Base URL used to download schemas. Can also be specified with the environment variable KUBEVAL_SCHEMA_LOCATION. --skip-kinds strings Comma-separated list of case-sensitive kinds to skip when validating against schemas --strict Disallow additional properties not in schema --version version for kubeval Installation on mega-linter Docker image Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/kubeval\" \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && wget -P ${ML_THIRD_PARTY_DIR} -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \\ && tar xf ${ML_THIRD_PARTY_DIR}/kubeval-linux-amd64.tar.gz --directory ${ML_THIRD_PARTY_DIR} \\ && mv ${ML_THIRD_PARTY_DIR}/kubeval /usr/local/bin \\ && rm ${ML_THIRD_PARTY_DIR}/kubeval-linux-amd64.tar.gz \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete","title":"kubeval"},{"location":"descriptors/kubernetes_kubeval/#kubeval","text":"","title":"kubeval"},{"location":"descriptors/kubernetes_kubeval/#kubeval-documentation","text":"Version in MegaLinter: 0.16.1 Visit Official Web Site","title":"kubeval documentation"},{"location":"descriptors/kubernetes_kubeval/#configuration-in-megalinter","text":"Enable kubeval by adding KUBERNETES_KUBEVAL in ENABLE_LINTERS variable Disable kubeval by adding KUBERNETES_KUBEVAL in DISABLE_LINTERS variable Variable Description Default value KUBERNETES_KUBEVAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" KUBERNETES_KUBEVAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file KUBERNETES_KUBEVAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file KUBERNETES_KUBEVAL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file KUBERNETES_KUBEVAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] KUBERNETES_KUBEVAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file KUBERNETES_KUBEVAL_PRE_COMMANDS List of bash commands to run before the linter None KUBERNETES_KUBEVAL_POST_COMMANDS List of bash commands to run after the linter None KUBERNETES_KUBEVAL_DISABLE_ERRORS Run linter but consider errors as warnings false KUBERNETES_KUBEVAL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 KUBERNETES_DIRECTORY Directory containing KUBERNETES files kubernetes","title":"Configuration in MegaLinter"},{"location":"descriptors/kubernetes_kubeval/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/kubernetes_kubeval/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/kubernetes_kubeval/#how-are-identified-applicable-files","text":"Activated only if sub-directory kubernetes is found. (directory name can be overridden with KUBERNETES_DIRECTORY ) File extensions: .yml , .yaml , .json Detected file content (regex): apiVersion: , kustomize\\.config\\.k8s\\.io , tekton","title":"How are identified applicable files"},{"location":"descriptors/kubernetes_kubeval/#how-the-linting-is-performed","text":"kubeval is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/kubernetes_kubeval/#example-calls","text":"kubeval -strict myfile.yml","title":"Example calls"},{"location":"descriptors/kubernetes_kubeval/#help-content","text":"Validate a Kubernetes YAML file against the relevant schema Usage: kubeval <file> [file...] [flags] Flags: --additional-schema-locations strings Comma-seperated list of secondary base URLs used to download schemas -n, --default-namespace string Namespace to assume in resources if no namespace is set in metadata:namespace (default \"default\") -d, --directories strings A comma-separated list of directories to recursively search for YAML documents --exit-on-error Immediately stop execution when the first error is encountered -f, --filename string filename to be displayed when testing manifests read from stdin (default \"stdin\") --force-color Force colored output even if stdout is not a TTY -h, --help help for kubeval --ignore-missing-schemas Skip validation for resource definitions without a schema --ignored-filename-patterns strings An alias for ignored-path-patterns -i, --ignored-path-patterns strings A comma-separated list of regular expressions specifying paths to ignore --insecure-skip-tls-verify If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure -v, --kubernetes-version string Version of Kubernetes to validate against (default \"master\") --openshift Use OpenShift schemas instead of upstream Kubernetes -o, --output string The format of the output of this script. Options are: [stdout json tap] --quiet Silences any output aside from the direct results --reject-kinds strings Comma-separated list of case-sensitive kinds to prohibit validating against schemas -s, --schema-location string Base URL used to download schemas. Can also be specified with the environment variable KUBEVAL_SCHEMA_LOCATION. --skip-kinds strings Comma-separated list of case-sensitive kinds to skip when validating against schemas --strict Disallow additional properties not in schema --version version for kubeval","title":"Help content"},{"location":"descriptors/kubernetes_kubeval/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/kubeval\" \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && wget -P ${ML_THIRD_PARTY_DIR} -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \\ && tar xf ${ML_THIRD_PARTY_DIR}/kubeval-linux-amd64.tar.gz --directory ${ML_THIRD_PARTY_DIR} \\ && mv ${ML_THIRD_PARTY_DIR}/kubeval /usr/local/bin \\ && rm ${ML_THIRD_PARTY_DIR}/kubeval-linux-amd64.tar.gz \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete","title":"Installation on mega-linter Docker image"},{"location":"descriptors/latex/","text":"LATEX Linters Linter Configuration key Status chktex LATEX Linted files File extensions: .tex Configuration in MegaLinter Variable Description Default value LATEX_FILTER_REGEX_INCLUDE Custom regex including filter LATEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All LATEX linters"},{"location":"descriptors/latex/#latex","text":"","title":"LATEX"},{"location":"descriptors/latex/#linters","text":"Linter Configuration key Status chktex LATEX","title":"Linters"},{"location":"descriptors/latex/#linted-files","text":"File extensions: .tex","title":"Linted files"},{"location":"descriptors/latex/#configuration-in-megalinter","text":"Variable Description Default value LATEX_FILTER_REGEX_INCLUDE Custom regex including filter LATEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/latex_chktex/","text":"chktex chktex documentation Version in MegaLinter: 1.7.6 Visit Official Web Site See How to configure chktex rules If custom .chktexrc config file is not found, .chktexrc will be used Configuration in MegaLinter Enable chktex by adding LATEX_CHKTEX in ENABLE_LINTERS variable Disable chktex by adding LATEX_CHKTEX in DISABLE_LINTERS variable Variable Description Default value LATEX_CHKTEX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LATEX_CHKTEX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file LATEX_CHKTEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file LATEX_CHKTEX_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file LATEX_CHKTEX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tex\"] LATEX_CHKTEX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LATEX_CHKTEX_PRE_COMMANDS List of bash commands to run before the linter None LATEX_CHKTEX_POST_COMMANDS List of bash commands to run after the linter None LATEX_CHKTEX_CONFIG_FILE chktex configuration file name Use LINTER_DEFAULT to let the linter find it .chktexrc LATEX_CHKTEX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LATEX_CHKTEX_DISABLE_ERRORS Run linter but consider errors as warnings false LATEX_CHKTEX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use chktex in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-chktex Visit Web Site Visual Studio Code latex-workshop MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .tex How the linting is performed chktex is called one time by identified file ( file CLI lint mode) Example calls chktex -q myfile.tex chktex -q -l .chktexrc myfile.tex Help content ChkTeX v1.7.6 - Copyright 1995-96 Jens T. Berger Thielemann. Compiled with POSIX extended regex support. ChkTeX comes with ABSOLUTELY NO WARRANTY; details on this and distribution conditions in the GNU General Public License file. Type \"ChkTeX -h\" for help, \"ChkTeX -i\" for distribution info. Author: Jens Berger. Bug reports: https://savannah.nongnu.org/bugs/?group=chktex or darthandrus@gmail.com Press Ctrl-D to terminate stdin input. Usage of ChkTeX v1.7.6 ~~~~~~~~~~~~~~~~~~~~~~ Template ~~~~~~~~ chktex [-hiqrW] [-v[0-...]] [-l <rcfile>] [-[wemn] <[1-42]|all>] [-d[0-...]] [-p <name>] [-o <outfile>] [-[btxgI][0|1]] file1 file2 ... ---------------------------------------------------------------------- Description of options: ~~~~~~~~~~~~~~~~~~~~~~~ Misc. options ~~~~~~~~~~~~~ -h --help : This text. -i --license : Show distribution information -l --localrc : Read local .chktexrc formatted file. -d --debug : Debug information. Give it a number. -r --reset : Reset settings to default. Muting warning messages: ~~~~~~~~~~~~~~~~~~~~~~~~ -w --warnon : Makes msg # given a warning and turns it on. -e --erroron : Makes msg # given an error and turns it on. -m --msgon : Makes msg # given a message and turns it on. -n --nowarn : Mutes msg # given. -L --nolinesupp: Disables per-line suppressions. Output control flags: ~~~~~~~~~~~~~~~~~~~~~ -v --verbosity : How errors are displayed. Default 1, 0=Less, 2=Fancy, 3=lacheck. -V --pipeverb : How errors are displayed when stdout != tty. Defaults to the same as -v. -s --splitchar : String used to split fields when doing -v0 -o --output : Redirect error report to a file. -q --quiet : Shuts up about version information. -p --pseudoname: Input file-name when reporting. -f --format : Format to use for output Boolean switches (1 -> enables / 0 -> disables): ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -b --backup : Backup output file. -x --wipeverb : Ignore contents of `\\verb' commands. -g --globalrc : Read global .chktexrc file. -I --inputfiles: Execute \\input statements. -H --headererr : Show errors found in front of \\begin{document} Miscellaneous switches: ~~~~~~~~~~~~~~~~~~~~~~~ -W --version : Version information ---------------------------------------------------------------------- If no LaTeX files are specified on the command line, we will read from stdin. For explanation of warning/error messages, please consult the main documentation ChkTeX.dvi, ChkTeX.ps or ChkTeX.pdf: http://www.nongnu.org/chktex/ChkTeX.pdf Any of the above arguments can be made permanent by setting them in the chktexrc file (~/.chktexrc). Installation on mega-linter Docker image Dockerfile commands : FROM ghcr.io/assignuser/chktex-alpine:latest as chktex COPY --from=chktex /usr/bin/chktex /usr/bin/ RUN cd ~ && touch .chktexrc && cd /","title":"chktex"},{"location":"descriptors/latex_chktex/#chktex","text":"","title":"chktex"},{"location":"descriptors/latex_chktex/#chktex-documentation","text":"Version in MegaLinter: 1.7.6 Visit Official Web Site See How to configure chktex rules If custom .chktexrc config file is not found, .chktexrc will be used","title":"chktex documentation"},{"location":"descriptors/latex_chktex/#configuration-in-megalinter","text":"Enable chktex by adding LATEX_CHKTEX in ENABLE_LINTERS variable Disable chktex by adding LATEX_CHKTEX in DISABLE_LINTERS variable Variable Description Default value LATEX_CHKTEX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LATEX_CHKTEX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file LATEX_CHKTEX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file LATEX_CHKTEX_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file LATEX_CHKTEX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tex\"] LATEX_CHKTEX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LATEX_CHKTEX_PRE_COMMANDS List of bash commands to run before the linter None LATEX_CHKTEX_POST_COMMANDS List of bash commands to run after the linter None LATEX_CHKTEX_CONFIG_FILE chktex configuration file name Use LINTER_DEFAULT to let the linter find it .chktexrc LATEX_CHKTEX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LATEX_CHKTEX_DISABLE_ERRORS Run linter but consider errors as warnings false LATEX_CHKTEX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/latex_chktex/#ide-integration","text":"Use chktex in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-chktex Visit Web Site Visual Studio Code latex-workshop","title":"IDE Integration"},{"location":"descriptors/latex_chktex/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/latex_chktex/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/latex_chktex/#how-are-identified-applicable-files","text":"File extensions: .tex","title":"How are identified applicable files"},{"location":"descriptors/latex_chktex/#how-the-linting-is-performed","text":"chktex is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/latex_chktex/#example-calls","text":"chktex -q myfile.tex chktex -q -l .chktexrc myfile.tex","title":"Example calls"},{"location":"descriptors/latex_chktex/#help-content","text":"ChkTeX v1.7.6 - Copyright 1995-96 Jens T. Berger Thielemann. Compiled with POSIX extended regex support. ChkTeX comes with ABSOLUTELY NO WARRANTY; details on this and distribution conditions in the GNU General Public License file. Type \"ChkTeX -h\" for help, \"ChkTeX -i\" for distribution info. Author: Jens Berger. Bug reports: https://savannah.nongnu.org/bugs/?group=chktex or darthandrus@gmail.com Press Ctrl-D to terminate stdin input. Usage of ChkTeX v1.7.6 ~~~~~~~~~~~~~~~~~~~~~~ Template ~~~~~~~~ chktex [-hiqrW] [-v[0-...]] [-l <rcfile>] [-[wemn] <[1-42]|all>] [-d[0-...]] [-p <name>] [-o <outfile>] [-[btxgI][0|1]] file1 file2 ... ---------------------------------------------------------------------- Description of options: ~~~~~~~~~~~~~~~~~~~~~~~ Misc. options ~~~~~~~~~~~~~ -h --help : This text. -i --license : Show distribution information -l --localrc : Read local .chktexrc formatted file. -d --debug : Debug information. Give it a number. -r --reset : Reset settings to default. Muting warning messages: ~~~~~~~~~~~~~~~~~~~~~~~~ -w --warnon : Makes msg # given a warning and turns it on. -e --erroron : Makes msg # given an error and turns it on. -m --msgon : Makes msg # given a message and turns it on. -n --nowarn : Mutes msg # given. -L --nolinesupp: Disables per-line suppressions. Output control flags: ~~~~~~~~~~~~~~~~~~~~~ -v --verbosity : How errors are displayed. Default 1, 0=Less, 2=Fancy, 3=lacheck. -V --pipeverb : How errors are displayed when stdout != tty. Defaults to the same as -v. -s --splitchar : String used to split fields when doing -v0 -o --output : Redirect error report to a file. -q --quiet : Shuts up about version information. -p --pseudoname: Input file-name when reporting. -f --format : Format to use for output Boolean switches (1 -> enables / 0 -> disables): ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -b --backup : Backup output file. -x --wipeverb : Ignore contents of `\\verb' commands. -g --globalrc : Read global .chktexrc file. -I --inputfiles: Execute \\input statements. -H --headererr : Show errors found in front of \\begin{document} Miscellaneous switches: ~~~~~~~~~~~~~~~~~~~~~~~ -W --version : Version information ---------------------------------------------------------------------- If no LaTeX files are specified on the command line, we will read from stdin. For explanation of warning/error messages, please consult the main documentation ChkTeX.dvi, ChkTeX.ps or ChkTeX.pdf: http://www.nongnu.org/chktex/ChkTeX.pdf Any of the above arguments can be made permanent by setting them in the chktexrc file (~/.chktexrc).","title":"Help content"},{"location":"descriptors/latex_chktex/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM ghcr.io/assignuser/chktex-alpine:latest as chktex COPY --from=chktex /usr/bin/chktex /usr/bin/ RUN cd ~ && touch .chktexrc && cd /","title":"Installation on mega-linter Docker image"},{"location":"descriptors/lua/","text":"LUA Linters Linter Configuration key Status luacheck LUA Linted files File extensions: .lua Configuration in MegaLinter Variable Description Default value LUA_FILTER_REGEX_INCLUDE Custom regex including filter LUA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All LUA linters"},{"location":"descriptors/lua/#lua","text":"","title":"LUA"},{"location":"descriptors/lua/#linters","text":"Linter Configuration key Status luacheck LUA","title":"Linters"},{"location":"descriptors/lua/#linted-files","text":"File extensions: .lua","title":"Linted files"},{"location":"descriptors/lua/#configuration-in-megalinter","text":"Variable Description Default value LUA_FILTER_REGEX_INCLUDE Custom regex including filter LUA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/lua_luacheck/","text":"luacheck luacheck documentation Version in MegaLinter: 1.0.0 Visit Official Web Site See How to configure luacheck rules If custom .luacheckrc config file is not found, .luacheckrc will be used See How to disable luacheck rules in files See Index of problems detected by luacheck Configuration in MegaLinter Enable luacheck by adding LUA_LUACHECK in ENABLE_LINTERS variable Disable luacheck by adding LUA_LUACHECK in DISABLE_LINTERS variable Variable Description Default value LUA_LUACHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LUA_LUACHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file LUA_LUACHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file LUA_LUACHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file LUA_LUACHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".lua\"] LUA_LUACHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LUA_LUACHECK_PRE_COMMANDS List of bash commands to run before the linter None LUA_LUACHECK_POST_COMMANDS List of bash commands to run after the linter None LUA_LUACHECK_CONFIG_FILE luacheck configuration file name Use LINTER_DEFAULT to let the linter find it .luacheckrc LUA_LUACHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LUA_LUACHECK_DISABLE_ERRORS Run linter but consider errors as warnings false LUA_LUACHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use luacheck in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-luacheck Visit Web Site Brackets brackets-luacheck Visit Web Site Emacs flycheck Visit Web Site Sublime Text SublimeLinter-luacheck Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-luacheck MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .lua How the linting is performed luacheck is called one time by identified file ( file CLI lint mode) Example calls luacheck myfile.lua luacheck --config .chktexrc myfile.lua Help content Usage: luacheck ([--config <config>] | [--no-config]) ([--default-config <default_config>] | [--no-default-config]) [-h] [-g] [-u] [-r] [-a] [-s] [--no-self] [--std <std>] [-c] [-d] [-t] [-m] [--max-line-length <length>] [--no-max-line-length] [--max-code-line-length <length>] [--no-max-code-line-length] [--max-string-line-length <length>] [--no-max-string-line-length] [--max-comment-line-length <length>] [--no-max-comment-line-length] [--max-cyclomatic-complexity <complexity>] [--no-max-cyclomatic-complexity] [--filename <filename>] [-j <jobs>] [--formatter <formatter>] [-q] [--codes] [--ranges] [--no-color] [-v] <file> [<file>] ... ([--cache [<cache>]] | [--no-cache]) [--ignore <patt> [<patt>] ...] [--enable <patt> [<patt>] ...] [--only <patt> [<patt>] ...] [--globals [<name>] ...] [--read-globals [<name>] ...] [--new-globals [<name>] ...] [--new-read-globals [<name>] ...] [--not-globals [<name>] ...] [--exclude-files <glob> [<glob>] ...] [--include-files <glob> [<glob>] ...] luacheck 1.0.0, a linter and a static analyzer for Lua. Arguments: files List of files, directories and rockspecs to check. Pass '-' to check stdin. Options for filtering warnings: -g, --no-global Filter out warnings related to global variables. Equivalent to --ignore 1. -u, --no-unused Filter out warnings related to unused variables and values. Equivalent to --ignore [23]. -r, --no-redefined Filter out warnings related to redefined variables. Equivalent to --ignore 4. -a, --no-unused-args Filter out warnings related to unused arguments and loop variables. Equivalent to --ignore 21[23]. -s, --no-unused-secondaries Filter out warnings related to unused variables set together with used ones. --no-self Filter out warnings related to implicit self argument. --ignore <patt> [<patt>] ..., -i <patt> [<patt>] ... Filter out warnings matching these patterns. If a pattern contains slash, part before slash matches warning code and part after it matches name of related variable. Otherwise, if the pattern contains letters or underscore, it matches name of related variable. Otherwise, the pattern matches warning code. --enable <patt> [<patt>] ..., -e <patt> [<patt>] ... Do not filter out warnings matching these patterns. --only <patt> [<patt>] ..., -o <patt> [<patt>] ... Filter out warnings not matching these patterns. Options for configuring allowed globals: --std <std> Set standard globals, default is max. <std> can be one of: max - union of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; min - intersection of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; lua51 - globals of Lua 5.1 without deprecated ones; lua51c - globals of Lua 5.1; lua52 - globals of Lua 5.2; lua52c - globals of Lua 5.2 with LUA_COMPAT_ALL; lua53 - globals of Lua 5.3; lua53c - globals of Lua 5.3 with LUA_COMPAT_5_2; lua54 - globals of Lua 5.4; lua54c - globals of Lua 5.4 with LUA_COMPAT_5_3; luajit - globals of LuaJIT 2.x; ngx_lua - globals of Openresty lua-nginx-module 0.10.10, including standard LuaJIT 2.x globals; love - globals added by L\u00d6VE; playdate - globals added by the Playdate SDK; busted - globals added by Busted 2.0, by default added for files ending with _spec.lua within spec, test, and tests subdirectories; rockspec - globals allowed in rockspecs, by default added for files ending with .rockspec; luacheckrc - globals allowed in Luacheck configs, by default added for files ending with .luacheckrc; none - no standard globals. Sets can be combined using '+'. Extra sets can be defined in config by adding to `stds` global in config. -c, --compat Equivalent to --std max. --globals [<name>] ... Add custom global variables (e.g. foo) or fields (e.g. foo.bar) on top of standard ones. --read-globals [<name>] ... Add read-only global variables or fields. --new-globals [<name>] ... Set custom global variables or fields. Removes custom globals added previously. --new-read-globals [<name>] ... Set read-only global variables or fields. Removes read-only globals added previously. --not-globals [<name>] ... Remove custom and standard global variables or fields. -d, --allow-defined Allow defining globals implicitly by setting them. -t, --allow-defined-top Allow defining globals implicitly by setting them in the top level scope. -m, --module Limit visibility of implicitly defined globals to their files. Options for configuring line length limits: --max-line-length <length> Set maximum allowed line length (default: 120). --no-max-line-length Do not limit line length. --max-code-line-length <length> Set maximum allowed length for lines ending with code (default: 120). --no-max-code-line-length Do not limit code line length. --max-string-line-length <length> Set maximum allowed length for lines within a string (default: 120). --no-max-string-line-length Do not limit string line length. --max-comment-line-length <length> Set maximum allowed length for comment lines (default: 120). --no-max-comment-line-length Do not limit comment line length. Configuration file options: --config <config> Path to configuration file. (default: .luacheckrc) --no-config Do not look up configuration file. --default-config <default_config> Path to configuration file to use if --[no-]config is not used and project-specific .luacheckrc is not found. (default: /root/.config/luacheck/.luacheckrc) --no-default-config Do not use default configuration file. File filtering options: --exclude-files <glob> [<glob>] ... Do not check files matching these globbing patterns. --include-files <glob> [<glob>] ... Do not check files not matching these globbing patterns. Performance optimization options: --cache [<cache>] Path to cache directory. (default: /root/.cache/luacheck) --no-cache Do not use cache. -j <jobs>, Check <jobs> files in parallel (default: 1). --jobs <jobs> Warning: LuaLanes not found, parallel checking disabled. Output formatting options: --formatter <formatter> Use custom formatter. <formatter> must be a module name or one of: TAP - Test Anything Protocol formatter; JUnit - JUnit XML formatter; visual_studio - MSBuild/Visual Studio aware formatter; plain - simple warning-per-line formatter; default - standard formatter. -q, --quiet Suppress output for files without warnings. -qq: Suppress output of warnings. -qqq: Only print total number of warnings and errors. --codes Show warning codes. --ranges Show ranges of columns related to warnings. --no-color Do not color output. Other options: -h, --help Show this help message and exit. --max-cyclomatic-complexity <complexity> Set maximum cyclomatic complexity for functions. --no-max-cyclomatic-complexity Do not limit function cyclomatic complexity (default). --filename <filename> Use another filename in output and for selecting configuration overrides. -v, --version Show version info and exit. Links: Luacheck on GitHub: https://github.com/lunarmodules/luacheck Luacheck documentation: https://luacheck.readthedocs.org Installation on mega-linter Docker image Dockerfile commands : RUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\ && cd lua-5.3.5 \\ && make linux \\ && make install \\ && cd .. && rm -r lua-5.3.5/ \\ && wget --tries=5 https://github.com/cvega/luarocks/archive/v3.3.1-super-linter.tar.gz -O - -q | tar -xzf - \\ && cd luarocks-3.3.1-super-linter \\ && ./configure --with-lua-include=/usr/local/include \\ && make \\ && make -b install \\ && cd .. && rm -r luarocks-3.3.1-super-linter/ \\ && luarocks install luacheck \\ && cd / APK packages (Linux): openssl readline-dev","title":"luacheck"},{"location":"descriptors/lua_luacheck/#luacheck","text":"","title":"luacheck"},{"location":"descriptors/lua_luacheck/#luacheck-documentation","text":"Version in MegaLinter: 1.0.0 Visit Official Web Site See How to configure luacheck rules If custom .luacheckrc config file is not found, .luacheckrc will be used See How to disable luacheck rules in files See Index of problems detected by luacheck","title":"luacheck documentation"},{"location":"descriptors/lua_luacheck/#configuration-in-megalinter","text":"Enable luacheck by adding LUA_LUACHECK in ENABLE_LINTERS variable Disable luacheck by adding LUA_LUACHECK in DISABLE_LINTERS variable Variable Description Default value LUA_LUACHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" LUA_LUACHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file LUA_LUACHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file LUA_LUACHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file LUA_LUACHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".lua\"] LUA_LUACHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file LUA_LUACHECK_PRE_COMMANDS List of bash commands to run before the linter None LUA_LUACHECK_POST_COMMANDS List of bash commands to run after the linter None LUA_LUACHECK_CONFIG_FILE luacheck configuration file name Use LINTER_DEFAULT to let the linter find it .luacheckrc LUA_LUACHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules LUA_LUACHECK_DISABLE_ERRORS Run linter but consider errors as warnings false LUA_LUACHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/lua_luacheck/#ide-integration","text":"Use luacheck in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-luacheck Visit Web Site Brackets brackets-luacheck Visit Web Site Emacs flycheck Visit Web Site Sublime Text SublimeLinter-luacheck Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-luacheck","title":"IDE Integration"},{"location":"descriptors/lua_luacheck/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/lua_luacheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/lua_luacheck/#how-are-identified-applicable-files","text":"File extensions: .lua","title":"How are identified applicable files"},{"location":"descriptors/lua_luacheck/#how-the-linting-is-performed","text":"luacheck is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/lua_luacheck/#example-calls","text":"luacheck myfile.lua luacheck --config .chktexrc myfile.lua","title":"Example calls"},{"location":"descriptors/lua_luacheck/#help-content","text":"Usage: luacheck ([--config <config>] | [--no-config]) ([--default-config <default_config>] | [--no-default-config]) [-h] [-g] [-u] [-r] [-a] [-s] [--no-self] [--std <std>] [-c] [-d] [-t] [-m] [--max-line-length <length>] [--no-max-line-length] [--max-code-line-length <length>] [--no-max-code-line-length] [--max-string-line-length <length>] [--no-max-string-line-length] [--max-comment-line-length <length>] [--no-max-comment-line-length] [--max-cyclomatic-complexity <complexity>] [--no-max-cyclomatic-complexity] [--filename <filename>] [-j <jobs>] [--formatter <formatter>] [-q] [--codes] [--ranges] [--no-color] [-v] <file> [<file>] ... ([--cache [<cache>]] | [--no-cache]) [--ignore <patt> [<patt>] ...] [--enable <patt> [<patt>] ...] [--only <patt> [<patt>] ...] [--globals [<name>] ...] [--read-globals [<name>] ...] [--new-globals [<name>] ...] [--new-read-globals [<name>] ...] [--not-globals [<name>] ...] [--exclude-files <glob> [<glob>] ...] [--include-files <glob> [<glob>] ...] luacheck 1.0.0, a linter and a static analyzer for Lua. Arguments: files List of files, directories and rockspecs to check. Pass '-' to check stdin. Options for filtering warnings: -g, --no-global Filter out warnings related to global variables. Equivalent to --ignore 1. -u, --no-unused Filter out warnings related to unused variables and values. Equivalent to --ignore [23]. -r, --no-redefined Filter out warnings related to redefined variables. Equivalent to --ignore 4. -a, --no-unused-args Filter out warnings related to unused arguments and loop variables. Equivalent to --ignore 21[23]. -s, --no-unused-secondaries Filter out warnings related to unused variables set together with used ones. --no-self Filter out warnings related to implicit self argument. --ignore <patt> [<patt>] ..., -i <patt> [<patt>] ... Filter out warnings matching these patterns. If a pattern contains slash, part before slash matches warning code and part after it matches name of related variable. Otherwise, if the pattern contains letters or underscore, it matches name of related variable. Otherwise, the pattern matches warning code. --enable <patt> [<patt>] ..., -e <patt> [<patt>] ... Do not filter out warnings matching these patterns. --only <patt> [<patt>] ..., -o <patt> [<patt>] ... Filter out warnings not matching these patterns. Options for configuring allowed globals: --std <std> Set standard globals, default is max. <std> can be one of: max - union of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; min - intersection of globals of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.x; lua51 - globals of Lua 5.1 without deprecated ones; lua51c - globals of Lua 5.1; lua52 - globals of Lua 5.2; lua52c - globals of Lua 5.2 with LUA_COMPAT_ALL; lua53 - globals of Lua 5.3; lua53c - globals of Lua 5.3 with LUA_COMPAT_5_2; lua54 - globals of Lua 5.4; lua54c - globals of Lua 5.4 with LUA_COMPAT_5_3; luajit - globals of LuaJIT 2.x; ngx_lua - globals of Openresty lua-nginx-module 0.10.10, including standard LuaJIT 2.x globals; love - globals added by L\u00d6VE; playdate - globals added by the Playdate SDK; busted - globals added by Busted 2.0, by default added for files ending with _spec.lua within spec, test, and tests subdirectories; rockspec - globals allowed in rockspecs, by default added for files ending with .rockspec; luacheckrc - globals allowed in Luacheck configs, by default added for files ending with .luacheckrc; none - no standard globals. Sets can be combined using '+'. Extra sets can be defined in config by adding to `stds` global in config. -c, --compat Equivalent to --std max. --globals [<name>] ... Add custom global variables (e.g. foo) or fields (e.g. foo.bar) on top of standard ones. --read-globals [<name>] ... Add read-only global variables or fields. --new-globals [<name>] ... Set custom global variables or fields. Removes custom globals added previously. --new-read-globals [<name>] ... Set read-only global variables or fields. Removes read-only globals added previously. --not-globals [<name>] ... Remove custom and standard global variables or fields. -d, --allow-defined Allow defining globals implicitly by setting them. -t, --allow-defined-top Allow defining globals implicitly by setting them in the top level scope. -m, --module Limit visibility of implicitly defined globals to their files. Options for configuring line length limits: --max-line-length <length> Set maximum allowed line length (default: 120). --no-max-line-length Do not limit line length. --max-code-line-length <length> Set maximum allowed length for lines ending with code (default: 120). --no-max-code-line-length Do not limit code line length. --max-string-line-length <length> Set maximum allowed length for lines within a string (default: 120). --no-max-string-line-length Do not limit string line length. --max-comment-line-length <length> Set maximum allowed length for comment lines (default: 120). --no-max-comment-line-length Do not limit comment line length. Configuration file options: --config <config> Path to configuration file. (default: .luacheckrc) --no-config Do not look up configuration file. --default-config <default_config> Path to configuration file to use if --[no-]config is not used and project-specific .luacheckrc is not found. (default: /root/.config/luacheck/.luacheckrc) --no-default-config Do not use default configuration file. File filtering options: --exclude-files <glob> [<glob>] ... Do not check files matching these globbing patterns. --include-files <glob> [<glob>] ... Do not check files not matching these globbing patterns. Performance optimization options: --cache [<cache>] Path to cache directory. (default: /root/.cache/luacheck) --no-cache Do not use cache. -j <jobs>, Check <jobs> files in parallel (default: 1). --jobs <jobs> Warning: LuaLanes not found, parallel checking disabled. Output formatting options: --formatter <formatter> Use custom formatter. <formatter> must be a module name or one of: TAP - Test Anything Protocol formatter; JUnit - JUnit XML formatter; visual_studio - MSBuild/Visual Studio aware formatter; plain - simple warning-per-line formatter; default - standard formatter. -q, --quiet Suppress output for files without warnings. -qq: Suppress output of warnings. -qqq: Only print total number of warnings and errors. --codes Show warning codes. --ranges Show ranges of columns related to warnings. --no-color Do not color output. Other options: -h, --help Show this help message and exit. --max-cyclomatic-complexity <complexity> Set maximum cyclomatic complexity for functions. --no-max-cyclomatic-complexity Do not limit function cyclomatic complexity (default). --filename <filename> Use another filename in output and for selecting configuration overrides. -v, --version Show version info and exit. Links: Luacheck on GitHub: https://github.com/lunarmodules/luacheck Luacheck documentation: https://luacheck.readthedocs.org","title":"Help content"},{"location":"descriptors/lua_luacheck/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \\ && cd lua-5.3.5 \\ && make linux \\ && make install \\ && cd .. && rm -r lua-5.3.5/ \\ && wget --tries=5 https://github.com/cvega/luarocks/archive/v3.3.1-super-linter.tar.gz -O - -q | tar -xzf - \\ && cd luarocks-3.3.1-super-linter \\ && ./configure --with-lua-include=/usr/local/include \\ && make \\ && make -b install \\ && cd .. && rm -r luarocks-3.3.1-super-linter/ \\ && luarocks install luacheck \\ && cd / APK packages (Linux): openssl readline-dev","title":"Installation on mega-linter Docker image"},{"location":"descriptors/makefile/","text":"MAKEFILE Linters Linter Configuration key Status checkmake MAKEFILE_CHECKMAKE Linted files File names: Makefile Configuration in MegaLinter Variable Description Default value MAKEFILE_FILTER_REGEX_INCLUDE Custom regex including filter MAKEFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All MAKEFILE linters"},{"location":"descriptors/makefile/#makefile","text":"","title":"MAKEFILE"},{"location":"descriptors/makefile/#linters","text":"Linter Configuration key Status checkmake MAKEFILE_CHECKMAKE","title":"Linters"},{"location":"descriptors/makefile/#linted-files","text":"File names: Makefile","title":"Linted files"},{"location":"descriptors/makefile/#configuration-in-megalinter","text":"Variable Description Default value MAKEFILE_FILTER_REGEX_INCLUDE Custom regex including filter MAKEFILE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/makefile_checkmake/","text":"checkmake checkmake documentation Version in MegaLinter: 0.2.1 Visit Official Web Site See How to configure checkmake rules Configuration in MegaLinter Enable checkmake by adding MAKEFILE_CHECKMAKE in ENABLE_LINTERS variable Disable checkmake by adding MAKEFILE_CHECKMAKE in DISABLE_LINTERS variable Variable Description Default value MAKEFILE_CHECKMAKE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MAKEFILE_CHECKMAKE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MAKEFILE_CHECKMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MAKEFILE_CHECKMAKE_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file MAKEFILE_CHECKMAKE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file MAKEFILE_CHECKMAKE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Makefile\"] MAKEFILE_CHECKMAKE_PRE_COMMANDS List of bash commands to run before the linter None MAKEFILE_CHECKMAKE_POST_COMMANDS List of bash commands to run after the linter None MAKEFILE_CHECKMAKE_CONFIG_FILE checkmake configuration file name Use LINTER_DEFAULT to let the linter find it .checkmake.ini MAKEFILE_CHECKMAKE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MAKEFILE_CHECKMAKE_DISABLE_ERRORS Run linter but consider errors as warnings false MAKEFILE_CHECKMAKE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 dotnet Optimized for C, C++, C# or VB based projects 55 java Optimized for JAVA based projects 50 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File names (regex): Makefile How the linting is performed checkmake is called one time by identified file ( file CLI lint mode) Example calls checkmake Makefile checkmake --config .checkmake.ini Makefile Help content checkmake. Usage: checkmake [options] <makefile> checkmake -h | --help checkmake --version checkmake --list-rules Options: -h --help Show this screen. --version Show version. --debug Enable debug mode --config=<configPath> Configuration file to read --format=<format> Output format as a Golang text/template template --list-rules List registered rules Installation on mega-linter Docker image Dockerfile commands : RUN ( [ -d /usr/local/bin ] || mkdir -p /usr/local/bin ) \\ && wget -q \"https://github.com/mrtazz/checkmake/releases/download/0.2.1/checkmake-0.2.1.linux.amd64\" -O /usr/local/bin/checkmake \\ && chmod 755 /usr/local/bin/checkmake","title":"checkmake"},{"location":"descriptors/makefile_checkmake/#checkmake","text":"","title":"checkmake"},{"location":"descriptors/makefile_checkmake/#checkmake-documentation","text":"Version in MegaLinter: 0.2.1 Visit Official Web Site See How to configure checkmake rules","title":"checkmake documentation"},{"location":"descriptors/makefile_checkmake/#configuration-in-megalinter","text":"Enable checkmake by adding MAKEFILE_CHECKMAKE in ENABLE_LINTERS variable Disable checkmake by adding MAKEFILE_CHECKMAKE in DISABLE_LINTERS variable Variable Description Default value MAKEFILE_CHECKMAKE_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MAKEFILE_CHECKMAKE_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MAKEFILE_CHECKMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MAKEFILE_CHECKMAKE_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file MAKEFILE_CHECKMAKE_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file MAKEFILE_CHECKMAKE_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Makefile\"] MAKEFILE_CHECKMAKE_PRE_COMMANDS List of bash commands to run before the linter None MAKEFILE_CHECKMAKE_POST_COMMANDS List of bash commands to run after the linter None MAKEFILE_CHECKMAKE_CONFIG_FILE checkmake configuration file name Use LINTER_DEFAULT to let the linter find it .checkmake.ini MAKEFILE_CHECKMAKE_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MAKEFILE_CHECKMAKE_DISABLE_ERRORS Run linter but consider errors as warnings false MAKEFILE_CHECKMAKE_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/makefile_checkmake/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 dotnet Optimized for C, C++, C# or VB based projects 55 java Optimized for JAVA based projects 50 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/makefile_checkmake/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/makefile_checkmake/#how-are-identified-applicable-files","text":"File names (regex): Makefile","title":"How are identified applicable files"},{"location":"descriptors/makefile_checkmake/#how-the-linting-is-performed","text":"checkmake is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/makefile_checkmake/#example-calls","text":"checkmake Makefile checkmake --config .checkmake.ini Makefile","title":"Example calls"},{"location":"descriptors/makefile_checkmake/#help-content","text":"checkmake. Usage: checkmake [options] <makefile> checkmake -h | --help checkmake --version checkmake --list-rules Options: -h --help Show this screen. --version Show version. --debug Enable debug mode --config=<configPath> Configuration file to read --format=<format> Output format as a Golang text/template template --list-rules List registered rules","title":"Help content"},{"location":"descriptors/makefile_checkmake/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN ( [ -d /usr/local/bin ] || mkdir -p /usr/local/bin ) \\ && wget -q \"https://github.com/mrtazz/checkmake/releases/download/0.2.1/checkmake-0.2.1.linux.amd64\" -O /usr/local/bin/checkmake \\ && chmod 755 /usr/local/bin/checkmake","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown/","text":"MARKDOWN Linters Linter Configuration key Status markdownlint MARKDOWN remark-lint MARKDOWN markdown-link-check MARKDOWN markdown-table-formatter MARKDOWN Linted files File extensions: .md Configuration in MegaLinter Variable Description Default value MARKDOWN_FILTER_REGEX_INCLUDE Custom regex including filter MARKDOWN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All MARKDOWN linters"},{"location":"descriptors/markdown/#markdown","text":"","title":"MARKDOWN"},{"location":"descriptors/markdown/#linters","text":"Linter Configuration key Status markdownlint MARKDOWN remark-lint MARKDOWN markdown-link-check MARKDOWN markdown-table-formatter MARKDOWN","title":"Linters"},{"location":"descriptors/markdown/#linted-files","text":"File extensions: .md","title":"Linted files"},{"location":"descriptors/markdown/#configuration-in-megalinter","text":"Variable Description Default value MARKDOWN_FILTER_REGEX_INCLUDE Custom regex including filter MARKDOWN_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/markdown_markdown_link_check/","text":"markdown-link-check markdown-link-check documentation Version in MegaLinter: 3.10.3 Visit Official Web Site See How to configure markdown-link-check rules If custom .markdown-link-check.json config file is not found, .markdown-link-check.json will be used See How to disable markdown-link-check rules in files Configuration in MegaLinter Enable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in ENABLE_LINTERS variable Disable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in DISABLE_LINTERS variable Variable Description Default value MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_MARKDOWN_LINK_CHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_LINK_CHECK_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWN_LINK_CHECK_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE markdown-link-check configuration file name Use LINTER_DEFAULT to let the linter find it .markdown-link-check.json MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS Run linter but consider errors as warnings false MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .md How the linting is performed markdown-link-check is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls markdown-link-check myfile.md markdown-link-check -c .markdown-link-check.json myfile.md Help content Usage: markdown-link-check [options] [filenamesOrUrls...] Options: -V, --version output the version number -p, --progress show progress bar -c, --config [config] apply a config file (JSON), holding e.g. url specific header configuration -q, --quiet displays errors only -v, --verbose displays detailed error information -a, --alive <code> comma separated list of HTTP codes to be considered as alive -r, --retry retry after the duration indicated in 'retry-after' header when HTTP code is 429 -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): markdown-link-check","title":"markdown-link-check"},{"location":"descriptors/markdown_markdown_link_check/#markdown-link-check","text":"","title":"markdown-link-check"},{"location":"descriptors/markdown_markdown_link_check/#markdown-link-check-documentation","text":"Version in MegaLinter: 3.10.3 Visit Official Web Site See How to configure markdown-link-check rules If custom .markdown-link-check.json config file is not found, .markdown-link-check.json will be used See How to disable markdown-link-check rules in files","title":"markdown-link-check documentation"},{"location":"descriptors/markdown_markdown_link_check/#configuration-in-megalinter","text":"Enable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in ENABLE_LINTERS variable Disable markdown-link-check by adding MARKDOWN_MARKDOWN_LINK_CHECK in DISABLE_LINTERS variable Variable Description Default value MARKDOWN_MARKDOWN_LINK_CHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_MARKDOWN_LINK_CHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_MARKDOWN_LINK_CHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files MARKDOWN_MARKDOWN_LINK_CHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_LINK_CHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_LINK_CHECK_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWN_LINK_CHECK_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE markdown-link-check configuration file name Use LINTER_DEFAULT to let the linter find it .markdown-link-check.json MARKDOWN_MARKDOWN_LINK_CHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS Run linter but consider errors as warnings false MARKDOWN_MARKDOWN_LINK_CHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/markdown_markdown_link_check/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/markdown_markdown_link_check/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_markdown_link_check/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_markdown_link_check/#how-the-linting-is-performed","text":"markdown-link-check is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/markdown_markdown_link_check/#example-calls","text":"markdown-link-check myfile.md markdown-link-check -c .markdown-link-check.json myfile.md","title":"Example calls"},{"location":"descriptors/markdown_markdown_link_check/#help-content","text":"Usage: markdown-link-check [options] [filenamesOrUrls...] Options: -V, --version output the version number -p, --progress show progress bar -c, --config [config] apply a config file (JSON), holding e.g. url specific header configuration -q, --quiet displays errors only -v, --verbose displays detailed error information -a, --alive <code> comma separated list of HTTP codes to be considered as alive -r, --retry retry after the duration indicated in 'retry-after' header when HTTP code is 429 -h, --help display help for command","title":"Help content"},{"location":"descriptors/markdown_markdown_link_check/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): markdown-link-check","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown_markdown_table_formatter/","text":"markdown-table-formatter markdown-table-formatter detects wrongly formatted markdown tables and can automatically reformat them markdown-table-formatter documentation Version in MegaLinter: 1.4.0 Visit Official Web Site Configuration in MegaLinter Enable markdown-table-formatter by adding MARKDOWN_MARKDOWN_TABLE_FORMATTER in ENABLE_LINTERS variable Disable markdown-table-formatter by adding MARKDOWN_MARKDOWN_TABLE_FORMATTER in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWN_TABLE_FORMATTER in APPLY_FIXES variable Variable Description Default value MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_TABLE_FORMATTER_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWN_TABLE_FORMATTER_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS Run linter but consider errors as warnings true MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use markdown-table-formatter in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Markdown Table Prettify Extension Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .md How the linting is performed markdown-table-formatter is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls markdown-table-formatter --check myfile.md markdown-table-formatter myfile.md markdown-table-formatter myfile.md myfile2.md myfile3.md Help content markdown-table-formatter [options] -c, --check Check only (exits 1 if wrongly formatted markdown tables are found) -p, --columnpadding Int Override table columns padding number of spaces -h, --help Show help -v, --version Show version -z, --verbose Verbose mode Installation on mega-linter Docker image NPM packages (node.js): markdown-table-formatter","title":"markdown-table-formatter"},{"location":"descriptors/markdown_markdown_table_formatter/#markdown-table-formatter","text":"markdown-table-formatter detects wrongly formatted markdown tables and can automatically reformat them","title":"markdown-table-formatter"},{"location":"descriptors/markdown_markdown_table_formatter/#markdown-table-formatter-documentation","text":"Version in MegaLinter: 1.4.0 Visit Official Web Site","title":"markdown-table-formatter documentation"},{"location":"descriptors/markdown_markdown_table_formatter/#configuration-in-megalinter","text":"Enable markdown-table-formatter by adding MARKDOWN_MARKDOWN_TABLE_FORMATTER in ENABLE_LINTERS variable Disable markdown-table-formatter by adding MARKDOWN_MARKDOWN_TABLE_FORMATTER in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWN_TABLE_FORMATTER in APPLY_FIXES variable Variable Description Default value MARKDOWN_MARKDOWN_TABLE_FORMATTER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_MARKDOWN_TABLE_FORMATTER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_TABLE_FORMATTER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_TABLE_FORMATTER_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWN_TABLE_FORMATTER_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS Run linter but consider errors as warnings true MARKDOWN_MARKDOWN_TABLE_FORMATTER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/markdown_markdown_table_formatter/#ide-integration","text":"Use markdown-table-formatter in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Markdown Table Prettify Extension Visit Web Site","title":"IDE Integration"},{"location":"descriptors/markdown_markdown_table_formatter/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/markdown_markdown_table_formatter/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_markdown_table_formatter/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_markdown_table_formatter/#how-the-linting-is-performed","text":"markdown-table-formatter is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/markdown_markdown_table_formatter/#example-calls","text":"markdown-table-formatter --check myfile.md markdown-table-formatter myfile.md markdown-table-formatter myfile.md myfile2.md myfile3.md","title":"Example calls"},{"location":"descriptors/markdown_markdown_table_formatter/#help-content","text":"markdown-table-formatter [options] -c, --check Check only (exits 1 if wrongly formatted markdown tables are found) -p, --columnpadding Int Override table columns padding number of spaces -h, --help Show help -v, --version Show version -z, --verbose Verbose mode","title":"Help content"},{"location":"descriptors/markdown_markdown_table_formatter/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): markdown-table-formatter","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown_markdown_table_prettify/","text":"markdown-table-prettify markdown-table-prettify detects wrongly formatted markdown tables and can automatically reformat them markdown-table-prettify documentation Visit Official Web Site Configuration in MegaLinter Enable markdown-table-prettify by adding MARKDOWN_MARKDOWN_TABLE_PRETTIFY in ENABLE_LINTERS variable Disable markdown-table-prettify by adding MARKDOWN_MARKDOWN_TABLE_PRETTIFY in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWN_TABLE_PRETTIFY in APPLY_FIXES variable Variable Description Default value MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS Run linter but consider errors as warnings true IDE Integration Use markdown-table-prettify in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Markdown Table Prettify Extension Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 80 dart Optimized for DART based projects 36 documentation MegaLinter for documentation projects 35 dotnet Optimized for C, C++, C# or VB based projects 41 go Optimized for GO based projects 36 java Optimized for JAVA based projects 36 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 44 php Optimized for PHP based projects 39 python Optimized for PYTHON based projects 42 ruby Optimized for RUBY based projects 36 rust Optimized for RUST based projects 36 salesforce Optimized for Salesforce based projects 36 scala Optimized for SCALA based projects 36 terraform Optimized for TERRAFORM based projects 38 Behind the scenes How are identified applicable files File extensions: .md Example calls markdown-table-prettify --check myfile.md markdown-table-prettify myfile.md Installation on mega-linter Docker image NPM packages (node.js): markdown-table-prettify","title":"Markdown markdown table prettify"},{"location":"descriptors/markdown_markdown_table_prettify/#markdown-table-prettify","text":"markdown-table-prettify detects wrongly formatted markdown tables and can automatically reformat them","title":"markdown-table-prettify"},{"location":"descriptors/markdown_markdown_table_prettify/#markdown-table-prettify-documentation","text":"Visit Official Web Site","title":"markdown-table-prettify documentation"},{"location":"descriptors/markdown_markdown_table_prettify/#configuration-in-megalinter","text":"Enable markdown-table-prettify by adding MARKDOWN_MARKDOWN_TABLE_PRETTIFY in ENABLE_LINTERS variable Disable markdown-table-prettify by adding MARKDOWN_MARKDOWN_TABLE_PRETTIFY in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWN_TABLE_PRETTIFY in APPLY_FIXES variable Variable Description Default value MARKDOWN_MARKDOWN_TABLE_PRETTIFY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWN_TABLE_PRETTIFY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWN_TABLE_PRETTIFY_DISABLE_ERRORS Run linter but consider errors as warnings true","title":"Configuration in MegaLinter"},{"location":"descriptors/markdown_markdown_table_prettify/#ide-integration","text":"Use markdown-table-prettify in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Markdown Table Prettify Extension Visit Web Site","title":"IDE Integration"},{"location":"descriptors/markdown_markdown_table_prettify/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 80 dart Optimized for DART based projects 36 documentation MegaLinter for documentation projects 35 dotnet Optimized for C, C++, C# or VB based projects 41 go Optimized for GO based projects 36 java Optimized for JAVA based projects 36 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 44 php Optimized for PHP based projects 39 python Optimized for PYTHON based projects 42 ruby Optimized for RUBY based projects 36 rust Optimized for RUST based projects 36 salesforce Optimized for Salesforce based projects 36 scala Optimized for SCALA based projects 36 terraform Optimized for TERRAFORM based projects 38","title":"MegaLinter Flavours"},{"location":"descriptors/markdown_markdown_table_prettify/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_markdown_table_prettify/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_markdown_table_prettify/#example-calls","text":"markdown-table-prettify --check myfile.md markdown-table-prettify myfile.md","title":"Example calls"},{"location":"descriptors/markdown_markdown_table_prettify/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): markdown-table-prettify","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown_markdownlint/","text":"markdownlint markdownlint documentation Version in MegaLinter: 0.32.2 Visit Official Web Site See How to configure markdownlint rules If custom .markdownlint.json config file is not found, .markdownlint.json will be used See How to disable markdownlint rules in files See Index of problems detected by markdownlint Configuration in MegaLinter Enable markdownlint by adding MARKDOWN_MARKDOWNLINT in ENABLE_LINTERS variable Disable markdownlint by adding MARKDOWN_MARKDOWNLINT in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWNLINT in APPLY_FIXES variable Variable Description Default value MARKDOWN_DEFAULT_STYLE For markdownlint to be active, MARKDOWN_DEFAULT_STYLE must be markdownlint markdownlint MARKDOWN_MARKDOWNLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_MARKDOWNLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWNLINT_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWNLINT_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWNLINT_CONFIG_FILE markdownlint configuration file name Use LINTER_DEFAULT to let the linter find it .markdownlint.json MARKDOWN_MARKDOWNLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS Run linter but consider errors as warnings true MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use markdownlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-node-markdownlint Visit Web Site Sublime Text SublimeLinter-contrib-markdownlint Visit Web Site vim coc-markdownlint Visit Web Site Visual Studio Code vscode-markdownlint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .md How the linting is performed markdownlint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls markdownlint myfile.md markdownlint -c .markdownlint.json myfile.md markdownlint --fix -c .markdownlint.json myfile.md Help content Usage: markdownlint [options] <files|directories|globs> MarkdownLint Command Line Interface Options: -V, --version output the version number -c, --config [configFile] configuration file (JSON, JSONC, JS, or YAML) -d, --dot include files/folders with a dot (for example `.github`) -f, --fix fix basic errors (does not work with STDIN) -i, --ignore [file|directory|glob] file(s) to ignore/exclude (default: []) -j, --json write issues in json format -o, --output [outputFile] write issues to file (no console) -p, --ignore-path [file] path to file with ignore pattern(s) -q, --quiet do not write issues to STDOUT -r, --rules [file|directory|glob|package] include custom rule files (default: []) -s, --stdin read from STDIN (does not work with files) --enable [rules...] Enable certain rules, e.g. --enable MD013 MD041 -- --disable [rules...] Disable certain rules, e.g. --disable MD013 MD041 -- -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): markdownlint-cli","title":"markdownlint"},{"location":"descriptors/markdown_markdownlint/#markdownlint","text":"","title":"markdownlint"},{"location":"descriptors/markdown_markdownlint/#markdownlint-documentation","text":"Version in MegaLinter: 0.32.2 Visit Official Web Site See How to configure markdownlint rules If custom .markdownlint.json config file is not found, .markdownlint.json will be used See How to disable markdownlint rules in files See Index of problems detected by markdownlint","title":"markdownlint documentation"},{"location":"descriptors/markdown_markdownlint/#configuration-in-megalinter","text":"Enable markdownlint by adding MARKDOWN_MARKDOWNLINT in ENABLE_LINTERS variable Disable markdownlint by adding MARKDOWN_MARKDOWNLINT in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_MARKDOWNLINT in APPLY_FIXES variable Variable Description Default value MARKDOWN_DEFAULT_STYLE For markdownlint to be active, MARKDOWN_DEFAULT_STYLE must be markdownlint markdownlint MARKDOWN_MARKDOWNLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_MARKDOWNLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_MARKDOWNLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_MARKDOWNLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files MARKDOWN_MARKDOWNLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_MARKDOWNLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_MARKDOWNLINT_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_MARKDOWNLINT_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_MARKDOWNLINT_CONFIG_FILE markdownlint configuration file name Use LINTER_DEFAULT to let the linter find it .markdownlint.json MARKDOWN_MARKDOWNLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS Run linter but consider errors as warnings true MARKDOWN_MARKDOWNLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/markdown_markdownlint/#ide-integration","text":"Use markdownlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-node-markdownlint Visit Web Site Sublime Text SublimeLinter-contrib-markdownlint Visit Web Site vim coc-markdownlint Visit Web Site Visual Studio Code vscode-markdownlint","title":"IDE Integration"},{"location":"descriptors/markdown_markdownlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/markdown_markdownlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_markdownlint/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_markdownlint/#how-the-linting-is-performed","text":"markdownlint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/markdown_markdownlint/#example-calls","text":"markdownlint myfile.md markdownlint -c .markdownlint.json myfile.md markdownlint --fix -c .markdownlint.json myfile.md","title":"Example calls"},{"location":"descriptors/markdown_markdownlint/#help-content","text":"Usage: markdownlint [options] <files|directories|globs> MarkdownLint Command Line Interface Options: -V, --version output the version number -c, --config [configFile] configuration file (JSON, JSONC, JS, or YAML) -d, --dot include files/folders with a dot (for example `.github`) -f, --fix fix basic errors (does not work with STDIN) -i, --ignore [file|directory|glob] file(s) to ignore/exclude (default: []) -j, --json write issues in json format -o, --output [outputFile] write issues to file (no console) -p, --ignore-path [file] path to file with ignore pattern(s) -q, --quiet do not write issues to STDOUT -r, --rules [file|directory|glob|package] include custom rule files (default: []) -s, --stdin read from STDIN (does not work with files) --enable [rules...] Enable certain rules, e.g. --enable MD013 MD041 -- --disable [rules...] Disable certain rules, e.g. --disable MD013 MD041 -- -h, --help display help for command","title":"Help content"},{"location":"descriptors/markdown_markdownlint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): markdownlint-cli","title":"Installation on mega-linter Docker image"},{"location":"descriptors/markdown_remark_lint/","text":"remark-lint This linter has been temporary disabled in this version remark-lint documentation Version in MegaLinter: 14.0.2 Visit Official Web Site See How to configure remark-lint rules If custom .remarkrc config file is not found, .remarkrc will be used See How to disable remark-lint rules in files See Index of problems detected by remark-lint Configuration in MegaLinter Enable remark-lint by adding MARKDOWN_REMARK_LINT in ENABLE_LINTERS variable Disable remark-lint by adding MARKDOWN_REMARK_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_REMARK_LINT in APPLY_FIXES variable Variable Description Default value MARKDOWN_DEFAULT_STYLE For remark-lint to be active, MARKDOWN_DEFAULT_STYLE must be remark-lint markdownlint MARKDOWN_REMARK_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_REMARK_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file MARKDOWN_REMARK_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_REMARK_LINT_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_REMARK_LINT_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_REMARK_LINT_CONFIG_FILE remark-lint configuration file name Use LINTER_DEFAULT to let the linter find it .remarkrc MARKDOWN_REMARK_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_REMARK_LINT_DISABLE_ERRORS Run linter but consider errors as warnings true MARKDOWN_REMARK_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use remark-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-remark Visit Web Site Sublime Text SublimeLinter-contrib-remark-lint Visit Web Site vim ale Visit Web Site Visual Studio Code vscode-remark-lint Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .md How the linting is performed remark-lint is called one time by identified file ( file CLI lint mode) Example calls remark --frail myfile.md remark --frail --rc-path .remarkrc myfile.md remark --frail -o --rc-path .remarkrc myfile.md Help content Usage: remark [options] [path | glob ...] Command line interface to inspect and change markdown files with remark Options: -h --help output usage information -v --version output version number -o --output [path] specify output location -r --rc-path <path> specify configuration file -i --ignore-path <path> specify ignore file -s --setting <settings> specify settings -e --ext <extensions> specify extensions -u --use <plugins> use plugins -w --watch watch for changes and reprocess -q --quiet output only warnings and errors -S --silent output only errors -f --frail exit with 1 on warnings -t --tree specify input and output as syntax tree --report <reporter> specify reporter --file-path <path> specify path to process as --ignore-path-resolve-from dir|cwd resolve patterns in `ignore-path` from its directory or cwd --ignore-pattern <globs> specify ignore patterns --silently-ignore do not fail when given ignored files --tree-in specify input as syntax tree --tree-out output syntax tree --inspect output formatted syntax tree --[no-]stdout specify writing to stdout (on by default) --[no-]color specify color in report (on by default) --[no-]config search for configuration files (on by default) --[no-]ignore search for ignore files (on by default) Examples: # Process `input.md` $ remark input.md -o output.md # Pipe $ remark < input.md > output.md # Rewrite all applicable files $ remark . -o Installation on mega-linter Docker image NPM packages (node.js): remark-cli remark-preset-lint-recommended","title":"remark-lint"},{"location":"descriptors/markdown_remark_lint/#remark-lint","text":"This linter has been temporary disabled in this version","title":"remark-lint"},{"location":"descriptors/markdown_remark_lint/#remark-lint-documentation","text":"Version in MegaLinter: 14.0.2 Visit Official Web Site See How to configure remark-lint rules If custom .remarkrc config file is not found, .remarkrc will be used See How to disable remark-lint rules in files See Index of problems detected by remark-lint","title":"remark-lint documentation"},{"location":"descriptors/markdown_remark_lint/#configuration-in-megalinter","text":"Enable remark-lint by adding MARKDOWN_REMARK_LINT in ENABLE_LINTERS variable Disable remark-lint by adding MARKDOWN_REMARK_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding MARKDOWN_REMARK_LINT in APPLY_FIXES variable Variable Description Default value MARKDOWN_DEFAULT_STYLE For remark-lint to be active, MARKDOWN_DEFAULT_STYLE must be remark-lint markdownlint MARKDOWN_REMARK_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" MARKDOWN_REMARK_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file MARKDOWN_REMARK_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file MARKDOWN_REMARK_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file MARKDOWN_REMARK_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\"] MARKDOWN_REMARK_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file MARKDOWN_REMARK_LINT_PRE_COMMANDS List of bash commands to run before the linter None MARKDOWN_REMARK_LINT_POST_COMMANDS List of bash commands to run after the linter None MARKDOWN_REMARK_LINT_CONFIG_FILE remark-lint configuration file name Use LINTER_DEFAULT to let the linter find it .remarkrc MARKDOWN_REMARK_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules MARKDOWN_REMARK_LINT_DISABLE_ERRORS Run linter but consider errors as warnings true MARKDOWN_REMARK_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/markdown_remark_lint/#ide-integration","text":"Use remark-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-remark Visit Web Site Sublime Text SublimeLinter-contrib-remark-lint Visit Web Site vim ale Visit Web Site Visual Studio Code vscode-remark-lint Visit Web Site","title":"IDE Integration"},{"location":"descriptors/markdown_remark_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/markdown_remark_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/markdown_remark_lint/#how-are-identified-applicable-files","text":"File extensions: .md","title":"How are identified applicable files"},{"location":"descriptors/markdown_remark_lint/#how-the-linting-is-performed","text":"remark-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/markdown_remark_lint/#example-calls","text":"remark --frail myfile.md remark --frail --rc-path .remarkrc myfile.md remark --frail -o --rc-path .remarkrc myfile.md","title":"Example calls"},{"location":"descriptors/markdown_remark_lint/#help-content","text":"Usage: remark [options] [path | glob ...] Command line interface to inspect and change markdown files with remark Options: -h --help output usage information -v --version output version number -o --output [path] specify output location -r --rc-path <path> specify configuration file -i --ignore-path <path> specify ignore file -s --setting <settings> specify settings -e --ext <extensions> specify extensions -u --use <plugins> use plugins -w --watch watch for changes and reprocess -q --quiet output only warnings and errors -S --silent output only errors -f --frail exit with 1 on warnings -t --tree specify input and output as syntax tree --report <reporter> specify reporter --file-path <path> specify path to process as --ignore-path-resolve-from dir|cwd resolve patterns in `ignore-path` from its directory or cwd --ignore-pattern <globs> specify ignore patterns --silently-ignore do not fail when given ignored files --tree-in specify input as syntax tree --tree-out output syntax tree --inspect output formatted syntax tree --[no-]stdout specify writing to stdout (on by default) --[no-]color specify color in report (on by default) --[no-]config search for configuration files (on by default) --[no-]ignore search for ignore files (on by default) Examples: # Process `input.md` $ remark input.md -o output.md # Pipe $ remark < input.md > output.md # Rewrite all applicable files $ remark . -o","title":"Help content"},{"location":"descriptors/markdown_remark_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): remark-cli remark-preset-lint-recommended","title":"Installation on mega-linter Docker image"},{"location":"descriptors/openapi/","text":"OPENAPI Linters Linter Configuration key Status spectral OPENAPI Linted files File extensions: .yml .yaml .json Detected file content: \"openapi\": \"swagger\": openapi: swagger: Configuration in MegaLinter Variable Description Default value OPENAPI_FILTER_REGEX_INCLUDE Custom regex including filter OPENAPI_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All OPENAPI linters"},{"location":"descriptors/openapi/#openapi","text":"","title":"OPENAPI"},{"location":"descriptors/openapi/#linters","text":"Linter Configuration key Status spectral OPENAPI","title":"Linters"},{"location":"descriptors/openapi/#linted-files","text":"File extensions: .yml .yaml .json Detected file content: \"openapi\": \"swagger\": openapi: swagger:","title":"Linted files"},{"location":"descriptors/openapi/#configuration-in-megalinter","text":"Variable Description Default value OPENAPI_FILTER_REGEX_INCLUDE Custom regex including filter OPENAPI_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/openapi_spectral/","text":"spectral documentation Version in MegaLinter: 5.9.2 Visit Official Web Site See How to configure spectral rules If custom .openapirc.yml config file is not found, .openapirc.yml will be used See Index of problems detected by spectral Configuration in MegaLinter Enable spectral by adding OPENAPI_SPECTRAL in ENABLE_LINTERS variable Disable spectral by adding OPENAPI_SPECTRAL in DISABLE_LINTERS variable Variable Description Default value OPENAPI_SPECTRAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file OPENAPI_SPECTRAL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file OPENAPI_SPECTRAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] OPENAPI_SPECTRAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file OPENAPI_SPECTRAL_PRE_COMMANDS List of bash commands to run before the linter None OPENAPI_SPECTRAL_POST_COMMANDS List of bash commands to run after the linter None OPENAPI_SPECTRAL_CONFIG_FILE spectral configuration file name Use LINTER_DEFAULT to let the linter find it .openapirc.yml OPENAPI_SPECTRAL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules OPENAPI_SPECTRAL_DISABLE_ERRORS Run linter but consider errors as warnings false OPENAPI_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use spectral in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install stoplight Native integration Visit Web Site Visual Studio Code vscode-spectral Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .yml , .yaml , .json Detected file content (regex): \"openapi\": , \"swagger\": , openapi: , swagger: How the linting is performed spectral is called one time by identified file ( file CLI lint mode) Example calls spectral lint myfile.yml spectral lint -r .openapirc.yml myfile.yml Help content spectral lint [documents..] lint JSON/YAML documents from files or URLs Positionals: documents Location of JSON/YAML documents. Can be either a file, a glob or fetchable resource(s) on the web. [array] [default: []] Options: --version Show version number [boolean] --help Show help [boolean] --encoding, -e text encoding to use [string] [default: \"utf8\"] --format, -f formatter to use for outputting results [string] [choices: \"json\", \"stylish\", \"junit\", \"html\", \"text\", \"teamcity\"] [default: \"stylish\"] --output, -o output to a file instead of stdout [string] --resolver path to custom json-ref-resolver instance [string] --ruleset, -r path/URL to a ruleset file [string] --skip-rule, -s ignore certain rules if they are causing trouble [string] --fail-severity, -F results of this level or above will trigger a failure exit code [string] [choices: \"error\", \"warn\", \"info\", \"hint\"] [default: \"error\"] --display-only-failures, -D only output results equal to or greater than --fail-severity [boolean] [default: false] --ignore-unknown-format do not warn about unmatched formats [boolean] [default: false] --show-unmatched-globs show unmatched glob patterns [deprecated: use --fail-on-unmatched-globs] [boolean] [default: false] --fail-on-unmatched-globs fail on unmatched glob patterns [boolean] [default: false] --verbose, -v increase verbosity [boolean] --quiet, -q no logging - output only [boolean] Installation on mega-linter Docker image NPM packages (node.js): @stoplight/spectral@5.6.0","title":"spectral"},{"location":"descriptors/openapi_spectral/#spectral-documentation","text":"Version in MegaLinter: 5.9.2 Visit Official Web Site See How to configure spectral rules If custom .openapirc.yml config file is not found, .openapirc.yml will be used See Index of problems detected by spectral","title":"spectral documentation"},{"location":"descriptors/openapi_spectral/#configuration-in-megalinter","text":"Enable spectral by adding OPENAPI_SPECTRAL in ENABLE_LINTERS variable Disable spectral by adding OPENAPI_SPECTRAL in DISABLE_LINTERS variable Variable Description Default value OPENAPI_SPECTRAL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" OPENAPI_SPECTRAL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file OPENAPI_SPECTRAL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file OPENAPI_SPECTRAL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file OPENAPI_SPECTRAL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\", \".json\"] OPENAPI_SPECTRAL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file OPENAPI_SPECTRAL_PRE_COMMANDS List of bash commands to run before the linter None OPENAPI_SPECTRAL_POST_COMMANDS List of bash commands to run after the linter None OPENAPI_SPECTRAL_CONFIG_FILE spectral configuration file name Use LINTER_DEFAULT to let the linter find it .openapirc.yml OPENAPI_SPECTRAL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules OPENAPI_SPECTRAL_DISABLE_ERRORS Run linter but consider errors as warnings false OPENAPI_SPECTRAL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/openapi_spectral/#ide-integration","text":"Use spectral in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install stoplight Native integration Visit Web Site Visual Studio Code vscode-spectral Visit Web Site","title":"IDE Integration"},{"location":"descriptors/openapi_spectral/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/openapi_spectral/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/openapi_spectral/#how-are-identified-applicable-files","text":"File extensions: .yml , .yaml , .json Detected file content (regex): \"openapi\": , \"swagger\": , openapi: , swagger:","title":"How are identified applicable files"},{"location":"descriptors/openapi_spectral/#how-the-linting-is-performed","text":"spectral is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/openapi_spectral/#example-calls","text":"spectral lint myfile.yml spectral lint -r .openapirc.yml myfile.yml","title":"Example calls"},{"location":"descriptors/openapi_spectral/#help-content","text":"spectral lint [documents..] lint JSON/YAML documents from files or URLs Positionals: documents Location of JSON/YAML documents. Can be either a file, a glob or fetchable resource(s) on the web. [array] [default: []] Options: --version Show version number [boolean] --help Show help [boolean] --encoding, -e text encoding to use [string] [default: \"utf8\"] --format, -f formatter to use for outputting results [string] [choices: \"json\", \"stylish\", \"junit\", \"html\", \"text\", \"teamcity\"] [default: \"stylish\"] --output, -o output to a file instead of stdout [string] --resolver path to custom json-ref-resolver instance [string] --ruleset, -r path/URL to a ruleset file [string] --skip-rule, -s ignore certain rules if they are causing trouble [string] --fail-severity, -F results of this level or above will trigger a failure exit code [string] [choices: \"error\", \"warn\", \"info\", \"hint\"] [default: \"error\"] --display-only-failures, -D only output results equal to or greater than --fail-severity [boolean] [default: false] --ignore-unknown-format do not warn about unmatched formats [boolean] [default: false] --show-unmatched-globs show unmatched glob patterns [deprecated: use --fail-on-unmatched-globs] [boolean] [default: false] --fail-on-unmatched-globs fail on unmatched glob patterns [boolean] [default: false] --verbose, -v increase verbosity [boolean] --quiet, -q no logging - output only [boolean]","title":"Help content"},{"location":"descriptors/openapi_spectral/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): @stoplight/spectral@5.6.0","title":"Installation on mega-linter Docker image"},{"location":"descriptors/perl/","text":"PERL Linters Linter Configuration key Status perlcritic PERL Linted files File extensions: .pl .pm .t `` Detected file content: #!/usr/bin/env perl #!/usr/bin/perl Configuration in MegaLinter Variable Description Default value PERL_FILTER_REGEX_INCLUDE Custom regex including filter PERL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation APK packages (Linux): perl perl-dev","title":"All PERL linters"},{"location":"descriptors/perl/#perl","text":"","title":"PERL"},{"location":"descriptors/perl/#linters","text":"Linter Configuration key Status perlcritic PERL","title":"Linters"},{"location":"descriptors/perl/#linted-files","text":"File extensions: .pl .pm .t `` Detected file content: #!/usr/bin/env perl #!/usr/bin/perl","title":"Linted files"},{"location":"descriptors/perl/#configuration-in-megalinter","text":"Variable Description Default value PERL_FILTER_REGEX_INCLUDE Custom regex including filter PERL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/perl/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/perl/#installation","text":"APK packages (Linux): perl perl-dev","title":"Installation"},{"location":"descriptors/perl_perlcritic/","text":"perlcritic documentation Version in MegaLinter: 1.140 Visit Official Web Site See How to configure perlcritic rules See How to disable perlcritic rules in files See Index of problems detected by perlcritic Configuration in MegaLinter Enable perlcritic by adding PERL_PERLCRITIC in ENABLE_LINTERS variable Disable perlcritic by adding PERL_PERLCRITIC in DISABLE_LINTERS variable Variable Description Default value PERL_PERLCRITIC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PERL_PERLCRITIC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PERL_PERLCRITIC_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PERL_PERLCRITIC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pl\", \".pm\", \".t\", \"\"] PERL_PERLCRITIC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PERL_PERLCRITIC_PRE_COMMANDS List of bash commands to run before the linter None PERL_PERLCRITIC_POST_COMMANDS List of bash commands to run after the linter None PERL_PERLCRITIC_DISABLE_ERRORS Run linter but consider errors as warnings false PERL_PERLCRITIC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .pl , .pm , .t , `` Detected file content (regex): #!/usr/bin/env perl , #!/usr/bin/perl How the linting is performed perlcritic is called one time by identified file ( file CLI lint mode) Example calls perlcritic myfile.pl Help content Usage: perlcritic [-12345 | --brutal | --cruel | --harsh | --stern | --gentle] [--severity number | name] [{-p | --profile} file | --noprofile] [--top [ number ]] [--theme expression] [--include pattern] [--exclude pattern] [{-s | --single-policy} pattern] [--only | --noonly] [--profile-strictness {warn|fatal|quiet}] [--force | --noforce] [--statistics] [--statistics-only] [--count | -C] [--verbose {number | format}] [--allow-unsafe] [--color | --nocolor] [--pager pager] [--quiet] [--color-severity-highest color_specification] [--color-severity-high color_specification] [--color-severity-medium color_specification] [--color-severity-low color_specification] [--color-severity-lowest color_specification] [--files-with-violations | -l] [--files-without-violations | -L] [--program-extensions file_name_extension] {FILE | DIRECTORY | STDIN} perlcritic --profile-proto perlcritic { --list | --list-enabled | --list-themes | --doc pattern [...] } perlcritic { --help | --options | --man | --version } Installation on mega-linter Docker image Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sL https://cpanmin.us/ | perl - -nq --no-wget Perl::Critic","title":"perlcritic"},{"location":"descriptors/perl_perlcritic/#perlcritic-documentation","text":"Version in MegaLinter: 1.140 Visit Official Web Site See How to configure perlcritic rules See How to disable perlcritic rules in files See Index of problems detected by perlcritic","title":"perlcritic documentation"},{"location":"descriptors/perl_perlcritic/#configuration-in-megalinter","text":"Enable perlcritic by adding PERL_PERLCRITIC in ENABLE_LINTERS variable Disable perlcritic by adding PERL_PERLCRITIC in DISABLE_LINTERS variable Variable Description Default value PERL_PERLCRITIC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PERL_PERLCRITIC_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PERL_PERLCRITIC_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PERL_PERLCRITIC_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PERL_PERLCRITIC_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pl\", \".pm\", \".t\", \"\"] PERL_PERLCRITIC_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PERL_PERLCRITIC_PRE_COMMANDS List of bash commands to run before the linter None PERL_PERLCRITIC_POST_COMMANDS List of bash commands to run after the linter None PERL_PERLCRITIC_DISABLE_ERRORS Run linter but consider errors as warnings false PERL_PERLCRITIC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/perl_perlcritic/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/perl_perlcritic/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/perl_perlcritic/#how-are-identified-applicable-files","text":"File extensions: .pl , .pm , .t , `` Detected file content (regex): #!/usr/bin/env perl , #!/usr/bin/perl","title":"How are identified applicable files"},{"location":"descriptors/perl_perlcritic/#how-the-linting-is-performed","text":"perlcritic is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/perl_perlcritic/#example-calls","text":"perlcritic myfile.pl","title":"Example calls"},{"location":"descriptors/perl_perlcritic/#help-content","text":"Usage: perlcritic [-12345 | --brutal | --cruel | --harsh | --stern | --gentle] [--severity number | name] [{-p | --profile} file | --noprofile] [--top [ number ]] [--theme expression] [--include pattern] [--exclude pattern] [{-s | --single-policy} pattern] [--only | --noonly] [--profile-strictness {warn|fatal|quiet}] [--force | --noforce] [--statistics] [--statistics-only] [--count | -C] [--verbose {number | format}] [--allow-unsafe] [--color | --nocolor] [--pager pager] [--quiet] [--color-severity-highest color_specification] [--color-severity-high color_specification] [--color-severity-medium color_specification] [--color-severity-low color_specification] [--color-severity-lowest color_specification] [--files-with-violations | -l] [--files-without-violations | -L] [--program-extensions file_name_extension] {FILE | DIRECTORY | STDIN} perlcritic --profile-proto perlcritic { --list | --list-enabled | --list-themes | --doc pattern [...] } perlcritic { --help | --options | --man | --version }","title":"Help content"},{"location":"descriptors/perl_perlcritic/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl --retry 5 --retry-delay 5 -sL https://cpanmin.us/ | perl - -nq --no-wget Perl::Critic","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php/","text":"PHP Linters Linter Configuration key Status phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP Linted files File extensions: .php Configuration in MegaLinter Variable Description Default value PHP_FILTER_REGEX_INCLUDE Custom regex including filter PHP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 APK packages (Linux): gnupg php7 php7-phar php7-json php7-mbstring php7-xmlwriter php7-tokenizer php7-ctype php7-curl php7-dom php7-simplexml php8 php8-phar php8-mbstring php8-xmlwriter php8-tokenizer php8-ctype php8-curl php8-dom php8-simplexml composer dpkg","title":"All PHP linters"},{"location":"descriptors/php/#php","text":"","title":"PHP"},{"location":"descriptors/php/#linters","text":"Linter Configuration key Status phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP","title":"Linters"},{"location":"descriptors/php/#linted-files","text":"File extensions: .php","title":"Linted files"},{"location":"descriptors/php/#configuration-in-megalinter","text":"Variable Description Default value PHP_FILTER_REGEX_INCLUDE Custom regex including filter PHP_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/php/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php/#installation","text":"Dockerfile commands : RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 APK packages (Linux): gnupg php7 php7-phar php7-json php7-mbstring php7-xmlwriter php7-tokenizer php7-ctype php7-curl php7-dom php7-simplexml php8 php8-phar php8-mbstring php8-xmlwriter php8-tokenizer php8-ctype php8-curl php8-dom php8-simplexml composer dpkg","title":"Installation"},{"location":"descriptors/php_php/","text":"php documentation Version in MegaLinter: 7.4.26 Visit Official Web Site Configuration in MegaLinter Enable php by adding PHP_BUILTIN in ENABLE_LINTERS variable Disable php by adding PHP_BUILTIN in DISABLE_LINTERS variable Variable Description Default value PHP_BUILTIN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_BUILTIN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_BUILTIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_BUILTIN_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PHP_BUILTIN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_BUILTIN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_BUILTIN_PRE_COMMANDS List of bash commands to run before the linter None PHP_BUILTIN_POST_COMMANDS List of bash commands to run after the linter None PHP_BUILTIN_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_BUILTIN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 php Optimized for PHP based projects 46 Behind the scenes How are identified applicable files File extensions: .php How the linting is performed php is called one time by identified file Example calls php -l myfile.js Help content Usage: php [options] [-f] <file> [--] [args...] php [options] -r <code> [--] [args...] php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...] php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...] php [options] -S <addr>:<port> [-t docroot] [router] php [options] -- [args...] php [options] -a -a Run as interactive shell -c <path>|<file> Look for php.ini file in this directory -n No configuration (ini) files will be used -d foo[=bar] Define INI entry foo with value 'bar' -e Generate extended information for debugger/profiler -f <file> Parse and execute <file>. -h This help -i PHP information -l Syntax check only (lint) -m Show compiled in modules -r <code> Run PHP <code> without using script tags <?..?> -B <begin_code> Run PHP <begin_code> before processing input lines -R <code> Run PHP <code> for every input line -F <file> Parse and execute <file> for every input line -E <end_code> Run PHP <end_code> after processing all input lines -H Hide any passed arguments from external tools. -S <addr>:<port> Run with built-in web server. -t <docroot> Specify document root <docroot> for built-in web server. -s Output HTML syntax highlighted source. -v Version number -w Output source with stripped comments and whitespace. -z <file> Load Zend extension <file>. args... Arguments passed to script. Use -- args when first argument starts with - or script is read from stdin --ini Show configuration file names --rf <name> Show information about function <name>. --rc <name> Show information about class <name>. --re <name> Show information about extension <name>. --rz <name> Show information about Zend extension <name>. --ri <name> Show configuration for extension <name>. Installation on mega-linter Docker image","title":"Php php"},{"location":"descriptors/php_php/#php-documentation","text":"Version in MegaLinter: 7.4.26 Visit Official Web Site","title":"php documentation"},{"location":"descriptors/php_php/#configuration-in-megalinter","text":"Enable php by adding PHP_BUILTIN in ENABLE_LINTERS variable Disable php by adding PHP_BUILTIN in DISABLE_LINTERS variable Variable Description Default value PHP_BUILTIN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_BUILTIN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_BUILTIN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_BUILTIN_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PHP_BUILTIN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_BUILTIN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_BUILTIN_PRE_COMMANDS List of bash commands to run before the linter None PHP_BUILTIN_POST_COMMANDS List of bash commands to run after the linter None PHP_BUILTIN_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_BUILTIN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/php_php/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 97 php Optimized for PHP based projects 46","title":"MegaLinter Flavours"},{"location":"descriptors/php_php/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_php/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_php/#how-the-linting-is-performed","text":"php is called one time by identified file","title":"How the linting is performed"},{"location":"descriptors/php_php/#example-calls","text":"php -l myfile.js","title":"Example calls"},{"location":"descriptors/php_php/#help-content","text":"Usage: php [options] [-f] <file> [--] [args...] php [options] -r <code> [--] [args...] php [options] [-B <begin_code>] -R <code> [-E <end_code>] [--] [args...] php [options] [-B <begin_code>] -F <file> [-E <end_code>] [--] [args...] php [options] -S <addr>:<port> [-t docroot] [router] php [options] -- [args...] php [options] -a -a Run as interactive shell -c <path>|<file> Look for php.ini file in this directory -n No configuration (ini) files will be used -d foo[=bar] Define INI entry foo with value 'bar' -e Generate extended information for debugger/profiler -f <file> Parse and execute <file>. -h This help -i PHP information -l Syntax check only (lint) -m Show compiled in modules -r <code> Run PHP <code> without using script tags <?..?> -B <begin_code> Run PHP <begin_code> before processing input lines -R <code> Run PHP <code> for every input line -F <file> Parse and execute <file> for every input line -E <end_code> Run PHP <end_code> after processing all input lines -H Hide any passed arguments from external tools. -S <addr>:<port> Run with built-in web server. -t <docroot> Specify document root <docroot> for built-in web server. -s Output HTML syntax highlighted source. -v Version number -w Output source with stripped comments and whitespace. -z <file> Load Zend extension <file>. args... Arguments passed to script. Use -- args when first argument starts with - or script is read from stdin --ini Show configuration file names --rf <name> Show information about function <name>. --rc <name> Show information about class <name>. --re <name> Show information about extension <name>. --rz <name> Show information about Zend extension <name>. --ri <name> Show configuration for extension <name>.","title":"Help content"},{"location":"descriptors/php_php/#installation-on-mega-linter-docker-image","text":"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_phpcs/","text":"phpcs phpcs documentation Version in MegaLinter: 3.7.1 Visit Official Web Site See How to configure phpcs rules If custom phpcs.xml config file is not found, phpcs.xml will be used See How to disable phpcs rules in files Configuration in MegaLinter Enable phpcs by adding PHP_PHPCS in ENABLE_LINTERS variable Disable phpcs by adding PHP_PHPCS in DISABLE_LINTERS variable Variable Description Default value PHP_PHPCS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPCS_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PHPCS_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PHPCS_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PHPCS_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPCS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPCS_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPCS_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPCS_CONFIG_FILE phpcs configuration file name Use LINTER_DEFAULT to let the linter find it phpcs.xml PHP_PHPCS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPCS_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PHPCS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use phpcs in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-phpcs Visit Web Site Atom atom-phpcs Visit Web Site IDEA phpcs Visit Web Site Sublime Text sublime-phpcs Visit Web Site Sublime Text SublimeLinter-phpcs Visit Web Site Visual Studio Code vscode-phpcs MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50 Behind the scenes How are identified applicable files File extensions: .php How the linting is performed phpcs is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls phpcs myfile.php phpcs --standard=phpcs.xml myfile.php phpcs --standard=phpcs.xml mydir/ myfile.php Help content Usage: phpcs [-nwlsaepqvi] [-d key[=value]] [--colors] [--no-colors] [--cache[=<cacheFile>]] [--no-cache] [--tab-width=<tabWidth>] [--report=<report>] [--report-file=<reportFile>] [--report-<report>=<reportFile>] [--report-width=<reportWidth>] [--basepath=<basepath>] [--bootstrap=<bootstrap>] [--severity=<severity>] [--error-severity=<severity>] [--warning-severity=<severity>] [--runtime-set key value] [--config-set key value] [--config-delete key] [--config-show] [--standard=<standard>] [--sniffs=<sniffs>] [--exclude=<sniffs>] [--encoding=<encoding>] [--parallel=<processes>] [--generator=<generator>] [--extensions=<extensions>] [--ignore=<patterns>] [--ignore-annotations] [--stdin-path=<stdinPath>] [--file-list=<fileList>] [--filter=<filter>] <file> - ... - Check STDIN instead of local files and directories -n Do not print warnings (shortcut for --warning-severity=0) -w Print both warnings and errors (this is the default) -l Local directory only, no recursion -s Show sniff codes in all reports -a Run interactively -e Explain a standard by showing the sniffs it includes -p Show progress of the run -q Quiet mode; disables progress and verbose output -m Stop error messages from being recorded (saves a lot of memory, but stops many reports from being used) -v Print processed files -vv Print ruleset and token output -vvv Print sniff processing information -i Show a list of installed coding standards -d Set the [key] php.ini value to [value] or [true] if value is omitted --help Print this help message --version Print version information --colors Use colors in output --no-colors Do not use colors in output (this is the default) --cache Cache results between runs --no-cache Do not cache results between runs (this is the default) --ignore-annotations Ignore all phpcs: annotations in code comments <cacheFile> Use a specific file for caching (uses a temporary file by default) <basepath> A path to strip from the front of file paths inside reports <bootstrap> A comma separated list of files to run before processing begins <encoding> The encoding of the files being checked (default is utf-8) <extensions> A comma separated list of file extensions to check The type of the file can be specified using: ext/type e.g., module/php,es/js <file> One or more files and/or directories to check <fileList> A file containing a list of files and/or directories to check (one per line) <filter> Use either the \"gitmodified\" or \"gitstaged\" filter, or specify the path to a custom filter class <generator> Use either the \"HTML\", \"Markdown\" or \"Text\" generator (forces documentation generation instead of checking) <patterns> A comma separated list of patterns to ignore files and directories <processes> How many files should be checked simultaneously (default is 1) <report> Print either the \"full\", \"xml\", \"checkstyle\", \"csv\" \"json\", \"junit\", \"emacs\", \"source\", \"summary\", \"diff\" \"svnblame\", \"gitblame\", \"hgblame\" or \"notifysend\" report, or specify the path to a custom report class (the \"full\" report is printed by default) <reportFile> Write the report to the specified file path <reportWidth> How many columns wide screen reports should be printed or set to \"auto\" to use current screen width, where supported <severity> The minimum severity required to display an error or warning <sniffs> A comma separated list of sniff codes to include or exclude from checking (all sniffs must be part of the specified standard) <standard> The name or path of the coding standard to use <stdinPath> If processing STDIN, the file path that STDIN will be processed as <tabWidth> The number of spaces each tab represents Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN phive --no-progress install phpcs -g --trust-gpg-keys 31C7E470E2138192","title":"phpcs"},{"location":"descriptors/php_phpcs/#phpcs","text":"","title":"phpcs"},{"location":"descriptors/php_phpcs/#phpcs-documentation","text":"Version in MegaLinter: 3.7.1 Visit Official Web Site See How to configure phpcs rules If custom phpcs.xml config file is not found, phpcs.xml will be used See How to disable phpcs rules in files","title":"phpcs documentation"},{"location":"descriptors/php_phpcs/#configuration-in-megalinter","text":"Enable phpcs by adding PHP_PHPCS in ENABLE_LINTERS variable Disable phpcs by adding PHP_PHPCS in DISABLE_LINTERS variable Variable Description Default value PHP_PHPCS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPCS_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PHPCS_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PHPCS_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PHPCS_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPCS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPCS_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPCS_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPCS_CONFIG_FILE phpcs configuration file name Use LINTER_DEFAULT to let the linter find it phpcs.xml PHP_PHPCS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPCS_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PHPCS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/php_phpcs/#ide-integration","text":"Use phpcs in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-phpcs Visit Web Site Atom atom-phpcs Visit Web Site IDEA phpcs Visit Web Site Sublime Text sublime-phpcs Visit Web Site Sublime Text SublimeLinter-phpcs Visit Web Site Visual Studio Code vscode-phpcs","title":"IDE Integration"},{"location":"descriptors/php_phpcs/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/php_phpcs/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_phpcs/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_phpcs/#how-the-linting-is-performed","text":"phpcs is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/php_phpcs/#example-calls","text":"phpcs myfile.php phpcs --standard=phpcs.xml myfile.php phpcs --standard=phpcs.xml mydir/ myfile.php","title":"Example calls"},{"location":"descriptors/php_phpcs/#help-content","text":"Usage: phpcs [-nwlsaepqvi] [-d key[=value]] [--colors] [--no-colors] [--cache[=<cacheFile>]] [--no-cache] [--tab-width=<tabWidth>] [--report=<report>] [--report-file=<reportFile>] [--report-<report>=<reportFile>] [--report-width=<reportWidth>] [--basepath=<basepath>] [--bootstrap=<bootstrap>] [--severity=<severity>] [--error-severity=<severity>] [--warning-severity=<severity>] [--runtime-set key value] [--config-set key value] [--config-delete key] [--config-show] [--standard=<standard>] [--sniffs=<sniffs>] [--exclude=<sniffs>] [--encoding=<encoding>] [--parallel=<processes>] [--generator=<generator>] [--extensions=<extensions>] [--ignore=<patterns>] [--ignore-annotations] [--stdin-path=<stdinPath>] [--file-list=<fileList>] [--filter=<filter>] <file> - ... - Check STDIN instead of local files and directories -n Do not print warnings (shortcut for --warning-severity=0) -w Print both warnings and errors (this is the default) -l Local directory only, no recursion -s Show sniff codes in all reports -a Run interactively -e Explain a standard by showing the sniffs it includes -p Show progress of the run -q Quiet mode; disables progress and verbose output -m Stop error messages from being recorded (saves a lot of memory, but stops many reports from being used) -v Print processed files -vv Print ruleset and token output -vvv Print sniff processing information -i Show a list of installed coding standards -d Set the [key] php.ini value to [value] or [true] if value is omitted --help Print this help message --version Print version information --colors Use colors in output --no-colors Do not use colors in output (this is the default) --cache Cache results between runs --no-cache Do not cache results between runs (this is the default) --ignore-annotations Ignore all phpcs: annotations in code comments <cacheFile> Use a specific file for caching (uses a temporary file by default) <basepath> A path to strip from the front of file paths inside reports <bootstrap> A comma separated list of files to run before processing begins <encoding> The encoding of the files being checked (default is utf-8) <extensions> A comma separated list of file extensions to check The type of the file can be specified using: ext/type e.g., module/php,es/js <file> One or more files and/or directories to check <fileList> A file containing a list of files and/or directories to check (one per line) <filter> Use either the \"gitmodified\" or \"gitstaged\" filter, or specify the path to a custom filter class <generator> Use either the \"HTML\", \"Markdown\" or \"Text\" generator (forces documentation generation instead of checking) <patterns> A comma separated list of patterns to ignore files and directories <processes> How many files should be checked simultaneously (default is 1) <report> Print either the \"full\", \"xml\", \"checkstyle\", \"csv\" \"json\", \"junit\", \"emacs\", \"source\", \"summary\", \"diff\" \"svnblame\", \"gitblame\", \"hgblame\" or \"notifysend\" report, or specify the path to a custom report class (the \"full\" report is printed by default) <reportFile> Write the report to the specified file path <reportWidth> How many columns wide screen reports should be printed or set to \"auto\" to use current screen width, where supported <severity> The minimum severity required to display an error or warning <sniffs> A comma separated list of sniff codes to include or exclude from checking (all sniffs must be part of the specified standard) <standard> The name or path of the coding standard to use <stdinPath> If processing STDIN, the file path that STDIN will be processed as <tabWidth> The number of spaces each tab represents","title":"Help content"},{"location":"descriptors/php_phpcs/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN phive --no-progress install phpcs -g --trust-gpg-keys 31C7E470E2138192","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_phplint/","text":"phplint phplint documentation Version in MegaLinter: 3.0 Visit Official Web Site If custom .phplint.yml config file is not found, .phplint.yml will be used Configuration in MegaLinter Enable phplint by adding PHP_PHPLINT in ENABLE_LINTERS variable Disable phplint by adding PHP_PHPLINT in DISABLE_LINTERS variable Variable Description Default value PHP_PHPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PHPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PHPLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PHPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPLINT_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPLINT_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPLINT_CONFIG_FILE phplint configuration file name Use LINTER_DEFAULT to let the linter find it .phplint.yml PHP_PHPLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPLINT_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PHPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50 Behind the scenes How are identified applicable files File extensions: .php How the linting is performed phplint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls phplint myfile.php phplint mydir phplint mydir myfile.php phplint mydir -vvv Help content Description: Lint something Usage: phplint [options] [--] [<path>...] Arguments: path Path to file or directory to lint. Options: --exclude=EXCLUDE Path to file or directory to exclude from linting (multiple values allowed) --extensions=EXTENSIONS Check only files with selected extensions (default: php) -j, --jobs=JOBS Number of parraled jobs to run (default: 5) -c, --configuration=CONFIGURATION Read configuration from config file (default: ./.phplint.yml). --no-configuration Ignore default configuration file (default: ./.phplint.yml). --no-cache Ignore cached data. --cache=CACHE Path to the cache file. --no-progress Hide the progress output. --json[=JSON] Path to store JSON results. --xml[=XML] Path to store JUnit XML results. -w, --warning Also show warnings. -q, --quiet Do not output any message -h, --help Display help for the given command. When no command is given display help for the list command -V, --version Display this application version --ansi|--no-ansi Force (or disable --no-ansi) ANSI output -n, --no-interaction Do not ask any interactive question -nf, --no-files-exit-code Throw error if no files processed. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN composer global require --ignore-platform-reqs overtrue/phplint ^3.0 \\ && composer global config bin-dir --absolute RUN wget --tries=5 -q -O phplint.phar https://github.com/overtrue/phplint/releases/download/3.1.1/phplint.phar \\ && chmod +x phplint.phar \\ && mv phplint.phar /usr/local/bin/phplint","title":"phplint"},{"location":"descriptors/php_phplint/#phplint","text":"","title":"phplint"},{"location":"descriptors/php_phplint/#phplint-documentation","text":"Version in MegaLinter: 3.0 Visit Official Web Site If custom .phplint.yml config file is not found, .phplint.yml will be used","title":"phplint documentation"},{"location":"descriptors/php_phplint/#configuration-in-megalinter","text":"Enable phplint by adding PHP_PHPLINT in ENABLE_LINTERS variable Disable phplint by adding PHP_PHPLINT in DISABLE_LINTERS variable Variable Description Default value PHP_PHPLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PHPLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PHPLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PHPLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPLINT_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPLINT_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPLINT_CONFIG_FILE phplint configuration file name Use LINTER_DEFAULT to let the linter find it .phplint.yml PHP_PHPLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPLINT_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PHPLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/php_phplint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/php_phplint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_phplint/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_phplint/#how-the-linting-is-performed","text":"phplint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/php_phplint/#example-calls","text":"phplint myfile.php phplint mydir phplint mydir myfile.php phplint mydir -vvv","title":"Example calls"},{"location":"descriptors/php_phplint/#help-content","text":"Description: Lint something Usage: phplint [options] [--] [<path>...] Arguments: path Path to file or directory to lint. Options: --exclude=EXCLUDE Path to file or directory to exclude from linting (multiple values allowed) --extensions=EXTENSIONS Check only files with selected extensions (default: php) -j, --jobs=JOBS Number of parraled jobs to run (default: 5) -c, --configuration=CONFIGURATION Read configuration from config file (default: ./.phplint.yml). --no-configuration Ignore default configuration file (default: ./.phplint.yml). --no-cache Ignore cached data. --cache=CACHE Path to the cache file. --no-progress Hide the progress output. --json[=JSON] Path to store JSON results. --xml[=XML] Path to store JUnit XML results. -w, --warning Also show warnings. -q, --quiet Do not output any message -h, --help Display help for the given command. When no command is given display help for the list command -V, --version Display this application version --ansi|--no-ansi Force (or disable --no-ansi) ANSI output -n, --no-interaction Do not ask any interactive question -nf, --no-files-exit-code Throw error if no files processed. -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug","title":"Help content"},{"location":"descriptors/php_phplint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN composer global require --ignore-platform-reqs overtrue/phplint ^3.0 \\ && composer global config bin-dir --absolute RUN wget --tries=5 -q -O phplint.phar https://github.com/overtrue/phplint/releases/download/3.1.1/phplint.phar \\ && chmod +x phplint.phar \\ && mv phplint.phar /usr/local/bin/phplint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_phpstan/","text":"phpstan phpstan documentation Version in MegaLinter: 1.8.6 Visit Official Web Site See How to configure phpstan rules If custom phpstan.neon.dist config file is not found, phpstan.neon.dist will be used See How to disable phpstan rules in files Configuration in MegaLinter Enable phpstan by adding PHP_PHPSTAN in ENABLE_LINTERS variable Disable phpstan by adding PHP_PHPSTAN in DISABLE_LINTERS variable Variable Description Default value PHP_PHPSTAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPSTAN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PHPSTAN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PHPSTAN_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PHPSTAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPSTAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPSTAN_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPSTAN_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPSTAN_CONFIG_FILE phpstan configuration file name Use LINTER_DEFAULT to let the linter find it phpstan.neon.dist PHP_PHPSTAN_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPSTAN_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PHPSTAN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use phpstan in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA PHPStan / Psalm / Generics Visual Studio Code vscode-phpstan MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50 Behind the scenes How are identified applicable files File extensions: .php How the linting is performed phpstan is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls phpstan analyse --no-progress --no-ansi myfile.php phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php phpstan analyse --no-progress --no-ansi myfile1.php myfile2.php phpstan analyse --no-progress --no-ansi mydir1/ mydir2/ myfile.php Help content Description: Analyses source code Usage: analyse [options] [--] [<paths>...] analyze Arguments: paths Paths with source code to run analysis on Options: -c, --configuration=CONFIGURATION Path to project configuration file -l, --level=LEVEL Level of rule options - the higher the stricter --no-progress Do not show progress bar, only results --debug Show debug information - which file is analysed, do not catch internal errors -a, --autoload-file=AUTOLOAD-FILE Project's additional autoload file path --error-format=ERROR-FORMAT Format in which to print the result of the analysis -b, --generate-baseline[=GENERATE-BASELINE] Path to a file where the baseline should be saved [default: false] --allow-empty-baseline Do not error out when the generated baseline is empty --memory-limit=MEMORY-LIMIT Memory limit for analysis --xdebug Allow running with XDebug for debugging purposes --fix Launch PHPStan Pro --watch Launch PHPStan Pro --pro Launch PHPStan Pro -h, --help Display help for the given command. When no command is given display help for the analyse command -q, --quiet Do not output any message -V, --version Display this application version --ansi|--no-ansi Force (or disable --no-ansi) ANSI output -n, --no-interaction Do not ask any interactive question -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN phive --no-progress install phpstan -g --trust-gpg-keys CF1A108D0E7AE720","title":"phpstan"},{"location":"descriptors/php_phpstan/#phpstan","text":"","title":"phpstan"},{"location":"descriptors/php_phpstan/#phpstan-documentation","text":"Version in MegaLinter: 1.8.6 Visit Official Web Site See How to configure phpstan rules If custom phpstan.neon.dist config file is not found, phpstan.neon.dist will be used See How to disable phpstan rules in files","title":"phpstan documentation"},{"location":"descriptors/php_phpstan/#configuration-in-megalinter","text":"Enable phpstan by adding PHP_PHPSTAN in ENABLE_LINTERS variable Disable phpstan by adding PHP_PHPSTAN in DISABLE_LINTERS variable Variable Description Default value PHP_PHPSTAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PHPSTAN_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PHPSTAN_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PHPSTAN_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PHPSTAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PHPSTAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PHPSTAN_PRE_COMMANDS List of bash commands to run before the linter None PHP_PHPSTAN_POST_COMMANDS List of bash commands to run after the linter None PHP_PHPSTAN_CONFIG_FILE phpstan configuration file name Use LINTER_DEFAULT to let the linter find it phpstan.neon.dist PHP_PHPSTAN_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PHPSTAN_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PHPSTAN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/php_phpstan/#ide-integration","text":"Use phpstan in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA PHPStan / Psalm / Generics Visual Studio Code vscode-phpstan","title":"IDE Integration"},{"location":"descriptors/php_phpstan/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/php_phpstan/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_phpstan/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_phpstan/#how-the-linting-is-performed","text":"phpstan is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/php_phpstan/#example-calls","text":"phpstan analyse --no-progress --no-ansi myfile.php phpstan analyse --no-progress --no-ansi -c phpstan.neon myfile.php phpstan analyse --no-progress --no-ansi myfile1.php myfile2.php phpstan analyse --no-progress --no-ansi mydir1/ mydir2/ myfile.php","title":"Example calls"},{"location":"descriptors/php_phpstan/#help-content","text":"Description: Analyses source code Usage: analyse [options] [--] [<paths>...] analyze Arguments: paths Paths with source code to run analysis on Options: -c, --configuration=CONFIGURATION Path to project configuration file -l, --level=LEVEL Level of rule options - the higher the stricter --no-progress Do not show progress bar, only results --debug Show debug information - which file is analysed, do not catch internal errors -a, --autoload-file=AUTOLOAD-FILE Project's additional autoload file path --error-format=ERROR-FORMAT Format in which to print the result of the analysis -b, --generate-baseline[=GENERATE-BASELINE] Path to a file where the baseline should be saved [default: false] --allow-empty-baseline Do not error out when the generated baseline is empty --memory-limit=MEMORY-LIMIT Memory limit for analysis --xdebug Allow running with XDebug for debugging purposes --fix Launch PHPStan Pro --watch Launch PHPStan Pro --pro Launch PHPStan Pro -h, --help Display help for the given command. When no command is given display help for the analyse command -q, --quiet Do not output any message -V, --version Display this application version --ansi|--no-ansi Force (or disable --no-ansi) ANSI output -n, --no-interaction Do not ask any interactive question -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug","title":"Help content"},{"location":"descriptors/php_phpstan/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN phive --no-progress install phpstan -g --trust-gpg-keys CF1A108D0E7AE720","title":"Installation on mega-linter Docker image"},{"location":"descriptors/php_psalm/","text":"psalm documentation Version in MegaLinter: Psalm.5.x-dev@ Visit Official Web Site See How to configure psalm rules If custom psalm.xml config file is not found, psalm.xml will be used See How to disable psalm rules in files See Index of problems detected by psalm Configuration in MegaLinter Enable psalm by adding PHP_PSALM in ENABLE_LINTERS variable Disable psalm by adding PHP_PSALM in DISABLE_LINTERS variable Variable Description Default value PHP_PSALM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PSALM_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PSALM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PSALM_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PSALM_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PSALM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PSALM_PRE_COMMANDS List of bash commands to run before the linter None PHP_PSALM_POST_COMMANDS List of bash commands to run after the linter None PHP_PSALM_CONFIG_FILE psalm configuration file name Use LINTER_DEFAULT to let the linter find it psalm.xml PHP_PSALM_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PSALM_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PSALM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use psalm in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA PHPStan / Psalm / Generics Visual Studio Code Psalm VsCode Plugin MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50 Behind the scenes How are identified applicable files File extensions: .php How the linting is performed psalm is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls psalm myfile.php psalm myfile.php mydir/ psalm --config=psalm.xml myfile.php psalm --config=psalm.xml myfile.php mydir/ Help content Usage: psalm [options] [file...] Basic configuration: -c, --config=psalm.xml Path to a psalm.xml configuration file. Run psalm --init to create one. --use-ini-defaults Use PHP-provided ini defaults for memory and error display --memory-limit=LIMIT Use a specific memory limit. Cannot be combined with --use-ini-defaults --disable-extension=[extension] Used to disable certain extensions while Psalm is running. --threads=INT If greater than one, Psalm will run analysis on multiple threads, speeding things up. --no-diff Turns off Psalm\u2019s diff mode, checks all files regardless of whether they\u2019ve changed. --php-version=PHP_VERSION Explicitly set PHP version to analyse code against. Surfacing issues: --show-info[=BOOLEAN] Show non-exception parser findings (defaults to false). --show-snippet[=true] Show code snippets with errors. Options are 'true' or 'false' --find-dead-code[=auto] --find-unused-code[=auto] Look for unused code. Options are 'auto' or 'always'. If no value is specified, default is 'auto' --find-unused-psalm-suppress Finds all @psalm-suppress annotations that aren\u2019t used --find-references-to=[class|method|property] Searches the codebase for references to the given fully-qualified class or method, where method is in the format class::methodName --no-suggestions Hide suggestions --taint-analysis Run Psalm in taint analysis mode \u2013 see https://psalm.dev/docs/security_analysis for more info --dump-taint-graph=OUTPUT_PATH Output the taint graph using the DOT language \u2013 requires --taint-analysis Issue baselines: --set-baseline=PATH Save all current error level issues to a file, to mark them as info in subsequent runs Add --include-php-versions to also include a list of PHP extension versions --use-baseline=PATH Allows you to use a baseline other than the default baseline provided in your config --ignore-baseline Ignore the error baseline --update-baseline Update the baseline by removing fixed issues. This will not add new issues to the baseline Add --include-php-versions to also include a list of PHP extension versions Plugins: --plugin=PATH Executes a plugin, an alternative to using the Psalm config Output: -m, --monochrome Enable monochrome output --output-format=console Changes the output format. Available formats: compact, console, text, emacs, json, pylint, xml, checkstyle, junit, sonarqube, github, phpstorm, codeclimate --no-progress Disable the progress indicator --long-progress Use a progress indicator suitable for Continuous Integration logs --stats Shows a breakdown of Psalm\u2019s ability to infer types in the codebase Reports: --report=PATH The path where to output report file. The output format is based on the file extension. (Currently supported formats: \".json\", \".xml\", \".txt\", \".emacs\", \".pylint\", \".console\", \".sarif\", \"checkstyle.xml\", \"sonarqube.json\", \"codeclimate.json\", \"summary.json\", \"junit.xml\") --report-show-info[=BOOLEAN] Whether the report should include non-errors in its output (defaults to true) Caching: --clear-cache Clears all cache files that Psalm uses for this specific project --clear-global-cache Clears all cache files that Psalm uses for all projects --no-cache Runs Psalm without using cache --no-reflection-cache Runs Psalm without using cached representations of unchanged classes and files. Useful if you want the afterClassLikeVisit plugin hook to run every time you visit a file. --no-file-cache Runs Psalm without using caching every single file for later diffing. This reduces the space Psalm uses on disk and file I/O. Miscellaneous: -h, --help Display this help message -v, --version Display the Psalm version -i, --init [source_dir=src] [level=3] Create a psalm config file in the current directory that points to [source_dir] at the required level, from 1, most strict, to 8, most permissive. --debug Debug information --debug-by-line Debug information on a line-by-line level --debug-emitted-issues Print a php backtrace to stderr when emitting issues. -r, --root If running Psalm globally you\u2019ll need to specify a project root. Defaults to cwd --generate-json-map=PATH Generate a map of node references and types in JSON format, saved to the given path. --generate-stubs=PATH Generate stubs for the project and dump the file in the given path --shepherd[=host] Send data to Shepherd, Psalm\u2019s GitHub integration tool. --alter Run Psalter --language-server Run Psalm Language Server Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN phive --no-progress install psalm -g --trust-gpg-keys 8A03EA3B385DBAA1,12CE0F1D262429A5","title":"psalm"},{"location":"descriptors/php_psalm/#psalm-documentation","text":"Version in MegaLinter: Psalm.5.x-dev@ Visit Official Web Site See How to configure psalm rules If custom psalm.xml config file is not found, psalm.xml will be used See How to disable psalm rules in files See Index of problems detected by psalm","title":"psalm documentation"},{"location":"descriptors/php_psalm/#configuration-in-megalinter","text":"Enable psalm by adding PHP_PSALM in ENABLE_LINTERS variable Disable psalm by adding PHP_PSALM in DISABLE_LINTERS variable Variable Description Default value PHP_PSALM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PHP_PSALM_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PHP_PSALM_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PHP_PSALM_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PHP_PSALM_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".php\"] PHP_PSALM_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PHP_PSALM_PRE_COMMANDS List of bash commands to run before the linter None PHP_PSALM_POST_COMMANDS List of bash commands to run after the linter None PHP_PSALM_CONFIG_FILE psalm configuration file name Use LINTER_DEFAULT to let the linter find it psalm.xml PHP_PSALM_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PHP_PSALM_DISABLE_ERRORS Run linter but consider errors as warnings false PHP_PSALM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/php_psalm/#ide-integration","text":"Use psalm in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA PHPStan / Psalm / Generics Visual Studio Code Psalm VsCode Plugin","title":"IDE Integration"},{"location":"descriptors/php_psalm/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 php Optimized for PHP based projects 50","title":"MegaLinter Flavours"},{"location":"descriptors/php_psalm/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/php_psalm/#how-are-identified-applicable-files","text":"File extensions: .php","title":"How are identified applicable files"},{"location":"descriptors/php_psalm/#how-the-linting-is-performed","text":"psalm is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/php_psalm/#example-calls","text":"psalm myfile.php psalm myfile.php mydir/ psalm --config=psalm.xml myfile.php psalm --config=psalm.xml myfile.php mydir/","title":"Example calls"},{"location":"descriptors/php_psalm/#help-content","text":"Usage: psalm [options] [file...] Basic configuration: -c, --config=psalm.xml Path to a psalm.xml configuration file. Run psalm --init to create one. --use-ini-defaults Use PHP-provided ini defaults for memory and error display --memory-limit=LIMIT Use a specific memory limit. Cannot be combined with --use-ini-defaults --disable-extension=[extension] Used to disable certain extensions while Psalm is running. --threads=INT If greater than one, Psalm will run analysis on multiple threads, speeding things up. --no-diff Turns off Psalm\u2019s diff mode, checks all files regardless of whether they\u2019ve changed. --php-version=PHP_VERSION Explicitly set PHP version to analyse code against. Surfacing issues: --show-info[=BOOLEAN] Show non-exception parser findings (defaults to false). --show-snippet[=true] Show code snippets with errors. Options are 'true' or 'false' --find-dead-code[=auto] --find-unused-code[=auto] Look for unused code. Options are 'auto' or 'always'. If no value is specified, default is 'auto' --find-unused-psalm-suppress Finds all @psalm-suppress annotations that aren\u2019t used --find-references-to=[class|method|property] Searches the codebase for references to the given fully-qualified class or method, where method is in the format class::methodName --no-suggestions Hide suggestions --taint-analysis Run Psalm in taint analysis mode \u2013 see https://psalm.dev/docs/security_analysis for more info --dump-taint-graph=OUTPUT_PATH Output the taint graph using the DOT language \u2013 requires --taint-analysis Issue baselines: --set-baseline=PATH Save all current error level issues to a file, to mark them as info in subsequent runs Add --include-php-versions to also include a list of PHP extension versions --use-baseline=PATH Allows you to use a baseline other than the default baseline provided in your config --ignore-baseline Ignore the error baseline --update-baseline Update the baseline by removing fixed issues. This will not add new issues to the baseline Add --include-php-versions to also include a list of PHP extension versions Plugins: --plugin=PATH Executes a plugin, an alternative to using the Psalm config Output: -m, --monochrome Enable monochrome output --output-format=console Changes the output format. Available formats: compact, console, text, emacs, json, pylint, xml, checkstyle, junit, sonarqube, github, phpstorm, codeclimate --no-progress Disable the progress indicator --long-progress Use a progress indicator suitable for Continuous Integration logs --stats Shows a breakdown of Psalm\u2019s ability to infer types in the codebase Reports: --report=PATH The path where to output report file. The output format is based on the file extension. (Currently supported formats: \".json\", \".xml\", \".txt\", \".emacs\", \".pylint\", \".console\", \".sarif\", \"checkstyle.xml\", \"sonarqube.json\", \"codeclimate.json\", \"summary.json\", \"junit.xml\") --report-show-info[=BOOLEAN] Whether the report should include non-errors in its output (defaults to true) Caching: --clear-cache Clears all cache files that Psalm uses for this specific project --clear-global-cache Clears all cache files that Psalm uses for all projects --no-cache Runs Psalm without using cache --no-reflection-cache Runs Psalm without using cached representations of unchanged classes and files. Useful if you want the afterClassLikeVisit plugin hook to run every time you visit a file. --no-file-cache Runs Psalm without using caching every single file for later diffing. This reduces the space Psalm uses on disk and file I/O. Miscellaneous: -h, --help Display this help message -v, --version Display the Psalm version -i, --init [source_dir=src] [level=3] Create a psalm config file in the current directory that points to [source_dir] at the required level, from 1, most strict, to 8, most permissive. --debug Debug information --debug-by-line Debug information on a line-by-line level --debug-emitted-issues Print a php backtrace to stderr when emitting issues. -r, --root If running Psalm globally you\u2019ll need to specify a project root. Defaults to cwd --generate-json-map=PATH Generate a map of node references and types in JSON format, saved to the given path. --generate-stubs=PATH Generate stubs for the project and dump the file in the given path --shepherd[=host] Send data to Shepherd, Psalm\u2019s GitHub integration tool. --alter Run Psalter --language-server Run Psalm Language Server","title":"Help content"},{"location":"descriptors/php_psalm/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \\ && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \\ && PHAR_KEY_ID=\"0x9D8A98B29B2D5D79\" \\ && ( gpg --keyserver keyserver.pgp.com --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver pgp.mit.edu --recv-keys \"$PHAR_KEY_ID\" \\ || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys \"$PHAR_KEY_ID\" ) \\ && gpg --verify phive.phar.asc phive.phar \\ && chmod +x phive.phar \\ && mv phive.phar /usr/local/bin/phive \\ && rm phive.phar.asc \\ && update-alternatives --install /usr/bin/php php /usr/bin/php7 100 \\ && update-alternatives --install /usr/bin/php php /usr/bin/php8 10 # Linter install RUN phive --no-progress install psalm -g --trust-gpg-keys 8A03EA3B385DBAA1,12CE0F1D262429A5","title":"Installation on mega-linter Docker image"},{"location":"descriptors/powershell/","text":"POWERSHELL Linters Linter Configuration key Status powershell POWERSHELL Linted files File extensions: .ps1 .psm1 .psd1 .ps1xml .pssc .psrc .cdxml Configuration in MegaLinter Variable Description Default value POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh APK packages (Linux): icu-libs","title":"All POWERSHELL linters"},{"location":"descriptors/powershell/#powershell","text":"","title":"POWERSHELL"},{"location":"descriptors/powershell/#linters","text":"Linter Configuration key Status powershell POWERSHELL","title":"Linters"},{"location":"descriptors/powershell/#linted-files","text":"File extensions: .ps1 .psm1 .psd1 .ps1xml .pssc .psrc .cdxml","title":"Linted files"},{"location":"descriptors/powershell/#configuration-in-megalinter","text":"Variable Description Default value POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/powershell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/powershell/#installation","text":"Dockerfile commands : ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh APK packages (Linux): icu-libs","title":"Installation"},{"location":"descriptors/powershell_powershell/","text":"powershell powershell documentation Version in MegaLinter: 7.2.6 Visit Official Web Site See How to configure powershell rules If custom .powershell-psscriptanalyzer.psd1 config file is not found, .powershell-psscriptanalyzer.psd1 will be used See How to disable powershell rules in files Configuration in MegaLinter Enable powershell by adding POWERSHELL_POWERSHELL in ENABLE_LINTERS variable Disable powershell by adding POWERSHELL_POWERSHELL in DISABLE_LINTERS variable Variable Description Default value POWERSHELL_POWERSHELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file POWERSHELL_POWERSHELL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file POWERSHELL_POWERSHELL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ps1\", \".psm1\", \".psd1\", \".ps1xml\", \".pssc\", \".psrc\", \".cdxml\"] POWERSHELL_POWERSHELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file POWERSHELL_POWERSHELL_PRE_COMMANDS List of bash commands to run before the linter None POWERSHELL_POWERSHELL_POST_COMMANDS List of bash commands to run after the linter None POWERSHELL_POWERSHELL_CONFIG_FILE powershell configuration file name Use LINTER_DEFAULT to let the linter find it .powershell-psscriptanalyzer.psd1 POWERSHELL_POWERSHELL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules POWERSHELL_POWERSHELL_DISABLE_ERRORS Run linter but consider errors as warnings false POWERSHELL_POWERSHELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use powershell in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode PowerShell extension MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .ps1 , .psm1 , .psd1 , .ps1xml , .pssc , .psrc , .cdxml How the linting is performed powershell is called one time by identified file ( file CLI lint mode) Example calls pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Path myfile.ps1\" pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Settings .powershell-psscriptanalyzer.psd1 -Path myfile.ps1\" Help content Usage: pwsh[.exe] [-Login] [[-File] <filePath> [args]] [-Command { - | <script-block> [-args <arg-array>] | <string> [<CommandParameters>] } ] [-ConfigurationName <string>] [-CustomPipeName <string>] [-EncodedCommand <Base64EncodedCommand>] [-ExecutionPolicy <ExecutionPolicy>] [-InputFormat {Text | XML}] [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile] [-OutputFormat {Text | XML}] [-SettingsFile <filePath>] [-SSHServerMode] [-STA] [-Version] [-WindowStyle <style>] [-WorkingDirectory <directoryPath>] pwsh[.exe] -h | -Help | -? | /? PowerShell Online Help https://aka.ms/powershell-docs All parameters are case-insensitive. -File | -f If the value of File is \"-\", the command text is read from standard input. Running \"pwsh -File -\" without redirected standard input starts a regular session. This is the same as not specifying the File parameter at all. This is the default parameter if no parameters are present but values are present in the command line. The specified script runs in the local scope (\"dot-sourced\"), so that the functions and variables that the script creates are available in the current session. Enter the script file path and any parameters. File must be the last parameter in the command, because all characters typed after the File parameter name are interpreted as the script file path followed by the script parameters. Typically, the switch parameters of a script are either included or omitted. For example, the following command uses the All parameter of the Get-Script.ps1 script file: \"-File .\\Get-Script.ps1 -All\" In rare cases, you might need to provide a BOOLEAN value for a switch parameter. To provide a BOOLEAN value for a switch parameter in the value of the FILE parameter, Use the parameter normally followed immediately by a colon and the boolean value, such as the following: \"-File .\\Get-Script.ps1 -All:$False\". Parameters passed to the script are passed as literal strings, after interpretation by the current shell. For example, if you are in cmd.exe and want to pass an environment variable value, you would use the cmd.exe syntax: \"pwsh -File . est.ps1 -TestParam %windir%\" In contrast, running \"pwsh -File . est.ps1 -TestParam $env:windir\" in cmd.exe results in the script receiving the literal string \"$env:windir\" because it has no special meaning to the current cmd.exe shell. The \"$env:windir\" style of environment variable reference can be used inside a Command parameter, since there it is interpreted as PowerShell code. Similarly, if you want to execute the same command from a Batch script, you would use \"%~dp0\" instead of \".\\\" or \"$PSScriptRoot\" to represent the current execution directory: \"pwsh -File %~dp0test.ps1 -TestParam %windir%\". If you instead used \". est.ps1\", PowerShell would throw an error because it cannot find the literal path \". est.ps1\". When the script file invoked terminates with an exit command, the process exit code is set to the numeric argument used with the exit command. With normal termination, the exit code is always 0. Similar to -Command, when a script-terminating error occurs, the exit code is set to 1. However, unlike with -Command, when the execution is interrupted with Ctrl-C the exit code is 0. -Command | -c Executes the specified commands (and any parameters) as though they were typed at the PowerShell command prompt, and then exits, unless the NoExit parameter is specified. The value of Command can be \"-\", a script block, or a string. If the value of Command is \"-\", the command text is read from standard input. The Command parameter only accepts a script block for execution when it can recognize the value passed to Command as a ScriptBlock type. This is only possible when running pwsh from another PowerShell host. The ScriptBlock type may be contained in an existing variable, returned from an expression, or parsed by the PowerShell host as a literal script block enclosed in curly braces \"{}\", before being passed to pwsh. pwsh -Command {Get-WinEvent -LogName security} In cmd.exe, there is no such thing as a script block (or ScriptBlock type), so the value passed to Command will always be a string. You can write a script block inside the string, but instead of being executed it will behave exactly as though you typed it at a typical PowerShell prompt, printing the contents of the script block back out to you. A string passed to Command is still executed as PowerShell script, so the script block curly braces are often not required in the first place when running from cmd.exe. To execute an inline script block defined inside a string, the call operator \"&\" can be used: pwsh -Command \"& {Get-WinEvent -LogName security}\" If the value of Command is a string, Command must be the last parameter for pwsh, because all arguments following it are interpreted as part of the command to execute. When called from within an existing PowerShell session, the results are returned to the parent shell as deserialized XML objects, not live objects. For other shells, the results are returned as strings. If the value of Command is \"-\", the command text is read from standard input. You must redirect standard input when using the Command parameter with standard input. For example: @' \"in\" \"hi\" | % { \"$_ there\" } \"out\" '@ | powershell -NoProfile -Command - This example produces the following output: in hi there out The process exit code is determined by status of the last (executed) command within the script block. The exit code is 0 when $? is $true or 1 when $? is $false. If the last command is an external program or a PowerShell script that explicitly sets an exit code other than 0 or 1, that exit code is converted to 1 for process exit code. To preserve the specific exit code, add exit $LASTEXITCODE to your command string or script block. Similarly, the value 1 is returned when a script-terminating (runspace-terminating) error, such as a throw or -ErrorAction Stop, occurs or when execution is interrupted with Ctrl-C. -ConfigurationName | -config Specifies a configuration endpoint in which PowerShell is run. This can be any endpoint registered on the local machine including the default PowerShell remoting endpoints or a custom endpoint having specific user role capabilities. Example: \"pwsh -ConfigurationName AdminRoles\" -CustomPipeName Specifies the name to use for an additional IPC server (named pipe) used for debugging and other cross-process communication. This offers a predictable mechanism for connecting to other PowerShell instances. Typically used with the CustomPipeName parameter on \"Enter-PSHostProcess\". This parameter was introduced in PowerShell 6.2. For example: # PowerShell instance 1 pwsh -CustomPipeName mydebugpipe # PowerShell instance 2 Enter-PSHostProcess -CustomPipeName mydebugpipe -EncodedCommand | -e | -ec Accepts a Base64-encoded string version of a command. Use this parameter to submit commands to PowerShell that require complex, nested quoting. The Base64 representation must be a UTF-16 encoded string. For example: $command = 'dir \"c:\\program files\" ' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) pwsh -encodedcommand $encodedCommand -ExecutionPolicy | -ex | -ep Sets the default execution policy for the current session and saves it in the $env:PSExecutionPolicyPreference environment variable. This parameter does not change the persistently configured execution policies. This parameter only applies to Windows computers. The $env:PSExecutionPolicyPreference environment variable does not exist on non-Windows platforms. -InputFormat | -inp | -if Describes the format of data sent to PowerShell. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). -Interactive | -i Present an interactive prompt to the user. Inverse for NonInteractive parameter. -Login | -l On Linux and macOS, starts PowerShell as a login shell, using /bin/sh to execute login profiles such as /etc/profile and ~/.profile. On Windows, this switch does nothing. [!IMPORTANT] This parameter must come first to start PowerShell as a login shell. The parameter is ignored if passed in any other position. To set up pwsh as the login shell on UNIX-like operating systems: - Verify that the full absolute path to pwsh is listed under /etc/shells - This path is usually something like /usr/bin/pwsh on Linux or /usr/local/bin/pwsh on macOS - With some installation methods, this entry will be added automatically at installation time - If pwsh is not present in /etc/shells, use an editor to append the path to pwsh on the last line. This requires elevated privileges to edit. - Use the chsh utility to set your current user's shell to pwsh: chsh -s /usr/bin/pwsh [!WARNING] Setting pwsh as the login shell is currently not supported on Windows Subsystem for Linux (WSL), and attempting to set pwsh as the login shell there may lead to being unable to start WSL interactively. -MTA Start PowerShell using a multi-threaded apartment. This switch is only available on Windows. -NoExit | -noe Does not exit after running startup commands. Example: \"pwsh -NoExit -Command Get-Date\" -NoLogo | -nol Hides the copyright banner at startup of interactive sessions. -NonInteractive | -noni Does not present an interactive prompt to the user. Any attempts to use interactive features, like Read-Host or confirmation prompts, result in statement-terminating errors. -NoProfile | -nop Does not load the PowerShell profiles. -OutputFormat | -o | -of Determines how output from PowerShell is formatted. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). Example: \"pwsh -o XML -c Get-Date\" When called withing a PowerShell session, you get deserialized objects as output rather plain strings. When called from other shells, the output is string data formatted as CLIXML text. -SettingsFile | -settings Overrides the system-wide \"powershell.config.json\" settings file for the session. By default, system-wide settings are read from the \"powershell.config.json\" in the \"$PSHOME\" directory. Note that these settings are not used by the endpoint specified by the \"-ConfigurationName\" argument. Example: \"pwsh -SettingsFile c:\\myproject\\powershell.config.json\" -SSHServerMode | -sshs Used in sshd_config for running PowerShell as an SSH subsystem. It is not intended or supported for any other use. -STA Start PowerShell using a single-threaded apartment. This is the default. This switch is only available on Windows. -Version | -v Displays the version of PowerShell. Additional parameters are ignored. -WindowStyle | -w Sets the window style for the session. Valid values are Normal, Minimized, Maximized and Hidden. -WorkingDirectory | -wd Sets the initial working directory by executing at startup. Any valid PowerShell file path is supported. To start PowerShell in your home directory, use: pwsh -WorkingDirectory ~ -Help, -?, /? Displays help for pwsh. If you are typing a pwsh command in PowerShell, prepend the command parameters with a hyphen (-), not a forward slash (/). Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh # Linter install ARG PSSA_VERSION='latest' RUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'","title":"powershell"},{"location":"descriptors/powershell_powershell/#powershell","text":"","title":"powershell"},{"location":"descriptors/powershell_powershell/#powershell-documentation","text":"Version in MegaLinter: 7.2.6 Visit Official Web Site See How to configure powershell rules If custom .powershell-psscriptanalyzer.psd1 config file is not found, .powershell-psscriptanalyzer.psd1 will be used See How to disable powershell rules in files","title":"powershell documentation"},{"location":"descriptors/powershell_powershell/#configuration-in-megalinter","text":"Enable powershell by adding POWERSHELL_POWERSHELL in ENABLE_LINTERS variable Disable powershell by adding POWERSHELL_POWERSHELL in DISABLE_LINTERS variable Variable Description Default value POWERSHELL_POWERSHELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" POWERSHELL_POWERSHELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file POWERSHELL_POWERSHELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file POWERSHELL_POWERSHELL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file POWERSHELL_POWERSHELL_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ps1\", \".psm1\", \".psd1\", \".ps1xml\", \".pssc\", \".psrc\", \".cdxml\"] POWERSHELL_POWERSHELL_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file POWERSHELL_POWERSHELL_PRE_COMMANDS List of bash commands to run before the linter None POWERSHELL_POWERSHELL_POST_COMMANDS List of bash commands to run after the linter None POWERSHELL_POWERSHELL_CONFIG_FILE powershell configuration file name Use LINTER_DEFAULT to let the linter find it .powershell-psscriptanalyzer.psd1 POWERSHELL_POWERSHELL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules POWERSHELL_POWERSHELL_DISABLE_ERRORS Run linter but consider errors as warnings false POWERSHELL_POWERSHELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/powershell_powershell/#ide-integration","text":"Use powershell in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode PowerShell extension","title":"IDE Integration"},{"location":"descriptors/powershell_powershell/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/powershell_powershell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/powershell_powershell/#how-are-identified-applicable-files","text":"File extensions: .ps1 , .psm1 , .psd1 , .ps1xml , .pssc , .psrc , .cdxml","title":"How are identified applicable files"},{"location":"descriptors/powershell_powershell/#how-the-linting-is-performed","text":"powershell is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/powershell_powershell/#example-calls","text":"pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Path myfile.ps1\" pwsh -NoProfile -NoLogo -Command \"Invoke-ScriptAnalyzer -EnableExit -Settings .powershell-psscriptanalyzer.psd1 -Path myfile.ps1\"","title":"Example calls"},{"location":"descriptors/powershell_powershell/#help-content","text":"Usage: pwsh[.exe] [-Login] [[-File] <filePath> [args]] [-Command { - | <script-block> [-args <arg-array>] | <string> [<CommandParameters>] } ] [-ConfigurationName <string>] [-CustomPipeName <string>] [-EncodedCommand <Base64EncodedCommand>] [-ExecutionPolicy <ExecutionPolicy>] [-InputFormat {Text | XML}] [-Interactive] [-MTA] [-NoExit] [-NoLogo] [-NonInteractive] [-NoProfile] [-OutputFormat {Text | XML}] [-SettingsFile <filePath>] [-SSHServerMode] [-STA] [-Version] [-WindowStyle <style>] [-WorkingDirectory <directoryPath>] pwsh[.exe] -h | -Help | -? | /? PowerShell Online Help https://aka.ms/powershell-docs All parameters are case-insensitive. -File | -f If the value of File is \"-\", the command text is read from standard input. Running \"pwsh -File -\" without redirected standard input starts a regular session. This is the same as not specifying the File parameter at all. This is the default parameter if no parameters are present but values are present in the command line. The specified script runs in the local scope (\"dot-sourced\"), so that the functions and variables that the script creates are available in the current session. Enter the script file path and any parameters. File must be the last parameter in the command, because all characters typed after the File parameter name are interpreted as the script file path followed by the script parameters. Typically, the switch parameters of a script are either included or omitted. For example, the following command uses the All parameter of the Get-Script.ps1 script file: \"-File .\\Get-Script.ps1 -All\" In rare cases, you might need to provide a BOOLEAN value for a switch parameter. To provide a BOOLEAN value for a switch parameter in the value of the FILE parameter, Use the parameter normally followed immediately by a colon and the boolean value, such as the following: \"-File .\\Get-Script.ps1 -All:$False\". Parameters passed to the script are passed as literal strings, after interpretation by the current shell. For example, if you are in cmd.exe and want to pass an environment variable value, you would use the cmd.exe syntax: \"pwsh -File . est.ps1 -TestParam %windir%\" In contrast, running \"pwsh -File . est.ps1 -TestParam $env:windir\" in cmd.exe results in the script receiving the literal string \"$env:windir\" because it has no special meaning to the current cmd.exe shell. The \"$env:windir\" style of environment variable reference can be used inside a Command parameter, since there it is interpreted as PowerShell code. Similarly, if you want to execute the same command from a Batch script, you would use \"%~dp0\" instead of \".\\\" or \"$PSScriptRoot\" to represent the current execution directory: \"pwsh -File %~dp0test.ps1 -TestParam %windir%\". If you instead used \". est.ps1\", PowerShell would throw an error because it cannot find the literal path \". est.ps1\". When the script file invoked terminates with an exit command, the process exit code is set to the numeric argument used with the exit command. With normal termination, the exit code is always 0. Similar to -Command, when a script-terminating error occurs, the exit code is set to 1. However, unlike with -Command, when the execution is interrupted with Ctrl-C the exit code is 0. -Command | -c Executes the specified commands (and any parameters) as though they were typed at the PowerShell command prompt, and then exits, unless the NoExit parameter is specified. The value of Command can be \"-\", a script block, or a string. If the value of Command is \"-\", the command text is read from standard input. The Command parameter only accepts a script block for execution when it can recognize the value passed to Command as a ScriptBlock type. This is only possible when running pwsh from another PowerShell host. The ScriptBlock type may be contained in an existing variable, returned from an expression, or parsed by the PowerShell host as a literal script block enclosed in curly braces \"{}\", before being passed to pwsh. pwsh -Command {Get-WinEvent -LogName security} In cmd.exe, there is no such thing as a script block (or ScriptBlock type), so the value passed to Command will always be a string. You can write a script block inside the string, but instead of being executed it will behave exactly as though you typed it at a typical PowerShell prompt, printing the contents of the script block back out to you. A string passed to Command is still executed as PowerShell script, so the script block curly braces are often not required in the first place when running from cmd.exe. To execute an inline script block defined inside a string, the call operator \"&\" can be used: pwsh -Command \"& {Get-WinEvent -LogName security}\" If the value of Command is a string, Command must be the last parameter for pwsh, because all arguments following it are interpreted as part of the command to execute. When called from within an existing PowerShell session, the results are returned to the parent shell as deserialized XML objects, not live objects. For other shells, the results are returned as strings. If the value of Command is \"-\", the command text is read from standard input. You must redirect standard input when using the Command parameter with standard input. For example: @' \"in\" \"hi\" | % { \"$_ there\" } \"out\" '@ | powershell -NoProfile -Command - This example produces the following output: in hi there out The process exit code is determined by status of the last (executed) command within the script block. The exit code is 0 when $? is $true or 1 when $? is $false. If the last command is an external program or a PowerShell script that explicitly sets an exit code other than 0 or 1, that exit code is converted to 1 for process exit code. To preserve the specific exit code, add exit $LASTEXITCODE to your command string or script block. Similarly, the value 1 is returned when a script-terminating (runspace-terminating) error, such as a throw or -ErrorAction Stop, occurs or when execution is interrupted with Ctrl-C. -ConfigurationName | -config Specifies a configuration endpoint in which PowerShell is run. This can be any endpoint registered on the local machine including the default PowerShell remoting endpoints or a custom endpoint having specific user role capabilities. Example: \"pwsh -ConfigurationName AdminRoles\" -CustomPipeName Specifies the name to use for an additional IPC server (named pipe) used for debugging and other cross-process communication. This offers a predictable mechanism for connecting to other PowerShell instances. Typically used with the CustomPipeName parameter on \"Enter-PSHostProcess\". This parameter was introduced in PowerShell 6.2. For example: # PowerShell instance 1 pwsh -CustomPipeName mydebugpipe # PowerShell instance 2 Enter-PSHostProcess -CustomPipeName mydebugpipe -EncodedCommand | -e | -ec Accepts a Base64-encoded string version of a command. Use this parameter to submit commands to PowerShell that require complex, nested quoting. The Base64 representation must be a UTF-16 encoded string. For example: $command = 'dir \"c:\\program files\" ' $bytes = [System.Text.Encoding]::Unicode.GetBytes($command) $encodedCommand = [Convert]::ToBase64String($bytes) pwsh -encodedcommand $encodedCommand -ExecutionPolicy | -ex | -ep Sets the default execution policy for the current session and saves it in the $env:PSExecutionPolicyPreference environment variable. This parameter does not change the persistently configured execution policies. This parameter only applies to Windows computers. The $env:PSExecutionPolicyPreference environment variable does not exist on non-Windows platforms. -InputFormat | -inp | -if Describes the format of data sent to PowerShell. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). -Interactive | -i Present an interactive prompt to the user. Inverse for NonInteractive parameter. -Login | -l On Linux and macOS, starts PowerShell as a login shell, using /bin/sh to execute login profiles such as /etc/profile and ~/.profile. On Windows, this switch does nothing. [!IMPORTANT] This parameter must come first to start PowerShell as a login shell. The parameter is ignored if passed in any other position. To set up pwsh as the login shell on UNIX-like operating systems: - Verify that the full absolute path to pwsh is listed under /etc/shells - This path is usually something like /usr/bin/pwsh on Linux or /usr/local/bin/pwsh on macOS - With some installation methods, this entry will be added automatically at installation time - If pwsh is not present in /etc/shells, use an editor to append the path to pwsh on the last line. This requires elevated privileges to edit. - Use the chsh utility to set your current user's shell to pwsh: chsh -s /usr/bin/pwsh [!WARNING] Setting pwsh as the login shell is currently not supported on Windows Subsystem for Linux (WSL), and attempting to set pwsh as the login shell there may lead to being unable to start WSL interactively. -MTA Start PowerShell using a multi-threaded apartment. This switch is only available on Windows. -NoExit | -noe Does not exit after running startup commands. Example: \"pwsh -NoExit -Command Get-Date\" -NoLogo | -nol Hides the copyright banner at startup of interactive sessions. -NonInteractive | -noni Does not present an interactive prompt to the user. Any attempts to use interactive features, like Read-Host or confirmation prompts, result in statement-terminating errors. -NoProfile | -nop Does not load the PowerShell profiles. -OutputFormat | -o | -of Determines how output from PowerShell is formatted. Valid values are \"Text\" (text strings) or \"XML\" (serialized CLIXML format). Example: \"pwsh -o XML -c Get-Date\" When called withing a PowerShell session, you get deserialized objects as output rather plain strings. When called from other shells, the output is string data formatted as CLIXML text. -SettingsFile | -settings Overrides the system-wide \"powershell.config.json\" settings file for the session. By default, system-wide settings are read from the \"powershell.config.json\" in the \"$PSHOME\" directory. Note that these settings are not used by the endpoint specified by the \"-ConfigurationName\" argument. Example: \"pwsh -SettingsFile c:\\myproject\\powershell.config.json\" -SSHServerMode | -sshs Used in sshd_config for running PowerShell as an SSH subsystem. It is not intended or supported for any other use. -STA Start PowerShell using a single-threaded apartment. This is the default. This switch is only available on Windows. -Version | -v Displays the version of PowerShell. Additional parameters are ignored. -WindowStyle | -w Sets the window style for the session. Valid values are Normal, Minimized, Maximized and Hidden. -WorkingDirectory | -wd Sets the initial working directory by executing at startup. Any valid PowerShell file path is supported. To start PowerShell in your home directory, use: pwsh -WorkingDirectory ~ -Help, -?, /? Displays help for pwsh. If you are typing a pwsh command in PowerShell, prepend the command parameters with a hyphen (-), not a forward slash (/).","title":"Help content"},{"location":"descriptors/powershell_powershell/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ARG PWSH_VERSION='latest' ARG PWSH_DIRECTORY='/opt/microsoft/powershell' RUN mkdir -p ${PWSH_DIRECTORY} \\ && curl --retry 5 --retry-delay 5 -s https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \\ | grep browser_download_url \\ | grep linux-alpine-x64 \\ | cut -d '\"' -f 4 \\ | xargs -n 1 wget -O - \\ | tar -xzC ${PWSH_DIRECTORY} \\ && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh # Linter install ARG PSSA_VERSION='latest' RUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'","title":"Installation on mega-linter Docker image"},{"location":"descriptors/protobuf/","text":"PROTOBUF Linters Linter Configuration key Status protolint PROTOBUF Linted files File extensions: .proto Configuration in MegaLinter Variable Description Default value PROTOBUF_FILTER_REGEX_INCLUDE Custom regex including filter PROTOBUF_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All PROTOBUF linters"},{"location":"descriptors/protobuf/#protobuf","text":"","title":"PROTOBUF"},{"location":"descriptors/protobuf/#linters","text":"Linter Configuration key Status protolint PROTOBUF","title":"Linters"},{"location":"descriptors/protobuf/#linted-files","text":"File extensions: .proto","title":"Linted files"},{"location":"descriptors/protobuf/#configuration-in-megalinter","text":"Variable Description Default value PROTOBUF_FILTER_REGEX_INCLUDE Custom regex including filter PROTOBUF_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/protobuf_protolint/","text":"protolint protolint documentation Version in MegaLinter: 0.41.0 Visit Official Web Site See How to configure protolint rules If custom .protolintrc.yml config file is not found, .protolintrc.yml will be used See Index of problems detected by protolint Configuration in MegaLinter Enable protolint by adding PROTOBUF_PROTOLINT in ENABLE_LINTERS variable Disable protolint by adding PROTOBUF_PROTOLINT in DISABLE_LINTERS variable Enable auto-fixes by adding PROTOBUF_PROTOLINT in APPLY_FIXES variable Variable Description Default value PROTOBUF_PROTOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PROTOBUF_PROTOLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PROTOBUF_PROTOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".proto\"] PROTOBUF_PROTOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PROTOBUF_PROTOLINT_PRE_COMMANDS List of bash commands to run before the linter None PROTOBUF_PROTOLINT_POST_COMMANDS List of bash commands to run after the linter None PROTOBUF_PROTOLINT_CONFIG_FILE protolint configuration file name Use LINTER_DEFAULT to let the linter find it .protolintrc.yml PROTOBUF_PROTOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PROTOBUF_PROTOLINT_DISABLE_ERRORS Run linter but consider errors as warnings false PROTOBUF_PROTOLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use protolint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA Protocol Buffer Linter Visual Studio Code VsCode Protolint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .proto How the linting is performed protolint is called one time by identified file ( file CLI lint mode) Example calls protolint lint myfile.proto protolint lint --config_path .protolintrc.yml myfile.proto protolint lint -fix --config_path .protolintrc.yml myfile.proto Help content Usage of lint: -auto_disable value mode that the command line automatically disable some of the problems. Available auto_disable are \"next\" and \"this\". -config_dir_path string path/to/the_directory_including_protolint.yaml -config_path string path/to/protolint.yaml. Note that if both are set, config_dir_path is ignored. -fix mode that the command line automatically fix some of the problems -no-error-on-unmatched-pattern exits with 0 when no file is matched -output_file string path/to/output.txt -plugin value plugins to provide custom lint rule set. Note that it's necessary to specify it as path format' -reporter value formatter to output results in the specific format. Available reporters are \"plain\"(default), \"junit\", \"json\", and \"unix\". -v verbose output that includes parsing process details Installation on mega-linter Docker image Dockerfile commands : FROM yoheimuta/protolint:latest as protolint COPY --from=protolint /usr/local/bin/protolint /usr/bin/","title":"protolint"},{"location":"descriptors/protobuf_protolint/#protolint","text":"","title":"protolint"},{"location":"descriptors/protobuf_protolint/#protolint-documentation","text":"Version in MegaLinter: 0.41.0 Visit Official Web Site See How to configure protolint rules If custom .protolintrc.yml config file is not found, .protolintrc.yml will be used See Index of problems detected by protolint","title":"protolint documentation"},{"location":"descriptors/protobuf_protolint/#configuration-in-megalinter","text":"Enable protolint by adding PROTOBUF_PROTOLINT in ENABLE_LINTERS variable Disable protolint by adding PROTOBUF_PROTOLINT in DISABLE_LINTERS variable Enable auto-fixes by adding PROTOBUF_PROTOLINT in APPLY_FIXES variable Variable Description Default value PROTOBUF_PROTOLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PROTOBUF_PROTOLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PROTOBUF_PROTOLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PROTOBUF_PROTOLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PROTOBUF_PROTOLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".proto\"] PROTOBUF_PROTOLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PROTOBUF_PROTOLINT_PRE_COMMANDS List of bash commands to run before the linter None PROTOBUF_PROTOLINT_POST_COMMANDS List of bash commands to run after the linter None PROTOBUF_PROTOLINT_CONFIG_FILE protolint configuration file name Use LINTER_DEFAULT to let the linter find it .protolintrc.yml PROTOBUF_PROTOLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PROTOBUF_PROTOLINT_DISABLE_ERRORS Run linter but consider errors as warnings false PROTOBUF_PROTOLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/protobuf_protolint/#ide-integration","text":"Use protolint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA Protocol Buffer Linter Visual Studio Code VsCode Protolint","title":"IDE Integration"},{"location":"descriptors/protobuf_protolint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/protobuf_protolint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/protobuf_protolint/#how-are-identified-applicable-files","text":"File extensions: .proto","title":"How are identified applicable files"},{"location":"descriptors/protobuf_protolint/#how-the-linting-is-performed","text":"protolint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/protobuf_protolint/#example-calls","text":"protolint lint myfile.proto protolint lint --config_path .protolintrc.yml myfile.proto protolint lint -fix --config_path .protolintrc.yml myfile.proto","title":"Example calls"},{"location":"descriptors/protobuf_protolint/#help-content","text":"Usage of lint: -auto_disable value mode that the command line automatically disable some of the problems. Available auto_disable are \"next\" and \"this\". -config_dir_path string path/to/the_directory_including_protolint.yaml -config_path string path/to/protolint.yaml. Note that if both are set, config_dir_path is ignored. -fix mode that the command line automatically fix some of the problems -no-error-on-unmatched-pattern exits with 0 when no file is matched -output_file string path/to/output.txt -plugin value plugins to provide custom lint rule set. Note that it's necessary to specify it as path format' -reporter value formatter to output results in the specific format. Available reporters are \"plain\"(default), \"junit\", \"json\", and \"unix\". -v verbose output that includes parsing process details","title":"Help content"},{"location":"descriptors/protobuf_protolint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM yoheimuta/protolint:latest as protolint COPY --from=protolint /usr/local/bin/protolint /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/puppet/","text":"PUPPET Linters Linter Configuration key Status puppet-lint PUPPET Linted files File extensions: .pp Configuration in MegaLinter Variable Description Default value PUPPET_FILTER_REGEX_INCLUDE Custom regex including filter PUPPET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All PUPPET linters"},{"location":"descriptors/puppet/#puppet","text":"","title":"PUPPET"},{"location":"descriptors/puppet/#linters","text":"Linter Configuration key Status puppet-lint PUPPET","title":"Linters"},{"location":"descriptors/puppet/#linted-files","text":"File extensions: .pp","title":"Linted files"},{"location":"descriptors/puppet/#configuration-in-megalinter","text":"Variable Description Default value PUPPET_FILTER_REGEX_INCLUDE Custom regex including filter PUPPET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/puppet_puppet_lint/","text":"puppet-lint puppet-lint documentation Version in MegaLinter: 2.5.2 Visit Official Web Site See How to configure puppet-lint rules See How to disable puppet-lint rules in files See Index of problems detected by puppet-lint Configuration in MegaLinter Enable puppet-lint by adding PUPPET_PUPPET_LINT in ENABLE_LINTERS variable Disable puppet-lint by adding PUPPET_PUPPET_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding PUPPET_PUPPET_LINT in APPLY_FIXES variable Variable Description Default value PUPPET_PUPPET_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PUPPET_PUPPET_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PUPPET_PUPPET_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pp\"] PUPPET_PUPPET_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PUPPET_PUPPET_LINT_PRE_COMMANDS List of bash commands to run before the linter None PUPPET_PUPPET_LINT_POST_COMMANDS List of bash commands to run after the linter None PUPPET_PUPPET_LINT_CONFIG_FILE puppet-lint configuration file name Use LINTER_DEFAULT to let the linter find it .puppet-lint.rc PUPPET_PUPPET_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PUPPET_PUPPET_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false PUPPET_PUPPET_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use puppet-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Puppet VsCode Extension Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .pp How the linting is performed puppet-lint is called one time by identified file ( file CLI lint mode) Example calls puppet-lint --fail-on-warnings --no-autoloader_layout-check myfile.pp puppet-lint --fail-on-warnings --no-autoloader_layout-check --fix myfile.pp Help content puppet-lint Basic Command Line Usage: puppet-lint [OPTIONS] PATH PATH The path to the Puppet manifest. Option: --version Display the current version. --no-config Do not load default puppet-lint option files. -c, --config FILE Load puppet-lint options from file. --with-context Show where in the manifest the problem is. --with-filename Display the filename before the warning. --fail-on-warnings Return a non-zero exit status for warnings --error-level LEVEL The level of error to return (warning, error or all). --show-ignored Show problems that have been ignored by control comments --relative Compare module layout relative to the module root -l, --load FILE Load a file containing custom puppet-lint checks. --load-from-puppet MODULEPATH Load plugins from the given Puppet module path. -f, --fix Attempt to automatically fix errors --log-format FORMAT Change the log format. Overrides --with-filename. The following placeholders can be used: %{filename} - Filename without path. %{path} - Path as provided to puppet-lint. %{fullpath} - Expanded path to the file. %{line} - Line number. %{column} - Column number. %{kind} - The kind of message (warning, error). %{KIND} - Uppercase version of %{kind}. %{check} - The name of the check. %{message} - The message. --json Log output as JSON --list-checks List available check names. Checks: --only-checks CHECKS A comma separated list of checks that should be run --ignore-paths PATHS A comma separated list of patterns to ignore --no-arrow_on_right_operand_line-check Skip the arrow_on_right_operand_line check. --no-autoloader_layout-check Skip the autoloader_layout check. --no-class_inherits_from_params_class-check Skip the class_inherits_from_params_class check. --class_inherits_from_params_class-check Enable the class_inherits_from_params_class check. --no-code_on_top_scope-check Skip the code_on_top_scope check. --code_on_top_scope-check Enable the code_on_top_scope check. --no-inherits_across_namespaces-check Skip the inherits_across_namespaces check. --no-names_containing_dash-check Skip the names_containing_dash check. --no-names_containing_uppercase-check Skip the names_containing_uppercase check. --no-nested_classes_or_defines-check Skip the nested_classes_or_defines check. --no-parameter_order-check Skip the parameter_order check. --no-right_to_left_relationship-check Skip the right_to_left_relationship check. --no-variable_scope-check Skip the variable_scope check. --no-slash_comments-check Skip the slash_comments check. --no-star_comments-check Skip the star_comments check. --no-case_without_default-check Skip the case_without_default check. --no-selector_inside_resource-check Skip the selector_inside_resource check. --no-documentation-check Skip the documentation check. --no-unquoted_node_name-check Skip the unquoted_node_name check. --no-duplicate_params-check Skip the duplicate_params check. --no-ensure_first_param-check Skip the ensure_first_param check. --no-ensure_not_symlink_target-check Skip the ensure_not_symlink_target check. --no-file_mode-check Skip the file_mode check. --no-unquoted_file_mode-check Skip the unquoted_file_mode check. --no-unquoted_resource_title-check Skip the unquoted_resource_title check. --no-double_quoted_strings-check Skip the double_quoted_strings check. --no-only_variable_string-check Skip the only_variable_string check. --no-puppet_url_without_modules-check Skip the puppet_url_without_modules check. --no-quoted_booleans-check Skip the quoted_booleans check. --quoted_booleans-check Enable the quoted_booleans check. --no-single_quote_string_with_variables-check Skip the single_quote_string_with_variables check. --no-variables_not_enclosed-check Skip the variables_not_enclosed check. --no-variable_contains_dash-check Skip the variable_contains_dash check. --no-variable_is_lowercase-check Skip the variable_is_lowercase check. --no-140chars-check Skip the 140chars check. --no-2sp_soft_tabs-check Skip the 2sp_soft_tabs check. --no-80chars-check Skip the 80chars check. --80chars-check Enable the 80chars check. --no-arrow_alignment-check Skip the arrow_alignment check. --no-hard_tabs-check Skip the hard_tabs check. --no-trailing_whitespace-check Skip the trailing_whitespace check. Installation on mega-linter Docker image GEM packages (Ruby) : puppet-lint","title":"puppet-lint"},{"location":"descriptors/puppet_puppet_lint/#puppet-lint","text":"","title":"puppet-lint"},{"location":"descriptors/puppet_puppet_lint/#puppet-lint-documentation","text":"Version in MegaLinter: 2.5.2 Visit Official Web Site See How to configure puppet-lint rules See How to disable puppet-lint rules in files See Index of problems detected by puppet-lint","title":"puppet-lint documentation"},{"location":"descriptors/puppet_puppet_lint/#configuration-in-megalinter","text":"Enable puppet-lint by adding PUPPET_PUPPET_LINT in ENABLE_LINTERS variable Disable puppet-lint by adding PUPPET_PUPPET_LINT in DISABLE_LINTERS variable Enable auto-fixes by adding PUPPET_PUPPET_LINT in APPLY_FIXES variable Variable Description Default value PUPPET_PUPPET_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PUPPET_PUPPET_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PUPPET_PUPPET_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PUPPET_PUPPET_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file PUPPET_PUPPET_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".pp\"] PUPPET_PUPPET_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PUPPET_PUPPET_LINT_PRE_COMMANDS List of bash commands to run before the linter None PUPPET_PUPPET_LINT_POST_COMMANDS List of bash commands to run after the linter None PUPPET_PUPPET_LINT_CONFIG_FILE puppet-lint configuration file name Use LINTER_DEFAULT to let the linter find it .puppet-lint.rc PUPPET_PUPPET_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PUPPET_PUPPET_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false PUPPET_PUPPET_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/puppet_puppet_lint/#ide-integration","text":"Use puppet-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Puppet VsCode Extension Visit Web Site","title":"IDE Integration"},{"location":"descriptors/puppet_puppet_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/puppet_puppet_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/puppet_puppet_lint/#how-are-identified-applicable-files","text":"File extensions: .pp","title":"How are identified applicable files"},{"location":"descriptors/puppet_puppet_lint/#how-the-linting-is-performed","text":"puppet-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/puppet_puppet_lint/#example-calls","text":"puppet-lint --fail-on-warnings --no-autoloader_layout-check myfile.pp puppet-lint --fail-on-warnings --no-autoloader_layout-check --fix myfile.pp","title":"Example calls"},{"location":"descriptors/puppet_puppet_lint/#help-content","text":"puppet-lint Basic Command Line Usage: puppet-lint [OPTIONS] PATH PATH The path to the Puppet manifest. Option: --version Display the current version. --no-config Do not load default puppet-lint option files. -c, --config FILE Load puppet-lint options from file. --with-context Show where in the manifest the problem is. --with-filename Display the filename before the warning. --fail-on-warnings Return a non-zero exit status for warnings --error-level LEVEL The level of error to return (warning, error or all). --show-ignored Show problems that have been ignored by control comments --relative Compare module layout relative to the module root -l, --load FILE Load a file containing custom puppet-lint checks. --load-from-puppet MODULEPATH Load plugins from the given Puppet module path. -f, --fix Attempt to automatically fix errors --log-format FORMAT Change the log format. Overrides --with-filename. The following placeholders can be used: %{filename} - Filename without path. %{path} - Path as provided to puppet-lint. %{fullpath} - Expanded path to the file. %{line} - Line number. %{column} - Column number. %{kind} - The kind of message (warning, error). %{KIND} - Uppercase version of %{kind}. %{check} - The name of the check. %{message} - The message. --json Log output as JSON --list-checks List available check names. Checks: --only-checks CHECKS A comma separated list of checks that should be run --ignore-paths PATHS A comma separated list of patterns to ignore --no-arrow_on_right_operand_line-check Skip the arrow_on_right_operand_line check. --no-autoloader_layout-check Skip the autoloader_layout check. --no-class_inherits_from_params_class-check Skip the class_inherits_from_params_class check. --class_inherits_from_params_class-check Enable the class_inherits_from_params_class check. --no-code_on_top_scope-check Skip the code_on_top_scope check. --code_on_top_scope-check Enable the code_on_top_scope check. --no-inherits_across_namespaces-check Skip the inherits_across_namespaces check. --no-names_containing_dash-check Skip the names_containing_dash check. --no-names_containing_uppercase-check Skip the names_containing_uppercase check. --no-nested_classes_or_defines-check Skip the nested_classes_or_defines check. --no-parameter_order-check Skip the parameter_order check. --no-right_to_left_relationship-check Skip the right_to_left_relationship check. --no-variable_scope-check Skip the variable_scope check. --no-slash_comments-check Skip the slash_comments check. --no-star_comments-check Skip the star_comments check. --no-case_without_default-check Skip the case_without_default check. --no-selector_inside_resource-check Skip the selector_inside_resource check. --no-documentation-check Skip the documentation check. --no-unquoted_node_name-check Skip the unquoted_node_name check. --no-duplicate_params-check Skip the duplicate_params check. --no-ensure_first_param-check Skip the ensure_first_param check. --no-ensure_not_symlink_target-check Skip the ensure_not_symlink_target check. --no-file_mode-check Skip the file_mode check. --no-unquoted_file_mode-check Skip the unquoted_file_mode check. --no-unquoted_resource_title-check Skip the unquoted_resource_title check. --no-double_quoted_strings-check Skip the double_quoted_strings check. --no-only_variable_string-check Skip the only_variable_string check. --no-puppet_url_without_modules-check Skip the puppet_url_without_modules check. --no-quoted_booleans-check Skip the quoted_booleans check. --quoted_booleans-check Enable the quoted_booleans check. --no-single_quote_string_with_variables-check Skip the single_quote_string_with_variables check. --no-variables_not_enclosed-check Skip the variables_not_enclosed check. --no-variable_contains_dash-check Skip the variable_contains_dash check. --no-variable_is_lowercase-check Skip the variable_is_lowercase check. --no-140chars-check Skip the 140chars check. --no-2sp_soft_tabs-check Skip the 2sp_soft_tabs check. --no-80chars-check Skip the 80chars check. --80chars-check Enable the 80chars check. --no-arrow_alignment-check Skip the arrow_alignment check. --no-hard_tabs-check Skip the hard_tabs check. --no-trailing_whitespace-check Skip the trailing_whitespace check.","title":"Help content"},{"location":"descriptors/puppet_puppet_lint/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : puppet-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python/","text":"PYTHON Linters Linter Configuration key Status pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT Linted files File extensions: .py Configuration in MegaLinter Variable Description Default value PYTHON_FILTER_REGEX_INCLUDE Custom regex including filter PYTHON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All PYTHON linters"},{"location":"descriptors/python/#python","text":"","title":"PYTHON"},{"location":"descriptors/python/#linters","text":"Linter Configuration key Status pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT","title":"Linters"},{"location":"descriptors/python/#linted-files","text":"File extensions: .py","title":"Linted files"},{"location":"descriptors/python/#configuration-in-megalinter","text":"Variable Description Default value PYTHON_FILTER_REGEX_INCLUDE Custom regex including filter PYTHON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/python_bandit/","text":"bandit checks for security risks If you find it too harsh, you may define PYTHON_BANDIT_DISABLE_ERRORS: true in your .mega-linter.yml config file bandit documentation Version in MegaLinter: 1.7.4 Visit Official Web Site See How to configure bandit rules If custom .bandit.yml config file is not found, .bandit.yml will be used See How to disable bandit rules in files See Index of problems detected by bandit Configuration in MegaLinter Enable bandit by adding PYTHON_BANDIT in ENABLE_LINTERS variable Disable bandit by adding PYTHON_BANDIT in DISABLE_LINTERS variable Variable Description Default value PYTHON_BANDIT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_BANDIT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_BANDIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_BANDIT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_BANDIT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_BANDIT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_BANDIT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_BANDIT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_BANDIT_CONFIG_FILE bandit configuration file name Use LINTER_DEFAULT to let the linter find it .bandit.yml PYTHON_BANDIT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_BANDIT_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_BANDIT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use bandit in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom bandit-lint Visit Web Site Sublime Text SublimeLinter-bandit Visit Web Site Visual Studio Code Native Support Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 security Optimized for security 21 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed bandit is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls bandit myfile.py bandit --configfile .bandit.yml myfile.py Help content usage: bandit [-h] [-r] [-a {file,vuln}] [-n CONTEXT_LINES] [-c CONFIG_FILE] [-p PROFILE] [-t TESTS] [-s SKIPS] [-l | --severity-level {all,low,medium,high}] [-i | --confidence-level {all,low,medium,high}] [-f {csv,custom,html,json,sarif,screen,txt,xml,yaml}] [--msg-template MSG_TEMPLATE] [-o [OUTPUT_FILE]] [-v] [-d] [-q] [--ignore-nosec] [-x EXCLUDED_PATHS] [-b BASELINE] [--ini INI_PATH] [--exit-zero] [--version] [targets ...] Bandit - a Python source code security analyzer positional arguments: targets source file(s) or directory(s) to be tested options: -h, --help show this help message and exit -r, --recursive find and process files in subdirectories -a {file,vuln}, --aggregate {file,vuln} aggregate output by vulnerability (default) or by filename -n CONTEXT_LINES, --number CONTEXT_LINES maximum number of code lines to output for each issue -c CONFIG_FILE, --configfile CONFIG_FILE optional config file to use for selecting plugins and overriding defaults -p PROFILE, --profile PROFILE profile to use (defaults to executing all tests) -t TESTS, --tests TESTS comma-separated list of test IDs to run -s SKIPS, --skip SKIPS comma-separated list of test IDs to skip -l, --level report only issues of a given severity level or higher (-l for LOW, -ll for MEDIUM, -lll for HIGH) --severity-level {all,low,medium,high} report only issues of a given severity level or higher. \"all\" and \"low\" are likely to produce the same results, but it is possible for rules to be undefined which will not be listed in \"low\". -i, --confidence report only issues of a given confidence level or higher (-i for LOW, -ii for MEDIUM, -iii for HIGH) --confidence-level {all,low,medium,high} report only issues of a given confidence level or higher. \"all\" and \"low\" are likely to produce the same results, but it is possible for rules to be undefined which will not be listed in \"low\". -f {csv,custom,html,json,sarif,screen,txt,xml,yaml}, --format {csv,custom,html,json,sarif,screen,txt,xml,yaml} specify output format --msg-template MSG_TEMPLATE specify output message template (only usable with --format custom), see CUSTOM FORMAT section for list of available values -o [OUTPUT_FILE], --output [OUTPUT_FILE] write report to filename -v, --verbose output extra information like excluded and included files -d, --debug turn on debug mode -q, --quiet, --silent only show output in the case of an error --ignore-nosec do not skip lines with # nosec comments -x EXCLUDED_PATHS, --exclude EXCLUDED_PATHS comma-separated list of paths (glob patterns supported) to exclude from scan (note that these are in addition to the excluded paths provided in the config file) (default: .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg) -b BASELINE, --baseline BASELINE path of a baseline report to compare against (only JSON-formatted files are accepted) --ini INI_PATH path to a .bandit file that supplies command line arguments --exit-zero exit with 0, even with results found --version show program's version number and exit CUSTOM FORMATTING ----------------- Available tags: {abspath}, {relpath}, {line}, {col}, {test_id}, {severity}, {msg}, {confidence}, {range} Example usage: Default template: bandit -r examples/ --format custom --msg-template \\ \"{abspath}:{line}: {test_id}[bandit]: {severity}: {msg}\" Provides same output as: bandit -r examples/ --format custom Tags can also be formatted in python string.format() style: bandit -r examples/ --format custom --msg-template \\ \"{relpath:20.20s}: {line:03}: {test_id:^8}: DEFECT: {msg:>20}\" See python documentation for more information about formatting style: https://docs.python.org/3/library/string.html The following tests were discovered and loaded: ----------------------------------------------- B101 assert_used B102 exec_used B103 set_bad_file_permissions B104 hardcoded_bind_all_interfaces B105 hardcoded_password_string B106 hardcoded_password_funcarg B107 hardcoded_password_default B108 hardcoded_tmp_directory B110 try_except_pass B112 try_except_continue B201 flask_debug_true B301 pickle B302 marshal B303 md5 B304 ciphers B305 cipher_modes B306 mktemp_q B307 eval B308 mark_safe B309 httpsconnection B310 urllib_urlopen B311 random B312 telnetlib B313 xml_bad_cElementTree B314 xml_bad_ElementTree B315 xml_bad_expatreader B316 xml_bad_expatbuilder B317 xml_bad_sax B318 xml_bad_minidom B319 xml_bad_pulldom B320 xml_bad_etree B321 ftplib B323 unverified_context B324 hashlib_insecure_functions B325 tempnam B401 import_telnetlib B402 import_ftplib B403 import_pickle B404 import_subprocess B405 import_xml_etree B406 import_xml_sax B407 import_xml_expat B408 import_xml_minidom B409 import_xml_pulldom B410 import_lxml B411 import_xmlrpclib B412 import_httpoxy B413 import_pycrypto B415 import_pyghmi B501 request_with_no_cert_validation B502 ssl_with_bad_version B503 ssl_with_bad_defaults B504 ssl_with_no_version B505 weak_cryptographic_key B506 yaml_load B507 ssh_no_host_key_verification B508 snmp_insecure_version B509 snmp_weak_cryptography B601 paramiko_calls B602 subprocess_popen_with_shell_equals_true B603 subprocess_without_shell_equals_true B604 any_other_function_with_shell_equals_true B605 start_process_with_a_shell B606 start_process_with_no_shell B607 start_process_with_partial_path B608 hardcoded_sql_expressions B609 linux_commands_wildcard_injection B610 django_extra_used B611 django_rawsql_used B701 jinja2_autoescape_false B702 use_of_mako_templates B703 django_mark_safe Installation on mega-linter Docker image PIP packages (Python): bandit bandit_sarif_formatter","title":"bandit"},{"location":"descriptors/python_bandit/#bandit-documentation","text":"Version in MegaLinter: 1.7.4 Visit Official Web Site See How to configure bandit rules If custom .bandit.yml config file is not found, .bandit.yml will be used See How to disable bandit rules in files See Index of problems detected by bandit","title":"bandit documentation"},{"location":"descriptors/python_bandit/#configuration-in-megalinter","text":"Enable bandit by adding PYTHON_BANDIT in ENABLE_LINTERS variable Disable bandit by adding PYTHON_BANDIT in DISABLE_LINTERS variable Variable Description Default value PYTHON_BANDIT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_BANDIT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_BANDIT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_BANDIT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_BANDIT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_BANDIT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_BANDIT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_BANDIT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_BANDIT_CONFIG_FILE bandit configuration file name Use LINTER_DEFAULT to let the linter find it .bandit.yml PYTHON_BANDIT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_BANDIT_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_BANDIT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_bandit/#ide-integration","text":"Use bandit in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom bandit-lint Visit Web Site Sublime Text SublimeLinter-bandit Visit Web Site Visual Studio Code Native Support Visit Web Site","title":"IDE Integration"},{"location":"descriptors/python_bandit/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 security Optimized for security 21","title":"MegaLinter Flavours"},{"location":"descriptors/python_bandit/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_bandit/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_bandit/#how-the-linting-is-performed","text":"bandit is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_bandit/#example-calls","text":"bandit myfile.py bandit --configfile .bandit.yml myfile.py","title":"Example calls"},{"location":"descriptors/python_bandit/#help-content","text":"usage: bandit [-h] [-r] [-a {file,vuln}] [-n CONTEXT_LINES] [-c CONFIG_FILE] [-p PROFILE] [-t TESTS] [-s SKIPS] [-l | --severity-level {all,low,medium,high}] [-i | --confidence-level {all,low,medium,high}] [-f {csv,custom,html,json,sarif,screen,txt,xml,yaml}] [--msg-template MSG_TEMPLATE] [-o [OUTPUT_FILE]] [-v] [-d] [-q] [--ignore-nosec] [-x EXCLUDED_PATHS] [-b BASELINE] [--ini INI_PATH] [--exit-zero] [--version] [targets ...] Bandit - a Python source code security analyzer positional arguments: targets source file(s) or directory(s) to be tested options: -h, --help show this help message and exit -r, --recursive find and process files in subdirectories -a {file,vuln}, --aggregate {file,vuln} aggregate output by vulnerability (default) or by filename -n CONTEXT_LINES, --number CONTEXT_LINES maximum number of code lines to output for each issue -c CONFIG_FILE, --configfile CONFIG_FILE optional config file to use for selecting plugins and overriding defaults -p PROFILE, --profile PROFILE profile to use (defaults to executing all tests) -t TESTS, --tests TESTS comma-separated list of test IDs to run -s SKIPS, --skip SKIPS comma-separated list of test IDs to skip -l, --level report only issues of a given severity level or higher (-l for LOW, -ll for MEDIUM, -lll for HIGH) --severity-level {all,low,medium,high} report only issues of a given severity level or higher. \"all\" and \"low\" are likely to produce the same results, but it is possible for rules to be undefined which will not be listed in \"low\". -i, --confidence report only issues of a given confidence level or higher (-i for LOW, -ii for MEDIUM, -iii for HIGH) --confidence-level {all,low,medium,high} report only issues of a given confidence level or higher. \"all\" and \"low\" are likely to produce the same results, but it is possible for rules to be undefined which will not be listed in \"low\". -f {csv,custom,html,json,sarif,screen,txt,xml,yaml}, --format {csv,custom,html,json,sarif,screen,txt,xml,yaml} specify output format --msg-template MSG_TEMPLATE specify output message template (only usable with --format custom), see CUSTOM FORMAT section for list of available values -o [OUTPUT_FILE], --output [OUTPUT_FILE] write report to filename -v, --verbose output extra information like excluded and included files -d, --debug turn on debug mode -q, --quiet, --silent only show output in the case of an error --ignore-nosec do not skip lines with # nosec comments -x EXCLUDED_PATHS, --exclude EXCLUDED_PATHS comma-separated list of paths (glob patterns supported) to exclude from scan (note that these are in addition to the excluded paths provided in the config file) (default: .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.eggs,*.egg) -b BASELINE, --baseline BASELINE path of a baseline report to compare against (only JSON-formatted files are accepted) --ini INI_PATH path to a .bandit file that supplies command line arguments --exit-zero exit with 0, even with results found --version show program's version number and exit CUSTOM FORMATTING ----------------- Available tags: {abspath}, {relpath}, {line}, {col}, {test_id}, {severity}, {msg}, {confidence}, {range} Example usage: Default template: bandit -r examples/ --format custom --msg-template \\ \"{abspath}:{line}: {test_id}[bandit]: {severity}: {msg}\" Provides same output as: bandit -r examples/ --format custom Tags can also be formatted in python string.format() style: bandit -r examples/ --format custom --msg-template \\ \"{relpath:20.20s}: {line:03}: {test_id:^8}: DEFECT: {msg:>20}\" See python documentation for more information about formatting style: https://docs.python.org/3/library/string.html The following tests were discovered and loaded: ----------------------------------------------- B101 assert_used B102 exec_used B103 set_bad_file_permissions B104 hardcoded_bind_all_interfaces B105 hardcoded_password_string B106 hardcoded_password_funcarg B107 hardcoded_password_default B108 hardcoded_tmp_directory B110 try_except_pass B112 try_except_continue B201 flask_debug_true B301 pickle B302 marshal B303 md5 B304 ciphers B305 cipher_modes B306 mktemp_q B307 eval B308 mark_safe B309 httpsconnection B310 urllib_urlopen B311 random B312 telnetlib B313 xml_bad_cElementTree B314 xml_bad_ElementTree B315 xml_bad_expatreader B316 xml_bad_expatbuilder B317 xml_bad_sax B318 xml_bad_minidom B319 xml_bad_pulldom B320 xml_bad_etree B321 ftplib B323 unverified_context B324 hashlib_insecure_functions B325 tempnam B401 import_telnetlib B402 import_ftplib B403 import_pickle B404 import_subprocess B405 import_xml_etree B406 import_xml_sax B407 import_xml_expat B408 import_xml_minidom B409 import_xml_pulldom B410 import_lxml B411 import_xmlrpclib B412 import_httpoxy B413 import_pycrypto B415 import_pyghmi B501 request_with_no_cert_validation B502 ssl_with_bad_version B503 ssl_with_bad_defaults B504 ssl_with_no_version B505 weak_cryptographic_key B506 yaml_load B507 ssh_no_host_key_verification B508 snmp_insecure_version B509 snmp_weak_cryptography B601 paramiko_calls B602 subprocess_popen_with_shell_equals_true B603 subprocess_without_shell_equals_true B604 any_other_function_with_shell_equals_true B605 start_process_with_a_shell B606 start_process_with_no_shell B607 start_process_with_partial_path B608 hardcoded_sql_expressions B609 linux_commands_wildcard_injection B610 django_extra_used B611 django_rawsql_used B701 jinja2_autoescape_false B702 use_of_mako_templates B703 django_mark_safe","title":"Help content"},{"location":"descriptors/python_bandit/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): bandit bandit_sarif_formatter","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_black/","text":"black documentation Version in MegaLinter: 22.8.0 Visit Official Web Site See How to configure black rules If custom pyproject.toml config file is not found, pyproject.toml will be used Configuration in MegaLinter Enable black by adding PYTHON_BLACK in ENABLE_LINTERS variable Disable black by adding PYTHON_BLACK in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_BLACK in APPLY_FIXES variable Variable Description Default value PYTHON_BLACK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_BLACK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_BLACK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_BLACK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_BLACK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_BLACK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_BLACK_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_BLACK_POST_COMMANDS List of bash commands to run after the linter None PYTHON_BLACK_CONFIG_FILE black configuration file name Use LINTER_DEFAULT to let the linter find it pyproject.toml PYTHON_BLACK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_BLACK_DISABLE_ERRORS Run linter but consider errors as warnings true PYTHON_BLACK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use black in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom python-black Visit Web Site Emacs blacken Visit Web Site Emacs reformatter.el Visit Web Site Emacs elpy Visit Web Site IDEA black Visit Web Site Sublime Text sublack Visit Web Site Visual Studio Code VsCode Python Extension MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed black is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls black --diff --check myfile.py black --config pyproject.toml --diff --check myfile.py black --config pyproject.toml myfile.py Help content Usage: black [OPTIONS] SRC ... The uncompromising code formatter. Options: -c, --code TEXT Format the code passed in as a string. -l, --line-length INTEGER How many characters per line to allow. [default: 88] -t, --target-version [py33|py34|py35|py36|py37|py38|py39|py310|py311] Python versions that should be supported by Black's output. [default: per-file auto- detection] --pyi Format all input files like typing stubs regardless of file extension (useful when piping source on standard input). --ipynb Format all input files like Jupyter Notebooks regardless of file extension (useful when piping source on standard input). --python-cell-magics TEXT When processing Jupyter Notebooks, add the given magic to the list of known python- magics (prun, time, python3, capture, python, timeit, pypy). Useful for formatting cells with custom python magics. -S, --skip-string-normalization Don't normalize string quotes or prefixes. -C, --skip-magic-trailing-comma Don't use trailing commas as a reason to split lines. --preview Enable potentially disruptive style changes that may be added to Black's main functionality in the next major release. --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an internal error. --diff Don't write the files back, just output a diff for each file on stdout. --color / --no-color Show colored diff. Only applies when `--diff` is given. --fast / --safe If --fast given, skip temporary sanity checks. [default: --safe] --required-version TEXT Require a specific version of Black to be running (useful for unifying results across many environments e.g. with a pyproject.toml file). It can be either a major version number or an exact version. --include TEXT A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.pyi?|\\.ipynb)$] --exclude TEXT A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: /(\\.direnv|\\.eggs|\\.git|\\.h g|\\.mypy_cache|\\.nox|\\.tox|\\.venv|venv|\\.svn |_build|buck- out|build|dist|__pypackages__)/] --extend-exclude TEXT Like --exclude, but adds additional files and directories on top of the excluded ones. (Useful if you simply want to add to the default) --force-exclude TEXT Like --exclude, but files and directories matching this regex will be excluded even when they are passed explicitly as arguments. --stdin-filename TEXT The name of the file when passing it through stdin. Useful to make sure Black will respect --force-exclude option on some editors that rely on using stdin. -W, --workers INTEGER RANGE Number of parallel workers [default: number of CPUs in the system] [x>=1] -q, --quiet Don't emit non-error messages to stderr. Errors are still emitted; silence those with 2>/dev/null. -v, --verbose Also emit messages to stderr about files that were not changed or were ignored due to exclusion patterns. --version Show the version and exit. --config FILE Read configuration from FILE path. -h, --help Show this message and exit. Installation on mega-linter Docker image PIP packages (Python): black","title":"black"},{"location":"descriptors/python_black/#black-documentation","text":"Version in MegaLinter: 22.8.0 Visit Official Web Site See How to configure black rules If custom pyproject.toml config file is not found, pyproject.toml will be used","title":"black documentation"},{"location":"descriptors/python_black/#configuration-in-megalinter","text":"Enable black by adding PYTHON_BLACK in ENABLE_LINTERS variable Disable black by adding PYTHON_BLACK in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_BLACK in APPLY_FIXES variable Variable Description Default value PYTHON_BLACK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_BLACK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_BLACK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_BLACK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_BLACK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_BLACK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_BLACK_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_BLACK_POST_COMMANDS List of bash commands to run after the linter None PYTHON_BLACK_CONFIG_FILE black configuration file name Use LINTER_DEFAULT to let the linter find it pyproject.toml PYTHON_BLACK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_BLACK_DISABLE_ERRORS Run linter but consider errors as warnings true PYTHON_BLACK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_black/#ide-integration","text":"Use black in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom python-black Visit Web Site Emacs blacken Visit Web Site Emacs reformatter.el Visit Web Site Emacs elpy Visit Web Site IDEA black Visit Web Site Sublime Text sublack Visit Web Site Visual Studio Code VsCode Python Extension","title":"IDE Integration"},{"location":"descriptors/python_black/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/python_black/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_black/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_black/#how-the-linting-is-performed","text":"black is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_black/#example-calls","text":"black --diff --check myfile.py black --config pyproject.toml --diff --check myfile.py black --config pyproject.toml myfile.py","title":"Example calls"},{"location":"descriptors/python_black/#help-content","text":"Usage: black [OPTIONS] SRC ... The uncompromising code formatter. Options: -c, --code TEXT Format the code passed in as a string. -l, --line-length INTEGER How many characters per line to allow. [default: 88] -t, --target-version [py33|py34|py35|py36|py37|py38|py39|py310|py311] Python versions that should be supported by Black's output. [default: per-file auto- detection] --pyi Format all input files like typing stubs regardless of file extension (useful when piping source on standard input). --ipynb Format all input files like Jupyter Notebooks regardless of file extension (useful when piping source on standard input). --python-cell-magics TEXT When processing Jupyter Notebooks, add the given magic to the list of known python- magics (prun, time, python3, capture, python, timeit, pypy). Useful for formatting cells with custom python magics. -S, --skip-string-normalization Don't normalize string quotes or prefixes. -C, --skip-magic-trailing-comma Don't use trailing commas as a reason to split lines. --preview Enable potentially disruptive style changes that may be added to Black's main functionality in the next major release. --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an internal error. --diff Don't write the files back, just output a diff for each file on stdout. --color / --no-color Show colored diff. Only applies when `--diff` is given. --fast / --safe If --fast given, skip temporary sanity checks. [default: --safe] --required-version TEXT Require a specific version of Black to be running (useful for unifying results across many environments e.g. with a pyproject.toml file). It can be either a major version number or an exact version. --include TEXT A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.pyi?|\\.ipynb)$] --exclude TEXT A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: /(\\.direnv|\\.eggs|\\.git|\\.h g|\\.mypy_cache|\\.nox|\\.tox|\\.venv|venv|\\.svn |_build|buck- out|build|dist|__pypackages__)/] --extend-exclude TEXT Like --exclude, but adds additional files and directories on top of the excluded ones. (Useful if you simply want to add to the default) --force-exclude TEXT Like --exclude, but files and directories matching this regex will be excluded even when they are passed explicitly as arguments. --stdin-filename TEXT The name of the file when passing it through stdin. Useful to make sure Black will respect --force-exclude option on some editors that rely on using stdin. -W, --workers INTEGER RANGE Number of parallel workers [default: number of CPUs in the system] [x>=1] -q, --quiet Don't emit non-error messages to stderr. Errors are still emitted; silence those with 2>/dev/null. -v, --verbose Also emit messages to stderr about files that were not changed or were ignored due to exclusion patterns. --version Show the version and exit. --config FILE Read configuration from FILE path. -h, --help Show this message and exit.","title":"Help content"},{"location":"descriptors/python_black/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): black","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_flake8/","text":"flake8 flake8 documentation Version in MegaLinter: 5.0.4 Visit Official Web Site See How to configure flake8 rules If custom .flake8 config file is not found, .flake8 will be used See How to disable flake8 rules in files See Index of problems detected by flake8 Configuration in MegaLinter Enable flake8 by adding PYTHON_FLAKE8 in ENABLE_LINTERS variable Disable flake8 by adding PYTHON_FLAKE8 in DISABLE_LINTERS variable Variable Description Default value PYTHON_FLAKE8_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_FLAKE8_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_FLAKE8_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_FLAKE8_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_FLAKE8_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_FLAKE8_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_FLAKE8_POST_COMMANDS List of bash commands to run after the linter None PYTHON_FLAKE8_CONFIG_FILE flake8 configuration file name Use LINTER_DEFAULT to let the linter find it .flake8 PYTHON_FLAKE8_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_FLAKE8_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_FLAKE8_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use flake8 in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-flake8 Visit Web Site IDEA flake8-support Visual Studio Code Native Support Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed flake8 is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls flake8 myfile.py flake8 --config .flake8 myfile.py Help content usage: flake8 [options] file file ... positional arguments: filename options: -h, --help show this help message and exit -v, --verbose Print more information about what is happening in flake8. This option is repeatable and will increase verbosity each time it is repeated. --output-file OUTPUT_FILE Redirect report to a file. --append-config APPEND_CONFIG Provide extra config files to parse in addition to the files found by Flake8 by default. These files are the last ones read and so they take the highest precedence when multiple files provide the same option. --config CONFIG Path to the config file that will be the authoritative config source. This will cause Flake8 to ignore all other configuration files. --isolated Ignore all configuration files. --enable-extensions ENABLE_EXTENSIONS Enable plugins and extensions that are otherwise disabled by default --require-plugins REQUIRE_PLUGINS Require specific plugins to be installed before running --version show program's version number and exit -q, --quiet Report only file names, or nothing. This option is repeatable. --color {auto,always,never} Whether to use color in output. Defaults to `auto`. --count Print total number of errors to standard output and set the exit code to 1 if total is not empty. --diff (DEPRECATED) Report changes only within line number ranges in the unified diff provided on standard in by the user. --exclude patterns Comma-separated list of files or directories to exclude. (Default: ['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) --extend-exclude patterns Comma-separated list of files or directories to add to the list of excluded ones. --filename patterns Only check for filenames matching the patterns in this comma-separated list. (Default: ['*.py']) --stdin-display-name STDIN_DISPLAY_NAME The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: stdin) --format format Format errors according to the chosen formatter. --hang-closing Hang closing bracket instead of matching indentation of opening bracket's line. --ignore errors Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504) --extend-ignore errors Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend- ignore=E4,E51,W234``. --per-file-ignores PER_FILE_IGNORES A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options. --max-line-length n Maximum allowed line length for the entirety of this run. (Default: 79) --max-doc-length n Maximum allowed doc line length for the entirety of this run. (Default: None) --indent-size n Number of spaces used for indentation (Default: 4) --select errors Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90) --extend-select errors Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend- select=E4,E51,W234``. --disable-noqa Disable the effect of \"# noqa\". This will report errors on lines with \"# noqa\" at the end. --show-source Show the source generate each error or warning. --no-show-source Negate --show-source --statistics Count errors. --exit-zero Exit with status code \"0\" even if there are errors. -j JOBS, --jobs JOBS Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, \"auto\", will auto-detect the number of processors available to use. (Default: auto) --tee Write to stdout and output-file. --benchmark Print benchmark information about this run of Flake8 --bug-report Print information necessary when preparing a bug report mccabe: --max-complexity MAX_COMPLEXITY McCabe complexity threshold pyflakes: --builtins BUILTINS define more built-ins, comma separated --doctests also check syntax of the doctests --include-in-doctest INCLUDE_IN_DOCTEST Run doctests only on these files --exclude-from-doctest EXCLUDE_FROM_DOCTEST Skip these files when running doctests Installed plugins: mccabe: 0.7.0, pycodestyle: 2.9.1, pyflakes: 2.5.0 Installation on mega-linter Docker image PIP packages (Python): flake8","title":"flake8"},{"location":"descriptors/python_flake8/#flake8","text":"","title":"flake8"},{"location":"descriptors/python_flake8/#flake8-documentation","text":"Version in MegaLinter: 5.0.4 Visit Official Web Site See How to configure flake8 rules If custom .flake8 config file is not found, .flake8 will be used See How to disable flake8 rules in files See Index of problems detected by flake8","title":"flake8 documentation"},{"location":"descriptors/python_flake8/#configuration-in-megalinter","text":"Enable flake8 by adding PYTHON_FLAKE8 in ENABLE_LINTERS variable Disable flake8 by adding PYTHON_FLAKE8 in DISABLE_LINTERS variable Variable Description Default value PYTHON_FLAKE8_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_FLAKE8_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_FLAKE8_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_FLAKE8_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_FLAKE8_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_FLAKE8_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_FLAKE8_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_FLAKE8_POST_COMMANDS List of bash commands to run after the linter None PYTHON_FLAKE8_CONFIG_FILE flake8 configuration file name Use LINTER_DEFAULT to let the linter find it .flake8 PYTHON_FLAKE8_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_FLAKE8_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_FLAKE8_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_flake8/#ide-integration","text":"Use flake8 in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-flake8 Visit Web Site IDEA flake8-support Visual Studio Code Native Support Visit Web Site","title":"IDE Integration"},{"location":"descriptors/python_flake8/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/python_flake8/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_flake8/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_flake8/#how-the-linting-is-performed","text":"flake8 is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_flake8/#example-calls","text":"flake8 myfile.py flake8 --config .flake8 myfile.py","title":"Example calls"},{"location":"descriptors/python_flake8/#help-content","text":"usage: flake8 [options] file file ... positional arguments: filename options: -h, --help show this help message and exit -v, --verbose Print more information about what is happening in flake8. This option is repeatable and will increase verbosity each time it is repeated. --output-file OUTPUT_FILE Redirect report to a file. --append-config APPEND_CONFIG Provide extra config files to parse in addition to the files found by Flake8 by default. These files are the last ones read and so they take the highest precedence when multiple files provide the same option. --config CONFIG Path to the config file that will be the authoritative config source. This will cause Flake8 to ignore all other configuration files. --isolated Ignore all configuration files. --enable-extensions ENABLE_EXTENSIONS Enable plugins and extensions that are otherwise disabled by default --require-plugins REQUIRE_PLUGINS Require specific plugins to be installed before running --version show program's version number and exit -q, --quiet Report only file names, or nothing. This option is repeatable. --color {auto,always,never} Whether to use color in output. Defaults to `auto`. --count Print total number of errors to standard output and set the exit code to 1 if total is not empty. --diff (DEPRECATED) Report changes only within line number ranges in the unified diff provided on standard in by the user. --exclude patterns Comma-separated list of files or directories to exclude. (Default: ['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']) --extend-exclude patterns Comma-separated list of files or directories to add to the list of excluded ones. --filename patterns Only check for filenames matching the patterns in this comma-separated list. (Default: ['*.py']) --stdin-display-name STDIN_DISPLAY_NAME The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8. (Default: stdin) --format format Format errors according to the chosen formatter. --hang-closing Hang closing bracket instead of matching indentation of opening bracket's line. --ignore errors Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234``. (Default: E121,E123,E126,E226,E24,E704,W503,W504) --extend-ignore errors Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend- ignore=E4,E51,W234``. --per-file-ignores PER_FILE_IGNORES A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options. --max-line-length n Maximum allowed line length for the entirety of this run. (Default: 79) --max-doc-length n Maximum allowed doc line length for the entirety of this run. (Default: None) --indent-size n Number of spaces used for indentation (Default: 4) --select errors Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234``. (Default: E,F,W,C90) --extend-select errors Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend- select=E4,E51,W234``. --disable-noqa Disable the effect of \"# noqa\". This will report errors on lines with \"# noqa\" at the end. --show-source Show the source generate each error or warning. --no-show-source Negate --show-source --statistics Count errors. --exit-zero Exit with status code \"0\" even if there are errors. -j JOBS, --jobs JOBS Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, \"auto\", will auto-detect the number of processors available to use. (Default: auto) --tee Write to stdout and output-file. --benchmark Print benchmark information about this run of Flake8 --bug-report Print information necessary when preparing a bug report mccabe: --max-complexity MAX_COMPLEXITY McCabe complexity threshold pyflakes: --builtins BUILTINS define more built-ins, comma separated --doctests also check syntax of the doctests --include-in-doctest INCLUDE_IN_DOCTEST Run doctests only on these files --exclude-from-doctest EXCLUDE_FROM_DOCTEST Skip these files when running doctests Installed plugins: mccabe: 0.7.0, pycodestyle: 2.9.1, pyflakes: 2.5.0","title":"Help content"},{"location":"descriptors/python_flake8/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): flake8","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_isort/","text":"isort documentation Version in MegaLinter: 5.10.1 Visit Official Web Site See How to configure isort rules If custom .isort.cfg config file is not found, .isort.cfg will be used See How to disable isort rules in files Configuration in MegaLinter Enable isort by adding PYTHON_ISORT in ENABLE_LINTERS variable Disable isort by adding PYTHON_ISORT in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_ISORT in APPLY_FIXES variable Variable Description Default value PYTHON_ISORT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_ISORT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_ISORT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_ISORT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_ISORT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_ISORT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_ISORT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_ISORT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_ISORT_CONFIG_FILE isort configuration file name Use LINTER_DEFAULT to let the linter find it .isort.cfg PYTHON_ISORT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_ISORT_DISABLE_ERRORS Run linter but consider errors as warnings true PYTHON_ISORT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use isort in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom atom-python-isort Visit Web Site Atom atom-isort Visit Web Site Emacs py-isort.el Visit Web Site Sublime Text isort plugin Visit Web Site vim ale Visit Web Site vim vim-isort Visit Web Site Visual Studio Code VsCode Python Extension Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed isort is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls isort --diff --check --profile black myfile.py isort --diff --check --profile black --settings-file .isort.cfg myfile.py isort --profile black --settings-file .isort.cfg myfile.py Help content usage: isort [-h] [-V] [--vn] [-v] [--only-modified] [--dedup-headings] [-q] [-d] [--overwrite-in-place] [--show-config] [--show-files] [--df] [-c] [--ws] [--sp SETTINGS_PATH] [--cr CONFIG_ROOT] [--resolve-all-configs] [--profile PROFILE] [--old-finders] [-j [JOBS]] [--ac] [--interactive] [--format-error FORMAT_ERROR] [--format-success FORMAT_SUCCESS] [--filter-files] [-s SKIP] [--extend-skip EXTEND_SKIP] [--sg SKIP_GLOB] [--extend-skip-glob EXTEND_SKIP_GLOB] [--gitignore] [--ext SUPPORTED_EXTENSIONS] [--blocked-extension BLOCKED_EXTENSIONS] [--dont-follow-links] [--filename FILENAME] [--allow-root] [-a ADD_IMPORTS] [--append] [--af] [--rm REMOVE_IMPORTS] [--float-to-top] [--dont-float-to-top] [--ca] [--cs] [-e] [--ff] [--fgw [FORCE_GRID_WRAP]] [-i INDENT] [--lbi LINES_BEFORE_IMPORTS] [--lai LINES_AFTER_IMPORTS] [--lbt LINES_BETWEEN_TYPES] [--le LINE_ENDING] [--ls] [--lss] [-m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}] [-n] [--nis] [--ot] [--dt] [--rr] [--reverse-sort] [--sort-order SORT_ORDER] [--sl] [--nsl SINGLE_LINE_EXCLUSIONS] [--tc] [--up] [-l LINE_LENGTH] [--wl WRAP_LENGTH] [--case-sensitive] [--remove-redundant-aliases] [--honor-noqa] [--treat-comment-as-code TREAT_COMMENTS_AS_CODE] [--treat-all-comment-as-code] [--formatter FORMATTER] [--color] [--ext-format EXT_FORMAT] [--star-first] [--sd DEFAULT_SECTION] [--only-sections] [--ds] [--fas] [--fss] [--hcss] [--srss] [--fass] [-t FORCE_TO_TOP] [--combine-straight-imports] [--nlb NO_LINES_BEFORE] [--src SRC_PATHS] [-b KNOWN_STANDARD_LIBRARY] [--extra-builtin EXTRA_STANDARD_LIBRARY] [-f KNOWN_FUTURE_LIBRARY] [-o KNOWN_THIRD_PARTY] [-p KNOWN_FIRST_PARTY] [--known-local-folder KNOWN_LOCAL_FOLDER] [--virtual-env VIRTUAL_ENV] [--conda-env CONDA_ENV] [--py {all,2,27,3,310,35,36,37,38,39,auto}] [files ...] Sort Python import definitions alphabetically within logical sections. Run with no arguments to see a quick start guide, otherwise, one or more files/directories/stdin must be provided. Use `-` as the first argument to represent stdin. Use --interactive to use the pre 5.0.0 interactive behavior. If you've used isort 4 but are new to isort 5, see the upgrading guide: https://pycqa.github.io/isort/docs/upgrade_guides/5.0.0.html general options: -h, --help show this help message and exit -V, --version Displays the currently installed version of isort. --vn, --version-number Returns just the current version number without the logo -v, --verbose Shows verbose output, such as when files are skipped or when a check is successful. --only-modified, --om Suppresses verbose output for non-modified files. --dedup-headings Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set. -q, --quiet Shows extra quiet output, only errors are outputted. -d, --stdout Force resulting output to stdout, instead of in-place. --overwrite-in-place Tells isort to overwrite in place using the same file handle. Comes at a performance and memory usage penalty over its standard approach but ensures all file flags and modes stay unchanged. --show-config See isort's determined config, as well as sources of config options. --show-files See the files isort will be run against with the current config options. --df, --diff Prints a diff of all the changes isort would make to a file, instead of changing it in place -c, --check-only, --check Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. Returns 0 when nothing would change and returns 1 when the file would be reformatted. --ws, --ignore-whitespace Tells isort to ignore whitespace differences when --check-only is being used. --sp SETTINGS_PATH, --settings-path SETTINGS_PATH, --settings-file SETTINGS_PATH, --settings SETTINGS_PATH Explicitly set the settings path or file instead of auto determining based on file location. --cr CONFIG_ROOT, --config-root CONFIG_ROOT Explicitly set the config root for resolving all configs. When used with the --resolve-all-configs flag, isort will look at all sub-folders in this config root to resolve config files and sort files based on the closest available config(if any) --resolve-all-configs Tells isort to resolve the configs for all sub- directories and sort files in terms of its closest config files. --profile PROFILE Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug, wemake, appnexus. As well as any shared profiles. --old-finders, --magic-placement Use the old deprecated finder logic that relies on environment introspection magic. -j [JOBS], --jobs [JOBS] Number of files to process in parallel. --ac, --atomic Ensures the output doesn't save if the resulting file contains syntax errors. --interactive Tells isort to apply changes interactively. --format-error FORMAT_ERROR Override the format used to print errors. --format-success FORMAT_SUCCESS Override the format used to print success. target options: files One or more Python source files that need their imports sorted. --filter-files Tells isort to filter files even when they are explicitly passed in as part of the CLI command. -s SKIP, --skip SKIP Files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip-glob. --extend-skip EXTEND_SKIP Extends --skip to add additional files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip- glob. --sg SKIP_GLOB, --skip-glob SKIP_GLOB Files that isort should skip over. --extend-skip-glob EXTEND_SKIP_GLOB Additional files that isort should skip over (extending --skip-glob). --gitignore, --skip-gitignore Treat project as a git repository and ignore files listed in .gitignore. NOTE: This requires git to be installed and accessible from the same shell as isort. --ext SUPPORTED_EXTENSIONS, --extension SUPPORTED_EXTENSIONS, --supported-extension SUPPORTED_EXTENSIONS Specifies what extensions isort can be run against. --blocked-extension BLOCKED_EXTENSIONS Specifies what extensions isort can never be run against. --dont-follow-links Tells isort not to follow symlinks that are encountered when running recursively. --filename FILENAME Provide the filename associated with a stream. --allow-root Tells isort not to treat / specially, allowing it to be run against the root dir. general output options: -a ADD_IMPORTS, --add-import ADD_IMPORTS Adds the specified import line to all files, automatically determining correct placement. --append, --append-only Only adds the imports specified in --add-import if the file contains existing imports. --af, --force-adds Forces import adds even if the original file is empty. --rm REMOVE_IMPORTS, --remove-import REMOVE_IMPORTS Removes the specified import from all files. --float-to-top Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching. *NOTE*: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty. --dont-float-to-top Forces --float-to-top setting off. See --float-to-top for more information. --ca, --combine-as Combines as imports on the same line. --cs, --combine-star Ensures that if a star import is present, nothing else is imported from that namespace. -e, --balanced Balances wrapping to produce the most consistent line length possible --ff, --from-first Switches the typical ordering preference, showing from imports first then straight ones. --fgw [FORCE_GRID_WRAP], --force-grid-wrap [FORCE_GRID_WRAP] Force number of from imports (defaults to 2 when passed as CLI flag without value) to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered. -i INDENT, --indent INDENT String to place for indents defaults to \" \" (4 spaces). --lbi LINES_BEFORE_IMPORTS, --lines-before-imports LINES_BEFORE_IMPORTS --lai LINES_AFTER_IMPORTS, --lines-after-imports LINES_AFTER_IMPORTS --lbt LINES_BETWEEN_TYPES, --lines-between-types LINES_BETWEEN_TYPES --le LINE_ENDING, --line-ending LINE_ENDING Forces line endings to the specified value. If not set, values will be guessed per-file. --ls, --length-sort Sort imports by their string length. --lss, --length-sort-straight Sort straight imports by their string length. Similar to `length_sort` but applies only to straight imports and doesn't affect from imports. -m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}, --multi-line {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11} Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-deprecated-alias-for-5, 7-noqa, 8-vertical-hanging- indent-bracket, 9-vertical-prefix-from-module-import, 10-hanging-indent-with-parentheses). -n, --ensure-newline-before-comments Inserts a blank line before a comment following an import. --nis, --no-inline-sort Leaves `from` imports with multiple imports 'as-is' (e.g. `from foo import a, c ,b`). --ot, --order-by-type Order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the `--dont-order-by-type` option will turn this off. --dt, --dont-order-by-type Don't order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using `--order-by-type`. --rr, --reverse-relative Reverse order of relative imports. --reverse-sort Reverses the ordering of imports. --sort-order SORT_ORDER Specify sorting function. Can be built in (natural[default] = force numbers to be sequential, native = Python's built-in sorted function) or an installable plugin. --sl, --force-single-line-imports Forces all from imports to appear on their own line --nsl SINGLE_LINE_EXCLUSIONS, --single-line-exclusions SINGLE_LINE_EXCLUSIONS One or more modules to exclude from the single line rule. --tc, --trailing-comma Includes a trailing comma on multi line imports that include parentheses. --up, --use-parentheses Use parentheses for line continuation on length limit instead of slashes. **NOTE**: This is separate from wrap modes, and only affects how individual lines that are too long get continued, not sections of multiple imports. -l LINE_LENGTH, -w LINE_LENGTH, --line-length LINE_LENGTH, --line-width LINE_LENGTH The max length of an import line (used for wrapping long imports). --wl WRAP_LENGTH, --wrap-length WRAP_LENGTH Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length. --case-sensitive Tells isort to include casing when sorting module names --remove-redundant-aliases Tells isort to remove redundant aliases from imports, such as `import os as os`. This defaults to `False` simply because some projects use these seemingly useless aliases to signify intent and change behaviour. --honor-noqa Tells isort to honor noqa comments to enforce skipping those comments. --treat-comment-as-code TREAT_COMMENTS_AS_CODE Tells isort to treat the specified single line comment(s) as if they are code. --treat-all-comment-as-code Tells isort to treat all single line comments as if they are code. --formatter FORMATTER Specifies the name of a formatting plugin to use when producing output. --color Tells isort to use color in terminal output. --ext-format EXT_FORMAT Tells isort to format the given files according to an extensions formatting rules. --star-first Forces star imports above others to avoid overriding directly imported variables. section output options: --sd DEFAULT_SECTION, --section-default DEFAULT_SECTION Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER') --only-sections, --os Causes imports to be sorted based on their sections like STDLIB, THIRDPARTY, etc. Within sections, the imports are ordered by their import style and the imports with the same style maintain their relative positions. --ds, --no-sections Put all imports into the same section bucket --fas, --force-alphabetical-sort Force all imports to be sorted as a single section --fss, --force-sort-within-sections Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style. --hcss, --honor-case-in-force-sorted-sections Honor `--case-sensitive` when `--force-sort-within- sections` is being used. Without this option set, `--order-by-type` decides module name ordering too. --srss, --sort-relative-in-force-sorted-sections When using `--force-sort-within-sections`, sort relative imports the same way as they are sorted when not using that setting. --fass, --force-alphabetical-sort-within-sections Force all imports to be sorted alphabetically within a section -t FORCE_TO_TOP, --top FORCE_TO_TOP Force specific imports to the top of their appropriate section. --combine-straight-imports, --csi Combines all the bare straight imports of the same section in a single line. Won't work with sections which have 'as' imports --nlb NO_LINES_BEFORE, --no-lines-before NO_LINES_BEFORE Sections which should not be split with previous by empty lines --src SRC_PATHS, --src-path SRC_PATHS Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). Glob expansion (`*` and `**`) is supported for this option. -b KNOWN_STANDARD_LIBRARY, --builtin KNOWN_STANDARD_LIBRARY Force isort to recognize a module as part of Python's standard library. --extra-builtin EXTRA_STANDARD_LIBRARY Extra modules to be included in the list of ones in Python's standard library. -f KNOWN_FUTURE_LIBRARY, --future KNOWN_FUTURE_LIBRARY Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of __future__ handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six, a better option is to create another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom-sections-and- ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463. -o KNOWN_THIRD_PARTY, --thirdparty KNOWN_THIRD_PARTY Force isort to recognize a module as being part of a third party library. -p KNOWN_FIRST_PARTY, --project KNOWN_FIRST_PARTY Force isort to recognize a module as being part of the current python project. --known-local-folder KNOWN_LOCAL_FOLDER Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module). --virtual-env VIRTUAL_ENV Virtual environment to use for determining whether a package is third-party --conda-env CONDA_ENV Conda environment to use for determining whether a package is third-party --py {all,2,27,3,310,35,36,37,38,39,auto}, --python-version {all,2,27,3,310,35,36,37,38,39,auto} Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 310) will be used. Installation on mega-linter Docker image PIP packages (Python): isort black","title":"isort"},{"location":"descriptors/python_isort/#isort-documentation","text":"Version in MegaLinter: 5.10.1 Visit Official Web Site See How to configure isort rules If custom .isort.cfg config file is not found, .isort.cfg will be used See How to disable isort rules in files","title":"isort documentation"},{"location":"descriptors/python_isort/#configuration-in-megalinter","text":"Enable isort by adding PYTHON_ISORT in ENABLE_LINTERS variable Disable isort by adding PYTHON_ISORT in DISABLE_LINTERS variable Enable auto-fixes by adding PYTHON_ISORT in APPLY_FIXES variable Variable Description Default value PYTHON_ISORT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_ISORT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_ISORT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_ISORT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_ISORT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_ISORT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_ISORT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_ISORT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_ISORT_CONFIG_FILE isort configuration file name Use LINTER_DEFAULT to let the linter find it .isort.cfg PYTHON_ISORT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_ISORT_DISABLE_ERRORS Run linter but consider errors as warnings true PYTHON_ISORT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_isort/#ide-integration","text":"Use isort in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom atom-python-isort Visit Web Site Atom atom-isort Visit Web Site Emacs py-isort.el Visit Web Site Sublime Text isort plugin Visit Web Site vim ale Visit Web Site vim vim-isort Visit Web Site Visual Studio Code VsCode Python Extension Visit Web Site","title":"IDE Integration"},{"location":"descriptors/python_isort/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/python_isort/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_isort/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_isort/#how-the-linting-is-performed","text":"isort is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_isort/#example-calls","text":"isort --diff --check --profile black myfile.py isort --diff --check --profile black --settings-file .isort.cfg myfile.py isort --profile black --settings-file .isort.cfg myfile.py","title":"Example calls"},{"location":"descriptors/python_isort/#help-content","text":"usage: isort [-h] [-V] [--vn] [-v] [--only-modified] [--dedup-headings] [-q] [-d] [--overwrite-in-place] [--show-config] [--show-files] [--df] [-c] [--ws] [--sp SETTINGS_PATH] [--cr CONFIG_ROOT] [--resolve-all-configs] [--profile PROFILE] [--old-finders] [-j [JOBS]] [--ac] [--interactive] [--format-error FORMAT_ERROR] [--format-success FORMAT_SUCCESS] [--filter-files] [-s SKIP] [--extend-skip EXTEND_SKIP] [--sg SKIP_GLOB] [--extend-skip-glob EXTEND_SKIP_GLOB] [--gitignore] [--ext SUPPORTED_EXTENSIONS] [--blocked-extension BLOCKED_EXTENSIONS] [--dont-follow-links] [--filename FILENAME] [--allow-root] [-a ADD_IMPORTS] [--append] [--af] [--rm REMOVE_IMPORTS] [--float-to-top] [--dont-float-to-top] [--ca] [--cs] [-e] [--ff] [--fgw [FORCE_GRID_WRAP]] [-i INDENT] [--lbi LINES_BEFORE_IMPORTS] [--lai LINES_AFTER_IMPORTS] [--lbt LINES_BETWEEN_TYPES] [--le LINE_ENDING] [--ls] [--lss] [-m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}] [-n] [--nis] [--ot] [--dt] [--rr] [--reverse-sort] [--sort-order SORT_ORDER] [--sl] [--nsl SINGLE_LINE_EXCLUSIONS] [--tc] [--up] [-l LINE_LENGTH] [--wl WRAP_LENGTH] [--case-sensitive] [--remove-redundant-aliases] [--honor-noqa] [--treat-comment-as-code TREAT_COMMENTS_AS_CODE] [--treat-all-comment-as-code] [--formatter FORMATTER] [--color] [--ext-format EXT_FORMAT] [--star-first] [--sd DEFAULT_SECTION] [--only-sections] [--ds] [--fas] [--fss] [--hcss] [--srss] [--fass] [-t FORCE_TO_TOP] [--combine-straight-imports] [--nlb NO_LINES_BEFORE] [--src SRC_PATHS] [-b KNOWN_STANDARD_LIBRARY] [--extra-builtin EXTRA_STANDARD_LIBRARY] [-f KNOWN_FUTURE_LIBRARY] [-o KNOWN_THIRD_PARTY] [-p KNOWN_FIRST_PARTY] [--known-local-folder KNOWN_LOCAL_FOLDER] [--virtual-env VIRTUAL_ENV] [--conda-env CONDA_ENV] [--py {all,2,27,3,310,35,36,37,38,39,auto}] [files ...] Sort Python import definitions alphabetically within logical sections. Run with no arguments to see a quick start guide, otherwise, one or more files/directories/stdin must be provided. Use `-` as the first argument to represent stdin. Use --interactive to use the pre 5.0.0 interactive behavior. If you've used isort 4 but are new to isort 5, see the upgrading guide: https://pycqa.github.io/isort/docs/upgrade_guides/5.0.0.html general options: -h, --help show this help message and exit -V, --version Displays the currently installed version of isort. --vn, --version-number Returns just the current version number without the logo -v, --verbose Shows verbose output, such as when files are skipped or when a check is successful. --only-modified, --om Suppresses verbose output for non-modified files. --dedup-headings Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set. -q, --quiet Shows extra quiet output, only errors are outputted. -d, --stdout Force resulting output to stdout, instead of in-place. --overwrite-in-place Tells isort to overwrite in place using the same file handle. Comes at a performance and memory usage penalty over its standard approach but ensures all file flags and modes stay unchanged. --show-config See isort's determined config, as well as sources of config options. --show-files See the files isort will be run against with the current config options. --df, --diff Prints a diff of all the changes isort would make to a file, instead of changing it in place -c, --check-only, --check Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. Returns 0 when nothing would change and returns 1 when the file would be reformatted. --ws, --ignore-whitespace Tells isort to ignore whitespace differences when --check-only is being used. --sp SETTINGS_PATH, --settings-path SETTINGS_PATH, --settings-file SETTINGS_PATH, --settings SETTINGS_PATH Explicitly set the settings path or file instead of auto determining based on file location. --cr CONFIG_ROOT, --config-root CONFIG_ROOT Explicitly set the config root for resolving all configs. When used with the --resolve-all-configs flag, isort will look at all sub-folders in this config root to resolve config files and sort files based on the closest available config(if any) --resolve-all-configs Tells isort to resolve the configs for all sub- directories and sort files in terms of its closest config files. --profile PROFILE Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug, wemake, appnexus. As well as any shared profiles. --old-finders, --magic-placement Use the old deprecated finder logic that relies on environment introspection magic. -j [JOBS], --jobs [JOBS] Number of files to process in parallel. --ac, --atomic Ensures the output doesn't save if the resulting file contains syntax errors. --interactive Tells isort to apply changes interactively. --format-error FORMAT_ERROR Override the format used to print errors. --format-success FORMAT_SUCCESS Override the format used to print success. target options: files One or more Python source files that need their imports sorted. --filter-files Tells isort to filter files even when they are explicitly passed in as part of the CLI command. -s SKIP, --skip SKIP Files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip-glob. --extend-skip EXTEND_SKIP Extends --skip to add additional files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip- glob. --sg SKIP_GLOB, --skip-glob SKIP_GLOB Files that isort should skip over. --extend-skip-glob EXTEND_SKIP_GLOB Additional files that isort should skip over (extending --skip-glob). --gitignore, --skip-gitignore Treat project as a git repository and ignore files listed in .gitignore. NOTE: This requires git to be installed and accessible from the same shell as isort. --ext SUPPORTED_EXTENSIONS, --extension SUPPORTED_EXTENSIONS, --supported-extension SUPPORTED_EXTENSIONS Specifies what extensions isort can be run against. --blocked-extension BLOCKED_EXTENSIONS Specifies what extensions isort can never be run against. --dont-follow-links Tells isort not to follow symlinks that are encountered when running recursively. --filename FILENAME Provide the filename associated with a stream. --allow-root Tells isort not to treat / specially, allowing it to be run against the root dir. general output options: -a ADD_IMPORTS, --add-import ADD_IMPORTS Adds the specified import line to all files, automatically determining correct placement. --append, --append-only Only adds the imports specified in --add-import if the file contains existing imports. --af, --force-adds Forces import adds even if the original file is empty. --rm REMOVE_IMPORTS, --remove-import REMOVE_IMPORTS Removes the specified import from all files. --float-to-top Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching. *NOTE*: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty. --dont-float-to-top Forces --float-to-top setting off. See --float-to-top for more information. --ca, --combine-as Combines as imports on the same line. --cs, --combine-star Ensures that if a star import is present, nothing else is imported from that namespace. -e, --balanced Balances wrapping to produce the most consistent line length possible --ff, --from-first Switches the typical ordering preference, showing from imports first then straight ones. --fgw [FORCE_GRID_WRAP], --force-grid-wrap [FORCE_GRID_WRAP] Force number of from imports (defaults to 2 when passed as CLI flag without value) to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered. -i INDENT, --indent INDENT String to place for indents defaults to \" \" (4 spaces). --lbi LINES_BEFORE_IMPORTS, --lines-before-imports LINES_BEFORE_IMPORTS --lai LINES_AFTER_IMPORTS, --lines-after-imports LINES_AFTER_IMPORTS --lbt LINES_BETWEEN_TYPES, --lines-between-types LINES_BETWEEN_TYPES --le LINE_ENDING, --line-ending LINE_ENDING Forces line endings to the specified value. If not set, values will be guessed per-file. --ls, --length-sort Sort imports by their string length. --lss, --length-sort-straight Sort straight imports by their string length. Similar to `length_sort` but applies only to straight imports and doesn't affect from imports. -m {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11}, --multi-line {GRID,VERTICAL,HANGING_INDENT,VERTICAL_HANGING_INDENT,VERTICAL_GRID,VERTICAL_GRID_GROUPED,VERTICAL_GRID_GROUPED_NO_COMMA,NOQA,VERTICAL_HANGING_INDENT_BRACKET,VERTICAL_PREFIX_FROM_MODULE_IMPORT,HANGING_INDENT_WITH_PARENTHESES,BACKSLASH_GRID,0,1,2,3,4,5,6,7,8,9,10,11} Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-deprecated-alias-for-5, 7-noqa, 8-vertical-hanging- indent-bracket, 9-vertical-prefix-from-module-import, 10-hanging-indent-with-parentheses). -n, --ensure-newline-before-comments Inserts a blank line before a comment following an import. --nis, --no-inline-sort Leaves `from` imports with multiple imports 'as-is' (e.g. `from foo import a, c ,b`). --ot, --order-by-type Order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the `--dont-order-by-type` option will turn this off. --dt, --dont-order-by-type Don't order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using `--order-by-type`. --rr, --reverse-relative Reverse order of relative imports. --reverse-sort Reverses the ordering of imports. --sort-order SORT_ORDER Specify sorting function. Can be built in (natural[default] = force numbers to be sequential, native = Python's built-in sorted function) or an installable plugin. --sl, --force-single-line-imports Forces all from imports to appear on their own line --nsl SINGLE_LINE_EXCLUSIONS, --single-line-exclusions SINGLE_LINE_EXCLUSIONS One or more modules to exclude from the single line rule. --tc, --trailing-comma Includes a trailing comma on multi line imports that include parentheses. --up, --use-parentheses Use parentheses for line continuation on length limit instead of slashes. **NOTE**: This is separate from wrap modes, and only affects how individual lines that are too long get continued, not sections of multiple imports. -l LINE_LENGTH, -w LINE_LENGTH, --line-length LINE_LENGTH, --line-width LINE_LENGTH The max length of an import line (used for wrapping long imports). --wl WRAP_LENGTH, --wrap-length WRAP_LENGTH Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length. --case-sensitive Tells isort to include casing when sorting module names --remove-redundant-aliases Tells isort to remove redundant aliases from imports, such as `import os as os`. This defaults to `False` simply because some projects use these seemingly useless aliases to signify intent and change behaviour. --honor-noqa Tells isort to honor noqa comments to enforce skipping those comments. --treat-comment-as-code TREAT_COMMENTS_AS_CODE Tells isort to treat the specified single line comment(s) as if they are code. --treat-all-comment-as-code Tells isort to treat all single line comments as if they are code. --formatter FORMATTER Specifies the name of a formatting plugin to use when producing output. --color Tells isort to use color in terminal output. --ext-format EXT_FORMAT Tells isort to format the given files according to an extensions formatting rules. --star-first Forces star imports above others to avoid overriding directly imported variables. section output options: --sd DEFAULT_SECTION, --section-default DEFAULT_SECTION Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER') --only-sections, --os Causes imports to be sorted based on their sections like STDLIB, THIRDPARTY, etc. Within sections, the imports are ordered by their import style and the imports with the same style maintain their relative positions. --ds, --no-sections Put all imports into the same section bucket --fas, --force-alphabetical-sort Force all imports to be sorted as a single section --fss, --force-sort-within-sections Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style. --hcss, --honor-case-in-force-sorted-sections Honor `--case-sensitive` when `--force-sort-within- sections` is being used. Without this option set, `--order-by-type` decides module name ordering too. --srss, --sort-relative-in-force-sorted-sections When using `--force-sort-within-sections`, sort relative imports the same way as they are sorted when not using that setting. --fass, --force-alphabetical-sort-within-sections Force all imports to be sorted alphabetically within a section -t FORCE_TO_TOP, --top FORCE_TO_TOP Force specific imports to the top of their appropriate section. --combine-straight-imports, --csi Combines all the bare straight imports of the same section in a single line. Won't work with sections which have 'as' imports --nlb NO_LINES_BEFORE, --no-lines-before NO_LINES_BEFORE Sections which should not be split with previous by empty lines --src SRC_PATHS, --src-path SRC_PATHS Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). Glob expansion (`*` and `**`) is supported for this option. -b KNOWN_STANDARD_LIBRARY, --builtin KNOWN_STANDARD_LIBRARY Force isort to recognize a module as part of Python's standard library. --extra-builtin EXTRA_STANDARD_LIBRARY Extra modules to be included in the list of ones in Python's standard library. -f KNOWN_FUTURE_LIBRARY, --future KNOWN_FUTURE_LIBRARY Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of __future__ handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six, a better option is to create another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom-sections-and- ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463. -o KNOWN_THIRD_PARTY, --thirdparty KNOWN_THIRD_PARTY Force isort to recognize a module as being part of a third party library. -p KNOWN_FIRST_PARTY, --project KNOWN_FIRST_PARTY Force isort to recognize a module as being part of the current python project. --known-local-folder KNOWN_LOCAL_FOLDER Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module). --virtual-env VIRTUAL_ENV Virtual environment to use for determining whether a package is third-party --conda-env CONDA_ENV Conda environment to use for determining whether a package is third-party --py {all,2,27,3,310,35,36,37,38,39,auto}, --python-version {all,2,27,3,310,35,36,37,38,39,auto} Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 310) will be used.","title":"Help content"},{"location":"descriptors/python_isort/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): isort black","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_mypy/","text":"Optional static typing checks for python If you don't use python static typing, you should disable this linter by adding PYTHON_MYPY in DISABLE_LINTERS variable in your .mega-linter.yml config file mypy documentation Version in MegaLinter: 0.981 Visit Official Web Site See How to configure mypy rules If custom .mypy.ini config file is not found, .mypy.ini will be used See How to disable mypy rules in files Configuration in MegaLinter Enable mypy by adding PYTHON_MYPY in ENABLE_LINTERS variable Disable mypy by adding PYTHON_MYPY in DISABLE_LINTERS variable Variable Description Default value PYTHON_MYPY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_MYPY_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_MYPY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_MYPY_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_MYPY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_MYPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_MYPY_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_MYPY_POST_COMMANDS List of bash commands to run after the linter None PYTHON_MYPY_CONFIG_FILE mypy configuration file name Use LINTER_DEFAULT to let the linter find it .mypy.ini PYTHON_MYPY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_MYPY_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_MYPY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use mypy in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-mypy Visit Web Site Emacs Flycheck mypy Visit Web Site IDEA mypy-official Visit Web Site Sublime Text SublimeLinter-contrib-mypy Visit Web Site vim Ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code Mypy MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed mypy is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls mypy myfile.py mypy --config-file .mypy.yml myfile.py Help content usage: mypy [-h] [-v] [-V] [more options; see below] [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...] Mypy is a program that will type check your Python code. Pass in any files or folders you want to type check. Mypy will recursively traverse any provided folders to find .py files: $ mypy my_program.py my_src_folder For more information on getting started, see: - https://mypy.readthedocs.io/en/stable/getting_started.html For more details on both running mypy and using the flags below, see: - https://mypy.readthedocs.io/en/stable/running_mypy.html - https://mypy.readthedocs.io/en/stable/command_line.html You can also use a config file to configure mypy instead of using command line flags. For more details, see: - https://mypy.readthedocs.io/en/stable/config_file.html Optional arguments: -h, --help Show this help message and exit -v, --verbose More verbose messages -V, --version Show program's version number and exit Config file: Use a config file instead of command line arguments. This is useful if you are using many flags or want to set different options per each module. --config-file CONFIG_FILE Configuration file, must have a [mypy] section (defaults to mypy.ini, .mypy.ini, pyproject.toml, setup.cfg, ~/.config/mypy/config, ~/.mypy.ini) --warn-unused-configs Warn about unused '[mypy-<pattern>]' or '[[tool.mypy.overrides]]' config sections (inverse: --no-warn-unused-configs) Import discovery: Configure how imports are discovered and followed. --namespace-packages Support namespace packages (PEP 420, __init__.py- less) (inverse: --no-namespace-packages) --ignore-missing-imports Silently ignore imports of missing modules --follow-imports {normal,silent,skip,error} How to treat imports (default normal) --python-executable EXECUTABLE Python executable used for finding PEP 561 compliant installed packages and stubs --no-site-packages Do not search for installed PEP 561 compliant packages --no-silence-site-packages Do not silence errors in PEP 561 compliant installed packages Platform configuration: Type check code assuming it will be run under certain runtime conditions. By default, mypy assumes your code will be run using the same operating system and Python version you are using to run mypy itself. --python-version x.y Type check code assuming it will be running on Python x.y -2, --py2 Use Python 2 mode (same as --python-version 2.7) --platform PLATFORM Type check special-cased code for the given OS platform (defaults to sys.platform) --always-true NAME Additional variable to be considered True (may be repeated) --always-false NAME Additional variable to be considered False (may be repeated) Disallow dynamic typing: Disallow the use of the dynamic 'Any' type under certain conditions. --disallow-any-unimported Disallow Any types resulting from unfollowed imports --disallow-any-expr Disallow all expressions that have type Any --disallow-any-decorated Disallow functions that have Any in their signature after decorator transformation --disallow-any-explicit Disallow explicit Any in type positions --disallow-any-generics Disallow usage of generic types that do not specify explicit type parameters (inverse: --allow-any-generics) --disallow-subclassing-any Disallow subclassing values of type 'Any' when defining classes (inverse: --allow-subclassing- any) Untyped definitions and calls: Configure how untyped definitions and calls are handled. Note: by default, mypy ignores any untyped function definitions and assumes any calls to such functions have a return type of 'Any'. --disallow-untyped-calls Disallow calling functions without type annotations from functions with type annotations (inverse: --allow-untyped-calls) --disallow-untyped-defs Disallow defining functions without type annotations or with incomplete type annotations (inverse: --allow-untyped-defs) --disallow-incomplete-defs Disallow defining functions with incomplete type annotations (inverse: --allow-incomplete-defs) --check-untyped-defs Type check the interior of functions without type annotations (inverse: --no-check-untyped-defs) --disallow-untyped-decorators Disallow decorating typed functions with untyped decorators (inverse: --allow-untyped-decorators) None and Optional handling: Adjust how values of type 'None' are handled. For more context on how mypy handles values of type 'None', see: https://mypy.readthedocs.io/en/stable/kinds_of_types.html#no-strict- optional --no-implicit-optional Don't assume arguments with default values of None are Optional (inverse: --implicit-optional) --no-strict-optional Disable strict Optional checks (inverse: --strict- optional) Configuring warnings: Detect code that is sound but redundant or problematic. --warn-redundant-casts Warn about casting an expression to its inferred type (inverse: --no-warn-redundant-casts) --warn-unused-ignores Warn about unneeded '# type: ignore' comments (inverse: --no-warn-unused-ignores) --no-warn-no-return Do not warn about functions that end without returning (inverse: --warn-no-return) --warn-return-any Warn about returning values of type Any from non- Any typed functions (inverse: --no-warn-return- any) --warn-unreachable Warn about statements or expressions inferred to be unreachable (inverse: --no-warn-unreachable) Miscellaneous strictness flags: --allow-untyped-globals Suppress toplevel errors caused by missing annotations (inverse: --disallow-untyped-globals) --allow-redefinition Allow unconditional variable redefinition with a new type (inverse: --disallow-redefinition) --no-implicit-reexport Treat imports as private unless aliased (inverse: --implicit-reexport) --strict-equality Prohibit equality, identity, and container checks for non-overlapping types (inverse: --no-strict- equality) --strict-concatenate Make arguments prepended via Concatenate be truly positional-only (inverse: --no-strict-concatenate) --strict Strict mode; enables the following flags: --warn- unused-configs, --disallow-any-generics, --disallow-subclassing-any, --disallow-untyped- calls, --disallow-untyped-defs, --disallow- incomplete-defs, --check-untyped-defs, --disallow- untyped-decorators, --no-implicit-optional, --warn-redundant-casts, --warn-unused-ignores, --warn-return-any, --no-implicit-reexport, --strict-equality, --strict-concatenate --disable-error-code NAME Disable a specific error code --enable-error-code NAME Enable a specific error code Configuring error messages: Adjust the amount of detail shown in error messages. --show-error-context Precede errors with \"note:\" messages explaining context (inverse: --hide-error-context) --show-column-numbers Show column numbers in error messages (inverse: --hide-column-numbers) --show-error-end Show end line/end column numbers in error messages. This implies --show-column-numbers (inverse: --hide-error-end) --show-error-codes Show error codes in error messages (inverse: --hide-error-codes) --pretty Use visually nicer output in error messages: Use soft word wrap, show source code snippets, and show error location markers (inverse: --no-pretty) --no-color-output Do not colorize error messages (inverse: --color- output) --no-error-summary Do not show error stats summary (inverse: --error- summary) --show-absolute-path Show absolute paths to files (inverse: --hide- absolute-path) Incremental mode: Adjust how mypy incrementally type checks and caches modules. Mypy caches type information about modules into a cache to let you speed up future invocations of mypy. Also see mypy's daemon mode: mypy.readthedocs.io/en/stable/mypy_daemon.html#mypy-daemon --no-incremental Disable module cache (inverse: --incremental) --cache-dir DIR Store module cache info in the given folder in incremental mode (defaults to '.mypy_cache') --sqlite-cache Use a sqlite database to store the cache (inverse: --no-sqlite-cache) --cache-fine-grained Include fine-grained dependency information in the cache for the mypy daemon --skip-version-check Allow using cache written by older mypy version --skip-cache-mtime-checks Skip cache internal consistency checks based on mtime Advanced options: Debug and customize mypy internals. --pdb Invoke pdb on fatal error --show-traceback, --tb Show traceback on fatal error --raise-exceptions Raise exception on fatal error --custom-typing-module MODULE Use a custom typing module --enable-recursive-aliases Experimental support for recursive type aliases --custom-typeshed-dir DIR Use the custom typeshed in DIR --warn-incomplete-stub Warn if missing type annotation in typeshed, only relevant with --disallow-untyped-defs or --disallow-incomplete-defs enabled (inverse: --no- warn-incomplete-stub) --shadow-file SOURCE_FILE SHADOW_FILE When encountering SOURCE_FILE, read and type check the contents of SHADOW_FILE instead. Report generation: Generate a report in the specified format. --any-exprs-report DIR --cobertura-xml-report DIR --html-report DIR --linecount-report DIR --linecoverage-report DIR --lineprecision-report DIR --txt-report DIR --xml-report DIR --xslt-html-report DIR --xslt-txt-report DIR Miscellaneous: --junit-xml JUNIT_XML Write junit.xml to the given file --find-occurrences CLASS.MEMBER Print out all usages of a class member (experimental) --scripts-are-modules Script x becomes module x instead of __main__ --install-types Install detected missing library stub packages using pip (inverse: --no-install-types) --non-interactive Install stubs without asking for confirmation and hide errors, with --install-types (inverse: --interactive) Running code: Specify the code you want to type check. For more details, see mypy.readthedocs.io/en/stable/running_mypy.html#running-mypy --explicit-package-bases Use current directory and MYPYPATH to determine module names of files passed (inverse: --no- explicit-package-bases) --exclude PATTERN Regular expression to match file names, directory names or paths which mypy should ignore while recursively discovering files to check, e.g. --exclude '/setup\\.py$'. May be specified more than once, eg. --exclude a --exclude b -m MODULE, --module MODULE Type-check module; can repeat for more modules -p PACKAGE, --package PACKAGE Type-check package recursively; can be repeated -c PROGRAM_TEXT, --command PROGRAM_TEXT Type-check program passed in as string files Type-check given files or directories Environment variables: Define MYPYPATH for additional module search path entries. Define MYPY_CACHE_DIR to override configuration cache_dir path. Installation on mega-linter Docker image PIP packages (Python): mypy","title":"mypy"},{"location":"descriptors/python_mypy/#mypy-documentation","text":"Version in MegaLinter: 0.981 Visit Official Web Site See How to configure mypy rules If custom .mypy.ini config file is not found, .mypy.ini will be used See How to disable mypy rules in files","title":"mypy documentation"},{"location":"descriptors/python_mypy/#configuration-in-megalinter","text":"Enable mypy by adding PYTHON_MYPY in ENABLE_LINTERS variable Disable mypy by adding PYTHON_MYPY in DISABLE_LINTERS variable Variable Description Default value PYTHON_MYPY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_MYPY_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_MYPY_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_MYPY_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_MYPY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_MYPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_MYPY_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_MYPY_POST_COMMANDS List of bash commands to run after the linter None PYTHON_MYPY_CONFIG_FILE mypy configuration file name Use LINTER_DEFAULT to let the linter find it .mypy.ini PYTHON_MYPY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_MYPY_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_MYPY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_mypy/#ide-integration","text":"Use mypy in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-mypy Visit Web Site Emacs Flycheck mypy Visit Web Site IDEA mypy-official Visit Web Site Sublime Text SublimeLinter-contrib-mypy Visit Web Site vim Ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code Mypy","title":"IDE Integration"},{"location":"descriptors/python_mypy/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/python_mypy/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_mypy/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_mypy/#how-the-linting-is-performed","text":"mypy is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_mypy/#example-calls","text":"mypy myfile.py mypy --config-file .mypy.yml myfile.py","title":"Example calls"},{"location":"descriptors/python_mypy/#help-content","text":"usage: mypy [-h] [-v] [-V] [more options; see below] [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...] Mypy is a program that will type check your Python code. Pass in any files or folders you want to type check. Mypy will recursively traverse any provided folders to find .py files: $ mypy my_program.py my_src_folder For more information on getting started, see: - https://mypy.readthedocs.io/en/stable/getting_started.html For more details on both running mypy and using the flags below, see: - https://mypy.readthedocs.io/en/stable/running_mypy.html - https://mypy.readthedocs.io/en/stable/command_line.html You can also use a config file to configure mypy instead of using command line flags. For more details, see: - https://mypy.readthedocs.io/en/stable/config_file.html Optional arguments: -h, --help Show this help message and exit -v, --verbose More verbose messages -V, --version Show program's version number and exit Config file: Use a config file instead of command line arguments. This is useful if you are using many flags or want to set different options per each module. --config-file CONFIG_FILE Configuration file, must have a [mypy] section (defaults to mypy.ini, .mypy.ini, pyproject.toml, setup.cfg, ~/.config/mypy/config, ~/.mypy.ini) --warn-unused-configs Warn about unused '[mypy-<pattern>]' or '[[tool.mypy.overrides]]' config sections (inverse: --no-warn-unused-configs) Import discovery: Configure how imports are discovered and followed. --namespace-packages Support namespace packages (PEP 420, __init__.py- less) (inverse: --no-namespace-packages) --ignore-missing-imports Silently ignore imports of missing modules --follow-imports {normal,silent,skip,error} How to treat imports (default normal) --python-executable EXECUTABLE Python executable used for finding PEP 561 compliant installed packages and stubs --no-site-packages Do not search for installed PEP 561 compliant packages --no-silence-site-packages Do not silence errors in PEP 561 compliant installed packages Platform configuration: Type check code assuming it will be run under certain runtime conditions. By default, mypy assumes your code will be run using the same operating system and Python version you are using to run mypy itself. --python-version x.y Type check code assuming it will be running on Python x.y -2, --py2 Use Python 2 mode (same as --python-version 2.7) --platform PLATFORM Type check special-cased code for the given OS platform (defaults to sys.platform) --always-true NAME Additional variable to be considered True (may be repeated) --always-false NAME Additional variable to be considered False (may be repeated) Disallow dynamic typing: Disallow the use of the dynamic 'Any' type under certain conditions. --disallow-any-unimported Disallow Any types resulting from unfollowed imports --disallow-any-expr Disallow all expressions that have type Any --disallow-any-decorated Disallow functions that have Any in their signature after decorator transformation --disallow-any-explicit Disallow explicit Any in type positions --disallow-any-generics Disallow usage of generic types that do not specify explicit type parameters (inverse: --allow-any-generics) --disallow-subclassing-any Disallow subclassing values of type 'Any' when defining classes (inverse: --allow-subclassing- any) Untyped definitions and calls: Configure how untyped definitions and calls are handled. Note: by default, mypy ignores any untyped function definitions and assumes any calls to such functions have a return type of 'Any'. --disallow-untyped-calls Disallow calling functions without type annotations from functions with type annotations (inverse: --allow-untyped-calls) --disallow-untyped-defs Disallow defining functions without type annotations or with incomplete type annotations (inverse: --allow-untyped-defs) --disallow-incomplete-defs Disallow defining functions with incomplete type annotations (inverse: --allow-incomplete-defs) --check-untyped-defs Type check the interior of functions without type annotations (inverse: --no-check-untyped-defs) --disallow-untyped-decorators Disallow decorating typed functions with untyped decorators (inverse: --allow-untyped-decorators) None and Optional handling: Adjust how values of type 'None' are handled. For more context on how mypy handles values of type 'None', see: https://mypy.readthedocs.io/en/stable/kinds_of_types.html#no-strict- optional --no-implicit-optional Don't assume arguments with default values of None are Optional (inverse: --implicit-optional) --no-strict-optional Disable strict Optional checks (inverse: --strict- optional) Configuring warnings: Detect code that is sound but redundant or problematic. --warn-redundant-casts Warn about casting an expression to its inferred type (inverse: --no-warn-redundant-casts) --warn-unused-ignores Warn about unneeded '# type: ignore' comments (inverse: --no-warn-unused-ignores) --no-warn-no-return Do not warn about functions that end without returning (inverse: --warn-no-return) --warn-return-any Warn about returning values of type Any from non- Any typed functions (inverse: --no-warn-return- any) --warn-unreachable Warn about statements or expressions inferred to be unreachable (inverse: --no-warn-unreachable) Miscellaneous strictness flags: --allow-untyped-globals Suppress toplevel errors caused by missing annotations (inverse: --disallow-untyped-globals) --allow-redefinition Allow unconditional variable redefinition with a new type (inverse: --disallow-redefinition) --no-implicit-reexport Treat imports as private unless aliased (inverse: --implicit-reexport) --strict-equality Prohibit equality, identity, and container checks for non-overlapping types (inverse: --no-strict- equality) --strict-concatenate Make arguments prepended via Concatenate be truly positional-only (inverse: --no-strict-concatenate) --strict Strict mode; enables the following flags: --warn- unused-configs, --disallow-any-generics, --disallow-subclassing-any, --disallow-untyped- calls, --disallow-untyped-defs, --disallow- incomplete-defs, --check-untyped-defs, --disallow- untyped-decorators, --no-implicit-optional, --warn-redundant-casts, --warn-unused-ignores, --warn-return-any, --no-implicit-reexport, --strict-equality, --strict-concatenate --disable-error-code NAME Disable a specific error code --enable-error-code NAME Enable a specific error code Configuring error messages: Adjust the amount of detail shown in error messages. --show-error-context Precede errors with \"note:\" messages explaining context (inverse: --hide-error-context) --show-column-numbers Show column numbers in error messages (inverse: --hide-column-numbers) --show-error-end Show end line/end column numbers in error messages. This implies --show-column-numbers (inverse: --hide-error-end) --show-error-codes Show error codes in error messages (inverse: --hide-error-codes) --pretty Use visually nicer output in error messages: Use soft word wrap, show source code snippets, and show error location markers (inverse: --no-pretty) --no-color-output Do not colorize error messages (inverse: --color- output) --no-error-summary Do not show error stats summary (inverse: --error- summary) --show-absolute-path Show absolute paths to files (inverse: --hide- absolute-path) Incremental mode: Adjust how mypy incrementally type checks and caches modules. Mypy caches type information about modules into a cache to let you speed up future invocations of mypy. Also see mypy's daemon mode: mypy.readthedocs.io/en/stable/mypy_daemon.html#mypy-daemon --no-incremental Disable module cache (inverse: --incremental) --cache-dir DIR Store module cache info in the given folder in incremental mode (defaults to '.mypy_cache') --sqlite-cache Use a sqlite database to store the cache (inverse: --no-sqlite-cache) --cache-fine-grained Include fine-grained dependency information in the cache for the mypy daemon --skip-version-check Allow using cache written by older mypy version --skip-cache-mtime-checks Skip cache internal consistency checks based on mtime Advanced options: Debug and customize mypy internals. --pdb Invoke pdb on fatal error --show-traceback, --tb Show traceback on fatal error --raise-exceptions Raise exception on fatal error --custom-typing-module MODULE Use a custom typing module --enable-recursive-aliases Experimental support for recursive type aliases --custom-typeshed-dir DIR Use the custom typeshed in DIR --warn-incomplete-stub Warn if missing type annotation in typeshed, only relevant with --disallow-untyped-defs or --disallow-incomplete-defs enabled (inverse: --no- warn-incomplete-stub) --shadow-file SOURCE_FILE SHADOW_FILE When encountering SOURCE_FILE, read and type check the contents of SHADOW_FILE instead. Report generation: Generate a report in the specified format. --any-exprs-report DIR --cobertura-xml-report DIR --html-report DIR --linecount-report DIR --linecoverage-report DIR --lineprecision-report DIR --txt-report DIR --xml-report DIR --xslt-html-report DIR --xslt-txt-report DIR Miscellaneous: --junit-xml JUNIT_XML Write junit.xml to the given file --find-occurrences CLASS.MEMBER Print out all usages of a class member (experimental) --scripts-are-modules Script x becomes module x instead of __main__ --install-types Install detected missing library stub packages using pip (inverse: --no-install-types) --non-interactive Install stubs without asking for confirmation and hide errors, with --install-types (inverse: --interactive) Running code: Specify the code you want to type check. For more details, see mypy.readthedocs.io/en/stable/running_mypy.html#running-mypy --explicit-package-bases Use current directory and MYPYPATH to determine module names of files passed (inverse: --no- explicit-package-bases) --exclude PATTERN Regular expression to match file names, directory names or paths which mypy should ignore while recursively discovering files to check, e.g. --exclude '/setup\\.py$'. May be specified more than once, eg. --exclude a --exclude b -m MODULE, --module MODULE Type-check module; can repeat for more modules -p PACKAGE, --package PACKAGE Type-check package recursively; can be repeated -c PROGRAM_TEXT, --command PROGRAM_TEXT Type-check program passed in as string files Type-check given files or directories Environment variables: Define MYPYPATH for additional module search path entries. Define MYPY_CACHE_DIR to override configuration cache_dir path.","title":"Help content"},{"location":"descriptors/python_mypy/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): mypy","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_pylint/","text":"pylint documentation Version in MegaLinter: 2.15.3 Visit Official Web Site See How to configure pylint rules If custom .pylintrc config file is not found, .pylintrc will be used See How to disable pylint rules in files See Index of problems detected by pylint Configuration in MegaLinter Enable pylint by adding PYTHON_PYLINT in ENABLE_LINTERS variable Disable pylint by adding PYTHON_PYLINT in DISABLE_LINTERS variable Variable Description Default value PYTHON_PYLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_PYLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_PYLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_PYLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_PYLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_PYLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_PYLINT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_PYLINT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_PYLINT_CONFIG_FILE pylint configuration file name Use LINTER_DEFAULT to let the linter find it .pylintrc PYTHON_PYLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_PYLINT_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_PYLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use pylint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse PyLint Visit Web Site IDEA PyCharm (Native Support) Visit Web Site vim pylint.vim Visit Web Site visual_studio Native Support Visit Web Site Visual Studio Code Native Support Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed pylint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls pylint myfile.py pylint --rcfile .python-lint myfile.py Help content usage: pylint [options] options: -h, --help show this help message and exit Commands: Options which are actually commands. Options in this group are mutually exclusive. --rcfile RCFILE Specify a configuration file to load. --output OUTPUT Specify an output file. --help-msg HELP_MSG [HELP_MSG ...] Display a help message for the given message id and exit. The value may be a comma separated list of message ids. --list-msgs Display a list of all pylint's messages divided by whether they are emittable with the given interpreter. --list-msgs-enabled Display a list of what messages are enabled, disabled and non-emittable with the given configuration. --list-groups List pylint's message groups. --list-conf-levels Generate pylint's confidence levels. --list-extensions List available extensions. --full-documentation Generate pylint's full documentation. --generate-rcfile Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. --generate-toml-config Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. The config is in the .toml format. --long-help Show more verbose help. Main: --init-hook INIT_HOOK Python code to execute, usually for sys.path manipulation such as pygtk.require(). --errors-only, -E In error mode, messages with a category besides ERROR or FATAL are suppressed, and no reports are done by default. Error mode is compatible with disabling specific errors. --verbose , -v In verbose mode, extra non-checker-related info will be displayed. --enable-all-extensions Load and enable all available extensions. Use --list- extensions to see a list all available extensions. --ignore <file>[,<file>...] Files or directories to be skipped. They should be base names, not paths. (default: ('CVS',)) --ignore-patterns <pattern>[,<pattern>...] Files or directories matching the regular expression patterns are skipped. The regex matches against base names, not paths. The default value ignores Emacs file locks (default: (re.compile('^\\\\.#'),)) --ignore-paths <pattern>[,<pattern>...] Add files or directories matching the regular expressions patterns to the ignore-list. The regex matches against paths and can be in Posix or Windows format. Because '\\' represents the directory delimiter on Windows systems, it can't be used as an escape character. (default: []) --persistent <y or n> Pickle collected data for later comparisons. (default: True) --load-plugins <modules> List of plugins (as comma separated values of python module names) to load, usually to register additional checkers. (default: ()) --fail-under <score> Specify a score threshold under which the program will exit with error. (default: 10) --fail-on <msg ids> Return non-zero exit code if any of these messages/categories are detected, even if score is above --fail-under value. Syntax same as enable. Messages specified are enabled, while categories only check already-enabled messages. (default: ) --jobs <n-processes>, -j <n-processes> Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use, and will cap the count on Windows to avoid hangs. (default: 1) --limit-inference-results <number-of-results> Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions. (default: 100) --extension-pkg-allow-list <pkg[,pkg]> A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (default: []) --extension-pkg-whitelist <pkg[,pkg]> A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (This is an alternative name to extension-pkg-allow-list for backward compatibility.) (default: []) --suggestion-mode <y or n> When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages. (default: True) --exit-zero Always return a 0 (non-error) status code, even if lint errors are found. This is primarily useful in continuous integration scripts. (default: False) --from-stdin Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument. (default: False) --recursive <yn> Discover python modules and packages in the file system subtree. (default: False) --py-version <py_version> Minimum Python version to use for version dependent checks. Will default to the version used to run pylint. (default: (3, 10)) --ignored-modules <module names> List of module names for which member attributes should not be checked (useful for modules/projects where namespaces are manipulated during runtime and thus existing member attributes cannot be deduced by static analysis). It supports qualified module names, as well as Unix pattern matching. (default: ()) --analyse-fallback-blocks <y or n> Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means that the block might have code that exists only in one or another interpreter, leading to false positives when analysed. (default: False) Reports: Options related to output formatting and reporting --output-format <format>, -f <format> Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass. --reports <y or n>, -r <y or n> Tells whether to display a full report or only the messages. (default: False) --evaluation <python_expression> Python expression which should return a score less than or equal to 10. You have access to the variables 'fatal', 'error', 'warning', 'refactor', 'convention', and 'info' which contain the number of messages in each category, as well as 'statement' which is the total number of statements analyzed. This score is used by the global evaluation report (RP0004). (default: max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))) --score <y or n>, -s <y or n> Activate the evaluation score. (default: True) --msg-template <template> Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details. (default: ) Messages control: Options controlling analysis messages --confidence <levels> Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED. (default: ['HIGH', 'CONTROL_FLOW', 'INFERENCE', 'INFERENCE_FAILURE', 'UNDEFINED']) --enable <msg ids>, -e <msg ids> Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the \"--disable\" option for examples. --disable <msg ids>, -d <msg ids> Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use \"--disable=all\" to disable everything first and then re-enable specific checks. For example, if you want to run only the similarities checker, you can use \"--disable=all --enable=similarities\". If you want to run only the classes checker, but have no Warning level messages displayed, use \"--disable=all --enable=classes --disable=W\". Spelling: Check spelling in comments and docstrings. --spelling-dict <dict name> Spelling dictionary name. Available dictionaries: none. To make it work, install the 'python-enchant' package. (default: ) --spelling-ignore-words <comma separated words> List of comma separated words that should not be checked. (default: ) --spelling-private-dict-file <path to file> A path to a file that contains the private dictionary; one word per line. (default: ) --spelling-store-unknown-words <y or n> Tells whether to store unknown words to the private dictionary (see the --spelling-private-dict-file option) instead of raising a message. (default: n) --max-spelling-suggestions N Limits count of emitted suggestions for spelling mistakes. (default: 4) --spelling-ignore-comment-directives <comma separated words> List of comma separated words that should be considered directives if they appear at the beginning of a comment and should not be checked. (default: fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:) Classes: Checker for class nodes. --defining-attr-methods <method names> List of method names used to declare (i.e. assign) instance attributes. (default: ('__init__', '__new__', 'setUp', '__post_init__')) --valid-classmethod-first-arg <argument names> List of valid names for the first argument in a class method. (default: ('cls',)) --valid-metaclass-classmethod-first-arg <argument names> List of valid names for the first argument in a metaclass class method. (default: ('cls',)) --exclude-protected <protected access exclusions> List of member names, which should be excluded from the protected access warning. (default: ('_asdict', '_fields', '_replace', '_source', '_make')) --check-protected-access-in-special-methods <y or n> Warn about protected attribute access inside special methods (default: False) Logging: Checks use of the logging module. --logging-modules <comma separated list> Logging modules to check that the string format arguments are in logging function parameter format. (default: ('logging',)) --logging-format-style <old (%) or new ({)> The type of string formatting that logging methods do. `old` means using % formatting, `new` is for `{}` formatting. (default: old) Basic: --good-names <names> Good variable names which should always be accepted, separated by a comma. (default: ('i', 'j', 'k', 'ex', 'Run', '_')) --good-names-rgxs <names> Good variable names regexes, separated by a comma. If names match any regex, they will always be accepted (default: ) --bad-names <names> Bad variable names which should always be refused, separated by a comma. (default: ('foo', 'bar', 'baz', 'toto', 'tutu', 'tata')) --bad-names-rgxs <names> Bad variable names regexes, separated by a comma. If names match any regex, they will always be refused (default: ) --name-group <name1:name2> Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles. (default: ()) --include-naming-hint <y or n> Include a hint for the correct naming format with invalid-name. (default: False) --property-classes <decorator names> List of decorators that produce properties, such as abc.abstractproperty. Add to this list to register other decorators that produce valid properties. These decorators are taken in consideration only for invalid-name. (default: ('abc.abstractproperty',)) --argument-naming-style <style> Naming style matching correct argument names. (default: snake_case) --argument-rgx <regexp> Regular expression matching correct argument names. Overrides argument-naming-style. If left empty, argument names will be checked with the set naming style. (default: None) --attr-naming-style <style> Naming style matching correct attribute names. (default: snake_case) --attr-rgx <regexp> Regular expression matching correct attribute names. Overrides attr-naming-style. If left empty, attribute names will be checked with the set naming style. (default: None) --class-naming-style <style> Naming style matching correct class names. (default: PascalCase) --class-rgx <regexp> Regular expression matching correct class names. Overrides class-naming-style. If left empty, class names will be checked with the set naming style. (default: None) --class-attribute-naming-style <style> Naming style matching correct class attribute names. (default: any) --class-attribute-rgx <regexp> Regular expression matching correct class attribute names. Overrides class-attribute-naming-style. If left empty, class attribute names will be checked with the set naming style. (default: None) --class-const-naming-style <style> Naming style matching correct class constant names. (default: UPPER_CASE) --class-const-rgx <regexp> Regular expression matching correct class constant names. Overrides class-const-naming-style. If left empty, class constant names will be checked with the set naming style. (default: None) --const-naming-style <style> Naming style matching correct constant names. (default: UPPER_CASE) --const-rgx <regexp> Regular expression matching correct constant names. Overrides const-naming-style. If left empty, constant names will be checked with the set naming style. (default: None) --function-naming-style <style> Naming style matching correct function names. (default: snake_case) --function-rgx <regexp> Regular expression matching correct function names. Overrides function-naming-style. If left empty, function names will be checked with the set naming style. (default: None) --inlinevar-naming-style <style> Naming style matching correct inline iteration names. (default: any) --inlinevar-rgx <regexp> Regular expression matching correct inline iteration names. Overrides inlinevar-naming-style. If left empty, inline iteration names will be checked with the set naming style. (default: None) --method-naming-style <style> Naming style matching correct method names. (default: snake_case) --method-rgx <regexp> Regular expression matching correct method names. Overrides method-naming-style. If left empty, method names will be checked with the set naming style. (default: None) --module-naming-style <style> Naming style matching correct module names. (default: snake_case) --module-rgx <regexp> Regular expression matching correct module names. Overrides module-naming-style. If left empty, module names will be checked with the set naming style. (default: None) --typevar-rgx <regexp> Regular expression matching correct type variable names. If left empty, type variable names will be checked with the set naming style. (default: None) --variable-naming-style <style> Naming style matching correct variable names. (default: snake_case) --variable-rgx <regexp> Regular expression matching correct variable names. Overrides variable-naming-style. If left empty, variable names will be checked with the set naming style. (default: None) --no-docstring-rgx <regexp> Regular expression which should only match function or class names that do not require a docstring. (default: re.compile('^_')) --docstring-min-length <int> Minimum line length for functions/classes that require docstrings, shorter ones are exempt. (default: -1) Miscellaneous: BaseChecker for encoding issues. --notes <comma separated values> List of note tags to take in consideration, separated by a comma. (default: ('FIXME', 'XXX', 'TODO')) --notes-rgx <regexp> Regular expression of note tags to take in consideration. (default: ) Format: Formatting checker. --max-line-length <int> Maximum number of characters on a single line. (default: 100) --ignore-long-lines <regexp> Regexp for a line that is allowed to be longer than the limit. (default: ^\\s*(# )?<?https?://\\S+>?$) --single-line-if-stmt <y or n> Allow the body of an if to be on the same line as the test if there is no else. (default: False) --single-line-class-stmt <y or n> Allow the body of a class to be on the same line as the declaration if body contains single statement. (default: False) --max-module-lines <int> Maximum number of lines in a module. (default: 1000) --indent-string <string> String used as indentation unit. This is usually \" \" (4 spaces) or \" \" (1 tab). (default: ) --indent-after-paren <int> Number of spaces of indent required inside a hanging or continued line. (default: 4) --expected-line-ending-format <empty or LF or CRLF> Expected format of line ending, e.g. empty (any line ending), LF or CRLF. (default: ) Method_args: BaseChecker for method_args. --timeout-methods <comma separated list> List of qualified names (i.e., library.method) which require a timeout parameter e.g. 'requests.api.get,requests.api.post' (default: ('requests.api.delete', 'requests.api.get', 'requests.api.head', 'requests.api.options', 'requests.api.patch', 'requests.api.post', 'requests.api.put', 'requests.api.request')) Refactoring: Looks for code which can be refactored. --max-nested-blocks <int> Maximum number of nested blocks for function / method body (default: 5) --never-returning-functions <members names> Complete name of functions that never returns. When checking for inconsistent-return-statements if a never returning function is called then it will be considered as an explicit return statement and no message will be printed. (default: ('sys.exit', 'argparse.parse_error')) String: Check string literals. --check-str-concat-over-line-jumps <y or n> This flag controls whether the implicit-str-concat should generate a warning on implicit string concatenation in sequences defined over several lines. (default: False) --check-quote-consistency <y or n> This flag controls whether inconsistent-quotes generates a warning when the character used as a quote delimiter is used inconsistently within a module. (default: False) Design: Checker of potential misdesigns. --max-args <int> Maximum number of arguments for function / method. (default: 5) --max-locals <int> Maximum number of locals for function / method body. (default: 15) --max-returns <int> Maximum number of return / yield for function / method body. (default: 6) --max-branches <int> Maximum number of branch for function / method body. (default: 12) --max-statements <int> Maximum number of statements in function / method body. (default: 50) --max-parents <num> Maximum number of parents for a class (see R0901). (default: 7) --ignored-parents <comma separated list of class names> List of qualified class names to ignore when counting class parents (see R0901) (default: ()) --max-attributes <num> Maximum number of attributes for a class (see R0902). (default: 7) --min-public-methods <num> Minimum number of public methods for a class (see R0903). (default: 2) --max-public-methods <num> Maximum number of public methods for a class (see R0904). (default: 20) --max-bool-expr <num> Maximum number of boolean expressions in an if statement (see R0916). (default: 5) --exclude-too-few-public-methods <pattern>[,<pattern>...] List of regular expressions of class ancestor names to ignore when counting public methods (see R0903) (default: []) Typecheck: Try to find bugs in the code using type inference. --ignore-on-opaque-inference <y or n> This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring. The inference can return multiple potential results while evaluating a Python object, but some branches might not be evaluated, which results in partial inference. In that case, it might be useful to still emit no-member and other checks for the rest of the inferred objects. (default: True) --mixin-class-rgx <regexp> Regex pattern to define which classes are considered mixins. (default: .*[Mm]ixin) --ignore-mixin-members <y or n> Tells whether missing members accessed in mixin class should be ignored. A class is considered mixin if its name matches the mixin-class-rgx option. (default: True) --ignored-checks-for-mixins <list of messages names> List of symbolic message names to ignore for Mixin members. (default: ['no-member', 'not-async-context- manager', 'not-context-manager', 'attribute-defined- outside-init']) --ignore-none <y or n> Tells whether to warn about missing members when the owner of the attribute is inferred to be None. (default: True) --ignored-classes <members names> List of class names for which member attributes should not be checked (useful for classes with dynamically set attributes). This supports the use of qualified names. (default: ('optparse.Values', 'thread._local', '_thread._local', 'argparse.Namespace')) --generated-members <members names> List of members which are set dynamically and missed by pylint inference system, and so shouldn't trigger E1101 when accessed. Python regular expressions are accepted. (default: ()) --contextmanager-decorators <decorator names> List of decorators that produce context managers, such as contextlib.contextmanager. Add to this list to register other decorators that produce valid context managers. (default: ['contextlib.contextmanager']) --missing-member-hint-distance <member hint edit distance> The minimum edit distance a name should have in order to be considered a similar match for a missing member name. (default: 1) --missing-member-max-choices <member hint max choices> The total number of similar names that should be taken in consideration when showing a hint for a missing member. (default: 1) --missing-member-hint <missing member hint> Show a hint with possible names when a member name was not found. The aspect of finding the hint is based on edit distance. (default: True) --signature-mutators <decorator names> List of decorators that change the signature of a decorated function. (default: []) Exceptions: Exception related checks. --overgeneral-exceptions <comma-separated class names> Exceptions that will emit a warning when caught. (default: ('BaseException', 'Exception')) Variables: BaseChecker for variables. --init-import <y or n> Tells whether we should check for unused import in __init__ files. (default: False) --dummy-variables-rgx <regexp> A regular expression matching the name of dummy variables (i.e. expected to not be used). (default: _+ $|(_[a-zA-Z0-9_]*[a-zA-Z0- 9]+?$)|dummy|^ignored_|^unused_) --additional-builtins <comma separated list> List of additional names supposed to be defined in builtins. Remember that you should avoid defining new builtins when possible. (default: ()) --callbacks <callbacks> List of strings which can identify a callback function by name. A callback name must start or end with one of those strings. (default: ('cb_', '_cb')) --redefining-builtins-modules <comma separated list> List of qualified module names which can have objects that can redefine builtins. (default: ('six.moves', 'past.builtins', 'future.builtins', 'builtins', 'io')) --ignored-argument-names <regexp> Argument names that match this expression will be ignored. (default: re.compile('_.*|^ignored_|^unused_')) --allow-global-unused-variables <y or n> Tells whether unused global variables should be treated as a violation. (default: True) --allowed-redefined-builtins <comma separated list> List of names allowed to shadow builtins (default: ()) Imports: BaseChecker for import statements. --deprecated-modules <modules> Deprecated modules which should not be used, separated by a comma. (default: ()) --preferred-modules <module:preferred-module> Couples of modules and preferred modules, separated by a comma. (default: ()) --import-graph <file.gv> Output a graph (.gv or any supported image format) of all (i.e. internal and external) dependencies to the given file (report RP0402 must not be disabled). (default: ) --ext-import-graph <file.gv> Output a graph (.gv or any supported image format) of external dependencies to the given file (report RP0402 must not be disabled). (default: ) --int-import-graph <file.gv> Output a graph (.gv or any supported image format) of internal dependencies to the given file (report RP0402 must not be disabled). (default: ) --known-standard-library <modules> Force import order to recognize a module as part of the standard compatibility libraries. (default: ()) --known-third-party <modules> Force import order to recognize a module as part of a third party library. (default: ('enchant',)) --allow-any-import-level <modules> List of modules that can be imported at any level, not just the top level one. (default: ()) --allow-wildcard-with-all <y or n> Allow wildcard imports from modules that define __all__. (default: False) Similarities: Checks for similarities and duplicated code. --min-similarity-lines <int> Minimum lines number of a similarity. (default: 4) --ignore-comments <y or n> Comments are removed from the similarity computation (default: True) --ignore-docstrings <y or n> Docstrings are removed from the similarity computation (default: True) --ignore-imports <y or n> Imports are removed from the similarity computation (default: True) --ignore-signatures <y or n> Signatures are removed from the similarity computation (default: True) Installation on mega-linter Docker image PIP packages (Python): pylint","title":"pylint"},{"location":"descriptors/python_pylint/#pylint-documentation","text":"Version in MegaLinter: 2.15.3 Visit Official Web Site See How to configure pylint rules If custom .pylintrc config file is not found, .pylintrc will be used See How to disable pylint rules in files See Index of problems detected by pylint","title":"pylint documentation"},{"location":"descriptors/python_pylint/#configuration-in-megalinter","text":"Enable pylint by adding PYTHON_PYLINT in ENABLE_LINTERS variable Disable pylint by adding PYTHON_PYLINT in DISABLE_LINTERS variable Variable Description Default value PYTHON_PYLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_PYLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_PYLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_PYLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_PYLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_PYLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_PYLINT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_PYLINT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_PYLINT_CONFIG_FILE pylint configuration file name Use LINTER_DEFAULT to let the linter find it .pylintrc PYTHON_PYLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_PYLINT_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_PYLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_pylint/#ide-integration","text":"Use pylint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse PyLint Visit Web Site IDEA PyCharm (Native Support) Visit Web Site vim pylint.vim Visit Web Site visual_studio Native Support Visit Web Site Visual Studio Code Native Support Visit Web Site","title":"IDE Integration"},{"location":"descriptors/python_pylint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/python_pylint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_pylint/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_pylint/#how-the-linting-is-performed","text":"pylint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_pylint/#example-calls","text":"pylint myfile.py pylint --rcfile .python-lint myfile.py","title":"Example calls"},{"location":"descriptors/python_pylint/#help-content","text":"usage: pylint [options] options: -h, --help show this help message and exit Commands: Options which are actually commands. Options in this group are mutually exclusive. --rcfile RCFILE Specify a configuration file to load. --output OUTPUT Specify an output file. --help-msg HELP_MSG [HELP_MSG ...] Display a help message for the given message id and exit. The value may be a comma separated list of message ids. --list-msgs Display a list of all pylint's messages divided by whether they are emittable with the given interpreter. --list-msgs-enabled Display a list of what messages are enabled, disabled and non-emittable with the given configuration. --list-groups List pylint's message groups. --list-conf-levels Generate pylint's confidence levels. --list-extensions List available extensions. --full-documentation Generate pylint's full documentation. --generate-rcfile Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. --generate-toml-config Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. The config is in the .toml format. --long-help Show more verbose help. Main: --init-hook INIT_HOOK Python code to execute, usually for sys.path manipulation such as pygtk.require(). --errors-only, -E In error mode, messages with a category besides ERROR or FATAL are suppressed, and no reports are done by default. Error mode is compatible with disabling specific errors. --verbose , -v In verbose mode, extra non-checker-related info will be displayed. --enable-all-extensions Load and enable all available extensions. Use --list- extensions to see a list all available extensions. --ignore <file>[,<file>...] Files or directories to be skipped. They should be base names, not paths. (default: ('CVS',)) --ignore-patterns <pattern>[,<pattern>...] Files or directories matching the regular expression patterns are skipped. The regex matches against base names, not paths. The default value ignores Emacs file locks (default: (re.compile('^\\\\.#'),)) --ignore-paths <pattern>[,<pattern>...] Add files or directories matching the regular expressions patterns to the ignore-list. The regex matches against paths and can be in Posix or Windows format. Because '\\' represents the directory delimiter on Windows systems, it can't be used as an escape character. (default: []) --persistent <y or n> Pickle collected data for later comparisons. (default: True) --load-plugins <modules> List of plugins (as comma separated values of python module names) to load, usually to register additional checkers. (default: ()) --fail-under <score> Specify a score threshold under which the program will exit with error. (default: 10) --fail-on <msg ids> Return non-zero exit code if any of these messages/categories are detected, even if score is above --fail-under value. Syntax same as enable. Messages specified are enabled, while categories only check already-enabled messages. (default: ) --jobs <n-processes>, -j <n-processes> Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use, and will cap the count on Windows to avoid hangs. (default: 1) --limit-inference-results <number-of-results> Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions. (default: 100) --extension-pkg-allow-list <pkg[,pkg]> A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (default: []) --extension-pkg-whitelist <pkg[,pkg]> A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (This is an alternative name to extension-pkg-allow-list for backward compatibility.) (default: []) --suggestion-mode <y or n> When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages. (default: True) --exit-zero Always return a 0 (non-error) status code, even if lint errors are found. This is primarily useful in continuous integration scripts. (default: False) --from-stdin Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument. (default: False) --recursive <yn> Discover python modules and packages in the file system subtree. (default: False) --py-version <py_version> Minimum Python version to use for version dependent checks. Will default to the version used to run pylint. (default: (3, 10)) --ignored-modules <module names> List of module names for which member attributes should not be checked (useful for modules/projects where namespaces are manipulated during runtime and thus existing member attributes cannot be deduced by static analysis). It supports qualified module names, as well as Unix pattern matching. (default: ()) --analyse-fallback-blocks <y or n> Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means that the block might have code that exists only in one or another interpreter, leading to false positives when analysed. (default: False) Reports: Options related to output formatting and reporting --output-format <format>, -f <format> Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass. --reports <y or n>, -r <y or n> Tells whether to display a full report or only the messages. (default: False) --evaluation <python_expression> Python expression which should return a score less than or equal to 10. You have access to the variables 'fatal', 'error', 'warning', 'refactor', 'convention', and 'info' which contain the number of messages in each category, as well as 'statement' which is the total number of statements analyzed. This score is used by the global evaluation report (RP0004). (default: max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))) --score <y or n>, -s <y or n> Activate the evaluation score. (default: True) --msg-template <template> Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details. (default: ) Messages control: Options controlling analysis messages --confidence <levels> Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED. (default: ['HIGH', 'CONTROL_FLOW', 'INFERENCE', 'INFERENCE_FAILURE', 'UNDEFINED']) --enable <msg ids>, -e <msg ids> Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the \"--disable\" option for examples. --disable <msg ids>, -d <msg ids> Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use \"--disable=all\" to disable everything first and then re-enable specific checks. For example, if you want to run only the similarities checker, you can use \"--disable=all --enable=similarities\". If you want to run only the classes checker, but have no Warning level messages displayed, use \"--disable=all --enable=classes --disable=W\". Spelling: Check spelling in comments and docstrings. --spelling-dict <dict name> Spelling dictionary name. Available dictionaries: none. To make it work, install the 'python-enchant' package. (default: ) --spelling-ignore-words <comma separated words> List of comma separated words that should not be checked. (default: ) --spelling-private-dict-file <path to file> A path to a file that contains the private dictionary; one word per line. (default: ) --spelling-store-unknown-words <y or n> Tells whether to store unknown words to the private dictionary (see the --spelling-private-dict-file option) instead of raising a message. (default: n) --max-spelling-suggestions N Limits count of emitted suggestions for spelling mistakes. (default: 4) --spelling-ignore-comment-directives <comma separated words> List of comma separated words that should be considered directives if they appear at the beginning of a comment and should not be checked. (default: fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:) Classes: Checker for class nodes. --defining-attr-methods <method names> List of method names used to declare (i.e. assign) instance attributes. (default: ('__init__', '__new__', 'setUp', '__post_init__')) --valid-classmethod-first-arg <argument names> List of valid names for the first argument in a class method. (default: ('cls',)) --valid-metaclass-classmethod-first-arg <argument names> List of valid names for the first argument in a metaclass class method. (default: ('cls',)) --exclude-protected <protected access exclusions> List of member names, which should be excluded from the protected access warning. (default: ('_asdict', '_fields', '_replace', '_source', '_make')) --check-protected-access-in-special-methods <y or n> Warn about protected attribute access inside special methods (default: False) Logging: Checks use of the logging module. --logging-modules <comma separated list> Logging modules to check that the string format arguments are in logging function parameter format. (default: ('logging',)) --logging-format-style <old (%) or new ({)> The type of string formatting that logging methods do. `old` means using % formatting, `new` is for `{}` formatting. (default: old) Basic: --good-names <names> Good variable names which should always be accepted, separated by a comma. (default: ('i', 'j', 'k', 'ex', 'Run', '_')) --good-names-rgxs <names> Good variable names regexes, separated by a comma. If names match any regex, they will always be accepted (default: ) --bad-names <names> Bad variable names which should always be refused, separated by a comma. (default: ('foo', 'bar', 'baz', 'toto', 'tutu', 'tata')) --bad-names-rgxs <names> Bad variable names regexes, separated by a comma. If names match any regex, they will always be refused (default: ) --name-group <name1:name2> Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles. (default: ()) --include-naming-hint <y or n> Include a hint for the correct naming format with invalid-name. (default: False) --property-classes <decorator names> List of decorators that produce properties, such as abc.abstractproperty. Add to this list to register other decorators that produce valid properties. These decorators are taken in consideration only for invalid-name. (default: ('abc.abstractproperty',)) --argument-naming-style <style> Naming style matching correct argument names. (default: snake_case) --argument-rgx <regexp> Regular expression matching correct argument names. Overrides argument-naming-style. If left empty, argument names will be checked with the set naming style. (default: None) --attr-naming-style <style> Naming style matching correct attribute names. (default: snake_case) --attr-rgx <regexp> Regular expression matching correct attribute names. Overrides attr-naming-style. If left empty, attribute names will be checked with the set naming style. (default: None) --class-naming-style <style> Naming style matching correct class names. (default: PascalCase) --class-rgx <regexp> Regular expression matching correct class names. Overrides class-naming-style. If left empty, class names will be checked with the set naming style. (default: None) --class-attribute-naming-style <style> Naming style matching correct class attribute names. (default: any) --class-attribute-rgx <regexp> Regular expression matching correct class attribute names. Overrides class-attribute-naming-style. If left empty, class attribute names will be checked with the set naming style. (default: None) --class-const-naming-style <style> Naming style matching correct class constant names. (default: UPPER_CASE) --class-const-rgx <regexp> Regular expression matching correct class constant names. Overrides class-const-naming-style. If left empty, class constant names will be checked with the set naming style. (default: None) --const-naming-style <style> Naming style matching correct constant names. (default: UPPER_CASE) --const-rgx <regexp> Regular expression matching correct constant names. Overrides const-naming-style. If left empty, constant names will be checked with the set naming style. (default: None) --function-naming-style <style> Naming style matching correct function names. (default: snake_case) --function-rgx <regexp> Regular expression matching correct function names. Overrides function-naming-style. If left empty, function names will be checked with the set naming style. (default: None) --inlinevar-naming-style <style> Naming style matching correct inline iteration names. (default: any) --inlinevar-rgx <regexp> Regular expression matching correct inline iteration names. Overrides inlinevar-naming-style. If left empty, inline iteration names will be checked with the set naming style. (default: None) --method-naming-style <style> Naming style matching correct method names. (default: snake_case) --method-rgx <regexp> Regular expression matching correct method names. Overrides method-naming-style. If left empty, method names will be checked with the set naming style. (default: None) --module-naming-style <style> Naming style matching correct module names. (default: snake_case) --module-rgx <regexp> Regular expression matching correct module names. Overrides module-naming-style. If left empty, module names will be checked with the set naming style. (default: None) --typevar-rgx <regexp> Regular expression matching correct type variable names. If left empty, type variable names will be checked with the set naming style. (default: None) --variable-naming-style <style> Naming style matching correct variable names. (default: snake_case) --variable-rgx <regexp> Regular expression matching correct variable names. Overrides variable-naming-style. If left empty, variable names will be checked with the set naming style. (default: None) --no-docstring-rgx <regexp> Regular expression which should only match function or class names that do not require a docstring. (default: re.compile('^_')) --docstring-min-length <int> Minimum line length for functions/classes that require docstrings, shorter ones are exempt. (default: -1) Miscellaneous: BaseChecker for encoding issues. --notes <comma separated values> List of note tags to take in consideration, separated by a comma. (default: ('FIXME', 'XXX', 'TODO')) --notes-rgx <regexp> Regular expression of note tags to take in consideration. (default: ) Format: Formatting checker. --max-line-length <int> Maximum number of characters on a single line. (default: 100) --ignore-long-lines <regexp> Regexp for a line that is allowed to be longer than the limit. (default: ^\\s*(# )?<?https?://\\S+>?$) --single-line-if-stmt <y or n> Allow the body of an if to be on the same line as the test if there is no else. (default: False) --single-line-class-stmt <y or n> Allow the body of a class to be on the same line as the declaration if body contains single statement. (default: False) --max-module-lines <int> Maximum number of lines in a module. (default: 1000) --indent-string <string> String used as indentation unit. This is usually \" \" (4 spaces) or \" \" (1 tab). (default: ) --indent-after-paren <int> Number of spaces of indent required inside a hanging or continued line. (default: 4) --expected-line-ending-format <empty or LF or CRLF> Expected format of line ending, e.g. empty (any line ending), LF or CRLF. (default: ) Method_args: BaseChecker for method_args. --timeout-methods <comma separated list> List of qualified names (i.e., library.method) which require a timeout parameter e.g. 'requests.api.get,requests.api.post' (default: ('requests.api.delete', 'requests.api.get', 'requests.api.head', 'requests.api.options', 'requests.api.patch', 'requests.api.post', 'requests.api.put', 'requests.api.request')) Refactoring: Looks for code which can be refactored. --max-nested-blocks <int> Maximum number of nested blocks for function / method body (default: 5) --never-returning-functions <members names> Complete name of functions that never returns. When checking for inconsistent-return-statements if a never returning function is called then it will be considered as an explicit return statement and no message will be printed. (default: ('sys.exit', 'argparse.parse_error')) String: Check string literals. --check-str-concat-over-line-jumps <y or n> This flag controls whether the implicit-str-concat should generate a warning on implicit string concatenation in sequences defined over several lines. (default: False) --check-quote-consistency <y or n> This flag controls whether inconsistent-quotes generates a warning when the character used as a quote delimiter is used inconsistently within a module. (default: False) Design: Checker of potential misdesigns. --max-args <int> Maximum number of arguments for function / method. (default: 5) --max-locals <int> Maximum number of locals for function / method body. (default: 15) --max-returns <int> Maximum number of return / yield for function / method body. (default: 6) --max-branches <int> Maximum number of branch for function / method body. (default: 12) --max-statements <int> Maximum number of statements in function / method body. (default: 50) --max-parents <num> Maximum number of parents for a class (see R0901). (default: 7) --ignored-parents <comma separated list of class names> List of qualified class names to ignore when counting class parents (see R0901) (default: ()) --max-attributes <num> Maximum number of attributes for a class (see R0902). (default: 7) --min-public-methods <num> Minimum number of public methods for a class (see R0903). (default: 2) --max-public-methods <num> Maximum number of public methods for a class (see R0904). (default: 20) --max-bool-expr <num> Maximum number of boolean expressions in an if statement (see R0916). (default: 5) --exclude-too-few-public-methods <pattern>[,<pattern>...] List of regular expressions of class ancestor names to ignore when counting public methods (see R0903) (default: []) Typecheck: Try to find bugs in the code using type inference. --ignore-on-opaque-inference <y or n> This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring. The inference can return multiple potential results while evaluating a Python object, but some branches might not be evaluated, which results in partial inference. In that case, it might be useful to still emit no-member and other checks for the rest of the inferred objects. (default: True) --mixin-class-rgx <regexp> Regex pattern to define which classes are considered mixins. (default: .*[Mm]ixin) --ignore-mixin-members <y or n> Tells whether missing members accessed in mixin class should be ignored. A class is considered mixin if its name matches the mixin-class-rgx option. (default: True) --ignored-checks-for-mixins <list of messages names> List of symbolic message names to ignore for Mixin members. (default: ['no-member', 'not-async-context- manager', 'not-context-manager', 'attribute-defined- outside-init']) --ignore-none <y or n> Tells whether to warn about missing members when the owner of the attribute is inferred to be None. (default: True) --ignored-classes <members names> List of class names for which member attributes should not be checked (useful for classes with dynamically set attributes). This supports the use of qualified names. (default: ('optparse.Values', 'thread._local', '_thread._local', 'argparse.Namespace')) --generated-members <members names> List of members which are set dynamically and missed by pylint inference system, and so shouldn't trigger E1101 when accessed. Python regular expressions are accepted. (default: ()) --contextmanager-decorators <decorator names> List of decorators that produce context managers, such as contextlib.contextmanager. Add to this list to register other decorators that produce valid context managers. (default: ['contextlib.contextmanager']) --missing-member-hint-distance <member hint edit distance> The minimum edit distance a name should have in order to be considered a similar match for a missing member name. (default: 1) --missing-member-max-choices <member hint max choices> The total number of similar names that should be taken in consideration when showing a hint for a missing member. (default: 1) --missing-member-hint <missing member hint> Show a hint with possible names when a member name was not found. The aspect of finding the hint is based on edit distance. (default: True) --signature-mutators <decorator names> List of decorators that change the signature of a decorated function. (default: []) Exceptions: Exception related checks. --overgeneral-exceptions <comma-separated class names> Exceptions that will emit a warning when caught. (default: ('BaseException', 'Exception')) Variables: BaseChecker for variables. --init-import <y or n> Tells whether we should check for unused import in __init__ files. (default: False) --dummy-variables-rgx <regexp> A regular expression matching the name of dummy variables (i.e. expected to not be used). (default: _+ $|(_[a-zA-Z0-9_]*[a-zA-Z0- 9]+?$)|dummy|^ignored_|^unused_) --additional-builtins <comma separated list> List of additional names supposed to be defined in builtins. Remember that you should avoid defining new builtins when possible. (default: ()) --callbacks <callbacks> List of strings which can identify a callback function by name. A callback name must start or end with one of those strings. (default: ('cb_', '_cb')) --redefining-builtins-modules <comma separated list> List of qualified module names which can have objects that can redefine builtins. (default: ('six.moves', 'past.builtins', 'future.builtins', 'builtins', 'io')) --ignored-argument-names <regexp> Argument names that match this expression will be ignored. (default: re.compile('_.*|^ignored_|^unused_')) --allow-global-unused-variables <y or n> Tells whether unused global variables should be treated as a violation. (default: True) --allowed-redefined-builtins <comma separated list> List of names allowed to shadow builtins (default: ()) Imports: BaseChecker for import statements. --deprecated-modules <modules> Deprecated modules which should not be used, separated by a comma. (default: ()) --preferred-modules <module:preferred-module> Couples of modules and preferred modules, separated by a comma. (default: ()) --import-graph <file.gv> Output a graph (.gv or any supported image format) of all (i.e. internal and external) dependencies to the given file (report RP0402 must not be disabled). (default: ) --ext-import-graph <file.gv> Output a graph (.gv or any supported image format) of external dependencies to the given file (report RP0402 must not be disabled). (default: ) --int-import-graph <file.gv> Output a graph (.gv or any supported image format) of internal dependencies to the given file (report RP0402 must not be disabled). (default: ) --known-standard-library <modules> Force import order to recognize a module as part of the standard compatibility libraries. (default: ()) --known-third-party <modules> Force import order to recognize a module as part of a third party library. (default: ('enchant',)) --allow-any-import-level <modules> List of modules that can be imported at any level, not just the top level one. (default: ()) --allow-wildcard-with-all <y or n> Allow wildcard imports from modules that define __all__. (default: False) Similarities: Checks for similarities and duplicated code. --min-similarity-lines <int> Minimum lines number of a similarity. (default: 4) --ignore-comments <y or n> Comments are removed from the similarity computation (default: True) --ignore-docstrings <y or n> Docstrings are removed from the similarity computation (default: True) --ignore-imports <y or n> Imports are removed from the similarity computation (default: True) --ignore-signatures <y or n> Signatures are removed from the similarity computation (default: True)","title":"Help content"},{"location":"descriptors/python_pylint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): pylint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/python_pyright/","text":"Optional static typing checks for python, by Microsoft If you don't use python static typing, you should disable this linter by adding PYTHON_PYRIGHT in DISABLE_LINTERS variable in your .mega-linter.yml config file pyright documentation Version in MegaLinter: 1.1.270 Visit Official Web Site See How to configure pyright rules See How to disable pyright rules in files See Index of problems detected by pyright Configuration in MegaLinter Enable pyright by adding PYTHON_PYRIGHT in ENABLE_LINTERS variable Disable pyright by adding PYTHON_PYRIGHT in DISABLE_LINTERS variable Variable Description Default value PYTHON_PYRIGHT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_PYRIGHT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_PYRIGHT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_PYRIGHT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_PYRIGHT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_PYRIGHT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_PYRIGHT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_PYRIGHT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_PYRIGHT_CONFIG_FILE pyright configuration file name Use LINTER_DEFAULT to let the linter find it pyrightconfig.json PYTHON_PYRIGHT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_PYRIGHT_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_PYRIGHT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use pyright in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Emacs LSP-pyright Visit Web Site Sublime Text LSP-pyright Visit Web Site vim Ale Visit Web Site vim coc-pyright Visit Web Site Visual Studio Code PyRight MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .py How the linting is performed pyright is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls pyright myfile.py myfile2.py pyright myfile.py Help content Usage: pyright [options] files... Options: --createstub <IMPORT> Create type stub file(s) for import --dependencies Emit import dependency information -h,--help Show this help message --ignoreexternal Ignore external imports for --verifytypes --lib Use library code to infer types when stubs are missing --outputjson Output results in JSON format -p,--project <FILE OR DIRECTORY> Use the configuration file at this location --pythonplatform <PLATFORM> Analyze for a specific platform (Darwin, Linux, Windows) --pythonversion <VERSION> Analyze for a specific version (3.3, 3.4, etc.) --skipunannotated Skip analysis of functions with no type annotations --stats Print detailed performance stats -t,--typeshed-path <DIRECTORY> Use typeshed type stubs at this location -v,--venv-path <DIRECTORY> Directory that contains virtual environments --verbose Emit verbose diagnostics --verifytypes <PACKAGE> Verify type completeness of a py.typed package --version Print Pyright version --warnings Use exit code of 1 if warnings are reported -w,--watch Continue to run and watch for changes WARNING: there is a new pyright version available (v1.1.270 -> v1.1.273). Please install the new version or set PYRIGHT_PYTHON_FORCE_VERSION to `latest` Installation on mega-linter Docker image PIP packages (Python): pyright==1.1.270","title":"pyright"},{"location":"descriptors/python_pyright/#pyright-documentation","text":"Version in MegaLinter: 1.1.270 Visit Official Web Site See How to configure pyright rules See How to disable pyright rules in files See Index of problems detected by pyright","title":"pyright documentation"},{"location":"descriptors/python_pyright/#configuration-in-megalinter","text":"Enable pyright by adding PYTHON_PYRIGHT in ENABLE_LINTERS variable Disable pyright by adding PYTHON_PYRIGHT in DISABLE_LINTERS variable Variable Description Default value PYTHON_PYRIGHT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" PYTHON_PYRIGHT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file PYTHON_PYRIGHT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file PYTHON_PYRIGHT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files PYTHON_PYRIGHT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".py\"] PYTHON_PYRIGHT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file PYTHON_PYRIGHT_PRE_COMMANDS List of bash commands to run before the linter None PYTHON_PYRIGHT_POST_COMMANDS List of bash commands to run after the linter None PYTHON_PYRIGHT_CONFIG_FILE pyright configuration file name Use LINTER_DEFAULT to let the linter find it pyrightconfig.json PYTHON_PYRIGHT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules PYTHON_PYRIGHT_DISABLE_ERRORS Run linter but consider errors as warnings false PYTHON_PYRIGHT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/python_pyright/#ide-integration","text":"Use pyright in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Emacs LSP-pyright Visit Web Site Sublime Text LSP-pyright Visit Web Site vim Ale Visit Web Site vim coc-pyright Visit Web Site Visual Studio Code PyRight","title":"IDE Integration"},{"location":"descriptors/python_pyright/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/python_pyright/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/python_pyright/#how-are-identified-applicable-files","text":"File extensions: .py","title":"How are identified applicable files"},{"location":"descriptors/python_pyright/#how-the-linting-is-performed","text":"pyright is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/python_pyright/#example-calls","text":"pyright myfile.py myfile2.py pyright myfile.py","title":"Example calls"},{"location":"descriptors/python_pyright/#help-content","text":"Usage: pyright [options] files... Options: --createstub <IMPORT> Create type stub file(s) for import --dependencies Emit import dependency information -h,--help Show this help message --ignoreexternal Ignore external imports for --verifytypes --lib Use library code to infer types when stubs are missing --outputjson Output results in JSON format -p,--project <FILE OR DIRECTORY> Use the configuration file at this location --pythonplatform <PLATFORM> Analyze for a specific platform (Darwin, Linux, Windows) --pythonversion <VERSION> Analyze for a specific version (3.3, 3.4, etc.) --skipunannotated Skip analysis of functions with no type annotations --stats Print detailed performance stats -t,--typeshed-path <DIRECTORY> Use typeshed type stubs at this location -v,--venv-path <DIRECTORY> Directory that contains virtual environments --verbose Emit verbose diagnostics --verifytypes <PACKAGE> Verify type completeness of a py.typed package --version Print Pyright version --warnings Use exit code of 1 if warnings are reported -w,--watch Continue to run and watch for changes WARNING: there is a new pyright version available (v1.1.270 -> v1.1.273). Please install the new version or set PYRIGHT_PYTHON_FORCE_VERSION to `latest`","title":"Help content"},{"location":"descriptors/python_pyright/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): pyright==1.1.270","title":"Installation on mega-linter Docker image"},{"location":"descriptors/r/","text":"R Linters Linter Configuration key Status lintr R Linted files File extensions: .r .R .Rmd .RMD Configuration in MegaLinter Variable Description Default value R_FILTER_REGEX_INCLUDE Custom regex including filter R_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All R linters"},{"location":"descriptors/r/#r","text":"","title":"R"},{"location":"descriptors/r/#linters","text":"Linter Configuration key Status lintr R","title":"Linters"},{"location":"descriptors/r/#linted-files","text":"File extensions: .r .R .Rmd .RMD","title":"Linted files"},{"location":"descriptors/r/#configuration-in-megalinter","text":"Variable Description Default value R_FILTER_REGEX_INCLUDE Custom regex including filter R_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/r_lintr/","text":"lintr lintr documentation Visit Official Web Site See How to configure lintr rules If custom .lintr config file is not found, .lintr will be used See Index of problems detected by lintr Configuration in MegaLinter Enable lintr by adding R_LINTR in ENABLE_LINTERS variable Disable lintr by adding R_LINTR in DISABLE_LINTERS variable Variable Description Default value R_LINTR_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" R_LINTR_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file R_LINTR_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file R_LINTR_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file R_LINTR_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".r\", \".R\", \".Rmd\", \".RMD\"] R_LINTR_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file R_LINTR_PRE_COMMANDS List of bash commands to run before the linter None R_LINTR_POST_COMMANDS List of bash commands to run after the linter None R_LINTR_CONFIG_FILE lintr configuration file name Use LINTER_DEFAULT to let the linter find it .lintr R_LINTR_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules R_LINTR_DISABLE_ERRORS Run linter but consider errors as warnings false R_LINTR_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use lintr in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom Atom lintr Visit Web Site Emacs flycheck Visit Web Site rstudio Native Support Visit Web Site Sublime Text SublimeLinter-contrib-lintr Visit Web Site vim ale Visit Web Site Visual Studio Code VsCode R LSP MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .r , .R , .Rmd , .RMD How the linting is performed lintr is called one time by identified file ( file CLI lint mode) Example calls R --slave -e \"errors <- lintr::lint('myfile.r'); print(errors); quit(save = 'no', status = if (length(errors) > 0) 1 else 0) \" Help content No documentation for \u2018lintr\u2019 in specified packages and libraries: you could try \u2018??lintr\u2019 Installation on mega-linter Docker image Dockerfile commands : RUN mkdir -p /home/r-library \\ && cp -r /usr/lib/R/library/ /home/r-library/ \\ && Rscript -e \"install.packages(c('lintr','purrr'), repos = 'https://cloud.r-project.org/')\" \\ && R -e \"install.packages(list.dirs('/home/r-library',recursive = FALSE), repos = NULL, type = 'source')\" APK packages (Linux): gcc g++ libc-dev libcurl libffi-dev libgcc libxml2-dev libxml2-utils linux-headers R R-dev R-doc","title":"lintr"},{"location":"descriptors/r_lintr/#lintr","text":"","title":"lintr"},{"location":"descriptors/r_lintr/#lintr-documentation","text":"Visit Official Web Site See How to configure lintr rules If custom .lintr config file is not found, .lintr will be used See Index of problems detected by lintr","title":"lintr documentation"},{"location":"descriptors/r_lintr/#configuration-in-megalinter","text":"Enable lintr by adding R_LINTR in ENABLE_LINTERS variable Disable lintr by adding R_LINTR in DISABLE_LINTERS variable Variable Description Default value R_LINTR_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" R_LINTR_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file R_LINTR_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file R_LINTR_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file R_LINTR_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".r\", \".R\", \".Rmd\", \".RMD\"] R_LINTR_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file R_LINTR_PRE_COMMANDS List of bash commands to run before the linter None R_LINTR_POST_COMMANDS List of bash commands to run after the linter None R_LINTR_CONFIG_FILE lintr configuration file name Use LINTER_DEFAULT to let the linter find it .lintr R_LINTR_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules R_LINTR_DISABLE_ERRORS Run linter but consider errors as warnings false R_LINTR_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/r_lintr/#ide-integration","text":"Use lintr in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom Atom lintr Visit Web Site Emacs flycheck Visit Web Site rstudio Native Support Visit Web Site Sublime Text SublimeLinter-contrib-lintr Visit Web Site vim ale Visit Web Site Visual Studio Code VsCode R LSP","title":"IDE Integration"},{"location":"descriptors/r_lintr/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/r_lintr/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/r_lintr/#how-are-identified-applicable-files","text":"File extensions: .r , .R , .Rmd , .RMD","title":"How are identified applicable files"},{"location":"descriptors/r_lintr/#how-the-linting-is-performed","text":"lintr is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/r_lintr/#example-calls","text":"R --slave -e \"errors <- lintr::lint('myfile.r'); print(errors); quit(save = 'no', status = if (length(errors) > 0) 1 else 0) \"","title":"Example calls"},{"location":"descriptors/r_lintr/#help-content","text":"No documentation for \u2018lintr\u2019 in specified packages and libraries: you could try \u2018??lintr\u2019","title":"Help content"},{"location":"descriptors/r_lintr/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN mkdir -p /home/r-library \\ && cp -r /usr/lib/R/library/ /home/r-library/ \\ && Rscript -e \"install.packages(c('lintr','purrr'), repos = 'https://cloud.r-project.org/')\" \\ && R -e \"install.packages(list.dirs('/home/r-library',recursive = FALSE), repos = NULL, type = 'source')\" APK packages (Linux): gcc g++ libc-dev libcurl libffi-dev libgcc libxml2-dev libxml2-utils linux-headers R R-dev R-doc","title":"Installation on mega-linter Docker image"},{"location":"descriptors/raku/","text":"RAKU Linters Linter Configuration key Status raku RAKU Linted files File extensions: .raku .rakumod .rakutest .pm6 .pl6 .p6 Configuration in MegaLinter Variable Description Default value RAKU_FILTER_REGEX_INCLUDE Custom regex including filter RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All RAKU linters"},{"location":"descriptors/raku/#raku","text":"","title":"RAKU"},{"location":"descriptors/raku/#linters","text":"Linter Configuration key Status raku RAKU","title":"Linters"},{"location":"descriptors/raku/#linted-files","text":"File extensions: .raku .rakumod .rakutest .pm6 .pl6 .p6","title":"Linted files"},{"location":"descriptors/raku/#configuration-in-megalinter","text":"Variable Description Default value RAKU_FILTER_REGEX_INCLUDE Custom regex including filter RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/raku_raku/","text":"raku raku documentation Version in MegaLinter: 2020.10 Visit Official Web Site Configuration in MegaLinter Enable raku by adding RAKU_RAKU in ENABLE_LINTERS variable Disable raku by adding RAKU_RAKU in DISABLE_LINTERS variable Variable Description Default value RAKU_RAKU_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RAKU_RAKU_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RAKU_RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RAKU_RAKU_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RAKU_RAKU_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".raku\", \".rakumod\", \".rakutest\", \".pm6\", \".pl6\", \".p6\"] RAKU_RAKU_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RAKU_RAKU_PRE_COMMANDS List of bash commands to run before the linter None RAKU_RAKU_POST_COMMANDS List of bash commands to run after the linter None RAKU_RAKU_CONFIG_FILE raku configuration file name Use LINTER_DEFAULT to let the linter find it META6.json RAKU_RAKU_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RAKU_RAKU_DISABLE_ERRORS Run linter but consider errors as warnings false RAKU_RAKU_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use raku in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom language-perl6 Visit Web Site comma Native Support Visit Web Site Visual Studio Code Perl6 Language Support MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .raku , .rakumod , .rakutest , .pm6 , .pl6 , .p6 How the linting is performed raku is called one time by identified file ( file CLI lint mode) Example calls raku -I ./lib -c myfile.raku Help content /opt/rakudo-pkg/share/perl6/runtime/perl6.moarvm [switches] [--] [programfile] [arguments] With no arguments, enters a REPL (see --repl-mode option). With a \"[programfile]\" or the \"-e\" option, compiles the given program and, by default, also executes the compiled code. - read program source from STDIN or start REPL if a TTY -c check syntax only (runs BEGIN and CHECK blocks) --doc extract documentation and print it as text -e program one line of program, strict is enabled by default -h, --help display this help text -n run program once for each line of input -p same as -n, but also print $_ at the end of lines -I path adds the path to the module search path -M module loads the module prior to running the program --target=stage specify compilation stage to emit --optimize=level use the given level of optimization (0..3) --rakudo-home=path Override the path of the Rakudo runtime files -o, --output=name specify name of output file -v, --version display version information -V print configuration summary --stagestats display time spent in the compilation stages --ll-exception display a low level backtrace on errors --doc=module use Pod::To::[module] to render inline documentation --repl-mode=interactive|non-interactive when running without \"-e\" or filename arguments, a REPL is started. By default, if STDIN is a TTY, \"interactive\" REPL is started that shows extra messages and prompts, otherwise a \"non-interactive\" mode is used where STDIN is read entirely and evaluated as if it were a program, without any extra output (in fact, no REPL machinery is even loaded). This option allows to bypass TTY detection and force one of the REPL modes. --profile[=name] write profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-compile[=name] write compile-time profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-kind[=name] choose the type of profile to generate instrumented - performance measurements (default) heap - record heap snapshots after every garbage collector run --profile-filename=name provide a different filename for profile. Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML This option will go away in a future Rakudo release --profile-stage=stage write profile information for the given compilation stage to a file. Use --profile-compile to set name and format --full-cleanup try to free all memory and exit cleanly --debug-port=port listen for incoming debugger connections --debug-suspend pause execution at the entry point --tracing output a line to stderr on every interpreter instr (only if enabled in MoarVM) Note that only boolean single-letter options may be bundled. The following environment variables are respected: RAKULIB Modify the module search path PERL6LIB Modify the module search path # to be deprecated RAKUDO_HOME Override the path of the Rakudo runtime files NQP_HOME Override the path of the NQP runtime files Installation on mega-linter Docker image Dockerfile commands : RUN curl -L https://github.com/nxadm/rakudo-pkg/releases/download/v2020.10-02/rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk > rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && apk add --no-cache --allow-untrusted rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && rm rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && /opt/rakudo-pkg/bin/add-rakudo-to-path \\ # && source /root/.profile \\ && /opt/rakudo-pkg/bin/install-zef-as-user ENV PATH=\"~/.raku/bin:/opt/rakudo-pkg/bin:/opt/rakudo-pkg/share/perl6/site/bin:$PATH\"","title":"raku"},{"location":"descriptors/raku_raku/#raku","text":"","title":"raku"},{"location":"descriptors/raku_raku/#raku-documentation","text":"Version in MegaLinter: 2020.10 Visit Official Web Site","title":"raku documentation"},{"location":"descriptors/raku_raku/#configuration-in-megalinter","text":"Enable raku by adding RAKU_RAKU in ENABLE_LINTERS variable Disable raku by adding RAKU_RAKU in DISABLE_LINTERS variable Variable Description Default value RAKU_RAKU_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RAKU_RAKU_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RAKU_RAKU_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RAKU_RAKU_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RAKU_RAKU_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".raku\", \".rakumod\", \".rakutest\", \".pm6\", \".pl6\", \".p6\"] RAKU_RAKU_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RAKU_RAKU_PRE_COMMANDS List of bash commands to run before the linter None RAKU_RAKU_POST_COMMANDS List of bash commands to run after the linter None RAKU_RAKU_CONFIG_FILE raku configuration file name Use LINTER_DEFAULT to let the linter find it META6.json RAKU_RAKU_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RAKU_RAKU_DISABLE_ERRORS Run linter but consider errors as warnings false RAKU_RAKU_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/raku_raku/#ide-integration","text":"Use raku in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom language-perl6 Visit Web Site comma Native Support Visit Web Site Visual Studio Code Perl6 Language Support","title":"IDE Integration"},{"location":"descriptors/raku_raku/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/raku_raku/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/raku_raku/#how-are-identified-applicable-files","text":"File extensions: .raku , .rakumod , .rakutest , .pm6 , .pl6 , .p6","title":"How are identified applicable files"},{"location":"descriptors/raku_raku/#how-the-linting-is-performed","text":"raku is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/raku_raku/#example-calls","text":"raku -I ./lib -c myfile.raku","title":"Example calls"},{"location":"descriptors/raku_raku/#help-content","text":"/opt/rakudo-pkg/share/perl6/runtime/perl6.moarvm [switches] [--] [programfile] [arguments] With no arguments, enters a REPL (see --repl-mode option). With a \"[programfile]\" or the \"-e\" option, compiles the given program and, by default, also executes the compiled code. - read program source from STDIN or start REPL if a TTY -c check syntax only (runs BEGIN and CHECK blocks) --doc extract documentation and print it as text -e program one line of program, strict is enabled by default -h, --help display this help text -n run program once for each line of input -p same as -n, but also print $_ at the end of lines -I path adds the path to the module search path -M module loads the module prior to running the program --target=stage specify compilation stage to emit --optimize=level use the given level of optimization (0..3) --rakudo-home=path Override the path of the Rakudo runtime files -o, --output=name specify name of output file -v, --version display version information -V print configuration summary --stagestats display time spent in the compilation stages --ll-exception display a low level backtrace on errors --doc=module use Pod::To::[module] to render inline documentation --repl-mode=interactive|non-interactive when running without \"-e\" or filename arguments, a REPL is started. By default, if STDIN is a TTY, \"interactive\" REPL is started that shows extra messages and prompts, otherwise a \"non-interactive\" mode is used where STDIN is read entirely and evaluated as if it were a program, without any extra output (in fact, no REPL machinery is even loaded). This option allows to bypass TTY detection and force one of the REPL modes. --profile[=name] write profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-compile[=name] write compile-time profile information to a file Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML --profile-kind[=name] choose the type of profile to generate instrumented - performance measurements (default) heap - record heap snapshots after every garbage collector run --profile-filename=name provide a different filename for profile. Extension controls format: .json outputs in JSON .sql outputs in SQL any other extension outputs in HTML This option will go away in a future Rakudo release --profile-stage=stage write profile information for the given compilation stage to a file. Use --profile-compile to set name and format --full-cleanup try to free all memory and exit cleanly --debug-port=port listen for incoming debugger connections --debug-suspend pause execution at the entry point --tracing output a line to stderr on every interpreter instr (only if enabled in MoarVM) Note that only boolean single-letter options may be bundled. The following environment variables are respected: RAKULIB Modify the module search path PERL6LIB Modify the module search path # to be deprecated RAKUDO_HOME Override the path of the Rakudo runtime files NQP_HOME Override the path of the NQP runtime files","title":"Help content"},{"location":"descriptors/raku_raku/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl -L https://github.com/nxadm/rakudo-pkg/releases/download/v2020.10-02/rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk > rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && apk add --no-cache --allow-untrusted rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && rm rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \\ && /opt/rakudo-pkg/bin/add-rakudo-to-path \\ # && source /root/.profile \\ && /opt/rakudo-pkg/bin/install-zef-as-user ENV PATH=\"~/.raku/bin:/opt/rakudo-pkg/bin:/opt/rakudo-pkg/share/perl6/site/bin:$PATH\"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository/","text":"REPOSITORY Linters Linter Configuration key Status checkov REPOSITORY_CHECKOV devskim REPOSITORY dustilock REPOSITORY git_diff REPOSITORY gitleaks REPOSITORY goodcheck REPOSITORY secretlint REPOSITORY semgrep REPOSITORY syft REPOSITORY trivy REPOSITORY Linted files Configuration in MegaLinter Variable Description Default value REPOSITORY_FILTER_REGEX_INCLUDE Custom regex including filter REPOSITORY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All REPOSITORY linters"},{"location":"descriptors/repository/#repository","text":"","title":"REPOSITORY"},{"location":"descriptors/repository/#linters","text":"Linter Configuration key Status checkov REPOSITORY_CHECKOV devskim REPOSITORY dustilock REPOSITORY git_diff REPOSITORY gitleaks REPOSITORY goodcheck REPOSITORY secretlint REPOSITORY semgrep REPOSITORY syft REPOSITORY trivy REPOSITORY","title":"Linters"},{"location":"descriptors/repository/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/repository/#configuration-in-megalinter","text":"Variable Description Default value REPOSITORY_FILTER_REGEX_INCLUDE Custom regex including filter REPOSITORY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_checkov/","text":"checkov documentation Version in MegaLinter: 2.1.242 Visit Official Web Site See How to configure checkov rules If custom .checkov.yml config file is not found, .checkov.yml will be used See How to disable checkov rules in files See Index of problems detected by checkov Configuration in MegaLinter Enable checkov by adding REPOSITORY_CHECKOV in ENABLE_LINTERS variable Disable checkov by adding REPOSITORY_CHECKOV in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_CHECKOV_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_CHECKOV_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_CHECKOV_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_CHECKOV_CONFIG_FILE checkov configuration file name Use LINTER_DEFAULT to let the linter find it .checkov.yml REPOSITORY_CHECKOV_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_CHECKOV_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use checkov in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Checkov MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed checkov is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using checkov configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make checkov analyze only updated files Example calls checkov --directory . checkov --directory . --output --sarif Help content usage: checkov [-h] [-v] [-d DIRECTORY] [--add-check] [-f FILE] [--skip-path SKIP_PATH] [--external-checks-dir EXTERNAL_CHECKS_DIR] [--external-checks-git EXTERNAL_CHECKS_GIT] [-l] [-o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}] [--output-file-path OUTPUT_FILE_PATH] [--output-bc-ids] [--include-all-checkov-policies] [--quiet] [--compact] [--framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...]] [--skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...]] [-c CHECK] [--skip-check SKIP_CHECK] [--run-all-external-checks] [-s] [--soft-fail-on SOFT_FAIL_ON] [--hard-fail-on HARD_FAIL_ON] [--bc-api-key BC_API_KEY] [--prisma-api-url PRISMA_API_URL] [--docker-image DOCKER_IMAGE] [--dockerfile-path DOCKERFILE_PATH] [--repo-id REPO_ID] [-b BRANCH] [--skip-download] [--use-enforcement-rules] [--no-guide] [--skip-suppressions] [--skip-policy-download] [--skip-fixes] [--download-external-modules DOWNLOAD_EXTERNAL_MODULES] [--var-file VAR_FILE] [--external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH] [--evaluate-variables EVALUATE_VARIABLES] [-ca CA_CERTIFICATE] [--repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT] [--config-file CONFIG_FILE] [--create-config CREATE_CONFIG] [--show-config] [--create-baseline] [--baseline BASELINE] [--output-baseline-as-skipped] [--skip-cve-package SKIP_CVE_PACKAGE] [--policy-metadata-filter POLICY_METADATA_FILTER] [--secrets-scan-file-type SECRETS_SCAN_FILE_TYPE] [--enable-secret-scan-all-files] [--block-list-secret-scan BLOCK_LIST_SECRET_SCAN] [--summary-position {bottom,top}] Infrastructure as code static analysis options: -h, --help show this help message and exit -v, --version version -d DIRECTORY, --directory DIRECTORY IaC root directory (can not be used together with --file). --add-check Generate a new check via CLI prompt -f FILE, --file FILE File to scan (can not be used together with --directory). With this option, Checkov will attempt to filter the runners based on the file type. For example, if you specify a \".tf\" file, only the terraform and secrets frameworks will be included. You can further limit this (e.g., skip secrets) by using the --skip-framework argument. --skip-path SKIP_PATH Path (file or directory) to skip, using regular expression logic, relative to current working directory. Word boundaries are not implicit; i.e., specifying \"dir1\" will skip any directory or subdirectory named \"dir1\". Ignored with -f. Can be specified multiple times. --external-checks-dir EXTERNAL_CHECKS_DIR Directory for custom checks to be loaded. Can be repeated --external-checks-git EXTERNAL_CHECKS_GIT Github url of external checks to be added. you can specify a subdirectory after a double-slash //. cannot be used together with --external-checks-dir -l, --list List checks -o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}, --output {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv} Report output format. Add multiple outputs by using the flag multiple times (-o sarif -o cli) --output-file-path OUTPUT_FILE_PATH Name for output file. The first selected output via output flag will be saved to the file (default output is cli) --output-bc-ids Print Bridgecrew platform IDs (BC...) instead of Checkov IDs (CKV...), if the check exists in the platform --include-all-checkov-policies When running with an API key, Checkov will omit any policies that do not exist in the Bridgecrew or Prisma Cloud platform, except for local custom policies loaded with the --external-check flags. Use this key to include policies that only exist in Checkov in the scan. Note that this will make the local CLI results different from the results you see in the platform. Has no effect if you are not using an API key. Use the --check option to explicitly include checks by ID even if they are not in the platform, without using this flag. --quiet in case of CLI output, display only failed checks. Also disables progress bars --compact in case of CLI output, do not display code blocks --framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...] Filter scan to run only on specific infrastructure code frameworks [env var: CKV_FRAMEWORK] --skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...] Filter scan to skip specific infrastructure as code frameworks.This will be included automatically for some frameworks if system dependencies are missing. Add multiple frameworks using spaces. For example, --skip-framework terraform sca_package. -c CHECK, --check CHECK Checks to run; any other checks will be skipped. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or above the lowest severity in the list will be included. This option can be combined with --skip-check. If it is, then the logic is to first take all checks that match this list, and then remove all checks that match the skip list. For example, if you use --check CKV_123 and --skip-check LOW, then CKV_123 will not run if it is a LOW severity. Similarly, if you use --check CKV_789 --skip-check MEDIUM, then CKV_789 will run if it is a HIGH severity. If you use a check ID here along with an API key, and the check is not part of the BC / PC platform, then the check will still be run (see --include-all-checkov-policies for more info). [env var: CKV_CHECK] --skip-check SKIP_CHECK Checks to skip; any other checks will not be run. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or below the highest severity in the list will be skipped. This option can be combined with --check. If it is, priority is given to checks explicitly listed by ID or wildcard over checks listed by severity. For example, if you use --skip-check CKV_123 and --check HIGH, then CKV_123 will be skipped even if it is a HIGH severity. In the case of a tie (e.g., --check MEDIUM and --skip-check HIGH for a medium severity check), then the check will be skipped. [env var: CKV_SKIP_CHECK] --run-all-external-checks Run all external checks (loaded via --external-checks options) even if the checks are not present in the --check list. This allows you to always ensure that new checks present in the external source are used. If an external check is included in --skip-check, it will still be skipped. -s, --soft-fail Runs checks but always returns a 0 exit code. Using either --soft-fail-on and / or --hard-fail-on overrides this option, except for the case when a result does not match either of the soft fail or hard fail criteria, in which case this flag determines the result. --soft-fail-on SOFT_FAIL_ON Exits with a 0 exit code if only the specified items fail. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or less than the highest severity in the list will result in a soft fail. This option may be used with --hard-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. If a given result does not meet the --soft-fail-on nor the --hard-fail-on criteria, then the default is to hard fail --hard-fail-on HARD_FAIL_ON Exits with a non-zero exit code for specified checks. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or greater than the lowest severity in the list will result in a hard fail. This option can be used with --soft-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. --bc-api-key BC_API_KEY Bridgecrew API key or Prisma Cloud Access Key (see --prisma-api-url) [env var: BC_API_KEY] --prisma-api-url PRISMA_API_URL The Prisma Cloud API URL (see: https://prisma.pan.dev/api/cloud/api-urls). Requires --bc-api-key to be a Prisma Cloud Access Key in the following format: <access_key_id>::<secret_key> [env var: PRISMA_API_URL] --docker-image DOCKER_IMAGE Scan docker images by name or ID. Only works with --bc-api-key flag --dockerfile-path DOCKERFILE_PATH Path to the Dockerfile of the scanned docker image --repo-id REPO_ID Identity string of the repository, with form <repo_owner>/<repo_name> -b BRANCH, --branch BRANCH Selected branch of the persisted repository. Only has effect when using the --bc-api-key flag --skip-download Do not download any data from Bridgecrew. This will omit doc links, severities, etc., as well as custom policies and suppressions if using an API token. Note: it will prevent BC platform IDs from being available in Checkov. --use-enforcement-rules Use the Enforcement rules configured in the platform for hard / soft fail logic. With this option, the enforcement rule matching this repo, or the default rule if there is no match, will determine this behavior: any check with a severity below the selected rule's soft-fail threshold will be skipped; any check with a severity equal to or greater than the rule's hard-fail threshold will be part of the hard-fail list, and any check in between will be part of the soft-fail list. For example, if the given enforcement rule has a hard-fail value of HIGH and a soft-fail value of MEDIUM,this is the equivalent of using the flags `--skip-check LOW --hard-fail-on HIGH`. You can use --check, --skip-check, --soft-fail, --soft-fail- on, or --hard-fail-on to override portions of an enforcement rule. Note, however, that the logic of applying the --check list and then the --skip-check list (as described above under --check) still applies here. Requires a BC or PC platform API key. --no-guide Deprecated - use --skip-download --skip-suppressions Deprecated - use --skip-download --skip-policy-download Deprecated - use --skip-download --skip-fixes Do not download fixed resource templates from Bridgecrew. Only has effect when using the API key. --download-external-modules DOWNLOAD_EXTERNAL_MODULES download external terraform modules from public git repositories and terraform registry [env var: DOWNLOAD_EXTERNAL_MODULES] --var-file VAR_FILE Variable files to load in addition to the default files (see https://www.terraform.io/docs/language/valu es/variables.html#variable-definitions-tfvars- files).Currently only supported for source Terraform (.tf file), and Helm chart scans.Requires using --directory, not --file. --external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH set the path for the download external terraform modules [env var: EXTERNAL_MODULES_DIR] --evaluate-variables EVALUATE_VARIABLES evaluate the values of variables and locals [env var: CKV_EVAL_VARS] -ca CA_CERTIFICATE, --ca-certificate CA_CERTIFICATE Custom CA certificate (bundle) file [env var: BC_CA_BUNDLE] --repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT Directory containing the hcl code used to generate a given plan file. Use with -f. --config-file CONFIG_FILE path to the Checkov configuration YAML file --create-config CREATE_CONFIG takes the current command line args and writes them out to a config file at the given path --show-config prints all args and config settings and where they came from (eg. commandline, config file, environment variable or default) --create-baseline Alongside outputting the findings, save all results to .checkov.baseline file so future runs will not re-flag the same noise. Works only with `--directory` flag --baseline BASELINE Use a .checkov.baseline file to compare current results with a known baseline. Report will include only failed checks that are new with respect to the provided baseline --output-baseline-as-skipped output checks that are skipped due to baseline file presence --skip-cve-package SKIP_CVE_PACKAGE filter scan to run on all packages but a specific package identifier (denylist), You can specify this argument multiple times to skip multiple packages --policy-metadata-filter POLICY_METADATA_FILTER comma separated key:value string to filter policies based on Prisma Cloud policy metadata. See https://pri sma.pan.dev/api/cloud/cspm/policy#operation/get- policy-filters-and-options for information on allowed filters. Format: policy.label=test,cloud.type=aws --secrets-scan-file-type SECRETS_SCAN_FILE_TYPE not in use [env var: CKV_SECRETS_SCAN_FILE_TYPE] --enable-secret-scan-all-files enable secret scan for all files [env var: CKV_SECRETS_SCAN_ENABLE_ALL] --block-list-secret-scan BLOCK_LIST_SECRET_SCAN List of files to filter out from the secret scanner [env var: CKV_SECRETS_SCAN_BLOCK_LIST] --summary-position {bottom,top} Chose whether the summary will be appended on top (before the checks results) or on bottom (after check results), default is on top. Args that start with '--' (eg. -v) can also be set in a config file (/.checkov.yaml or /.checkov.yml or /root/.checkov.yaml or /root/.checkov.yml or specified via --config-file). The config file uses YAML syntax and must represent a YAML 'mapping' (for details, see http://learn.getgrav.org/advanced/yaml). If an arg is specified in more than one place, then commandline values override environment variables which override config file values which override defaults. Installation on mega-linter Docker image Dockerfile commands : RUN PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir pip && PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir setuptools \\ && PYTHONDONTWRITEBYTECODE=1 pip3 install --no-cache-dir checkov && find . | grep -E \"(/__pycache__$|\\.pyc$|\\.pyo$)\" | xargs rm -rf","title":"checkov"},{"location":"descriptors/repository_checkov/#checkov-documentation","text":"Version in MegaLinter: 2.1.242 Visit Official Web Site See How to configure checkov rules If custom .checkov.yml config file is not found, .checkov.yml will be used See How to disable checkov rules in files See Index of problems detected by checkov","title":"checkov documentation"},{"location":"descriptors/repository_checkov/#configuration-in-megalinter","text":"Enable checkov by adding REPOSITORY_CHECKOV in ENABLE_LINTERS variable Disable checkov by adding REPOSITORY_CHECKOV in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_CHECKOV_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_CHECKOV_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_CHECKOV_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_CHECKOV_CONFIG_FILE checkov configuration file name Use LINTER_DEFAULT to let the linter find it .checkov.yml REPOSITORY_CHECKOV_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_CHECKOV_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_checkov/#ide-integration","text":"Use checkov in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Checkov","title":"IDE Integration"},{"location":"descriptors/repository_checkov/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_checkov/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_checkov/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_checkov/#how-the-linting-is-performed","text":"checkov is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using checkov configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make checkov analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_checkov/#example-calls","text":"checkov --directory . checkov --directory . --output --sarif","title":"Example calls"},{"location":"descriptors/repository_checkov/#help-content","text":"usage: checkov [-h] [-v] [-d DIRECTORY] [--add-check] [-f FILE] [--skip-path SKIP_PATH] [--external-checks-dir EXTERNAL_CHECKS_DIR] [--external-checks-git EXTERNAL_CHECKS_GIT] [-l] [-o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}] [--output-file-path OUTPUT_FILE_PATH] [--output-bc-ids] [--include-all-checkov-policies] [--quiet] [--compact] [--framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...]] [--skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...]] [-c CHECK] [--skip-check SKIP_CHECK] [--run-all-external-checks] [-s] [--soft-fail-on SOFT_FAIL_ON] [--hard-fail-on HARD_FAIL_ON] [--bc-api-key BC_API_KEY] [--prisma-api-url PRISMA_API_URL] [--docker-image DOCKER_IMAGE] [--dockerfile-path DOCKERFILE_PATH] [--repo-id REPO_ID] [-b BRANCH] [--skip-download] [--use-enforcement-rules] [--no-guide] [--skip-suppressions] [--skip-policy-download] [--skip-fixes] [--download-external-modules DOWNLOAD_EXTERNAL_MODULES] [--var-file VAR_FILE] [--external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH] [--evaluate-variables EVALUATE_VARIABLES] [-ca CA_CERTIFICATE] [--repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT] [--config-file CONFIG_FILE] [--create-config CREATE_CONFIG] [--show-config] [--create-baseline] [--baseline BASELINE] [--output-baseline-as-skipped] [--skip-cve-package SKIP_CVE_PACKAGE] [--policy-metadata-filter POLICY_METADATA_FILTER] [--secrets-scan-file-type SECRETS_SCAN_FILE_TYPE] [--enable-secret-scan-all-files] [--block-list-secret-scan BLOCK_LIST_SECRET_SCAN] [--summary-position {bottom,top}] Infrastructure as code static analysis options: -h, --help show this help message and exit -v, --version version -d DIRECTORY, --directory DIRECTORY IaC root directory (can not be used together with --file). --add-check Generate a new check via CLI prompt -f FILE, --file FILE File to scan (can not be used together with --directory). With this option, Checkov will attempt to filter the runners based on the file type. For example, if you specify a \".tf\" file, only the terraform and secrets frameworks will be included. You can further limit this (e.g., skip secrets) by using the --skip-framework argument. --skip-path SKIP_PATH Path (file or directory) to skip, using regular expression logic, relative to current working directory. Word boundaries are not implicit; i.e., specifying \"dir1\" will skip any directory or subdirectory named \"dir1\". Ignored with -f. Can be specified multiple times. --external-checks-dir EXTERNAL_CHECKS_DIR Directory for custom checks to be loaded. Can be repeated --external-checks-git EXTERNAL_CHECKS_GIT Github url of external checks to be added. you can specify a subdirectory after a double-slash //. cannot be used together with --external-checks-dir -l, --list List checks -o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}, --output {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv} Report output format. Add multiple outputs by using the flag multiple times (-o sarif -o cli) --output-file-path OUTPUT_FILE_PATH Name for output file. The first selected output via output flag will be saved to the file (default output is cli) --output-bc-ids Print Bridgecrew platform IDs (BC...) instead of Checkov IDs (CKV...), if the check exists in the platform --include-all-checkov-policies When running with an API key, Checkov will omit any policies that do not exist in the Bridgecrew or Prisma Cloud platform, except for local custom policies loaded with the --external-check flags. Use this key to include policies that only exist in Checkov in the scan. Note that this will make the local CLI results different from the results you see in the platform. Has no effect if you are not using an API key. Use the --check option to explicitly include checks by ID even if they are not in the platform, without using this flag. --quiet in case of CLI output, display only failed checks. Also disables progress bars --compact in case of CLI output, do not display code blocks --framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...] Filter scan to run only on specific infrastructure code frameworks [env var: CKV_FRAMEWORK] --skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...] Filter scan to skip specific infrastructure as code frameworks.This will be included automatically for some frameworks if system dependencies are missing. Add multiple frameworks using spaces. For example, --skip-framework terraform sca_package. -c CHECK, --check CHECK Checks to run; any other checks will be skipped. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or above the lowest severity in the list will be included. This option can be combined with --skip-check. If it is, then the logic is to first take all checks that match this list, and then remove all checks that match the skip list. For example, if you use --check CKV_123 and --skip-check LOW, then CKV_123 will not run if it is a LOW severity. Similarly, if you use --check CKV_789 --skip-check MEDIUM, then CKV_789 will run if it is a HIGH severity. If you use a check ID here along with an API key, and the check is not part of the BC / PC platform, then the check will still be run (see --include-all-checkov-policies for more info). [env var: CKV_CHECK] --skip-check SKIP_CHECK Checks to skip; any other checks will not be run. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or below the highest severity in the list will be skipped. This option can be combined with --check. If it is, priority is given to checks explicitly listed by ID or wildcard over checks listed by severity. For example, if you use --skip-check CKV_123 and --check HIGH, then CKV_123 will be skipped even if it is a HIGH severity. In the case of a tie (e.g., --check MEDIUM and --skip-check HIGH for a medium severity check), then the check will be skipped. [env var: CKV_SKIP_CHECK] --run-all-external-checks Run all external checks (loaded via --external-checks options) even if the checks are not present in the --check list. This allows you to always ensure that new checks present in the external source are used. If an external check is included in --skip-check, it will still be skipped. -s, --soft-fail Runs checks but always returns a 0 exit code. Using either --soft-fail-on and / or --hard-fail-on overrides this option, except for the case when a result does not match either of the soft fail or hard fail criteria, in which case this flag determines the result. --soft-fail-on SOFT_FAIL_ON Exits with a 0 exit code if only the specified items fail. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or less than the highest severity in the list will result in a soft fail. This option may be used with --hard-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. If a given result does not meet the --soft-fail-on nor the --hard-fail-on criteria, then the default is to hard fail --hard-fail-on HARD_FAIL_ON Exits with a non-zero exit code for specified checks. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or greater than the lowest severity in the list will result in a hard fail. This option can be used with --soft-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. --bc-api-key BC_API_KEY Bridgecrew API key or Prisma Cloud Access Key (see --prisma-api-url) [env var: BC_API_KEY] --prisma-api-url PRISMA_API_URL The Prisma Cloud API URL (see: https://prisma.pan.dev/api/cloud/api-urls). Requires --bc-api-key to be a Prisma Cloud Access Key in the following format: <access_key_id>::<secret_key> [env var: PRISMA_API_URL] --docker-image DOCKER_IMAGE Scan docker images by name or ID. Only works with --bc-api-key flag --dockerfile-path DOCKERFILE_PATH Path to the Dockerfile of the scanned docker image --repo-id REPO_ID Identity string of the repository, with form <repo_owner>/<repo_name> -b BRANCH, --branch BRANCH Selected branch of the persisted repository. Only has effect when using the --bc-api-key flag --skip-download Do not download any data from Bridgecrew. This will omit doc links, severities, etc., as well as custom policies and suppressions if using an API token. Note: it will prevent BC platform IDs from being available in Checkov. --use-enforcement-rules Use the Enforcement rules configured in the platform for hard / soft fail logic. With this option, the enforcement rule matching this repo, or the default rule if there is no match, will determine this behavior: any check with a severity below the selected rule's soft-fail threshold will be skipped; any check with a severity equal to or greater than the rule's hard-fail threshold will be part of the hard-fail list, and any check in between will be part of the soft-fail list. For example, if the given enforcement rule has a hard-fail value of HIGH and a soft-fail value of MEDIUM,this is the equivalent of using the flags `--skip-check LOW --hard-fail-on HIGH`. You can use --check, --skip-check, --soft-fail, --soft-fail- on, or --hard-fail-on to override portions of an enforcement rule. Note, however, that the logic of applying the --check list and then the --skip-check list (as described above under --check) still applies here. Requires a BC or PC platform API key. --no-guide Deprecated - use --skip-download --skip-suppressions Deprecated - use --skip-download --skip-policy-download Deprecated - use --skip-download --skip-fixes Do not download fixed resource templates from Bridgecrew. Only has effect when using the API key. --download-external-modules DOWNLOAD_EXTERNAL_MODULES download external terraform modules from public git repositories and terraform registry [env var: DOWNLOAD_EXTERNAL_MODULES] --var-file VAR_FILE Variable files to load in addition to the default files (see https://www.terraform.io/docs/language/valu es/variables.html#variable-definitions-tfvars- files).Currently only supported for source Terraform (.tf file), and Helm chart scans.Requires using --directory, not --file. --external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH set the path for the download external terraform modules [env var: EXTERNAL_MODULES_DIR] --evaluate-variables EVALUATE_VARIABLES evaluate the values of variables and locals [env var: CKV_EVAL_VARS] -ca CA_CERTIFICATE, --ca-certificate CA_CERTIFICATE Custom CA certificate (bundle) file [env var: BC_CA_BUNDLE] --repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT Directory containing the hcl code used to generate a given plan file. Use with -f. --config-file CONFIG_FILE path to the Checkov configuration YAML file --create-config CREATE_CONFIG takes the current command line args and writes them out to a config file at the given path --show-config prints all args and config settings and where they came from (eg. commandline, config file, environment variable or default) --create-baseline Alongside outputting the findings, save all results to .checkov.baseline file so future runs will not re-flag the same noise. Works only with `--directory` flag --baseline BASELINE Use a .checkov.baseline file to compare current results with a known baseline. Report will include only failed checks that are new with respect to the provided baseline --output-baseline-as-skipped output checks that are skipped due to baseline file presence --skip-cve-package SKIP_CVE_PACKAGE filter scan to run on all packages but a specific package identifier (denylist), You can specify this argument multiple times to skip multiple packages --policy-metadata-filter POLICY_METADATA_FILTER comma separated key:value string to filter policies based on Prisma Cloud policy metadata. See https://pri sma.pan.dev/api/cloud/cspm/policy#operation/get- policy-filters-and-options for information on allowed filters. Format: policy.label=test,cloud.type=aws --secrets-scan-file-type SECRETS_SCAN_FILE_TYPE not in use [env var: CKV_SECRETS_SCAN_FILE_TYPE] --enable-secret-scan-all-files enable secret scan for all files [env var: CKV_SECRETS_SCAN_ENABLE_ALL] --block-list-secret-scan BLOCK_LIST_SECRET_SCAN List of files to filter out from the secret scanner [env var: CKV_SECRETS_SCAN_BLOCK_LIST] --summary-position {bottom,top} Chose whether the summary will be appended on top (before the checks results) or on bottom (after check results), default is on top. Args that start with '--' (eg. -v) can also be set in a config file (/.checkov.yaml or /.checkov.yml or /root/.checkov.yaml or /root/.checkov.yml or specified via --config-file). The config file uses YAML syntax and must represent a YAML 'mapping' (for details, see http://learn.getgrav.org/advanced/yaml). If an arg is specified in more than one place, then commandline values override environment variables which override config file values which override defaults.","title":"Help content"},{"location":"descriptors/repository_checkov/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir pip && PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir setuptools \\ && PYTHONDONTWRITEBYTECODE=1 pip3 install --no-cache-dir checkov && find . | grep -E \"(/__pycache__$|\\.pyc$|\\.pyo$)\" | xargs rm -rf","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_devskim/","text":"devskim Use --ignore-globs to ignore files and/or folders devskim documentation Version in MegaLinter: 0.6.9 Visit Official Web Site See How to configure devskim rules See How to ignore files and directories with devskim Configuration in MegaLinter Enable devskim by adding REPOSITORY_DEVSKIM in ENABLE_LINTERS variable Disable devskim by adding REPOSITORY_DEVSKIM in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_DEVSKIM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_DEVSKIM_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_DEVSKIM_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_DEVSKIM_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_DEVSKIM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use devskim in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode DevSkim MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed devskim is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using devskim configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make devskim analyze only updated files Example calls devskim analyze . devskim analyze --file-format sarif . Help content Microsoft DevSkim Command Line Interface 0.6.9+456d78fa02 Usage: devskim [options] [command] Options: -?|-h|--help Show help information -v|--version Show version information Commands: analyze Analyze source code catalogue Create csv file catalogue of rules pack Pack rules into a single file test Run tests for rules verify Verify integrity and syntax of rules Use \"devskim [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" RUN dotnet tool install --global Microsoft.CST.DevSkim.CLI APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"devskim"},{"location":"descriptors/repository_devskim/#devskim","text":"Use --ignore-globs to ignore files and/or folders","title":"devskim"},{"location":"descriptors/repository_devskim/#devskim-documentation","text":"Version in MegaLinter: 0.6.9 Visit Official Web Site See How to configure devskim rules See How to ignore files and directories with devskim","title":"devskim documentation"},{"location":"descriptors/repository_devskim/#configuration-in-megalinter","text":"Enable devskim by adding REPOSITORY_DEVSKIM in ENABLE_LINTERS variable Disable devskim by adding REPOSITORY_DEVSKIM in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_DEVSKIM_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_DEVSKIM_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_DEVSKIM_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_DEVSKIM_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_DEVSKIM_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_devskim/#ide-integration","text":"Use devskim in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode DevSkim","title":"IDE Integration"},{"location":"descriptors/repository_devskim/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21","title":"MegaLinter Flavours"},{"location":"descriptors/repository_devskim/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_devskim/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_devskim/#how-the-linting-is-performed","text":"devskim is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using devskim configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make devskim analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_devskim/#example-calls","text":"devskim analyze . devskim analyze --file-format sarif .","title":"Example calls"},{"location":"descriptors/repository_devskim/#help-content","text":"Microsoft DevSkim Command Line Interface 0.6.9+456d78fa02 Usage: devskim [options] [command] Options: -?|-h|--help Show help information -v|--version Show version information Commands: analyze Analyze source code catalogue Create csv file catalogue of rules pack Pack rules into a single file test Run tests for rules verify Verify integrity and syntax of rules Use \"devskim [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/repository_devskim/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" RUN dotnet tool install --global Microsoft.CST.DevSkim.CLI APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_dustilock/","text":"dustilock documentation Visit Official Web Site Configuration in MegaLinter Enable dustilock by adding REPOSITORY_DUSTILOCK in ENABLE_LINTERS variable Disable dustilock by adding REPOSITORY_DUSTILOCK in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_DUSTILOCK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_DUSTILOCK_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_DUSTILOCK_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_DUSTILOCK_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_DUSTILOCK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed dustilock is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using dustilock configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make dustilock analyze only updated files Example calls dustilock Help content usage: DustiLock [-h|--help] [-r|--recursive] [-a|--audit] [-p|--path \"<value>\"] a tool to find which of your dependencies is susceptible to Dependency Confusion attack Arguments: -h --help Print help information -r --recursive scan all files recursively -a --audit audit only mode -p --path the path to scan. default is cwd Installation on mega-linter Docker image Dockerfile commands : RUN ML_THIRD_PARTY_DIR=/download/dustilock && \\ mkdir -p ${ML_THIRD_PARTY_DIR} && \\ git clone https://github.com/Checkmarx/dustilock.git ${ML_THIRD_PARTY_DIR} && \\ cd ${ML_THIRD_PARTY_DIR} && \\ go build && go clean --cache && \\ chmod +x dustilock && \\ mv \"${ML_THIRD_PARTY_DIR}/dustilock\" /usr/bin/ && \\ find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete && \\ cd / APK packages (Linux): go","title":"dustilock"},{"location":"descriptors/repository_dustilock/#dustilock-documentation","text":"Visit Official Web Site","title":"dustilock documentation"},{"location":"descriptors/repository_dustilock/#configuration-in-megalinter","text":"Enable dustilock by adding REPOSITORY_DUSTILOCK in ENABLE_LINTERS variable Disable dustilock by adding REPOSITORY_DUSTILOCK in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_DUSTILOCK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_DUSTILOCK_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_DUSTILOCK_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_DUSTILOCK_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_DUSTILOCK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_dustilock/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21","title":"MegaLinter Flavours"},{"location":"descriptors/repository_dustilock/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_dustilock/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_dustilock/#how-the-linting-is-performed","text":"dustilock is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using dustilock configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make dustilock analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_dustilock/#example-calls","text":"dustilock","title":"Example calls"},{"location":"descriptors/repository_dustilock/#help-content","text":"usage: DustiLock [-h|--help] [-r|--recursive] [-a|--audit] [-p|--path \"<value>\"] a tool to find which of your dependencies is susceptible to Dependency Confusion attack Arguments: -h --help Print help information -r --recursive scan all files recursively -a --audit audit only mode -p --path the path to scan. default is cwd","title":"Help content"},{"location":"descriptors/repository_dustilock/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN ML_THIRD_PARTY_DIR=/download/dustilock && \\ mkdir -p ${ML_THIRD_PARTY_DIR} && \\ git clone https://github.com/Checkmarx/dustilock.git ${ML_THIRD_PARTY_DIR} && \\ cd ${ML_THIRD_PARTY_DIR} && \\ go build && go clean --cache && \\ chmod +x dustilock && \\ mv \"${ML_THIRD_PARTY_DIR}/dustilock\" /usr/bin/ && \\ find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete && \\ cd / APK packages (Linux): go","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_git_diff/","text":"git_diff Git diff checks for git conflicts markers in files git_diff documentation Version in MegaLinter: 2.34.4 Visit Official Web Site Configuration in MegaLinter Enable git_diff by adding REPOSITORY_GIT_DIFF in ENABLE_LINTERS variable Disable git_diff by adding REPOSITORY_GIT_DIFF in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_GIT_DIFF_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GIT_DIFF_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GIT_DIFF_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed git_diff is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using git_diff configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make git_diff analyze only updated files Example calls git diff --check Help content usage: git [--version] [--help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] [--super-prefix=<path>] [--config-env=<name>=<envvar>] <command> [<args>] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept. See 'git help git' for an overview of the system. Installation on mega-linter Docker image None","title":"git_diff"},{"location":"descriptors/repository_git_diff/#git_diff","text":"Git diff checks for git conflicts markers in files","title":"git_diff"},{"location":"descriptors/repository_git_diff/#git_diff-documentation","text":"Version in MegaLinter: 2.34.4 Visit Official Web Site","title":"git_diff documentation"},{"location":"descriptors/repository_git_diff/#configuration-in-megalinter","text":"Enable git_diff by adding REPOSITORY_GIT_DIFF in ENABLE_LINTERS variable Disable git_diff by adding REPOSITORY_GIT_DIFF in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_GIT_DIFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_GIT_DIFF_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GIT_DIFF_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GIT_DIFF_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_GIT_DIFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_git_diff/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_git_diff/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_git_diff/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_git_diff/#how-the-linting-is-performed","text":"git_diff is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using git_diff configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make git_diff analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_git_diff/#example-calls","text":"git diff --check","title":"Example calls"},{"location":"descriptors/repository_git_diff/#help-content","text":"usage: git [--version] [--help] [-C <path>] [-c <name>=<value>] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path] [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare] [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>] [--super-prefix=<path>] [--config-env=<name>=<envvar>] <command> [<args>] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink restore Restore working tree files rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug diff Show changes between commits, commit and working tree, etc grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches commit Record changes to the repository merge Join two or more development histories together rebase Reapply commits on top of another base tip reset Reset current HEAD to the specified state switch Switch branches tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept. See 'git help git' for an overview of the system.","title":"Help content"},{"location":"descriptors/repository_git_diff/#installation-on-mega-linter-docker-image","text":"None","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_gitleaks/","text":"gitleaks gitleaks documentation Version in MegaLinter: 8.13.0 Visit Official Web Site See How to configure gitleaks rules If custom .gitleaks.toml config file is not found, .gitleaks.toml will be used See How to ignore files and directories with gitleaks Configuration in MegaLinter Enable gitleaks by adding REPOSITORY_GITLEAKS in ENABLE_LINTERS variable Disable gitleaks by adding REPOSITORY_GITLEAKS in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_GITLEAKS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_GITLEAKS_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GITLEAKS_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GITLEAKS_CONFIG_FILE gitleaks configuration file name Use LINTER_DEFAULT to let the linter find it .gitleaks.toml REPOSITORY_GITLEAKS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_GITLEAKS_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_GITLEAKS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed gitleaks is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using gitleaks configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make gitleaks analyze only updated files Example calls gitleaks detect --no-git --verbose --source . gitleaks detect -c .gitleaks.toml --no-git --verbose --source . Help content Gitleaks scans code, past or present, for secrets Usage: gitleaks [command] Available Commands: completion generate the autocompletion script for the specified shell detect detect secrets in code help Help about any command protect protect secrets in code version display gitleaks version Flags: -b, --baseline-path string path to baseline with issues that can be ignored -c, --config string config file path order of precedence: 1. --config/-c 2. env var GITLEAKS_CONFIG 3. (--source/-s)/.gitleaks.toml If none of the three options are used, then gitleaks will use the default config --exit-code int exit code when leaks have been encountered (default 1) -h, --help help for gitleaks -l, --log-level string log level (trace, debug, info, warn, error, fatal) (default \"info\") --no-banner suppress banner --redact redact secrets from logs and stdout -f, --report-format string output format (json, csv, sarif) (default \"json\") -r, --report-path string report file -s, --source string path to source (default: $PWD) (default \".\") -v, --verbose show verbose output from scan Use \"gitleaks [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : FROM zricethezav/gitleaks:v8.13.0 as gitleaks COPY --from=gitleaks /usr/bin/gitleaks /usr/bin/","title":"gitleaks"},{"location":"descriptors/repository_gitleaks/#gitleaks","text":"","title":"gitleaks"},{"location":"descriptors/repository_gitleaks/#gitleaks-documentation","text":"Version in MegaLinter: 8.13.0 Visit Official Web Site See How to configure gitleaks rules If custom .gitleaks.toml config file is not found, .gitleaks.toml will be used See How to ignore files and directories with gitleaks","title":"gitleaks documentation"},{"location":"descriptors/repository_gitleaks/#configuration-in-megalinter","text":"Enable gitleaks by adding REPOSITORY_GITLEAKS in ENABLE_LINTERS variable Disable gitleaks by adding REPOSITORY_GITLEAKS in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_GITLEAKS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_GITLEAKS_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GITLEAKS_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GITLEAKS_CONFIG_FILE gitleaks configuration file name Use LINTER_DEFAULT to let the linter find it .gitleaks.toml REPOSITORY_GITLEAKS_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_GITLEAKS_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_GITLEAKS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_gitleaks/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_gitleaks/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_gitleaks/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_gitleaks/#how-the-linting-is-performed","text":"gitleaks is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using gitleaks configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make gitleaks analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_gitleaks/#example-calls","text":"gitleaks detect --no-git --verbose --source . gitleaks detect -c .gitleaks.toml --no-git --verbose --source .","title":"Example calls"},{"location":"descriptors/repository_gitleaks/#help-content","text":"Gitleaks scans code, past or present, for secrets Usage: gitleaks [command] Available Commands: completion generate the autocompletion script for the specified shell detect detect secrets in code help Help about any command protect protect secrets in code version display gitleaks version Flags: -b, --baseline-path string path to baseline with issues that can be ignored -c, --config string config file path order of precedence: 1. --config/-c 2. env var GITLEAKS_CONFIG 3. (--source/-s)/.gitleaks.toml If none of the three options are used, then gitleaks will use the default config --exit-code int exit code when leaks have been encountered (default 1) -h, --help help for gitleaks -l, --log-level string log level (trace, debug, info, warn, error, fatal) (default \"info\") --no-banner suppress banner --redact redact secrets from logs and stdout -f, --report-format string output format (json, csv, sarif) (default \"json\") -r, --report-path string report file -s, --source string path to source (default: $PWD) (default \".\") -v, --verbose show verbose output from scan Use \"gitleaks [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/repository_gitleaks/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM zricethezav/gitleaks:v8.13.0 as gitleaks COPY --from=gitleaks /usr/bin/gitleaks /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_goodcheck/","text":"goodcheck goodcheck documentation Version in MegaLinter: 3.1.0 Visit Official Web Site See How to configure goodcheck rules If custom goodcheck.yml config file is not found, goodcheck.yml will be used See Index of problems detected by goodcheck Configuration in MegaLinter Enable goodcheck by adding REPOSITORY_GOODCHECK in ENABLE_LINTERS variable Disable goodcheck by adding REPOSITORY_GOODCHECK in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_GOODCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_GOODCHECK_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GOODCHECK_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GOODCHECK_CONFIG_FILE goodcheck configuration file name Use LINTER_DEFAULT to let the linter find it goodcheck.yml REPOSITORY_GOODCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_GOODCHECK_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_GOODCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if one of these files is found: goodcheck.yml If this linter is active, all files will always be linted How the linting is performed goodcheck is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using goodcheck configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make goodcheck analyze only updated files Example calls goodcheck check goodcheck check -c goodcheck.yml Help content Usage: goodcheck <command> [options] [args...] Commands: goodcheck init Generate a sample configuration file goodcheck check Run check with a configuration goodcheck test Test your configuration goodcheck pattern Print regexp for rules goodcheck version Print version goodcheck help Show help and quit Installation on mega-linter Docker image GEM packages (Ruby) : goodcheck","title":"goodcheck"},{"location":"descriptors/repository_goodcheck/#goodcheck","text":"","title":"goodcheck"},{"location":"descriptors/repository_goodcheck/#goodcheck-documentation","text":"Version in MegaLinter: 3.1.0 Visit Official Web Site See How to configure goodcheck rules If custom goodcheck.yml config file is not found, goodcheck.yml will be used See Index of problems detected by goodcheck","title":"goodcheck documentation"},{"location":"descriptors/repository_goodcheck/#configuration-in-megalinter","text":"Enable goodcheck by adding REPOSITORY_GOODCHECK in ENABLE_LINTERS variable Disable goodcheck by adding REPOSITORY_GOODCHECK in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_GOODCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_GOODCHECK_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_GOODCHECK_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_GOODCHECK_CONFIG_FILE goodcheck configuration file name Use LINTER_DEFAULT to let the linter find it goodcheck.yml REPOSITORY_GOODCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_GOODCHECK_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_GOODCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_goodcheck/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_goodcheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_goodcheck/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: goodcheck.yml If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_goodcheck/#how-the-linting-is-performed","text":"goodcheck is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using goodcheck configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make goodcheck analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_goodcheck/#example-calls","text":"goodcheck check goodcheck check -c goodcheck.yml","title":"Example calls"},{"location":"descriptors/repository_goodcheck/#help-content","text":"Usage: goodcheck <command> [options] [args...] Commands: goodcheck init Generate a sample configuration file goodcheck check Run check with a configuration goodcheck test Test your configuration goodcheck pattern Print regexp for rules goodcheck version Print version goodcheck help Show help and quit","title":"Help content"},{"location":"descriptors/repository_goodcheck/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : goodcheck","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_secretlint/","text":"secretlint documentation Version in MegaLinter: 5.2.4 Visit Official Web Site See How to configure secretlint rules If custom .secretlintrc.json config file is not found, .secretlintrc.json will be used See How to ignore files and directories with secretlint If custom .secretlintignore ignore file is not found, .secretlintignore will be used See Index of problems detected by secretlint Configuration in MegaLinter Enable secretlint by adding REPOSITORY_SECRETLINT in ENABLE_LINTERS variable Disable secretlint by adding REPOSITORY_SECRETLINT in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_SECRETLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_SECRETLINT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SECRETLINT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SECRETLINT_CONFIG_FILE secretlint configuration file name Use LINTER_DEFAULT to let the linter find it .secretlintrc.json REPOSITORY_SECRETLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_SECRETLINT_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed secretlint is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using secretlint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make secretlint analyze only updated files Example calls secretlint \"*/**\" secretlint --secretlintrc .secretlintrc.json \"**/*\" Help content Secretlint CLI that scan secret/credential data. Usage $ secretlint [file|glob*] Note supported glob syntax is based on microglob https://github.com/micromatch/micromatch#matching-features Options --init setup config file. Create .secretlintrc.json file from your package.json --format [String] formatter name. Default: \"stylish\". Available Formatter: checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, tap, unix, table --output [path:String] output file path that is written of reported result. --no-color disable ANSI-color of output. --no-terminalLink disable terminalLink of output. --maskSecrets enable masking of secret values. replace actual secrets with \"***\". --secretlintrc [path:String] path to .secretlintrc config file. Default: .secretlintrc.* --secretlintignore [path:String] path to .secretlintignore file. Default: .secretlintignore Options for Developer --profile Enable performance profile. --secretlintrcJSON [String] a JSON string of .secretlintrc. use JSON string instead of rc file. Experimental Options --locale [String] locale tag for translating message. Default: en Examples $ secretlint ./README.md # glob pattern should be wrapped with double quote $ secretlint \"**/*\" $ secretlint \"source/**/*.ini\" Installation on mega-linter Docker image NPM packages (node.js): secretlint @secretlint/secretlint-rule-preset-recommend @secretlint/secretlint-formatter-sarif","title":"secretlint"},{"location":"descriptors/repository_secretlint/#secretlint-documentation","text":"Version in MegaLinter: 5.2.4 Visit Official Web Site See How to configure secretlint rules If custom .secretlintrc.json config file is not found, .secretlintrc.json will be used See How to ignore files and directories with secretlint If custom .secretlintignore ignore file is not found, .secretlintignore will be used See Index of problems detected by secretlint","title":"secretlint documentation"},{"location":"descriptors/repository_secretlint/#configuration-in-megalinter","text":"Enable secretlint by adding REPOSITORY_SECRETLINT in ENABLE_LINTERS variable Disable secretlint by adding REPOSITORY_SECRETLINT in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_SECRETLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_SECRETLINT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SECRETLINT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SECRETLINT_CONFIG_FILE secretlint configuration file name Use LINTER_DEFAULT to let the linter find it .secretlintrc.json REPOSITORY_SECRETLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_SECRETLINT_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_SECRETLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_secretlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_secretlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_secretlint/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_secretlint/#how-the-linting-is-performed","text":"secretlint is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using secretlint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make secretlint analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_secretlint/#example-calls","text":"secretlint \"*/**\" secretlint --secretlintrc .secretlintrc.json \"**/*\"","title":"Example calls"},{"location":"descriptors/repository_secretlint/#help-content","text":"Secretlint CLI that scan secret/credential data. Usage $ secretlint [file|glob*] Note supported glob syntax is based on microglob https://github.com/micromatch/micromatch#matching-features Options --init setup config file. Create .secretlintrc.json file from your package.json --format [String] formatter name. Default: \"stylish\". Available Formatter: checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, tap, unix, table --output [path:String] output file path that is written of reported result. --no-color disable ANSI-color of output. --no-terminalLink disable terminalLink of output. --maskSecrets enable masking of secret values. replace actual secrets with \"***\". --secretlintrc [path:String] path to .secretlintrc config file. Default: .secretlintrc.* --secretlintignore [path:String] path to .secretlintignore file. Default: .secretlintignore Options for Developer --profile Enable performance profile. --secretlintrcJSON [String] a JSON string of .secretlintrc. use JSON string instead of rc file. Experimental Options --locale [String] locale tag for translating message. Default: en Examples $ secretlint ./README.md # glob pattern should be wrapped with double quote $ secretlint \"**/*\" $ secretlint \"source/**/*.ini\"","title":"Help content"},{"location":"descriptors/repository_secretlint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): secretlint @secretlint/secretlint-rule-preset-recommend @secretlint/secretlint-formatter-sarif","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_semgrep/","text":"To use SemGrep in MegaLinter you must define a list of rulesets to use. Example: REPOSITORY_SEMGREP_RULESETS: [\"p/docker-compose\",\"p/owasp-top-ten\"] Exception for standalone and security flavors docker images, that use a list of security rulesets by default. semgrep documentation Version in MegaLinter: 0.115.0 Visit Official Web Site See How to configure semgrep rules See How to disable semgrep rules in files See How to ignore files and directories with semgrep You can define a .semgrepignore file to ignore files and folders See Index of problems detected by semgrep Configuration in MegaLinter Enable semgrep by adding REPOSITORY_SEMGREP in ENABLE_LINTERS variable Disable semgrep by adding REPOSITORY_SEMGREP in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_SEMGREP_RULESETS List of semgrep rulesets identifiers that you want to enforce auto REPOSITORY_SEMGREP_RULESETS_TYPE MegaLinter semgrep ruleset list preset id . Available values: security `` REPOSITORY_SEMGREP_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_SEMGREP_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SEMGREP_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SEMGREP_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_SEMGREP_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use semgrep in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode SemGrep MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed semgrep is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using semgrep configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make semgrep analyze only updated files Example calls semgrep /tmp/lint semgrep Help content Usage: semgrep [OPTIONS] COMMAND [ARGS]... To get started quickly, run `semgrep scan --config auto` Run `semgrep SUBCOMMAND --help` for more information on each subcommand If no subcommand is passed, will run `scan` subcommand by default Options: -h, --help Show this message and exit. Commands: ci The recommended way to run semgrep in CI login Obtain and save credentials for semgrep.dev logout Remove locally stored credentials to semgrep.dev lsp [EXPERIMENTAL] Start the Semgrep LSP server publish Upload rule to semgrep.dev scan Run semgrep rules on files shouldafound Report a false negative in this project. Installation on mega-linter Docker image PIP packages (Python): semgrep","title":"semgrep"},{"location":"descriptors/repository_semgrep/#semgrep-documentation","text":"Version in MegaLinter: 0.115.0 Visit Official Web Site See How to configure semgrep rules See How to disable semgrep rules in files See How to ignore files and directories with semgrep You can define a .semgrepignore file to ignore files and folders See Index of problems detected by semgrep","title":"semgrep documentation"},{"location":"descriptors/repository_semgrep/#configuration-in-megalinter","text":"Enable semgrep by adding REPOSITORY_SEMGREP in ENABLE_LINTERS variable Disable semgrep by adding REPOSITORY_SEMGREP in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_SEMGREP_RULESETS List of semgrep rulesets identifiers that you want to enforce auto REPOSITORY_SEMGREP_RULESETS_TYPE MegaLinter semgrep ruleset list preset id . Available values: security `` REPOSITORY_SEMGREP_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_SEMGREP_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SEMGREP_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SEMGREP_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_SEMGREP_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_semgrep/#ide-integration","text":"Use semgrep in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode SemGrep","title":"IDE Integration"},{"location":"descriptors/repository_semgrep/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_semgrep/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_semgrep/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_semgrep/#how-the-linting-is-performed","text":"semgrep is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using semgrep configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make semgrep analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_semgrep/#example-calls","text":"semgrep /tmp/lint semgrep","title":"Example calls"},{"location":"descriptors/repository_semgrep/#help-content","text":"Usage: semgrep [OPTIONS] COMMAND [ARGS]... To get started quickly, run `semgrep scan --config auto` Run `semgrep SUBCOMMAND --help` for more information on each subcommand If no subcommand is passed, will run `scan` subcommand by default Options: -h, --help Show this message and exit. Commands: ci The recommended way to run semgrep in CI login Obtain and save credentials for semgrep.dev logout Remove locally stored credentials to semgrep.dev lsp [EXPERIMENTAL] Start the Semgrep LSP server publish Upload rule to semgrep.dev scan Run semgrep rules on files shouldafound Report a false negative in this project.","title":"Help content"},{"location":"descriptors/repository_semgrep/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): semgrep","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_syft/","text":"Builds a SBOM (Software Build Of Materials) from your repository syft documentation Version in MegaLinter: 0.58.0 Visit Official Web Site Configuration in MegaLinter Enable syft by adding REPOSITORY_SYFT in ENABLE_LINTERS variable Disable syft by adding REPOSITORY_SYFT in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_SYFT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_SYFT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SYFT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SYFT_CONFIG_FILE syft configuration file name Use LINTER_DEFAULT to let the linter find it .syft.yaml REPOSITORY_SYFT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_SYFT_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_SYFT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed syft is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using syft configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make syft analyze only updated files Example calls syft /tmp/lint Help content Generate a packaged-based Software Bill Of Materials (SBOM) from container images and filesystems Usage: [flags] [command] Examples: syft packages alpine:latest a summary of discovered packages syft packages alpine:latest -o json show all possible cataloging details syft packages alpine:latest -o cyclonedx show a CycloneDX formatted SBOM syft packages alpine:latest -o cyclonedx-json show a CycloneDX JSON formatted SBOM syft packages alpine:latest -o spdx show a SPDX 2.2 Tag-Value formatted SBOM syft packages alpine:latest -o spdx-json show a SPDX 2.2 JSON formatted SBOM syft packages alpine:latest -vv show verbose debug information syft packages alpine:latest -o template -t my_format.tmpl show a SBOM formatted according to given template file Supports the following image sources: syft packages yourrepo/yourimage:tag defaults to using images from a Docker daemon. If Docker is not present, the image is pulled directly from the registry. syft packages path/to/a/file/or/dir a Docker tar, OCI tar, OCI directory, SIF container, or generic filesystem directory You can also explicitly specify the scheme to use: syft packages docker:yourrepo/yourimage:tag explicitly use the Docker daemon syft packages podman:yourrepo/yourimage:tag explicitly use the Podman daemon syft packages registry:yourrepo/yourimage:tag pull image directly from a registry (no container runtime required) syft packages docker-archive:path/to/yourimage.tar use a tarball from disk for archives created from \"docker save\" syft packages oci-archive:path/to/yourimage.tar use a tarball from disk for OCI archives (from Skopeo or otherwise) syft packages oci-dir:path/to/yourimage read directly from a path on disk for OCI layout directories (from Skopeo or otherwise) syft packages singularity:path/to/yourimage.sif read directly from a Singularity Image Format (SIF) container on disk syft packages dir:path/to/yourproject read directly from a path on disk (any directory) syft packages file:path/to/yourproject/file read directly from a path on disk (any single file) Available Commands: attest Generate a package SBOM as an attestation for the given [SOURCE] container image completion Generate a shell completion for Syft (listing local docker images) convert Convert between SBOM formats help Help about any command login Log in to a registry packages Generate a package SBOM version show the version Flags: --catalogers stringArray enable one or more package catalogers -c, --config string application config file -d, --dockerfile string include dockerfile for upload to Anchore Enterprise --exclude stringArray exclude paths from being scanned using a glob expression --file string file to write the default report output to (default is STDOUT) -h, --help help for this command -H, --host string the hostname or URL of the Anchore Enterprise instance to upload to --import-timeout uint set a timeout duration (in seconds) for the upload to Anchore Enterprise (default 30) -o, --output stringArray report output format, options=[syft-json cyclonedx-xml cyclonedx-json github github-json spdx-tag-value spdx-json table text template] (default [table]) --overwrite-existing-image overwrite an existing image during the upload to Anchore Enterprise -p, --password string the password to authenticate against Anchore Enterprise --platform string an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux') -q, --quiet suppress all logging output -s, --scope string selection of layers to catalog, options=[Squashed AllLayers] (default \"Squashed\") -t, --template string specify the path to a Go template file -u, --username string the username to authenticate against Anchore Enterprise -v, --verbose count increase verbosity (-v = info, -vv = debug) --version version for this command Use \" [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin","title":"syft"},{"location":"descriptors/repository_syft/#syft-documentation","text":"Version in MegaLinter: 0.58.0 Visit Official Web Site","title":"syft documentation"},{"location":"descriptors/repository_syft/#configuration-in-megalinter","text":"Enable syft by adding REPOSITORY_SYFT in ENABLE_LINTERS variable Disable syft by adding REPOSITORY_SYFT in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_SYFT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_SYFT_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_SYFT_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_SYFT_CONFIG_FILE syft configuration file name Use LINTER_DEFAULT to let the linter find it .syft.yaml REPOSITORY_SYFT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules REPOSITORY_SYFT_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_SYFT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_syft/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21","title":"MegaLinter Flavours"},{"location":"descriptors/repository_syft/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_syft/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_syft/#how-the-linting-is-performed","text":"syft is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using syft configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make syft analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_syft/#example-calls","text":"syft /tmp/lint","title":"Example calls"},{"location":"descriptors/repository_syft/#help-content","text":"Generate a packaged-based Software Bill Of Materials (SBOM) from container images and filesystems Usage: [flags] [command] Examples: syft packages alpine:latest a summary of discovered packages syft packages alpine:latest -o json show all possible cataloging details syft packages alpine:latest -o cyclonedx show a CycloneDX formatted SBOM syft packages alpine:latest -o cyclonedx-json show a CycloneDX JSON formatted SBOM syft packages alpine:latest -o spdx show a SPDX 2.2 Tag-Value formatted SBOM syft packages alpine:latest -o spdx-json show a SPDX 2.2 JSON formatted SBOM syft packages alpine:latest -vv show verbose debug information syft packages alpine:latest -o template -t my_format.tmpl show a SBOM formatted according to given template file Supports the following image sources: syft packages yourrepo/yourimage:tag defaults to using images from a Docker daemon. If Docker is not present, the image is pulled directly from the registry. syft packages path/to/a/file/or/dir a Docker tar, OCI tar, OCI directory, SIF container, or generic filesystem directory You can also explicitly specify the scheme to use: syft packages docker:yourrepo/yourimage:tag explicitly use the Docker daemon syft packages podman:yourrepo/yourimage:tag explicitly use the Podman daemon syft packages registry:yourrepo/yourimage:tag pull image directly from a registry (no container runtime required) syft packages docker-archive:path/to/yourimage.tar use a tarball from disk for archives created from \"docker save\" syft packages oci-archive:path/to/yourimage.tar use a tarball from disk for OCI archives (from Skopeo or otherwise) syft packages oci-dir:path/to/yourimage read directly from a path on disk for OCI layout directories (from Skopeo or otherwise) syft packages singularity:path/to/yourimage.sif read directly from a Singularity Image Format (SIF) container on disk syft packages dir:path/to/yourproject read directly from a path on disk (any directory) syft packages file:path/to/yourproject/file read directly from a path on disk (any single file) Available Commands: attest Generate a package SBOM as an attestation for the given [SOURCE] container image completion Generate a shell completion for Syft (listing local docker images) convert Convert between SBOM formats help Help about any command login Log in to a registry packages Generate a package SBOM version show the version Flags: --catalogers stringArray enable one or more package catalogers -c, --config string application config file -d, --dockerfile string include dockerfile for upload to Anchore Enterprise --exclude stringArray exclude paths from being scanned using a glob expression --file string file to write the default report output to (default is STDOUT) -h, --help help for this command -H, --host string the hostname or URL of the Anchore Enterprise instance to upload to --import-timeout uint set a timeout duration (in seconds) for the upload to Anchore Enterprise (default 30) -o, --output stringArray report output format, options=[syft-json cyclonedx-xml cyclonedx-json github github-json spdx-tag-value spdx-json table text template] (default [table]) --overwrite-existing-image overwrite an existing image during the upload to Anchore Enterprise -p, --password string the password to authenticate against Anchore Enterprise --platform string an optional platform specifier for container image sources (e.g. 'linux/arm64', 'linux/arm64/v8', 'arm64', 'linux') -q, --quiet suppress all logging output -s, --scope string selection of layers to catalog, options=[Squashed AllLayers] (default \"Squashed\") -t, --template string specify the path to a Go template file -u, --username string the username to authenticate against Anchore Enterprise -v, --verbose count increase verbosity (-v = info, -vv = debug) --version version for this command Use \" [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/repository_syft/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin","title":"Installation on mega-linter Docker image"},{"location":"descriptors/repository_trivy/","text":"You can ignore a list of errors by defining a .trivyignore file trivy documentation Version in MegaLinter: 0.29.2 Visit Official Web Site See How to configure trivy rules See How to ignore files and directories with trivy Configuration in MegaLinter Enable trivy by adding REPOSITORY_TRIVY in ENABLE_LINTERS variable Disable trivy by adding REPOSITORY_TRIVY in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_TRIVY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_TRIVY_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_TRIVY_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_TRIVY_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_TRIVY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use trivy in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode Trivy MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files will always be linted How the linting is performed trivy is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using trivy configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make trivy analyze only updated files Example calls trivy fs --security-checks vuln,config . Help content NAME: trivy - Scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues and hard-coded secrets USAGE: trivy [global options] command [command options] target VERSION: 0.29.2 COMMANDS: image, i scan an image filesystem, fs scan local filesystem for language-specific dependencies and config files rootfs scan rootfs repository, repo scan remote repository server, s server mode config, conf scan config files plugin, p manage plugins module, m manage modules kubernetes, k8s scan kubernetes vulnerabilities, secrets and misconfigurations sbom generate SBOM for an artifact version print the version help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --cache-dir value cache directory (default: \"/root/.cache/trivy\") [$TRIVY_CACHE_DIR] --debug, -d debug mode (default: false) [$TRIVY_DEBUG] --help, -h show help (default: false) --quiet, -q suppress progress bar and log output (default: false) [$TRIVY_QUIET] --version, -v print the version (default: false) Installation on mega-linter Docker image Dockerfile commands : RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.29.2 && \\ wget --tries=5 -q -O /usr/local/bin/sarif.tpl https://raw.githubusercontent.com/aquasecurity/trivy/714b5ca2460363e082d42a8d933c7a0cb7eff7a8/contrib/sarif.tpl && \\ chmod 644 /usr/local/bin/sarif.tpl","title":"trivy"},{"location":"descriptors/repository_trivy/#trivy-documentation","text":"Version in MegaLinter: 0.29.2 Visit Official Web Site See How to configure trivy rules See How to ignore files and directories with trivy","title":"trivy documentation"},{"location":"descriptors/repository_trivy/#configuration-in-megalinter","text":"Enable trivy by adding REPOSITORY_TRIVY in ENABLE_LINTERS variable Disable trivy by adding REPOSITORY_TRIVY in DISABLE_LINTERS variable Variable Description Default value REPOSITORY_TRIVY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" REPOSITORY_TRIVY_PRE_COMMANDS List of bash commands to run before the linter None REPOSITORY_TRIVY_POST_COMMANDS List of bash commands to run after the linter None REPOSITORY_TRIVY_DISABLE_ERRORS Run linter but consider errors as warnings false REPOSITORY_TRIVY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/repository_trivy/#ide-integration","text":"Use trivy in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code VsCode Trivy","title":"IDE Integration"},{"location":"descriptors/repository_trivy/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 security Optimized for security 21 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/repository_trivy/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/repository_trivy/#how-are-identified-applicable-files","text":"If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/repository_trivy/#how-the-linting-is-performed","text":"trivy is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using trivy configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make trivy analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/repository_trivy/#example-calls","text":"trivy fs --security-checks vuln,config .","title":"Example calls"},{"location":"descriptors/repository_trivy/#help-content","text":"NAME: trivy - Scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues and hard-coded secrets USAGE: trivy [global options] command [command options] target VERSION: 0.29.2 COMMANDS: image, i scan an image filesystem, fs scan local filesystem for language-specific dependencies and config files rootfs scan rootfs repository, repo scan remote repository server, s server mode config, conf scan config files plugin, p manage plugins module, m manage modules kubernetes, k8s scan kubernetes vulnerabilities, secrets and misconfigurations sbom generate SBOM for an artifact version print the version help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --cache-dir value cache directory (default: \"/root/.cache/trivy\") [$TRIVY_CACHE_DIR] --debug, -d debug mode (default: false) [$TRIVY_DEBUG] --help, -h show help (default: false) --quiet, -q suppress progress bar and log output (default: false) [$TRIVY_QUIET] --version, -v print the version (default: false)","title":"Help content"},{"location":"descriptors/repository_trivy/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.29.2 && \\ wget --tries=5 -q -O /usr/local/bin/sarif.tpl https://raw.githubusercontent.com/aquasecurity/trivy/714b5ca2460363e082d42a8d933c7a0cb7eff7a8/contrib/sarif.tpl && \\ chmod 644 /usr/local/bin/sarif.tpl","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rst/","text":"RST Linters Linter Configuration key Status rst-lint RST rstcheck RST Linted files File extensions: .rst Configuration in MegaLinter Variable Description Default value RST_FILTER_REGEX_INCLUDE Custom regex including filter RST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All RST linters"},{"location":"descriptors/rst/#rst","text":"","title":"RST"},{"location":"descriptors/rst/#linters","text":"Linter Configuration key Status rst-lint RST rstcheck RST","title":"Linters"},{"location":"descriptors/rst/#linted-files","text":"File extensions: .rst","title":"Linted files"},{"location":"descriptors/rst/#configuration-in-megalinter","text":"Variable Description Default value RST_FILTER_REGEX_INCLUDE Custom regex including filter RST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/rst_rst_lint/","text":"rst-lint rst-lint documentation Version in MegaLinter: 1.4.0 Visit Official Web Site Configuration in MegaLinter Enable rst-lint by adding RST_RST_LINT in ENABLE_LINTERS variable Disable rst-lint by adding RST_RST_LINT in DISABLE_LINTERS variable Variable Description Default value RST_RST_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RST_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RST_RST_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RST_RST_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RST_RST_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RST_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RST_LINT_PRE_COMMANDS List of bash commands to run before the linter None RST_RST_LINT_POST_COMMANDS List of bash commands to run after the linter None RST_RST_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false RST_RST_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .rst How the linting is performed rst-lint is called one time by identified file ( file CLI lint mode) Example calls rst-lint myfile.rst Help content usage: rst-lint [-h] [--version] [--format {text,json}] [--encoding ENCODING] [--level {debug,info,warning,error,severe}] [--rst-prolog RST_PROLOG] path [path ...] Lint reStructuredText files. Returns 0 if all files pass linting, 1 for an internal error, and 2 if linting failed. positional arguments: path File/folder to lint options: -h, --help show this help message and exit --version show program's version number and exit --format {text,json} Format of the output (default: \"text\") --encoding ENCODING Encoding of the input file (e.g. \"utf-8\") --level {debug,info,warning,error,severe} Minimum error level to report (default: \"warning\") --rst-prolog RST_PROLOG reStructuredText content to prepend to all files (useful for substitutions) Installation on mega-linter Docker image PIP packages (Python): restructuredtext_lint","title":"rst-lint"},{"location":"descriptors/rst_rst_lint/#rst-lint","text":"","title":"rst-lint"},{"location":"descriptors/rst_rst_lint/#rst-lint-documentation","text":"Version in MegaLinter: 1.4.0 Visit Official Web Site","title":"rst-lint documentation"},{"location":"descriptors/rst_rst_lint/#configuration-in-megalinter","text":"Enable rst-lint by adding RST_RST_LINT in ENABLE_LINTERS variable Disable rst-lint by adding RST_RST_LINT in DISABLE_LINTERS variable Variable Description Default value RST_RST_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RST_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RST_RST_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RST_RST_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RST_RST_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RST_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RST_LINT_PRE_COMMANDS List of bash commands to run before the linter None RST_RST_LINT_POST_COMMANDS List of bash commands to run after the linter None RST_RST_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false RST_RST_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/rst_rst_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/rst_rst_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rst_rst_lint/#how-are-identified-applicable-files","text":"File extensions: .rst","title":"How are identified applicable files"},{"location":"descriptors/rst_rst_lint/#how-the-linting-is-performed","text":"rst-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/rst_rst_lint/#example-calls","text":"rst-lint myfile.rst","title":"Example calls"},{"location":"descriptors/rst_rst_lint/#help-content","text":"usage: rst-lint [-h] [--version] [--format {text,json}] [--encoding ENCODING] [--level {debug,info,warning,error,severe}] [--rst-prolog RST_PROLOG] path [path ...] Lint reStructuredText files. Returns 0 if all files pass linting, 1 for an internal error, and 2 if linting failed. positional arguments: path File/folder to lint options: -h, --help show this help message and exit --version show program's version number and exit --format {text,json} Format of the output (default: \"text\") --encoding ENCODING Encoding of the input file (e.g. \"utf-8\") --level {debug,info,warning,error,severe} Minimum error level to report (default: \"warning\") --rst-prolog RST_PROLOG reStructuredText content to prepend to all files (useful for substitutions)","title":"Help content"},{"location":"descriptors/rst_rst_lint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): restructuredtext_lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rst_rstcheck/","text":"rstcheck rstcheck documentation Version in MegaLinter: 6.1.0 Visit Official Web Site See How to configure rstcheck rules See How to disable rstcheck rules in files Configuration in MegaLinter Enable rstcheck by adding RST_RSTCHECK in ENABLE_LINTERS variable Disable rstcheck by adding RST_RSTCHECK in DISABLE_LINTERS variable Variable Description Default value RST_RSTCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RSTCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RST_RSTCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RST_RSTCHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RST_RSTCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RSTCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RSTCHECK_PRE_COMMANDS List of bash commands to run before the linter None RST_RSTCHECK_POST_COMMANDS List of bash commands to run after the linter None RST_RSTCHECK_CONFIG_FILE rstcheck configuration file name Use LINTER_DEFAULT to let the linter find it .rstcheck.cfg RST_RSTCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RST_RSTCHECK_DISABLE_ERRORS Run linter but consider errors as warnings false RST_RSTCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use rstcheck in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code vscode-restructuredtext MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56 Behind the scenes How are identified applicable files File extensions: .rst How the linting is performed rstcheck is called one time by identified file ( file CLI lint mode) Example calls rstcheck myfile.rst rstcheck -c .rstcheck.cfg myfile.rst Help content Usage: rstcheck [OPTIONS] FILES... CLI of rstcheck. Enabled features: [] Pass one ore more rst FILES to check. Can be files or directories if --recursive is passed too. Pass \"-\" if you want to read from stdin. \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --config PATH Config file to load. Can be a INI \u2502 \u2502 file or directory. If a directory is \u2502 \u2502 passed it will be searched for \u2502 \u2502 .rstcheck.cfg | setup.cfg. If 'NONE' \u2502 \u2502 is passed no config file is loaded \u2502 \u2502 at all. \u2502 \u2502 [default: None] \u2502 \u2502 --warn-unknown-settings Log a WARNING for unknown settings \u2502 \u2502 in config files. Can be hidden via \u2502 \u2502 --log-level. \u2502 \u2502 --recursive -r Recursively search passed \u2502 \u2502 directories for RST files to check. \u2502 \u2502 --report-level LEVEL The report level of the linting \u2502 \u2502 issues found. Valid levels are: INFO \u2502 \u2502 | WARNING | ERROR | SEVERE | NONE. \u2502 \u2502 Defaults to INFO. Can be set in \u2502 \u2502 config file. \u2502 \u2502 [default: None] \u2502 \u2502 --log-level LEVEL The log level of the application for \u2502 \u2502 information that is not a linting \u2502 \u2502 issue. Valid levels are: DEBUG | \u2502 \u2502 INFO | WARNING | ERROR | CRITICAL. \u2502 \u2502 Defaults to WARNING. \u2502 \u2502 [default: WARNING] \u2502 \u2502 --ignore-directives TEXT Comma-separated-list of directives \u2502 \u2502 to add to the ignore list. Can be \u2502 \u2502 set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-roles TEXT Comma-separated-list of roles to add \u2502 \u2502 to the ignore list. Can be set in \u2502 \u2502 config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-substitutions TEXT Comma-separated-list of \u2502 \u2502 substitutions to add to the ignore \u2502 \u2502 list. Can be set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-languages TEXT Comma-separated-list of languages \u2502 \u2502 for code-blocks to add to the ignore \u2502 \u2502 list. The code in ignored \u2502 \u2502 code-blocks will not be checked for \u2502 \u2502 errors. Can be set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-messages REGEX A regular expression to match \u2502 \u2502 linting issue messages against to \u2502 \u2502 ignore. Can be set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --version \u2502 \u2502 --install-completion Install completion for the current \u2502 \u2502 shell. \u2502 \u2502 --show-completion Show completion for the current \u2502 \u2502 shell, to copy it or customize the \u2502 \u2502 installation. \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f Installation on mega-linter Docker image PIP packages (Python): rstcheck","title":"rstcheck"},{"location":"descriptors/rst_rstcheck/#rstcheck","text":"","title":"rstcheck"},{"location":"descriptors/rst_rstcheck/#rstcheck-documentation","text":"Version in MegaLinter: 6.1.0 Visit Official Web Site See How to configure rstcheck rules See How to disable rstcheck rules in files","title":"rstcheck documentation"},{"location":"descriptors/rst_rstcheck/#configuration-in-megalinter","text":"Enable rstcheck by adding RST_RSTCHECK in ENABLE_LINTERS variable Disable rstcheck by adding RST_RSTCHECK in DISABLE_LINTERS variable Variable Description Default value RST_RSTCHECK_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RST_RSTCHECK_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RST_RSTCHECK_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RST_RSTCHECK_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RST_RSTCHECK_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rst\"] RST_RSTCHECK_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RST_RSTCHECK_PRE_COMMANDS List of bash commands to run before the linter None RST_RSTCHECK_POST_COMMANDS List of bash commands to run after the linter None RST_RSTCHECK_CONFIG_FILE rstcheck configuration file name Use LINTER_DEFAULT to let the linter find it .rstcheck.cfg RST_RSTCHECK_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RST_RSTCHECK_DISABLE_ERRORS Run linter but consider errors as warnings false RST_RSTCHECK_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/rst_rstcheck/#ide-integration","text":"Use rstcheck in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code vscode-restructuredtext","title":"IDE Integration"},{"location":"descriptors/rst_rstcheck/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 python Optimized for PYTHON based projects 56","title":"MegaLinter Flavours"},{"location":"descriptors/rst_rstcheck/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rst_rstcheck/#how-are-identified-applicable-files","text":"File extensions: .rst","title":"How are identified applicable files"},{"location":"descriptors/rst_rstcheck/#how-the-linting-is-performed","text":"rstcheck is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/rst_rstcheck/#example-calls","text":"rstcheck myfile.rst rstcheck -c .rstcheck.cfg myfile.rst","title":"Example calls"},{"location":"descriptors/rst_rstcheck/#help-content","text":"Usage: rstcheck [OPTIONS] FILES... CLI of rstcheck. Enabled features: [] Pass one ore more rst FILES to check. Can be files or directories if --recursive is passed too. Pass \"-\" if you want to read from stdin. \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --config PATH Config file to load. Can be a INI \u2502 \u2502 file or directory. If a directory is \u2502 \u2502 passed it will be searched for \u2502 \u2502 .rstcheck.cfg | setup.cfg. If 'NONE' \u2502 \u2502 is passed no config file is loaded \u2502 \u2502 at all. \u2502 \u2502 [default: None] \u2502 \u2502 --warn-unknown-settings Log a WARNING for unknown settings \u2502 \u2502 in config files. Can be hidden via \u2502 \u2502 --log-level. \u2502 \u2502 --recursive -r Recursively search passed \u2502 \u2502 directories for RST files to check. \u2502 \u2502 --report-level LEVEL The report level of the linting \u2502 \u2502 issues found. Valid levels are: INFO \u2502 \u2502 | WARNING | ERROR | SEVERE | NONE. \u2502 \u2502 Defaults to INFO. Can be set in \u2502 \u2502 config file. \u2502 \u2502 [default: None] \u2502 \u2502 --log-level LEVEL The log level of the application for \u2502 \u2502 information that is not a linting \u2502 \u2502 issue. Valid levels are: DEBUG | \u2502 \u2502 INFO | WARNING | ERROR | CRITICAL. \u2502 \u2502 Defaults to WARNING. \u2502 \u2502 [default: WARNING] \u2502 \u2502 --ignore-directives TEXT Comma-separated-list of directives \u2502 \u2502 to add to the ignore list. Can be \u2502 \u2502 set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-roles TEXT Comma-separated-list of roles to add \u2502 \u2502 to the ignore list. Can be set in \u2502 \u2502 config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-substitutions TEXT Comma-separated-list of \u2502 \u2502 substitutions to add to the ignore \u2502 \u2502 list. Can be set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-languages TEXT Comma-separated-list of languages \u2502 \u2502 for code-blocks to add to the ignore \u2502 \u2502 list. The code in ignored \u2502 \u2502 code-blocks will not be checked for \u2502 \u2502 errors. Can be set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --ignore-messages REGEX A regular expression to match \u2502 \u2502 linting issue messages against to \u2502 \u2502 ignore. Can be set in config file. \u2502 \u2502 [default: None] \u2502 \u2502 --version \u2502 \u2502 --install-completion Install completion for the current \u2502 \u2502 shell. \u2502 \u2502 --show-completion Show completion for the current \u2502 \u2502 shell, to copy it or customize the \u2502 \u2502 installation. \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f","title":"Help content"},{"location":"descriptors/rst_rstcheck/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): rstcheck","title":"Installation on mega-linter Docker image"},{"location":"descriptors/ruby/","text":"RUBY Linters Linter Configuration key Status rubocop RUBY Linted files File extensions: .rb Configuration in MegaLinter Variable Description Default value RUBY_FILTER_REGEX_INCLUDE Custom regex including filter RUBY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All RUBY linters"},{"location":"descriptors/ruby/#ruby","text":"","title":"RUBY"},{"location":"descriptors/ruby/#linters","text":"Linter Configuration key Status rubocop RUBY","title":"Linters"},{"location":"descriptors/ruby/#linted-files","text":"File extensions: .rb","title":"Linted files"},{"location":"descriptors/ruby/#configuration-in-megalinter","text":"Variable Description Default value RUBY_FILTER_REGEX_INCLUDE Custom regex including filter RUBY_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/ruby_rubocop/","text":"rubocop documentation Version in MegaLinter: 1.36.0 Visit Official Web Site See How to configure rubocop rules If custom .ruby-lint.yml config file is not found, .ruby-lint.yml will be used See How to disable rubocop rules in files See Index of problems detected by rubocop Configuration in MegaLinter Enable rubocop by adding RUBY_RUBOCOP in ENABLE_LINTERS variable Disable rubocop by adding RUBY_RUBOCOP in DISABLE_LINTERS variable Enable auto-fixes by adding RUBY_RUBOCOP in APPLY_FIXES variable Variable Description Default value RUBY_RUBOCOP_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUBY_RUBOCOP_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RUBY_RUBOCOP_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RUBY_RUBOCOP_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rb\"] RUBY_RUBOCOP_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUBY_RUBOCOP_PRE_COMMANDS List of bash commands to run before the linter None RUBY_RUBOCOP_POST_COMMANDS List of bash commands to run after the linter None RUBY_RUBOCOP_CONFIG_FILE rubocop configuration file name Use LINTER_DEFAULT to let the linter find it .ruby-lint.yml RUBY_RUBOCOP_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RUBY_RUBOCOP_DISABLE_ERRORS Run linter but consider errors as warnings false RUBY_RUBOCOP_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use rubocop in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-rubocop Visit Web Site Brackets brackets-rubocop Visit Web Site Emacs rubocop-emacs Visit Web Site Emacs flycheck Visit Web Site IDEA RubyMine Visit Web Site Sublime Text sublime_rubocop Visit Web Site vim vim-rubocop Visit Web Site vim ale Visit Web Site Visual Studio Code VsCode Ruby Extension MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ruby Optimized for RUBY based projects 47 Behind the scenes How are identified applicable files File extensions: .rb How the linting is performed rubocop is called one time by identified file ( file CLI lint mode) Example calls rubocop --force-exclusion myfile.rb rubocop --force-exclusion -c .ruby-lint.yml myfile.rb rubocop --force-exclusion --safe-auto-correct -c .ruby-lint.yml myfile.rb Help content Usage: rubocop [options] [file1, file2, ...] Basic Options: -l, --lint Run only lint cops. -x, --fix-layout Run only layout cops, with autocorrect on. --safe Run only safe cops. --except [COP1,COP2,...] Exclude the given cop(s). --only [COP1,COP2,...] Run only the given cop(s). --only-guide-cops Run only cops for rules that link to a style guide. -F, --fail-fast Inspect files in order of modification time and stop after the first file containing offenses. --disable-pending-cops Run without pending cops. --enable-pending-cops Run with pending cops. --ignore-disable-comments Run cops even when they are disabled locally by a `rubocop:disable` directive. --force-exclusion Any files excluded by `Exclude` in configuration files will be excluded, even if given explicitly as arguments. --only-recognized-file-types Inspect files given on the command line only if they are listed in `AllCops/Include` parameters of user configuration or default configuration. --ignore-parent-exclusion Prevent from inheriting `AllCops/Exclude` from parent folders. --ignore-unrecognized-cops Ignore unrecognized cops or departments in the config. --force-default-config Use default configuration even if configuration files are present in the directory tree. -s, --stdin FILE Pipe source from STDIN, using FILE in offense reports. This is useful for editor integration. -P, --[no-]parallel Use available CPUs to execute inspection in parallel. Default is true. --fail-level SEVERITY Minimum severity for exit with error code. [A] autocorrect [I] info [R] refactor [C] convention [W] warning [E] error [F] fatal Caching: -C, --cache FLAG Use result caching (FLAG=true) or don't (FLAG=false), default determined by configuration parameter AllCops: UseCache. --cache-root DIR Set the cache root directory. Takes precedence over the configuration parameter AllCops: CacheRootDirectory and the $RUBOCOP_CACHE_ROOT environment variable. Server Options: --[no-]server If a server process has not been started yet, start the server process and execute inspection with server. Default is false. You can specify the server host and port with the $RUBOCOP_SERVER_HOST and the $RUBOCOP_SERVER_PORT environment variables. --restart-server Restart server process. --start-server Start server process. --stop-server Stop server process. --server-status Show server status. Output Options: -f, --format FORMATTER Choose an output formatter. This option can be specified multiple times to enable multiple formatters at the same time. [a]utogenconf [c]lang [e]macs [fi]les [fu]ubar [g]ithub [h]tml [j]son [ju]nit [m]arkdown [o]ffenses [pa]cman [p]rogress (default) [q]uiet [s]imple [t]ap [w]orst custom formatter class name -D, --[no-]display-cop-names Display cop names in offense messages. Default is true. -E, --extra-details Display extra details in offense messages. -S, --display-style-guide Display style guide URLs in offense messages. -o, --out FILE Write output to a file instead of STDOUT. This option applies to the previously specified --format, or the default format if no format is specified. --stderr Write all output to stderr except for the autocorrected source. This is especially useful when combined with --autocorrect and --stdin. --display-time Display elapsed time in seconds. --display-only-failed Only output offense messages. Omit passing cops. Only valid for --format junit. --display-only-fail-level-offenses Only output offense messages at the specified --fail-level or above --display-only-correctable Only output correctable offense messages. --display-only-safe-correctable Only output safe-correctable offense messages when combined with --display-only-correctable. Autocorrection: -a, --autocorrect Autocorrect offenses (only when it's safe). --auto-correct (same, deprecated) --safe-auto-correct (same, deprecated) -A, --autocorrect-all Autocorrect offenses (safe and unsafe). --auto-correct-all (same, deprecated) --disable-uncorrectable Used with --autocorrect to annotate any offenses that do not support autocorrect with `rubocop:todo` comments. Config Generation: --auto-gen-config Generate a configuration file acting as a TODO list. --regenerate-todo Regenerate the TODO configuration file using the last configuration. If there is no existing TODO file, acts like --auto-gen-config. --exclude-limit COUNT Set the limit for how many files to explicitly exclude. If there are more files than the limit, the cop will be disabled instead. Default is 15. --[no-]offense-counts Include offense counts in configuration file generated by --auto-gen-config. Default is true. --[no-]auto-gen-only-exclude Generate only Exclude parameters and not Max when running --auto-gen-config, except if the number of files with offenses is bigger than exclude-limit. Default is false. --[no-]auto-gen-timestamp Include the date and time when the --auto-gen-config was run in the file it generates. Default is true. Additional Modes: -L, --list-target-files List all files RuboCop will inspect. --show-cops [COP1,COP2,...] Shows the given cops, or all cops by default, and their configurations for the current directory. --show-docs-url [COP1,COP2,...] Display url to documentation for the given cops, or base url by default. General Options: --init Generate a .rubocop.yml file in the current directory. -c, --config FILE Specify configuration file. -d, --debug Display debug info. -r, --require FILE Require Ruby file. --[no-]color Force color output on or off. -v, --version Display version. -V, --verbose-version Display verbose version. Installation on mega-linter Docker image GEM packages (Ruby) : rubocop rubocop-github rubocop-performance rubocop-rails rubocop-rspec","title":"rubocop"},{"location":"descriptors/ruby_rubocop/#rubocop-documentation","text":"Version in MegaLinter: 1.36.0 Visit Official Web Site See How to configure rubocop rules If custom .ruby-lint.yml config file is not found, .ruby-lint.yml will be used See How to disable rubocop rules in files See Index of problems detected by rubocop","title":"rubocop documentation"},{"location":"descriptors/ruby_rubocop/#configuration-in-megalinter","text":"Enable rubocop by adding RUBY_RUBOCOP in ENABLE_LINTERS variable Disable rubocop by adding RUBY_RUBOCOP in DISABLE_LINTERS variable Enable auto-fixes by adding RUBY_RUBOCOP in APPLY_FIXES variable Variable Description Default value RUBY_RUBOCOP_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUBY_RUBOCOP_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file RUBY_RUBOCOP_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file RUBY_RUBOCOP_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file RUBY_RUBOCOP_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rb\"] RUBY_RUBOCOP_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUBY_RUBOCOP_PRE_COMMANDS List of bash commands to run before the linter None RUBY_RUBOCOP_POST_COMMANDS List of bash commands to run after the linter None RUBY_RUBOCOP_CONFIG_FILE rubocop configuration file name Use LINTER_DEFAULT to let the linter find it .ruby-lint.yml RUBY_RUBOCOP_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RUBY_RUBOCOP_DISABLE_ERRORS Run linter but consider errors as warnings false RUBY_RUBOCOP_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/ruby_rubocop/#ide-integration","text":"Use rubocop in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-rubocop Visit Web Site Brackets brackets-rubocop Visit Web Site Emacs rubocop-emacs Visit Web Site Emacs flycheck Visit Web Site IDEA RubyMine Visit Web Site Sublime Text sublime_rubocop Visit Web Site vim vim-rubocop Visit Web Site vim ale Visit Web Site Visual Studio Code VsCode Ruby Extension","title":"IDE Integration"},{"location":"descriptors/ruby_rubocop/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ruby Optimized for RUBY based projects 47","title":"MegaLinter Flavours"},{"location":"descriptors/ruby_rubocop/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/ruby_rubocop/#how-are-identified-applicable-files","text":"File extensions: .rb","title":"How are identified applicable files"},{"location":"descriptors/ruby_rubocop/#how-the-linting-is-performed","text":"rubocop is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/ruby_rubocop/#example-calls","text":"rubocop --force-exclusion myfile.rb rubocop --force-exclusion -c .ruby-lint.yml myfile.rb rubocop --force-exclusion --safe-auto-correct -c .ruby-lint.yml myfile.rb","title":"Example calls"},{"location":"descriptors/ruby_rubocop/#help-content","text":"Usage: rubocop [options] [file1, file2, ...] Basic Options: -l, --lint Run only lint cops. -x, --fix-layout Run only layout cops, with autocorrect on. --safe Run only safe cops. --except [COP1,COP2,...] Exclude the given cop(s). --only [COP1,COP2,...] Run only the given cop(s). --only-guide-cops Run only cops for rules that link to a style guide. -F, --fail-fast Inspect files in order of modification time and stop after the first file containing offenses. --disable-pending-cops Run without pending cops. --enable-pending-cops Run with pending cops. --ignore-disable-comments Run cops even when they are disabled locally by a `rubocop:disable` directive. --force-exclusion Any files excluded by `Exclude` in configuration files will be excluded, even if given explicitly as arguments. --only-recognized-file-types Inspect files given on the command line only if they are listed in `AllCops/Include` parameters of user configuration or default configuration. --ignore-parent-exclusion Prevent from inheriting `AllCops/Exclude` from parent folders. --ignore-unrecognized-cops Ignore unrecognized cops or departments in the config. --force-default-config Use default configuration even if configuration files are present in the directory tree. -s, --stdin FILE Pipe source from STDIN, using FILE in offense reports. This is useful for editor integration. -P, --[no-]parallel Use available CPUs to execute inspection in parallel. Default is true. --fail-level SEVERITY Minimum severity for exit with error code. [A] autocorrect [I] info [R] refactor [C] convention [W] warning [E] error [F] fatal Caching: -C, --cache FLAG Use result caching (FLAG=true) or don't (FLAG=false), default determined by configuration parameter AllCops: UseCache. --cache-root DIR Set the cache root directory. Takes precedence over the configuration parameter AllCops: CacheRootDirectory and the $RUBOCOP_CACHE_ROOT environment variable. Server Options: --[no-]server If a server process has not been started yet, start the server process and execute inspection with server. Default is false. You can specify the server host and port with the $RUBOCOP_SERVER_HOST and the $RUBOCOP_SERVER_PORT environment variables. --restart-server Restart server process. --start-server Start server process. --stop-server Stop server process. --server-status Show server status. Output Options: -f, --format FORMATTER Choose an output formatter. This option can be specified multiple times to enable multiple formatters at the same time. [a]utogenconf [c]lang [e]macs [fi]les [fu]ubar [g]ithub [h]tml [j]son [ju]nit [m]arkdown [o]ffenses [pa]cman [p]rogress (default) [q]uiet [s]imple [t]ap [w]orst custom formatter class name -D, --[no-]display-cop-names Display cop names in offense messages. Default is true. -E, --extra-details Display extra details in offense messages. -S, --display-style-guide Display style guide URLs in offense messages. -o, --out FILE Write output to a file instead of STDOUT. This option applies to the previously specified --format, or the default format if no format is specified. --stderr Write all output to stderr except for the autocorrected source. This is especially useful when combined with --autocorrect and --stdin. --display-time Display elapsed time in seconds. --display-only-failed Only output offense messages. Omit passing cops. Only valid for --format junit. --display-only-fail-level-offenses Only output offense messages at the specified --fail-level or above --display-only-correctable Only output correctable offense messages. --display-only-safe-correctable Only output safe-correctable offense messages when combined with --display-only-correctable. Autocorrection: -a, --autocorrect Autocorrect offenses (only when it's safe). --auto-correct (same, deprecated) --safe-auto-correct (same, deprecated) -A, --autocorrect-all Autocorrect offenses (safe and unsafe). --auto-correct-all (same, deprecated) --disable-uncorrectable Used with --autocorrect to annotate any offenses that do not support autocorrect with `rubocop:todo` comments. Config Generation: --auto-gen-config Generate a configuration file acting as a TODO list. --regenerate-todo Regenerate the TODO configuration file using the last configuration. If there is no existing TODO file, acts like --auto-gen-config. --exclude-limit COUNT Set the limit for how many files to explicitly exclude. If there are more files than the limit, the cop will be disabled instead. Default is 15. --[no-]offense-counts Include offense counts in configuration file generated by --auto-gen-config. Default is true. --[no-]auto-gen-only-exclude Generate only Exclude parameters and not Max when running --auto-gen-config, except if the number of files with offenses is bigger than exclude-limit. Default is false. --[no-]auto-gen-timestamp Include the date and time when the --auto-gen-config was run in the file it generates. Default is true. Additional Modes: -L, --list-target-files List all files RuboCop will inspect. --show-cops [COP1,COP2,...] Shows the given cops, or all cops by default, and their configurations for the current directory. --show-docs-url [COP1,COP2,...] Display url to documentation for the given cops, or base url by default. General Options: --init Generate a .rubocop.yml file in the current directory. -c, --config FILE Specify configuration file. -d, --debug Display debug info. -r, --require FILE Require Ruby file. --[no-]color Force color output on or off. -v, --version Display version. -V, --verbose-version Display verbose version.","title":"Help content"},{"location":"descriptors/ruby_rubocop/#installation-on-mega-linter-docker-image","text":"GEM packages (Ruby) : rubocop rubocop-github rubocop-performance rubocop-rails rubocop-rspec","title":"Installation on mega-linter Docker image"},{"location":"descriptors/rust/","text":"RUST Linters Linter Configuration key Status clippy RUST Linted files File extensions: .rs Configuration in MegaLinter Variable Description Default value RUST_FILTER_REGEX_INCLUDE Custom regex including filter RUST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All RUST linters"},{"location":"descriptors/rust/#rust","text":"","title":"RUST"},{"location":"descriptors/rust/#linters","text":"Linter Configuration key Status clippy RUST","title":"Linters"},{"location":"descriptors/rust/#linted-files","text":"File extensions: .rs","title":"Linted files"},{"location":"descriptors/rust/#configuration-in-megalinter","text":"Variable Description Default value RUST_FILTER_REGEX_INCLUDE Custom regex including filter RUST_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/rust_clippy/","text":"clippy clippy documentation Version in MegaLinter: 0.1.64 Visit Official Web Site See How to configure clippy rules See How to disable clippy rules in files See Index of problems detected by clippy Configuration in MegaLinter Enable clippy by adding RUST_CLIPPY in ENABLE_LINTERS variable Disable clippy by adding RUST_CLIPPY in DISABLE_LINTERS variable Variable Description Default value RUST_CLIPPY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUST_CLIPPY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rs\"] RUST_CLIPPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUST_CLIPPY_PRE_COMMANDS List of bash commands to run before the linter None RUST_CLIPPY_POST_COMMANDS List of bash commands to run after the linter None RUST_CLIPPY_CONFIG_FILE clippy configuration file name Use LINTER_DEFAULT to let the linter find it .clippy.toml RUST_CLIPPY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RUST_CLIPPY_DISABLE_ERRORS Run linter but consider errors as warnings false RUST_CLIPPY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use clippy in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom Atom IDE Rest Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 rust Optimized for RUST based projects 47 Behind the scenes How are identified applicable files File extensions: .rs How the linting is performed clippy is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using clippy configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make clippy analyze only updated files Example calls cargo-clippy Help content Checks a package to catch common mistakes and improve your Rust code. Usage: cargo clippy [options] [--] [<opts>...] Common options: --no-deps Run Clippy only on the given crate, without linting the dependencies --fix Automatically apply lint suggestions. This flag implies `--no-deps` -h, --help Print this message -V, --version Print version info and exit Other options are the same as `cargo check`. To allow or deny a lint from the command line you can use `cargo clippy --` with: -W --warn OPT Set lint warnings -A --allow OPT Set lint allowed -D --deny OPT Set lint denied -F --forbid OPT Set lint forbidden You can use tool lints to allow or deny lints from your code, eg.: #[allow(clippy::needless_lifetimes)] Installation on mega-linter Docker image","title":"clippy"},{"location":"descriptors/rust_clippy/#clippy","text":"","title":"clippy"},{"location":"descriptors/rust_clippy/#clippy-documentation","text":"Version in MegaLinter: 0.1.64 Visit Official Web Site See How to configure clippy rules See How to disable clippy rules in files See Index of problems detected by clippy","title":"clippy documentation"},{"location":"descriptors/rust_clippy/#configuration-in-megalinter","text":"Enable clippy by adding RUST_CLIPPY in ENABLE_LINTERS variable Disable clippy by adding RUST_CLIPPY in DISABLE_LINTERS variable Variable Description Default value RUST_CLIPPY_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" RUST_CLIPPY_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".rs\"] RUST_CLIPPY_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file RUST_CLIPPY_PRE_COMMANDS List of bash commands to run before the linter None RUST_CLIPPY_POST_COMMANDS List of bash commands to run after the linter None RUST_CLIPPY_CONFIG_FILE clippy configuration file name Use LINTER_DEFAULT to let the linter find it .clippy.toml RUST_CLIPPY_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules RUST_CLIPPY_DISABLE_ERRORS Run linter but consider errors as warnings false RUST_CLIPPY_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/rust_clippy/#ide-integration","text":"Use clippy in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom Atom IDE Rest Visit Web Site","title":"IDE Integration"},{"location":"descriptors/rust_clippy/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 rust Optimized for RUST based projects 47","title":"MegaLinter Flavours"},{"location":"descriptors/rust_clippy/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/rust_clippy/#how-are-identified-applicable-files","text":"File extensions: .rs","title":"How are identified applicable files"},{"location":"descriptors/rust_clippy/#how-the-linting-is-performed","text":"clippy is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using clippy configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make clippy analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/rust_clippy/#example-calls","text":"cargo-clippy","title":"Example calls"},{"location":"descriptors/rust_clippy/#help-content","text":"Checks a package to catch common mistakes and improve your Rust code. Usage: cargo clippy [options] [--] [<opts>...] Common options: --no-deps Run Clippy only on the given crate, without linting the dependencies --fix Automatically apply lint suggestions. This flag implies `--no-deps` -h, --help Print this message -V, --version Print version info and exit Other options are the same as `cargo check`. To allow or deny a lint from the command line you can use `cargo clippy --` with: -W --warn OPT Set lint warnings -A --allow OPT Set lint allowed -D --deny OPT Set lint denied -F --forbid OPT Set lint forbidden You can use tool lints to allow or deny lints from your code, eg.: #[allow(clippy::needless_lifetimes)]","title":"Help content"},{"location":"descriptors/rust_clippy/#installation-on-mega-linter-docker-image","text":"","title":"Installation on mega-linter Docker image"},{"location":"descriptors/salesforce/","text":"SALESFORCE Linters Linter Configuration key Status sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC Linted files Configuration in MegaLinter Variable Description Default value SALESFORCE_FILTER_REGEX_INCLUDE Custom regex including filter SALESFORCE_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache APK packages (Linux): openjdk11 NPM packages (node.js): sfdx-cli","title":"All SALESFORCE linters"},{"location":"descriptors/salesforce/#salesforce","text":"","title":"SALESFORCE"},{"location":"descriptors/salesforce/#linters","text":"Linter Configuration key Status sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC","title":"Linters"},{"location":"descriptors/salesforce/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/salesforce/#configuration-in-megalinter","text":"Variable Description Default value SALESFORCE_FILTER_REGEX_INCLUDE Custom regex including filter SALESFORCE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/salesforce/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce/#installation","text":"Dockerfile commands : ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache APK packages (Linux): openjdk11 NPM packages (node.js): sfdx-cli","title":"Installation"},{"location":"descriptors/salesforce_sfdx_scanner/","text":"sfdx-scanner sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to PMD sfdx-scanner documentation Version in MegaLinter: 2.8.0 Visit Official Web Site See How to configure sfdx-scanner rules See How to disable sfdx-scanner rules in files See Index of problems detected by sfdx-scanner Configuration in MegaLinter Enable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in ENABLE_LINTERS variable Disable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app IDE Integration Use sfdx-scanner in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse pmd-eclipse-plugin Visit Web Site Emacs pmd-emacs Visit Web Site IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 87 salesforce Optimized for Salesforce based projects 41 Behind the scenes How are identified applicable files Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted Example calls sfdx scanner:run Help content evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-v | --json] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] OPTIONS -c, --category=category categor(ies) of rules to run -e, --engine=engine engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=outfile location of output file -r, --ruleset=ruleset [deprecated] ruleset(s) of rules to run -t, --target=target (required) location of source code -v, --violations-cause-error throws an error when violations are detected --env=env JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=eslintconfig location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --pmdconfig=pmdconfig location of PMD rule reference XML file to customize rule selection --tsconfig=tsconfig location of tsconfig.json file --verbose emit additional command output to stdout EXAMPLE Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" \u203a Error: EEXIT: 0 \u203a Code: EEXIT NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices ApexUnit,Default ruleset...,quickstart pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices ApexUnit,Default ruleset...,quickstart pmd AvoidGlobalModifier apex Best Practices Style,Default ruleset...,quickstart pmd AvoidLogicInTrigger apex Best Practices Style,Default ruleset...,quickstart pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDmlStatementsInLoops apex Performance Default ruleset...,Performance pmd AvoidSoqlInLoops apex Performance Default ruleset...,Performance pmd AvoidSoslInLoops apex Performance Default ruleset...,Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Security,Default ruleset...,quickstart pmd ApexCRUDViolation apex Security Security,Default ruleset...,quickstart pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Security,Default ruleset...,quickstart pmd ApexInsecureEndpoint apex Security Security,Default ruleset...,quickstart pmd ApexOpenRedirect apex Security Security,Default ruleset...,quickstart pmd ApexSharingViolations apex Security Security,Default ruleset...,quickstart pmd ApexSOQLInjection apex Security Security,Default ruleset...,quickstart pmd ApexSuggestUsingNamedCred apex Security Security,Default ruleset...,quickstart pmd ApexXSSFromEscapeFalse apex Security Security,Default ruleset...,quickstart pmd ApexXSSFromURLParam apex Security Security,Default ruleset...,quickstart pmd ClassNamingConventions apex Code Style Style,Default ruleset...,quickstart pmd IfElseStmtsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd IfStmtsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Style,Default ruleset...,quickstart pmd OneDeclarationPerLine apex Code Style Default ruleset...,quickstart pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Style,Default ruleset... pmd WhileLoopsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd AvoidDeeplyNestedIfStmts apex Design Default ruleset...,Complexity,quickstart pmd CyclomaticComplexity apex Design Default ruleset...,Metrics tempora...,quickstart pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design Default ruleset...,Complexity,quickstart pmd ExcessiveParameterList apex Design Default ruleset...,Complexity,quickstart pmd ExcessivePublicCount apex Design Default ruleset...,Complexity,quickstart pmd NcssConstructorCount apex Design Default ruleset...,Complexity,quickstart pmd NcssMethodCount apex Design Default ruleset...,Complexity,quickstart pmd NcssTypeCount apex Design Default ruleset...,Complexity,quickstart pmd StdCyclomaticComplexity apex Design Default ruleset...,Complexity,quickstart pmd TooManyFields apex Design Default ruleset...,Complexity,quickstart pmd ApexDoc apex Documentation Default ruleset...,quickstart pmd ApexCSRF apex Error Prone Default ruleset...,quickstart pmd AvoidDirectAccessTriggerMap apex Error Prone Style,Default ruleset...,quickstart pmd AvoidHardcodingId apex Error Prone Style,Default ruleset...,quickstart pmd AvoidNonExistentAnnotations apex Error Prone Default ruleset...,quickstart pmd EmptyCatchBlock apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyIfStmt apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyStatementBlock apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyTryOrFinallyBlock apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyWhileStmt apex Error Prone Default ruleset...,Empty Code,quickstart pmd MethodWithSameNameAsEnclosingClass apex Error Prone Style,Default ruleset...,quickstart pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner Example success log Results of sfdx-scanner linter (version 2.4.0) See documentation on https://megalinter.github.io/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [SUCCESS] /tmp/098844eb-9b85-4505-b6b6-8c6bcd96050f No rule violations found. Example error log Results of sfdx-scanner linter (version 2.4.0) See documentation on https://megalinter.github.io/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [ERROR] /tmp/a62282d7-5f53-42be-9816-03d1c2da8715 LOCATION DESCRIPTION CATEGORY U R L \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 force-app/main/default/classes/SoqlInLoop.cls:1 Apex classes should declare a sharing model if DML Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexsharingviolations or SOQL/SOSL is used force-app/main/default/classes/SoqlInLoop.cls:1 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:2 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:4 Avoid Soql queries inside loops Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#avoidsoqlinloops force-app/main/default/classes/SoqlInLoop.cls:4 Avoid operations in loops that may hit governor Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#operationwithlimitsinloop limits force-app/main/default/classes/SoqlInLoop.cls:4 Validate CRUD permission before SOQL/DML operation Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexcrudviolation force-app/main/default/classes/SoqlInLoop.cls:4 Variable 'accounts' defined but not used Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#unusedlocalvariable force-app/main/default/triggers/trgUser.trigger:1 Avoid logic in triggers Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#avoidlogicintrigger force-app/main/default/triggers/trgUser.trigger:4 The static field name 'BaseURI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#fieldnamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:4 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'BaseURI' starts with uppercase character. force-app/main/default/triggers/trgUser.trigger:7 The local variable name 'URI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#localvariablenamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:7 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'URI' starts with uppercase character. force-app/main/default/aura/auraIf/auraIfController.js:49 'event' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars force-app/main/default/aura/auraIf/auraIfController.js:49 'helper' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars ERROR running scanner:run: Detected rule violations of severity 1 or lower. Please see the logs above.","title":"Salesforce sfdx scanner"},{"location":"descriptors/salesforce_sfdx_scanner/#sfdx-scanner","text":"sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to PMD","title":"sfdx-scanner"},{"location":"descriptors/salesforce_sfdx_scanner/#sfdx-scanner-documentation","text":"Version in MegaLinter: 2.8.0 Visit Official Web Site See How to configure sfdx-scanner rules See How to disable sfdx-scanner rules in files See Index of problems detected by sfdx-scanner","title":"sfdx-scanner documentation"},{"location":"descriptors/salesforce_sfdx_scanner/#configuration-in-megalinter","text":"Enable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in ENABLE_LINTERS variable Disable sfdx-scanner by adding SALESFORCE_SFDX_SCANNER in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src|lib) Include every file SALESFORCE_SFDX_SCANNER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test|examples) Exclude no file SALESFORCE_SFDX_SCANNER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] Exclude every file SALESFORCE_SFDX_SCANNER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app","title":"Configuration in MegaLinter"},{"location":"descriptors/salesforce_sfdx_scanner/#ide-integration","text":"Use sfdx-scanner in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse pmd-eclipse-plugin Visit Web Site Emacs pmd-emacs Visit Web Site IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack","title":"IDE Integration"},{"location":"descriptors/salesforce_sfdx_scanner/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 87 salesforce Optimized for Salesforce based projects 41","title":"MegaLinter Flavours"},{"location":"descriptors/salesforce_sfdx_scanner/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce_sfdx_scanner/#how-are-identified-applicable-files","text":"Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/salesforce_sfdx_scanner/#example-calls","text":"sfdx scanner:run","title":"Example calls"},{"location":"descriptors/salesforce_sfdx_scanner/#help-content","text":"evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-v | --json] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] OPTIONS -c, --category=category categor(ies) of rules to run -e, --engine=engine engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=outfile location of output file -r, --ruleset=ruleset [deprecated] ruleset(s) of rules to run -t, --target=target (required) location of source code -v, --violations-cause-error throws an error when violations are detected --env=env JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=eslintconfig location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --pmdconfig=pmdconfig location of PMD rule reference XML file to customize rule selection --tsconfig=tsconfig location of tsconfig.json file --verbose emit additional command output to stdout EXAMPLE Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" \u203a Error: EEXIT: 0 \u203a Code: EEXIT NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices ApexUnit,Default ruleset...,quickstart pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices ApexUnit,Default ruleset...,quickstart pmd AvoidGlobalModifier apex Best Practices Style,Default ruleset...,quickstart pmd AvoidLogicInTrigger apex Best Practices Style,Default ruleset...,quickstart pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDmlStatementsInLoops apex Performance Default ruleset...,Performance pmd AvoidSoqlInLoops apex Performance Default ruleset...,Performance pmd AvoidSoslInLoops apex Performance Default ruleset...,Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Security,Default ruleset...,quickstart pmd ApexCRUDViolation apex Security Security,Default ruleset...,quickstart pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Security,Default ruleset...,quickstart pmd ApexInsecureEndpoint apex Security Security,Default ruleset...,quickstart pmd ApexOpenRedirect apex Security Security,Default ruleset...,quickstart pmd ApexSharingViolations apex Security Security,Default ruleset...,quickstart pmd ApexSOQLInjection apex Security Security,Default ruleset...,quickstart pmd ApexSuggestUsingNamedCred apex Security Security,Default ruleset...,quickstart pmd ApexXSSFromEscapeFalse apex Security Security,Default ruleset...,quickstart pmd ApexXSSFromURLParam apex Security Security,Default ruleset...,quickstart pmd ClassNamingConventions apex Code Style Style,Default ruleset...,quickstart pmd IfElseStmtsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd IfStmtsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Style,Default ruleset...,quickstart pmd OneDeclarationPerLine apex Code Style Default ruleset...,quickstart pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Style,Default ruleset... pmd WhileLoopsMustUseBraces apex Code Style Braces,Default ruleset...,quickstart pmd AvoidDeeplyNestedIfStmts apex Design Default ruleset...,Complexity,quickstart pmd CyclomaticComplexity apex Design Default ruleset...,Metrics tempora...,quickstart pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design Default ruleset...,Complexity,quickstart pmd ExcessiveParameterList apex Design Default ruleset...,Complexity,quickstart pmd ExcessivePublicCount apex Design Default ruleset...,Complexity,quickstart pmd NcssConstructorCount apex Design Default ruleset...,Complexity,quickstart pmd NcssMethodCount apex Design Default ruleset...,Complexity,quickstart pmd NcssTypeCount apex Design Default ruleset...,Complexity,quickstart pmd StdCyclomaticComplexity apex Design Default ruleset...,Complexity,quickstart pmd TooManyFields apex Design Default ruleset...,Complexity,quickstart pmd ApexDoc apex Documentation Default ruleset...,quickstart pmd ApexCSRF apex Error Prone Default ruleset...,quickstart pmd AvoidDirectAccessTriggerMap apex Error Prone Style,Default ruleset...,quickstart pmd AvoidHardcodingId apex Error Prone Style,Default ruleset...,quickstart pmd AvoidNonExistentAnnotations apex Error Prone Default ruleset...,quickstart pmd EmptyCatchBlock apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyIfStmt apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyStatementBlock apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyTryOrFinallyBlock apex Error Prone Default ruleset...,Empty Code,quickstart pmd EmptyWhileStmt apex Error Prone Default ruleset...,Empty Code,quickstart pmd MethodWithSameNameAsEnclosingClass apex Error Prone Style,Default ruleset...,quickstart pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript","title":"Help content"},{"location":"descriptors/salesforce_sfdx_scanner/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner","title":"Installation on mega-linter Docker image"},{"location":"descriptors/salesforce_sfdx_scanner/#example-success-log","text":"Results of sfdx-scanner linter (version 2.4.0) See documentation on https://megalinter.github.io/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [SUCCESS] /tmp/098844eb-9b85-4505-b6b6-8c6bcd96050f No rule violations found.","title":"Example success log"},{"location":"descriptors/salesforce_sfdx_scanner/#example-error-log","text":"Results of sfdx-scanner linter (version 2.4.0) See documentation on https://megalinter.github.io/descriptors/salesforce_sfdx_scanner/ ----------------------------------------------- [ERROR] /tmp/a62282d7-5f53-42be-9816-03d1c2da8715 LOCATION DESCRIPTION CATEGORY U R L \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 force-app/main/default/classes/SoqlInLoop.cls:1 Apex classes should declare a sharing model if DML Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexsharingviolations or SOQL/SOSL is used force-app/main/default/classes/SoqlInLoop.cls:1 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:2 Missing ApexDoc comment Documentation https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_documentation.html#apexdoc force-app/main/default/classes/SoqlInLoop.cls:4 Avoid Soql queries inside loops Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#avoidsoqlinloops force-app/main/default/classes/SoqlInLoop.cls:4 Avoid operations in loops that may hit governor Performance https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_performance.html#operationwithlimitsinloop limits force-app/main/default/classes/SoqlInLoop.cls:4 Validate CRUD permission before SOQL/DML operation Security https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_security.html#apexcrudviolation force-app/main/default/classes/SoqlInLoop.cls:4 Variable 'accounts' defined but not used Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#unusedlocalvariable force-app/main/default/triggers/trgUser.trigger:1 Avoid logic in triggers Best Practices https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_bestpractices.html#avoidlogicintrigger force-app/main/default/triggers/trgUser.trigger:4 The static field name 'BaseURI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#fieldnamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:4 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'BaseURI' starts with uppercase character. force-app/main/default/triggers/trgUser.trigger:7 The local variable name 'URI' doesn't match Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#localvariablenamingconventions '[a-z][a-zA-Z0-9]*' force-app/main/default/triggers/trgUser.trigger:7 Variables should start with a lowercase character, Code Style https://pmd.github.io/pmd-6.29.0/pmd_rules_apex_codestyle.html#variablenamingconventions 'URI' starts with uppercase character. force-app/main/default/aura/auraIf/auraIfController.js:49 'event' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars force-app/main/default/aura/auraIf/auraIfController.js:49 'helper' is defined but never used. Variables https://eslint.org/docs/rules/no-unused-vars ERROR running scanner:run: Detected rule violations of severity 1 or lower. Please see the logs above.","title":"Example error log"},{"location":"descriptors/salesforce_sfdx_scanner_apex/","text":"sfdx-scanner-apex sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to PMD sfdx-scanner-apex documentation Version in MegaLinter: 2.13.9 Visit Official Web Site See How to configure sfdx-scanner-apex rules If custom apex-pmd-ruleset.xml config file is not found, apex-pmd-ruleset.xml will be used See How to disable sfdx-scanner-apex rules in files See Index of problems detected by sfdx-scanner-apex Configuration in MegaLinter Enable sfdx-scanner-apex by adding SALESFORCE_SFDX_SCANNER_APEX in ENABLE_LINTERS variable Disable sfdx-scanner-apex by adding SALESFORCE_SFDX_SCANNER_APEX in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_APEX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_APEX_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_APEX_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_APEX_CONFIG_FILE sfdx-scanner-apex configuration file name Use LINTER_DEFAULT to let the linter find it apex-pmd-ruleset.xml SALESFORCE_SFDX_SCANNER_APEX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app IDE Integration Use sfdx-scanner-apex in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse pmd-eclipse-plugin Visit Web Site Emacs pmd-emacs Visit Web Site IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 salesforce Optimized for Salesforce based projects 49 Behind the scenes How are identified applicable files Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted How the linting is performed sfdx-scanner-apex is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-apex configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make sfdx-scanner-apex analyze only updated files Example calls sfdx scanner:run Help content evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-s <integer> | undefined | [-v | --json]] [--normalize-severity] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] FLAGS -c, --category=<value> categor(ies) of rules to run -e, --engine=<value> engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=<value> location of output file -r, --ruleset=<value> [deprecated] ruleset(s) of rules to run -s, --severity-threshold=<value> throws an error when violations of specific severity (or more severe) are detected, invokes --normalize-severity -t, --target=<value> (required) location of source code -v, --violations-cause-error [deprecated] throws an error when violations are detected --env=<value> JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=<value> location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --normalize-severity A normalized severity 1 (high), 2 (moderate), and 3 (low) is returned in addition to the engine specific severity --pmdconfig=<value> location of PMD rule reference XML file to customize rule selection --tsconfig=<value> location of tsconfig.json file --verbose emit additional command output to stdout DESCRIPTION evaluate a selection of rules against a codebase EXAMPLES Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. Use --engine to invoke engines that are not enabled by default. E.g, $ sfdx scanner:run --target \"/some/dir\" --engine cpd Executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" Use --normalize-severity to output a normalized (across all engines) severity (1 [high], 2 [moderate], and 3 [low]) in addition to the engine specific severity (when shown). E.g., $ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity Use --severity-threshold to throw a non-zero exit code when rule violations of a specific severity (or greater) are found. For this example, if there are any rule violations with a severity of 2 or more (which includes 1-high and 2-moderate), the exit code will be equal to the severity of the most severe violation. E.g., $ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2 WARNING: We're constantly improving Salesforce Code Analyzer. Tell us what you think! Give feedback at https://research.net/r/SalesforceCA. WARNING: v2.x's End Of Life is approaching. In October 2022, v3.x of the Salesforce Code Analyzer will become the default version, and older versions, including your currently installed version, will no longer be supported. You can manually update to v3.x earlier for a smoother transition. WARNING: As of April 27, 2022, v3.x of the Salesforce Code Analyzer is available as an open pilot. To update to v3.x and try out our pilot features, run these commands: > sfdx plugins:uninstall @salesforce/sfdx-scanner > sfdx plugins:install @salesforce/sfdx-scanner@latest-pilot NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices quickstart,Default ruleset...,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices quickstart,Default ruleset...,ApexUnit pmd AvoidGlobalModifier apex Best Practices Style,quickstart,Default ruleset... pmd AvoidLogicInTrigger apex Best Practices Style,quickstart,Default ruleset... pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDebugStatements apex Performance pmd AvoidDmlStatementsInLoops apex Performance Default ruleset...,Performance pmd AvoidSoqlInLoops apex Performance Default ruleset...,Performance pmd AvoidSoslInLoops apex Performance Default ruleset...,Performance pmd EagerlyLoadedDescribeSObjectResult apex Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Security,quickstart,Default ruleset... pmd ApexCRUDViolation apex Security Security,quickstart,Default ruleset... pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Security,quickstart,Default ruleset... pmd ApexInsecureEndpoint apex Security Security,quickstart,Default ruleset... pmd ApexOpenRedirect apex Security Security,quickstart,Default ruleset... pmd ApexSharingViolations apex Security Security,quickstart,Default ruleset... pmd ApexSOQLInjection apex Security Security,quickstart,Default ruleset... pmd ApexSuggestUsingNamedCred apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromEscapeFalse apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromURLParam apex Security Security,quickstart,Default ruleset... pmd ClassNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd IfElseStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd IfStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd OneDeclarationPerLine apex Code Style quickstart,Default ruleset... pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Style,Default ruleset... pmd WhileLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd AvoidDeeplyNestedIfStmts apex Design quickstart,Default ruleset...,Complexity pmd CyclomaticComplexity apex Design Metrics tempora...,quickstart,Default ruleset... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design quickstart,Default ruleset...,Complexity pmd ExcessiveParameterList apex Design quickstart,Default ruleset...,Complexity pmd ExcessivePublicCount apex Design quickstart,Default ruleset...,Complexity pmd NcssConstructorCount apex Design quickstart,Default ruleset...,Complexity pmd NcssMethodCount apex Design quickstart,Default ruleset...,Complexity pmd NcssTypeCount apex Design quickstart,Default ruleset...,Complexity pmd StdCyclomaticComplexity apex Design quickstart,Default ruleset...,Complexity pmd TooManyFields apex Design quickstart,Default ruleset...,Complexity pmd ApexDoc apex Documentation quickstart,Default ruleset... pmd ApexCSRF apex Error Prone quickstart,Default ruleset... pmd AvoidDirectAccessTriggerMap apex Error Prone Style,quickstart,Default ruleset... pmd AvoidHardcodingId apex Error Prone Style,quickstart,Default ruleset... pmd AvoidNonExistentAnnotations apex Error Prone quickstart,Default ruleset... pmd EmptyCatchBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyIfStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyStatementBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyTryOrFinallyBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyWhileStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd InaccessibleAuraEnabledGetter apex Error Prone pmd MethodWithSameNameAsEnclosingClass apex Error Prone Style,quickstart,Default ruleset... pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache","title":"sfdx-scanner-apex"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#sfdx-scanner-apex","text":"sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to PMD","title":"sfdx-scanner-apex"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#sfdx-scanner-apex-documentation","text":"Version in MegaLinter: 2.13.9 Visit Official Web Site See How to configure sfdx-scanner-apex rules If custom apex-pmd-ruleset.xml config file is not found, apex-pmd-ruleset.xml will be used See How to disable sfdx-scanner-apex rules in files See Index of problems detected by sfdx-scanner-apex","title":"sfdx-scanner-apex documentation"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#configuration-in-megalinter","text":"Enable sfdx-scanner-apex by adding SALESFORCE_SFDX_SCANNER_APEX in ENABLE_LINTERS variable Disable sfdx-scanner-apex by adding SALESFORCE_SFDX_SCANNER_APEX in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_APEX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_APEX_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_APEX_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_APEX_CONFIG_FILE sfdx-scanner-apex configuration file name Use LINTER_DEFAULT to let the linter find it apex-pmd-ruleset.xml SALESFORCE_SFDX_SCANNER_APEX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_APEX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app","title":"Configuration in MegaLinter"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#ide-integration","text":"Use sfdx-scanner-apex in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse pmd-eclipse-plugin Visit Web Site Emacs pmd-emacs Visit Web Site IDEA PMD IntelliJ Visual Studio Code Salesforce Extension Pack","title":"IDE Integration"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 salesforce Optimized for Salesforce based projects 49","title":"MegaLinter Flavours"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#how-are-identified-applicable-files","text":"Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#how-the-linting-is-performed","text":"sfdx-scanner-apex is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-apex configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make sfdx-scanner-apex analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#example-calls","text":"sfdx scanner:run","title":"Example calls"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#help-content","text":"evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-s <integer> | undefined | [-v | --json]] [--normalize-severity] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] FLAGS -c, --category=<value> categor(ies) of rules to run -e, --engine=<value> engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=<value> location of output file -r, --ruleset=<value> [deprecated] ruleset(s) of rules to run -s, --severity-threshold=<value> throws an error when violations of specific severity (or more severe) are detected, invokes --normalize-severity -t, --target=<value> (required) location of source code -v, --violations-cause-error [deprecated] throws an error when violations are detected --env=<value> JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=<value> location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --normalize-severity A normalized severity 1 (high), 2 (moderate), and 3 (low) is returned in addition to the engine specific severity --pmdconfig=<value> location of PMD rule reference XML file to customize rule selection --tsconfig=<value> location of tsconfig.json file --verbose emit additional command output to stdout DESCRIPTION evaluate a selection of rules against a codebase EXAMPLES Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. Use --engine to invoke engines that are not enabled by default. E.g, $ sfdx scanner:run --target \"/some/dir\" --engine cpd Executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" Use --normalize-severity to output a normalized (across all engines) severity (1 [high], 2 [moderate], and 3 [low]) in addition to the engine specific severity (when shown). E.g., $ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity Use --severity-threshold to throw a non-zero exit code when rule violations of a specific severity (or greater) are found. For this example, if there are any rule violations with a severity of 2 or more (which includes 1-high and 2-moderate), the exit code will be equal to the severity of the most severe violation. E.g., $ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2 WARNING: We're constantly improving Salesforce Code Analyzer. Tell us what you think! Give feedback at https://research.net/r/SalesforceCA. WARNING: v2.x's End Of Life is approaching. In October 2022, v3.x of the Salesforce Code Analyzer will become the default version, and older versions, including your currently installed version, will no longer be supported. You can manually update to v3.x earlier for a smoother transition. WARNING: As of April 27, 2022, v3.x of the Salesforce Code Analyzer is available as an open pilot. To update to v3.x and try out our pilot features, run these commands: > sfdx plugins:uninstall @salesforce/sfdx-scanner > sfdx plugins:install @salesforce/sfdx-scanner@latest-pilot NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices quickstart,Default ruleset...,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices quickstart,Default ruleset...,ApexUnit pmd AvoidGlobalModifier apex Best Practices Style,quickstart,Default ruleset... pmd AvoidLogicInTrigger apex Best Practices Style,quickstart,Default ruleset... pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDebugStatements apex Performance pmd AvoidDmlStatementsInLoops apex Performance Default ruleset...,Performance pmd AvoidSoqlInLoops apex Performance Default ruleset...,Performance pmd AvoidSoslInLoops apex Performance Default ruleset...,Performance pmd EagerlyLoadedDescribeSObjectResult apex Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Security,quickstart,Default ruleset... pmd ApexCRUDViolation apex Security Security,quickstart,Default ruleset... pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Security,quickstart,Default ruleset... pmd ApexInsecureEndpoint apex Security Security,quickstart,Default ruleset... pmd ApexOpenRedirect apex Security Security,quickstart,Default ruleset... pmd ApexSharingViolations apex Security Security,quickstart,Default ruleset... pmd ApexSOQLInjection apex Security Security,quickstart,Default ruleset... pmd ApexSuggestUsingNamedCred apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromEscapeFalse apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromURLParam apex Security Security,quickstart,Default ruleset... pmd ClassNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd IfElseStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd IfStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd OneDeclarationPerLine apex Code Style quickstart,Default ruleset... pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Style,Default ruleset... pmd WhileLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd AvoidDeeplyNestedIfStmts apex Design quickstart,Default ruleset...,Complexity pmd CyclomaticComplexity apex Design Metrics tempora...,quickstart,Default ruleset... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design quickstart,Default ruleset...,Complexity pmd ExcessiveParameterList apex Design quickstart,Default ruleset...,Complexity pmd ExcessivePublicCount apex Design quickstart,Default ruleset...,Complexity pmd NcssConstructorCount apex Design quickstart,Default ruleset...,Complexity pmd NcssMethodCount apex Design quickstart,Default ruleset...,Complexity pmd NcssTypeCount apex Design quickstart,Default ruleset...,Complexity pmd StdCyclomaticComplexity apex Design quickstart,Default ruleset...,Complexity pmd TooManyFields apex Design quickstart,Default ruleset...,Complexity pmd ApexDoc apex Documentation quickstart,Default ruleset... pmd ApexCSRF apex Error Prone quickstart,Default ruleset... pmd AvoidDirectAccessTriggerMap apex Error Prone Style,quickstart,Default ruleset... pmd AvoidHardcodingId apex Error Prone Style,quickstart,Default ruleset... pmd AvoidNonExistentAnnotations apex Error Prone quickstart,Default ruleset... pmd EmptyCatchBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyIfStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyStatementBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyTryOrFinallyBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyWhileStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd InaccessibleAuraEnabledGetter apex Error Prone pmd MethodWithSameNameAsEnclosingClass apex Error Prone Style,quickstart,Default ruleset... pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript","title":"Help content"},{"location":"descriptors/salesforce_sfdx_scanner_apex/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache","title":"Installation on mega-linter Docker image"},{"location":"descriptors/salesforce_sfdx_scanner_aura/","text":"sfdx-scanner-aura sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_AURA_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to Aura sfdx-scanner-aura documentation Version in MegaLinter: 2.13.9 Visit Official Web Site See How to configure sfdx-scanner-aura rules See How to disable sfdx-scanner-aura rules in files See Index of problems detected by sfdx-scanner-aura Configuration in MegaLinter Enable sfdx-scanner-aura by adding SALESFORCE_SFDX_SCANNER_AURA in ENABLE_LINTERS variable Disable sfdx-scanner-aura by adding SALESFORCE_SFDX_SCANNER_AURA in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_AURA_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_AURA_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_AURA_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_AURA_CONFIG_FILE sfdx-scanner-aura configuration file name Use LINTER_DEFAULT to let the linter find it --eslintconfig SALESFORCE_SFDX_SCANNER_AURA_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app IDE Integration Use sfdx-scanner-aura in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Salesforce Extension Pack MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 salesforce Optimized for Salesforce based projects 49 Behind the scenes How are identified applicable files Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted How the linting is performed sfdx-scanner-aura is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-aura configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make sfdx-scanner-aura analyze only updated files Example calls sfdx scanner:run Help content evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-s <integer> | undefined | [-v | --json]] [--normalize-severity] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] FLAGS -c, --category=<value> categor(ies) of rules to run -e, --engine=<value> engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=<value> location of output file -r, --ruleset=<value> [deprecated] ruleset(s) of rules to run -s, --severity-threshold=<value> throws an error when violations of specific severity (or more severe) are detected, invokes --normalize-severity -t, --target=<value> (required) location of source code -v, --violations-cause-error [deprecated] throws an error when violations are detected --env=<value> JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=<value> location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --normalize-severity A normalized severity 1 (high), 2 (moderate), and 3 (low) is returned in addition to the engine specific severity --pmdconfig=<value> location of PMD rule reference XML file to customize rule selection --tsconfig=<value> location of tsconfig.json file --verbose emit additional command output to stdout DESCRIPTION evaluate a selection of rules against a codebase EXAMPLES Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. Use --engine to invoke engines that are not enabled by default. E.g, $ sfdx scanner:run --target \"/some/dir\" --engine cpd Executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" Use --normalize-severity to output a normalized (across all engines) severity (1 [high], 2 [moderate], and 3 [low]) in addition to the engine specific severity (when shown). E.g., $ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity Use --severity-threshold to throw a non-zero exit code when rule violations of a specific severity (or greater) are found. For this example, if there are any rule violations with a severity of 2 or more (which includes 1-high and 2-moderate), the exit code will be equal to the severity of the most severe violation. E.g., $ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2 WARNING: We're constantly improving Salesforce Code Analyzer. Tell us what you think! Give feedback at https://research.net/r/SalesforceCA. WARNING: v2.x's End Of Life is approaching. In October 2022, v3.x of the Salesforce Code Analyzer will become the default version, and older versions, including your currently installed version, will no longer be supported. You can manually update to v3.x earlier for a smoother transition. WARNING: As of April 27, 2022, v3.x of the Salesforce Code Analyzer is available as an open pilot. To update to v3.x and try out our pilot features, run these commands: > sfdx plugins:uninstall @salesforce/sfdx-scanner > sfdx plugins:install @salesforce/sfdx-scanner@latest-pilot NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices quickstart,Default ruleset...,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices quickstart,Default ruleset...,ApexUnit pmd AvoidGlobalModifier apex Best Practices quickstart,Default ruleset...,Style pmd AvoidLogicInTrigger apex Best Practices quickstart,Default ruleset...,Style pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDebugStatements apex Performance pmd AvoidDmlStatementsInLoops apex Performance Performance,Default ruleset... pmd AvoidSoqlInLoops apex Performance Performance,Default ruleset... pmd AvoidSoslInLoops apex Performance Performance,Default ruleset... pmd EagerlyLoadedDescribeSObjectResult apex Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security quickstart,Default ruleset...,Security pmd ApexCRUDViolation apex Security quickstart,Default ruleset...,Security pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security quickstart,Default ruleset...,Security pmd ApexInsecureEndpoint apex Security quickstart,Default ruleset...,Security pmd ApexOpenRedirect apex Security quickstart,Default ruleset...,Security pmd ApexSharingViolations apex Security quickstart,Default ruleset...,Security pmd ApexSOQLInjection apex Security quickstart,Default ruleset...,Security pmd ApexSuggestUsingNamedCred apex Security quickstart,Default ruleset...,Security pmd ApexXSSFromEscapeFalse apex Security quickstart,Default ruleset...,Security pmd ApexXSSFromURLParam apex Security quickstart,Default ruleset...,Security pmd ClassNamingConventions apex Code Style quickstart,Default ruleset...,Style pmd IfElseStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd IfStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style quickstart,Default ruleset...,Style pmd OneDeclarationPerLine apex Code Style quickstart,Default ruleset... pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Default ruleset...,Style pmd WhileLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd AvoidDeeplyNestedIfStmts apex Design Complexity,quickstart,Default ruleset... pmd CyclomaticComplexity apex Design quickstart,Default ruleset...,Metrics tempora... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design Complexity,quickstart,Default ruleset... pmd ExcessiveParameterList apex Design Complexity,quickstart,Default ruleset... pmd ExcessivePublicCount apex Design Complexity,quickstart,Default ruleset... pmd NcssConstructorCount apex Design Complexity,quickstart,Default ruleset... pmd NcssMethodCount apex Design Complexity,quickstart,Default ruleset... pmd NcssTypeCount apex Design Complexity,quickstart,Default ruleset... pmd StdCyclomaticComplexity apex Design Complexity,quickstart,Default ruleset... pmd TooManyFields apex Design Complexity,quickstart,Default ruleset... pmd ApexDoc apex Documentation quickstart,Default ruleset... pmd ApexCSRF apex Error Prone quickstart,Default ruleset... pmd AvoidDirectAccessTriggerMap apex Error Prone quickstart,Default ruleset...,Style pmd AvoidHardcodingId apex Error Prone quickstart,Default ruleset...,Style pmd AvoidNonExistentAnnotations apex Error Prone quickstart,Default ruleset... pmd EmptyCatchBlock apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyIfStmt apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyStatementBlock apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyTryOrFinallyBlock apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyWhileStmt apex Error Prone Empty Code,quickstart,Default ruleset... pmd InaccessibleAuraEnabledGetter apex Error Prone pmd MethodWithSameNameAsEnclosingClass apex Error Prone quickstart,Default ruleset...,Style pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache","title":"sfdx-scanner-aura"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#sfdx-scanner-aura","text":"sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_AURA_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to Aura","title":"sfdx-scanner-aura"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#sfdx-scanner-aura-documentation","text":"Version in MegaLinter: 2.13.9 Visit Official Web Site See How to configure sfdx-scanner-aura rules See How to disable sfdx-scanner-aura rules in files See Index of problems detected by sfdx-scanner-aura","title":"sfdx-scanner-aura documentation"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#configuration-in-megalinter","text":"Enable sfdx-scanner-aura by adding SALESFORCE_SFDX_SCANNER_AURA in ENABLE_LINTERS variable Disable sfdx-scanner-aura by adding SALESFORCE_SFDX_SCANNER_AURA in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_AURA_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_AURA_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_AURA_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_AURA_CONFIG_FILE sfdx-scanner-aura configuration file name Use LINTER_DEFAULT to let the linter find it --eslintconfig SALESFORCE_SFDX_SCANNER_AURA_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_AURA_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app","title":"Configuration in MegaLinter"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#ide-integration","text":"Use sfdx-scanner-aura in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Salesforce Extension Pack","title":"IDE Integration"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 salesforce Optimized for Salesforce based projects 49","title":"MegaLinter Flavours"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#how-are-identified-applicable-files","text":"Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#how-the-linting-is-performed","text":"sfdx-scanner-aura is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-aura configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make sfdx-scanner-aura analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#example-calls","text":"sfdx scanner:run","title":"Example calls"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#help-content","text":"evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-s <integer> | undefined | [-v | --json]] [--normalize-severity] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] FLAGS -c, --category=<value> categor(ies) of rules to run -e, --engine=<value> engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=<value> location of output file -r, --ruleset=<value> [deprecated] ruleset(s) of rules to run -s, --severity-threshold=<value> throws an error when violations of specific severity (or more severe) are detected, invokes --normalize-severity -t, --target=<value> (required) location of source code -v, --violations-cause-error [deprecated] throws an error when violations are detected --env=<value> JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=<value> location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --normalize-severity A normalized severity 1 (high), 2 (moderate), and 3 (low) is returned in addition to the engine specific severity --pmdconfig=<value> location of PMD rule reference XML file to customize rule selection --tsconfig=<value> location of tsconfig.json file --verbose emit additional command output to stdout DESCRIPTION evaluate a selection of rules against a codebase EXAMPLES Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. Use --engine to invoke engines that are not enabled by default. E.g, $ sfdx scanner:run --target \"/some/dir\" --engine cpd Executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" Use --normalize-severity to output a normalized (across all engines) severity (1 [high], 2 [moderate], and 3 [low]) in addition to the engine specific severity (when shown). E.g., $ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity Use --severity-threshold to throw a non-zero exit code when rule violations of a specific severity (or greater) are found. For this example, if there are any rule violations with a severity of 2 or more (which includes 1-high and 2-moderate), the exit code will be equal to the severity of the most severe violation. E.g., $ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2 WARNING: We're constantly improving Salesforce Code Analyzer. Tell us what you think! Give feedback at https://research.net/r/SalesforceCA. WARNING: v2.x's End Of Life is approaching. In October 2022, v3.x of the Salesforce Code Analyzer will become the default version, and older versions, including your currently installed version, will no longer be supported. You can manually update to v3.x earlier for a smoother transition. WARNING: As of April 27, 2022, v3.x of the Salesforce Code Analyzer is available as an open pilot. To update to v3.x and try out our pilot features, run these commands: > sfdx plugins:uninstall @salesforce/sfdx-scanner > sfdx plugins:install @salesforce/sfdx-scanner@latest-pilot NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices quickstart,Default ruleset...,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices quickstart,Default ruleset...,ApexUnit pmd AvoidGlobalModifier apex Best Practices quickstart,Default ruleset...,Style pmd AvoidLogicInTrigger apex Best Practices quickstart,Default ruleset...,Style pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDebugStatements apex Performance pmd AvoidDmlStatementsInLoops apex Performance Performance,Default ruleset... pmd AvoidSoqlInLoops apex Performance Performance,Default ruleset... pmd AvoidSoslInLoops apex Performance Performance,Default ruleset... pmd EagerlyLoadedDescribeSObjectResult apex Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security quickstart,Default ruleset...,Security pmd ApexCRUDViolation apex Security quickstart,Default ruleset...,Security pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security quickstart,Default ruleset...,Security pmd ApexInsecureEndpoint apex Security quickstart,Default ruleset...,Security pmd ApexOpenRedirect apex Security quickstart,Default ruleset...,Security pmd ApexSharingViolations apex Security quickstart,Default ruleset...,Security pmd ApexSOQLInjection apex Security quickstart,Default ruleset...,Security pmd ApexSuggestUsingNamedCred apex Security quickstart,Default ruleset...,Security pmd ApexXSSFromEscapeFalse apex Security quickstart,Default ruleset...,Security pmd ApexXSSFromURLParam apex Security quickstart,Default ruleset...,Security pmd ClassNamingConventions apex Code Style quickstart,Default ruleset...,Style pmd IfElseStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd IfStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style quickstart,Default ruleset...,Style pmd OneDeclarationPerLine apex Code Style quickstart,Default ruleset... pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Default ruleset...,Style pmd WhileLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd AvoidDeeplyNestedIfStmts apex Design Complexity,quickstart,Default ruleset... pmd CyclomaticComplexity apex Design quickstart,Default ruleset...,Metrics tempora... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design Complexity,quickstart,Default ruleset... pmd ExcessiveParameterList apex Design Complexity,quickstart,Default ruleset... pmd ExcessivePublicCount apex Design Complexity,quickstart,Default ruleset... pmd NcssConstructorCount apex Design Complexity,quickstart,Default ruleset... pmd NcssMethodCount apex Design Complexity,quickstart,Default ruleset... pmd NcssTypeCount apex Design Complexity,quickstart,Default ruleset... pmd StdCyclomaticComplexity apex Design Complexity,quickstart,Default ruleset... pmd TooManyFields apex Design Complexity,quickstart,Default ruleset... pmd ApexDoc apex Documentation quickstart,Default ruleset... pmd ApexCSRF apex Error Prone quickstart,Default ruleset... pmd AvoidDirectAccessTriggerMap apex Error Prone quickstart,Default ruleset...,Style pmd AvoidHardcodingId apex Error Prone quickstart,Default ruleset...,Style pmd AvoidNonExistentAnnotations apex Error Prone quickstart,Default ruleset... pmd EmptyCatchBlock apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyIfStmt apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyStatementBlock apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyTryOrFinallyBlock apex Error Prone Empty Code,quickstart,Default ruleset... pmd EmptyWhileStmt apex Error Prone Empty Code,quickstart,Default ruleset... pmd InaccessibleAuraEnabledGetter apex Error Prone pmd MethodWithSameNameAsEnclosingClass apex Error Prone quickstart,Default ruleset...,Style pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript","title":"Help content"},{"location":"descriptors/salesforce_sfdx_scanner_aura/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache","title":"Installation on mega-linter Docker image"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/","text":"sfdx-scanner-lwc sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_LWC_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to LWC sfdx-scanner-lwc documentation Version in MegaLinter: 2.13.9 Visit Official Web Site See How to configure sfdx-scanner-lwc rules See How to disable sfdx-scanner-lwc rules in files See Index of problems detected by sfdx-scanner-lwc Configuration in MegaLinter Enable sfdx-scanner-lwc by adding SALESFORCE_SFDX_SCANNER_LWC in ENABLE_LINTERS variable Disable sfdx-scanner-lwc by adding SALESFORCE_SFDX_SCANNER_LWC in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_LWC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_LWC_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_LWC_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_LWC_CONFIG_FILE sfdx-scanner-lwc configuration file name Use LINTER_DEFAULT to let the linter find it --eslintconfig SALESFORCE_SFDX_SCANNER_LWC_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app IDE Integration Use sfdx-scanner-lwc in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Salesforce Extension Pack MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 salesforce Optimized for Salesforce based projects 49 Behind the scenes How are identified applicable files Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted How the linting is performed sfdx-scanner-lwc is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-lwc configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make sfdx-scanner-lwc analyze only updated files Example calls sfdx scanner:run Help content evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-s <integer> | undefined | [-v | --json]] [--normalize-severity] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] FLAGS -c, --category=<value> categor(ies) of rules to run -e, --engine=<value> engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=<value> location of output file -r, --ruleset=<value> [deprecated] ruleset(s) of rules to run -s, --severity-threshold=<value> throws an error when violations of specific severity (or more severe) are detected, invokes --normalize-severity -t, --target=<value> (required) location of source code -v, --violations-cause-error [deprecated] throws an error when violations are detected --env=<value> JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=<value> location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --normalize-severity A normalized severity 1 (high), 2 (moderate), and 3 (low) is returned in addition to the engine specific severity --pmdconfig=<value> location of PMD rule reference XML file to customize rule selection --tsconfig=<value> location of tsconfig.json file --verbose emit additional command output to stdout DESCRIPTION evaluate a selection of rules against a codebase EXAMPLES Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. Use --engine to invoke engines that are not enabled by default. E.g, $ sfdx scanner:run --target \"/some/dir\" --engine cpd Executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" Use --normalize-severity to output a normalized (across all engines) severity (1 [high], 2 [moderate], and 3 [low]) in addition to the engine specific severity (when shown). E.g., $ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity Use --severity-threshold to throw a non-zero exit code when rule violations of a specific severity (or greater) are found. For this example, if there are any rule violations with a severity of 2 or more (which includes 1-high and 2-moderate), the exit code will be equal to the severity of the most severe violation. E.g., $ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2 WARNING: We're constantly improving Salesforce Code Analyzer. Tell us what you think! Give feedback at https://research.net/r/SalesforceCA. WARNING: v2.x's End Of Life is approaching. In October 2022, v3.x of the Salesforce Code Analyzer will become the default version, and older versions, including your currently installed version, will no longer be supported. You can manually update to v3.x earlier for a smoother transition. WARNING: As of April 27, 2022, v3.x of the Salesforce Code Analyzer is available as an open pilot. To update to v3.x and try out our pilot features, run these commands: > sfdx plugins:uninstall @salesforce/sfdx-scanner > sfdx plugins:install @salesforce/sfdx-scanner@latest-pilot NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices quickstart,Default ruleset...,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices quickstart,Default ruleset...,ApexUnit pmd AvoidGlobalModifier apex Best Practices Style,quickstart,Default ruleset... pmd AvoidLogicInTrigger apex Best Practices Style,quickstart,Default ruleset... pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDebugStatements apex Performance pmd AvoidDmlStatementsInLoops apex Performance Default ruleset...,Performance pmd AvoidSoqlInLoops apex Performance Default ruleset...,Performance pmd AvoidSoslInLoops apex Performance Default ruleset...,Performance pmd EagerlyLoadedDescribeSObjectResult apex Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Security,quickstart,Default ruleset... pmd ApexCRUDViolation apex Security Security,quickstart,Default ruleset... pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Security,quickstart,Default ruleset... pmd ApexInsecureEndpoint apex Security Security,quickstart,Default ruleset... pmd ApexOpenRedirect apex Security Security,quickstart,Default ruleset... pmd ApexSharingViolations apex Security Security,quickstart,Default ruleset... pmd ApexSOQLInjection apex Security Security,quickstart,Default ruleset... pmd ApexSuggestUsingNamedCred apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromEscapeFalse apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromURLParam apex Security Security,quickstart,Default ruleset... pmd ClassNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd IfElseStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd IfStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd OneDeclarationPerLine apex Code Style quickstart,Default ruleset... pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Style,Default ruleset... pmd WhileLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd AvoidDeeplyNestedIfStmts apex Design quickstart,Default ruleset...,Complexity pmd CyclomaticComplexity apex Design Metrics tempora...,quickstart,Default ruleset... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design quickstart,Default ruleset...,Complexity pmd ExcessiveParameterList apex Design quickstart,Default ruleset...,Complexity pmd ExcessivePublicCount apex Design quickstart,Default ruleset...,Complexity pmd NcssConstructorCount apex Design quickstart,Default ruleset...,Complexity pmd NcssMethodCount apex Design quickstart,Default ruleset...,Complexity pmd NcssTypeCount apex Design quickstart,Default ruleset...,Complexity pmd StdCyclomaticComplexity apex Design quickstart,Default ruleset...,Complexity pmd TooManyFields apex Design quickstart,Default ruleset...,Complexity pmd ApexDoc apex Documentation quickstart,Default ruleset... pmd ApexCSRF apex Error Prone quickstart,Default ruleset... pmd AvoidDirectAccessTriggerMap apex Error Prone Style,quickstart,Default ruleset... pmd AvoidHardcodingId apex Error Prone Style,quickstart,Default ruleset... pmd AvoidNonExistentAnnotations apex Error Prone quickstart,Default ruleset... pmd EmptyCatchBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyIfStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyStatementBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyTryOrFinallyBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyWhileStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd InaccessibleAuraEnabledGetter apex Error Prone pmd MethodWithSameNameAsEnclosingClass apex Error Prone Style,quickstart,Default ruleset... pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache","title":"sfdx-scanner-lwc"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#sfdx-scanner-lwc","text":"sfdx-scanner is a sfdx plugin scanning apex and triggers using Apex PMD, and javascript using eslint If your root folder is not force-app , please set variable SALESFORCE_SFDX_SCANNER_LWC_DIRECTORY You can select categories and single rules by defining custom arguments (example: SALESFORCE_SFDX_SCANNER_ARGUMENTS: -c \"Best Practices,Security\" ) See more details in Help Workaround: Restricted to LWC","title":"sfdx-scanner-lwc"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#sfdx-scanner-lwc-documentation","text":"Version in MegaLinter: 2.13.9 Visit Official Web Site See How to configure sfdx-scanner-lwc rules See How to disable sfdx-scanner-lwc rules in files See Index of problems detected by sfdx-scanner-lwc","title":"sfdx-scanner-lwc documentation"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#configuration-in-megalinter","text":"Enable sfdx-scanner-lwc by adding SALESFORCE_SFDX_SCANNER_LWC in ENABLE_LINTERS variable Disable sfdx-scanner-lwc by adding SALESFORCE_SFDX_SCANNER_LWC in DISABLE_LINTERS variable Variable Description Default value SALESFORCE_SFDX_SCANNER_LWC_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SALESFORCE_SFDX_SCANNER_LWC_PRE_COMMANDS List of bash commands to run before the linter None SALESFORCE_SFDX_SCANNER_LWC_POST_COMMANDS List of bash commands to run after the linter None SALESFORCE_SFDX_SCANNER_LWC_CONFIG_FILE sfdx-scanner-lwc configuration file name Use LINTER_DEFAULT to let the linter find it --eslintconfig SALESFORCE_SFDX_SCANNER_LWC_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS Run linter but consider errors as warnings false SALESFORCE_SFDX_SCANNER_LWC_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 SALESFORCE_DIRECTORY Directory containing SALESFORCE files force-app","title":"Configuration in MegaLinter"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#ide-integration","text":"Use sfdx-scanner-lwc in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Salesforce Extension Pack","title":"IDE Integration"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 salesforce Optimized for Salesforce based projects 49","title":"MegaLinter Flavours"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#how-are-identified-applicable-files","text":"Activated only if sub-directory force-app is found. (directory name can be overridden with SALESFORCE_DIRECTORY ) If this linter is active, all files will always be linted","title":"How are identified applicable files"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#how-the-linting-is-performed","text":"sfdx-scanner-lwc is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using sfdx-scanner-lwc configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make sfdx-scanner-lwc analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#example-calls","text":"sfdx scanner:run","title":"Example calls"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#help-content","text":"evaluate a selection of rules against a codebase USAGE $ sfdx scanner:run -t <array> [-c <array>] [-r <array>] [-e <array>] [-f csv|html|json|junit|sarif|table|xml] [-o <string>] [--tsconfig <string>] [--eslintconfig <string>] [--pmdconfig <string>] [--env <string>] [-s <integer> | undefined | [-v | --json]] [--normalize-severity] [--verbose] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL] FLAGS -c, --category=<value> categor(ies) of rules to run -e, --engine=<value> engine(s) to run -f, --format=(csv|html|json|junit|sarif|table|xml) format of results -o, --outfile=<value> location of output file -r, --ruleset=<value> [deprecated] ruleset(s) of rules to run -s, --severity-threshold=<value> throws an error when violations of specific severity (or more severe) are detected, invokes --normalize-severity -t, --target=<value> (required) location of source code -v, --violations-cause-error [deprecated] throws an error when violations are detected --env=<value> JSON-formatted string, overrides ESLint's default environment variables --eslintconfig=<value> location of eslintrc config to customize eslint engine --json format output as json --loglevel=(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATA L) [default: warn] logging level for this command invocation --normalize-severity A normalized severity 1 (high), 2 (moderate), and 3 (low) is returned in addition to the engine specific severity --pmdconfig=<value> location of PMD rule reference XML file to customize rule selection --tsconfig=<value> location of tsconfig.json file --verbose emit additional command output to stdout DESCRIPTION evaluate a selection of rules against a codebase EXAMPLES Invoking without specifying any rules causes all rules to be run. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" Evaluates all rules against somefile.js. Specifying multiple categories is treated as a logical OR. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category \"Design,Best Practices\" Evaluates all rules in the Design or Best Practices categories. Categories can be excluded by specifying the negation operator, the values must be enclosed in single quotes. E.g., $ sfdx scanner:run --format xml --target \"somefile.js\" --category '!Design,!Best Practices' Evaluates all rules except those in the Design or Best Practices categories. Wrap globs in quotes. Unix example: $ sfdx scanner:run --target './**/*.js,!./**/IgnoreMe.js' ... Windows example: > sfdx scanner:run --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ... Evaluate rules against all .js files below the current directory, except for IgnoreMe.js. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned. E.g., sfdx scanner:run --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\" Scans the project contained in '/my-project' if the current working directory is another directory. Use --env to override the default ESLint environment variables to add frameworks. E.g., $ sfdx scanner:run --target \"somefile.js\" --env '{\"jasmine\": true}' Evaluates rules against somefile.js, including Jasmine in the environment variables. Use --violations-cause-error to throw exit with a non-zero code when violations are found. E.g., $ sfdx scanner:run --target \"somefile.js\" --violations-cause-error Evaluates rules against somefile.js. If any rules are violated, the exit code will be the severity of the most severe violation. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute. E.g., $ sfdx scanner:run --target \"somefile.js\" --engine \"eslint-lwc,pmd\" Evaluates rules against somefile.js, using eslint-lwc and pmd engines. Use --engine to invoke engines that are not enabled by default. E.g, $ sfdx scanner:run --target \"/some/dir\" --engine cpd Executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied. E.g, $ sfdx scanner:run --target \"src\" --pmdconfig \"pmd_rule_ref.xml\" To use Eslint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed. E.g., $ sfdx scanner:run --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\" Use --normalize-severity to output a normalized (across all engines) severity (1 [high], 2 [moderate], and 3 [low]) in addition to the engine specific severity (when shown). E.g., $ sfdx scanner:run --target \"/some-project/\" --format csv --normalize-severity Use --severity-threshold to throw a non-zero exit code when rule violations of a specific severity (or greater) are found. For this example, if there are any rule violations with a severity of 2 or more (which includes 1-high and 2-moderate), the exit code will be equal to the severity of the most severe violation. E.g., $ sfdx scanner:run --target \"/some-project/\" --severity-threshold 2 WARNING: We're constantly improving Salesforce Code Analyzer. Tell us what you think! Give feedback at https://research.net/r/SalesforceCA. WARNING: v2.x's End Of Life is approaching. In October 2022, v3.x of the Salesforce Code Analyzer will become the default version, and older versions, including your currently installed version, will no longer be supported. You can manually update to v3.x earlier for a smoother transition. WARNING: As of April 27, 2022, v3.x of the Salesforce Code Analyzer is available as an open pilot. To update to v3.x and try out our pilot features, run these commands: > sfdx plugins:uninstall @salesforce/sfdx-scanner > sfdx plugins:install @salesforce/sfdx-scanner@latest-pilot NAME LANGUAGES CATEGORIES RULESETS [DEP] ENGINE \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 VfCsrf visualforce Security Basic VF pmd VfHtmlStyleTagXss visualforce Security pmd VfUnescapeEl visualforce Security Basic VF pmd ApexAssertionsShouldIncludeMessage apex Best Practices pmd ApexUnitTestClassShouldHaveAsserts apex Best Practices quickstart,Default ruleset...,ApexUnit pmd ApexUnitTestMethodShouldHaveIsTestAnnotation apex Best Practices pmd ApexUnitTestShouldNotUseSeeAllDataTrue apex Best Practices quickstart,Default ruleset...,ApexUnit pmd AvoidGlobalModifier apex Best Practices Style,quickstart,Default ruleset... pmd AvoidLogicInTrigger apex Best Practices Style,quickstart,Default ruleset... pmd DebugsShouldUseLoggingLevel apex Best Practices quickstart pmd UnusedLocalVariable apex Best Practices pmd AvoidDebugStatements apex Performance pmd AvoidDmlStatementsInLoops apex Performance Default ruleset...,Performance pmd AvoidSoqlInLoops apex Performance Default ruleset...,Performance pmd AvoidSoslInLoops apex Performance Default ruleset...,Performance pmd EagerlyLoadedDescribeSObjectResult apex Performance pmd OperationWithLimitsInLoop apex Performance quickstart pmd ApexBadCrypto apex Security Security,quickstart,Default ruleset... pmd ApexCRUDViolation apex Security Security,quickstart,Default ruleset... pmd ApexCSRF apex Security Security pmd ApexDangerousMethods apex Security Security,quickstart,Default ruleset... pmd ApexInsecureEndpoint apex Security Security,quickstart,Default ruleset... pmd ApexOpenRedirect apex Security Security,quickstart,Default ruleset... pmd ApexSharingViolations apex Security Security,quickstart,Default ruleset... pmd ApexSOQLInjection apex Security Security,quickstart,Default ruleset... pmd ApexSuggestUsingNamedCred apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromEscapeFalse apex Security Security,quickstart,Default ruleset... pmd ApexXSSFromURLParam apex Security Security,quickstart,Default ruleset... pmd ClassNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd IfElseStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd IfStmtsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FieldDeclarationsShouldBeAtStart apex Code Style pmd FieldNamingConventions apex Code Style quickstart pmd ForLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd FormalParameterNamingConventions apex Code Style quickstart pmd LocalVariableNamingConventions apex Code Style quickstart pmd MethodNamingConventions apex Code Style Style,quickstart,Default ruleset... pmd OneDeclarationPerLine apex Code Style quickstart,Default ruleset... pmd PropertyNamingConventions apex Code Style quickstart pmd VariableNamingConventions apex Code Style Style,Default ruleset... pmd WhileLoopsMustUseBraces apex Code Style quickstart,Default ruleset...,Braces pmd AvoidDeeplyNestedIfStmts apex Design quickstart,Default ruleset...,Complexity pmd CyclomaticComplexity apex Design Metrics tempora...,quickstart,Default ruleset... pmd CognitiveComplexity apex Design pmd ExcessiveClassLength apex Design quickstart,Default ruleset...,Complexity pmd ExcessiveParameterList apex Design quickstart,Default ruleset...,Complexity pmd ExcessivePublicCount apex Design quickstart,Default ruleset...,Complexity pmd NcssConstructorCount apex Design quickstart,Default ruleset...,Complexity pmd NcssMethodCount apex Design quickstart,Default ruleset...,Complexity pmd NcssTypeCount apex Design quickstart,Default ruleset...,Complexity pmd StdCyclomaticComplexity apex Design quickstart,Default ruleset...,Complexity pmd TooManyFields apex Design quickstart,Default ruleset...,Complexity pmd ApexDoc apex Documentation quickstart,Default ruleset... pmd ApexCSRF apex Error Prone quickstart,Default ruleset... pmd AvoidDirectAccessTriggerMap apex Error Prone Style,quickstart,Default ruleset... pmd AvoidHardcodingId apex Error Prone Style,quickstart,Default ruleset... pmd AvoidNonExistentAnnotations apex Error Prone quickstart,Default ruleset... pmd EmptyCatchBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyIfStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyStatementBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyTryOrFinallyBlock apex Error Prone quickstart,Default ruleset...,Empty Code pmd EmptyWhileStmt apex Error Prone quickstart,Default ruleset...,Empty Code pmd InaccessibleAuraEnabledGetter apex Error Prone pmd MethodWithSameNameAsEnclosingClass apex Error Prone Style,quickstart,Default ruleset... pmd OverrideBothEqualsAndHashcode apex Error Prone pmd TestMethodsMustBeInTestClasses apex Error Prone pmd constructor-super javascript ECMAScript 6 ECMAScript 6 eslint for-direction javascript Possible Errors Possible Errors eslint getter-return javascript Possible Errors Possible Errors eslint no-async-promise-executor javascript Possible Errors Possible Errors eslint no-case-declarations javascript Best Practices Best Practices eslint no-class-assign javascript ECMAScript 6 ECMAScript 6 eslint no-compare-neg-zero javascript Possible Errors Possible Errors eslint no-cond-assign javascript Possible Errors Possible Errors eslint no-const-assign javascript ECMAScript 6 ECMAScript 6 eslint no-constant-condition javascript Possible Errors Possible Errors eslint no-control-regex javascript Possible Errors Possible Errors eslint no-debugger javascript Possible Errors Possible Errors eslint no-delete-var javascript Variables Variables eslint no-dupe-args javascript Possible Errors Possible Errors eslint no-dupe-class-members javascript ECMAScript 6 ECMAScript 6 eslint no-dupe-keys javascript Possible Errors Possible Errors eslint no-duplicate-case javascript Possible Errors Possible Errors eslint no-empty javascript Possible Errors Possible Errors eslint no-empty-character-class javascript Possible Errors Possible Errors eslint no-empty-pattern javascript Best Practices Best Practices eslint no-ex-assign javascript Possible Errors Possible Errors eslint no-extra-boolean-cast javascript Possible Errors Possible Errors eslint no-extra-semi javascript Possible Errors Possible Errors eslint no-fallthrough javascript Best Practices Best Practices eslint no-func-assign javascript Possible Errors Possible Errors eslint no-global-assign javascript Best Practices Best Practices eslint no-inner-declarations javascript Possible Errors Possible Errors eslint no-invalid-regexp javascript Possible Errors Possible Errors eslint no-irregular-whitespace javascript Possible Errors Possible Errors eslint no-misleading-character-class javascript Possible Errors Possible Errors eslint no-mixed-spaces-and-tabs javascript Stylistic Issues Stylistic Issues eslint no-new-symbol javascript ECMAScript 6 ECMAScript 6 eslint no-obj-calls javascript Possible Errors Possible Errors eslint no-octal javascript Best Practices Best Practices eslint no-prototype-builtins javascript Possible Errors Possible Errors eslint no-redeclare javascript Best Practices Best Practices eslint no-regex-spaces javascript Possible Errors Possible Errors eslint no-self-assign javascript Best Practices Best Practices eslint no-shadow-restricted-names javascript Variables Variables eslint no-sparse-arrays javascript Possible Errors Possible Errors eslint no-this-before-super javascript ECMAScript 6 ECMAScript 6 eslint no-undef javascript Variables Variables eslint no-unexpected-multiline javascript Possible Errors Possible Errors eslint no-unreachable javascript Possible Errors Possible Errors eslint no-unsafe-finally javascript Possible Errors Possible Errors eslint no-unsafe-negation javascript Possible Errors Possible Errors eslint no-unused-labels javascript Best Practices Best Practices eslint no-unused-vars javascript Variables Variables eslint no-useless-catch javascript Best Practices Best Practices eslint no-useless-escape javascript Best Practices Best Practices eslint no-with javascript Best Practices Best Practices eslint require-yield javascript ECMAScript 6 ECMAScript 6 eslint use-isnan javascript Possible Errors Possible Errors eslint valid-typeof javascript Possible Errors Possible Errors eslint constructor-super typescript ECMAScript 6 ECMAScript 6 eslint-typescript for-direction typescript Possible Errors Possible Errors eslint-typescript no-async-promise-executor typescript Possible Errors Possible Errors eslint-typescript no-case-declarations typescript Best Practices Best Practices eslint-typescript no-class-assign typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-compare-neg-zero typescript Possible Errors Possible Errors eslint-typescript no-cond-assign typescript Possible Errors Possible Errors eslint-typescript no-constant-condition typescript Possible Errors Possible Errors eslint-typescript no-control-regex typescript Possible Errors Possible Errors eslint-typescript no-debugger typescript Possible Errors Possible Errors eslint-typescript no-delete-var typescript Variables Variables eslint-typescript no-duplicate-case typescript Possible Errors Possible Errors eslint-typescript no-empty typescript Possible Errors Possible Errors eslint-typescript no-empty-character-class typescript Possible Errors Possible Errors eslint-typescript no-empty-pattern typescript Best Practices Best Practices eslint-typescript no-ex-assign typescript Possible Errors Possible Errors eslint-typescript no-extra-boolean-cast typescript Possible Errors Possible Errors eslint-typescript no-fallthrough typescript Best Practices Best Practices eslint-typescript no-func-assign typescript Possible Errors Possible Errors eslint-typescript no-global-assign typescript Best Practices Best Practices eslint-typescript no-inner-declarations typescript Possible Errors Possible Errors eslint-typescript no-invalid-regexp typescript Possible Errors Possible Errors eslint-typescript no-irregular-whitespace typescript Possible Errors Possible Errors eslint-typescript no-misleading-character-class typescript Possible Errors Possible Errors eslint-typescript no-mixed-spaces-and-tabs typescript Stylistic Issues Stylistic Issues eslint-typescript no-obj-calls typescript Possible Errors Possible Errors eslint-typescript no-octal typescript Best Practices Best Practices eslint-typescript no-prototype-builtins typescript Possible Errors Possible Errors eslint-typescript no-regex-spaces typescript Possible Errors Possible Errors eslint-typescript no-self-assign typescript Best Practices Best Practices eslint-typescript no-shadow-restricted-names typescript Variables Variables eslint-typescript no-sparse-arrays typescript Possible Errors Possible Errors eslint-typescript no-unexpected-multiline typescript Possible Errors Possible Errors eslint-typescript no-unsafe-finally typescript Possible Errors Possible Errors eslint-typescript no-unsafe-negation typescript Possible Errors Possible Errors eslint-typescript no-unused-labels typescript Best Practices Best Practices eslint-typescript no-useless-catch typescript Best Practices Best Practices eslint-typescript no-useless-escape typescript Best Practices Best Practices eslint-typescript no-var typescript ECMAScript 6 ECMAScript 6 eslint-typescript no-with typescript Best Practices Best Practices eslint-typescript prefer-const typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-rest-params typescript ECMAScript 6 ECMAScript 6 eslint-typescript prefer-spread typescript ECMAScript 6 ECMAScript 6 eslint-typescript require-yield typescript ECMAScript 6 ECMAScript 6 eslint-typescript use-isnan typescript Possible Errors Possible Errors eslint-typescript @typescript-eslint/adjacent-overload-signatures typescript Best Practices Best Practices eslint-typescript @typescript-eslint/await-thenable typescript Best Practices Best Practices eslint-typescript @typescript-eslint/ban-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/consistent-type-assertions typescript Best Practices Best Practices eslint-typescript @typescript-eslint/explicit-function-return-type typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/member-delimiter-style typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-array-constructor typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-empty-function typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-empty-interface typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-explicit-any typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-for-in-array typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-inferrable-types typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-new typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-misused-promises typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-namespace typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-non-null-assertion typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/no-this-alias typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unnecessary-type-assertion typescript Best Practices Best Practices eslint-typescript @typescript-eslint/no-unused-vars typescript Variables Variables eslint-typescript @typescript-eslint/no-use-before-define typescript Variables Variables eslint-typescript @typescript-eslint/no-var-requires typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-includes typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-namespace-keyword typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-regexp-exec typescript Best Practices Best Practices eslint-typescript @typescript-eslint/prefer-string-starts-ends-with typescript Best Practices Best Practices eslint-typescript @typescript-eslint/require-await typescript Best Practices Best Practices eslint-typescript @typescript-eslint/triple-slash-reference typescript Best Practices Best Practices eslint-typescript @typescript-eslint/type-annotation-spacing typescript Stylistic Issues Stylistic Issues eslint-typescript @typescript-eslint/unbound-method typescript Best Practices Best Practices eslint-typescript","title":"Help content"},{"location":"descriptors/salesforce_sfdx_scanner_lwc/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk ENV PATH=\"$JAVA_HOME/bin:${PATH}\" RUN echo y|sfdx plugins:install sfdx-hardis \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache # Linter install RUN sfdx plugins:install @salesforce/sfdx-scanner \\ && npm cache clean --force || true \\ && rm -rf /root/.npm/_cacache","title":"Installation on mega-linter Docker image"},{"location":"descriptors/scala/","text":"SCALA Linters Linter Configuration key Status scalafix SCALA Linted files File extensions: .scala Configuration in MegaLinter Variable Description Default value SCALA_FILTER_REGEX_INCLUDE Custom regex including filter SCALA_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier APK packages (Linux): openjdk11","title":"All SCALA linters"},{"location":"descriptors/scala/#scala","text":"","title":"SCALA"},{"location":"descriptors/scala/#linters","text":"Linter Configuration key Status scalafix SCALA","title":"Linters"},{"location":"descriptors/scala/#linted-files","text":"File extensions: .scala","title":"Linted files"},{"location":"descriptors/scala/#configuration-in-megalinter","text":"Variable Description Default value SCALA_FILTER_REGEX_INCLUDE Custom regex including filter SCALA_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/scala/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/scala/#installation","text":"Dockerfile commands : RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier APK packages (Linux): openjdk11","title":"Installation"},{"location":"descriptors/scala_scalafix/","text":"scalafix Scalafix lints and fixes scala files As there is no prior compilation or semantic db generation, the linting is applied only with built-in syntactic rules scalafix arguments related to semantic options can not be used scalafix documentation Version in MegaLinter: 0.10.3 Visit Official Web Site See How to configure scalafix rules If custom .scalafix.conf config file is not found, .scalafix.conf will be used See How to disable scalafix rules in files See Index of problems detected by scalafix Configuration in MegaLinter Enable scalafix by adding SCALA_SCALAFIX in ENABLE_LINTERS variable Disable scalafix by adding SCALA_SCALAFIX in DISABLE_LINTERS variable Variable Description Default value SCALA_SCALAFIX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SCALA_SCALAFIX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SCALA_SCALAFIX_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SCALA_SCALAFIX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scala\"] SCALA_SCALAFIX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SCALA_SCALAFIX_PRE_COMMANDS List of bash commands to run before the linter None SCALA_SCALAFIX_POST_COMMANDS List of bash commands to run after the linter None SCALA_SCALAFIX_CONFIG_FILE scalafix configuration file name Use LINTER_DEFAULT to let the linter find it .scalafix.conf SCALA_SCALAFIX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SCALA_SCALAFIX_DISABLE_ERRORS Run linter but consider errors as warnings false SCALA_SCALAFIX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 Behind the scenes How are identified applicable files File extensions: .scala How the linting is performed scalafix is called one time by identified file ( file CLI lint mode) Example calls scalafix --check myfile.scala scalafix --check --config .scalafix.conf myfile.scala scalafix --config .scalafix.conf myfile.scala Help content Scalafix 0.10.3 Usage: scalafix [options] [<path> ...] Scalafix is a refactoring and linting tool. Scalafix supports both syntactic and semantic linter and rewrite rules. Syntactic rules can run on source code without compilation. Semantic rules can run on source code that has been compiled with the SemanticDB compiler plugin. Common options: --rules | -r [String ...] (default: []) Scalafix rules to run, for example ExplicitResultTypes. The syntax for rules is documented in https://scalacenter.github.io/scalafix/docs/users/configuration#rules --files | -f [<path> ...] (default: []) Files or directories (recursively visited) to fix. --config <path> (default: null) File path to a .scalafix.conf configuration file. Defaults to .scalafix.conf in the current working directory, if any. --check Check that all files have been fixed with scalafix, exiting with non-zero code on violations. Won't write to files. --stdout Print fixed output to stdout instead of writing in-place. --diff If set, only apply scalafix to added and edited files in git diff against the master branch. --diff-base String (default: null) If set, only apply scalafix to added and edited files in git diff against a provided branch, commit or tag. --syntactic Run only syntactic rules, ignore semantic rules even if they are explicitly configured in .scalafix.conf or via --rules --triggered Overlay the default rules & rule settings in .scalafix.conf with the `triggered` section --verbose Print out additional diagnostics while running scalafix. --help | -h Print out this help message and exit --version | -v Print out version number and exit Semantic options: --classpath Classpath (default: \"<classpath>\") Full classpath of the files to fix, required for semantic rules. The source files that should be fixed must be compiled with semanticdb-scalac. Dependencies are required by rules like ExplicitResultTypes, but the dependencies do not need to be compiled with semanticdb-scalac. --sourceroot <path> (default: null) Absolute path passed to semanticdb with -P:semanticdb:sourceroot:<path>. Relative filenames persisted in the Semantic DB are absolutized by the sourceroot. Defaults to current working directory if not provided. --semanticdb-targetroots [<path> ...] (default: []) Absolute paths passed to semanticdb with -P:semanticdb:targetroot:<path>. Used to locate semanticdb files. By default, Scalafix will try to locate semanticdb files in the classpath --auto-classpath If set, automatically infer the --classpath flag by scanning for directories with META-INF/semanticdb --auto-classpath-roots [<path> ...] (default: []) Additional directories to scan for --auto-classpath --scalac-options [String ...] (default: []) The scala compiler options used to compile this --classpath, for example -Ywarn-unused-import --scala-version ScalaVersion (default: \"2.13.9\") The major or binary Scala version that the provided files are targeting, or the full version that was used to compile them when a classpath is provided. Tab completions: --bash Print out bash tab completions. To install: ``` # macOS, requires \"brew install bash-completion\" scalafix --bash > /usr/local/etc/bash_completion.d/scalafix # Linux scalafix --bash > /etc/bash_completion.d/scalafix ``` --zsh Print out zsh tab completions. To install: ``` scalafix --zsh > /usr/local/share/zsh/site-functions/_scalafix unfunction _scalafix autoload -U _scalafix ``` Less common options: --exclude [<glob> ...] (default: []) Unix-style glob for files to exclude from fixing. The glob syntax is defined by `nio.FileSystem.getPathMatcher`. --tool-classpath URLClassLoader (default: \"<classloader>\") Additional classpath for compiling and classloading custom rules, as a set of filesystem paths, separated by ':' on Unix or ';' on Windows. --charset Charset (default: \"UTF-8\") The encoding to use for reading/writing files --no-sys-exit If set, throw exception in the end instead of System.exit --no-stale-semanticdb Don't error on stale semanticdb files. --settings ScalafixConfig (default: {}) Custom settings to override .scalafix.conf --out-from String (default: null) Write fixed output to custom location instead of in-place. Regex is passed as first argument to file.replaceAll(--out-from, --out-to), requires --out-to. --out-to String (default: null) Companion of --out-from, string that is passed as second argument to fileToFix.replaceAll(--out-from, --out-to) --auto-suppress-linter-errors Insert /* scalafix:ok */ suppressions instead of reporting linter errors. --cwd <path> (default: \"/\") The current working directory Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier # Linter install RUN ./coursier install scalafix --quiet --install-dir /usr/bin && rm -rf /root/.cache","title":"scalafix"},{"location":"descriptors/scala_scalafix/#scalafix","text":"Scalafix lints and fixes scala files As there is no prior compilation or semantic db generation, the linting is applied only with built-in syntactic rules scalafix arguments related to semantic options can not be used","title":"scalafix"},{"location":"descriptors/scala_scalafix/#scalafix-documentation","text":"Version in MegaLinter: 0.10.3 Visit Official Web Site See How to configure scalafix rules If custom .scalafix.conf config file is not found, .scalafix.conf will be used See How to disable scalafix rules in files See Index of problems detected by scalafix","title":"scalafix documentation"},{"location":"descriptors/scala_scalafix/#configuration-in-megalinter","text":"Enable scalafix by adding SCALA_SCALAFIX in ENABLE_LINTERS variable Disable scalafix by adding SCALA_SCALAFIX in DISABLE_LINTERS variable Variable Description Default value SCALA_SCALAFIX_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SCALA_SCALAFIX_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SCALA_SCALAFIX_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SCALA_SCALAFIX_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SCALA_SCALAFIX_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".scala\"] SCALA_SCALAFIX_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SCALA_SCALAFIX_PRE_COMMANDS List of bash commands to run before the linter None SCALA_SCALAFIX_POST_COMMANDS List of bash commands to run after the linter None SCALA_SCALAFIX_CONFIG_FILE scalafix configuration file name Use LINTER_DEFAULT to let the linter find it .scalafix.conf SCALA_SCALAFIX_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SCALA_SCALAFIX_DISABLE_ERRORS Run linter but consider errors as warnings false SCALA_SCALAFIX_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/scala_scalafix/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107","title":"MegaLinter Flavours"},{"location":"descriptors/scala_scalafix/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/scala_scalafix/#how-are-identified-applicable-files","text":"File extensions: .scala","title":"How are identified applicable files"},{"location":"descriptors/scala_scalafix/#how-the-linting-is-performed","text":"scalafix is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/scala_scalafix/#example-calls","text":"scalafix --check myfile.scala scalafix --check --config .scalafix.conf myfile.scala scalafix --config .scalafix.conf myfile.scala","title":"Example calls"},{"location":"descriptors/scala_scalafix/#help-content","text":"Scalafix 0.10.3 Usage: scalafix [options] [<path> ...] Scalafix is a refactoring and linting tool. Scalafix supports both syntactic and semantic linter and rewrite rules. Syntactic rules can run on source code without compilation. Semantic rules can run on source code that has been compiled with the SemanticDB compiler plugin. Common options: --rules | -r [String ...] (default: []) Scalafix rules to run, for example ExplicitResultTypes. The syntax for rules is documented in https://scalacenter.github.io/scalafix/docs/users/configuration#rules --files | -f [<path> ...] (default: []) Files or directories (recursively visited) to fix. --config <path> (default: null) File path to a .scalafix.conf configuration file. Defaults to .scalafix.conf in the current working directory, if any. --check Check that all files have been fixed with scalafix, exiting with non-zero code on violations. Won't write to files. --stdout Print fixed output to stdout instead of writing in-place. --diff If set, only apply scalafix to added and edited files in git diff against the master branch. --diff-base String (default: null) If set, only apply scalafix to added and edited files in git diff against a provided branch, commit or tag. --syntactic Run only syntactic rules, ignore semantic rules even if they are explicitly configured in .scalafix.conf or via --rules --triggered Overlay the default rules & rule settings in .scalafix.conf with the `triggered` section --verbose Print out additional diagnostics while running scalafix. --help | -h Print out this help message and exit --version | -v Print out version number and exit Semantic options: --classpath Classpath (default: \"<classpath>\") Full classpath of the files to fix, required for semantic rules. The source files that should be fixed must be compiled with semanticdb-scalac. Dependencies are required by rules like ExplicitResultTypes, but the dependencies do not need to be compiled with semanticdb-scalac. --sourceroot <path> (default: null) Absolute path passed to semanticdb with -P:semanticdb:sourceroot:<path>. Relative filenames persisted in the Semantic DB are absolutized by the sourceroot. Defaults to current working directory if not provided. --semanticdb-targetroots [<path> ...] (default: []) Absolute paths passed to semanticdb with -P:semanticdb:targetroot:<path>. Used to locate semanticdb files. By default, Scalafix will try to locate semanticdb files in the classpath --auto-classpath If set, automatically infer the --classpath flag by scanning for directories with META-INF/semanticdb --auto-classpath-roots [<path> ...] (default: []) Additional directories to scan for --auto-classpath --scalac-options [String ...] (default: []) The scala compiler options used to compile this --classpath, for example -Ywarn-unused-import --scala-version ScalaVersion (default: \"2.13.9\") The major or binary Scala version that the provided files are targeting, or the full version that was used to compile them when a classpath is provided. Tab completions: --bash Print out bash tab completions. To install: ``` # macOS, requires \"brew install bash-completion\" scalafix --bash > /usr/local/etc/bash_completion.d/scalafix # Linux scalafix --bash > /etc/bash_completion.d/scalafix ``` --zsh Print out zsh tab completions. To install: ``` scalafix --zsh > /usr/local/share/zsh/site-functions/_scalafix unfunction _scalafix autoload -U _scalafix ``` Less common options: --exclude [<glob> ...] (default: []) Unix-style glob for files to exclude from fixing. The glob syntax is defined by `nio.FileSystem.getPathMatcher`. --tool-classpath URLClassLoader (default: \"<classloader>\") Additional classpath for compiling and classloading custom rules, as a set of filesystem paths, separated by ':' on Unix or ';' on Windows. --charset Charset (default: \"UTF-8\") The encoding to use for reading/writing files --no-sys-exit If set, throw exception in the end instead of System.exit --no-stale-semanticdb Don't error on stale semanticdb files. --settings ScalafixConfig (default: {}) Custom settings to override .scalafix.conf --out-from String (default: null) Write fixed output to custom location instead of in-place. Regex is passed as first argument to file.replaceAll(--out-from, --out-to), requires --out-to. --out-to String (default: null) Companion of --out-from, string that is passed as second argument to fileToFix.replaceAll(--out-from, --out-to) --auto-suppress-linter-errors Insert /* scalafix:ok */ suppressions instead of reporting linter errors. --cwd <path> (default: \"/\") The current working directory","title":"Help content"},{"location":"descriptors/scala_scalafix/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN curl -fLo coursier https://git.io/coursier-cli && \\ chmod +x coursier # Linter install RUN ./coursier install scalafix --quiet --install-dir /usr/bin && rm -rf /root/.cache","title":"Installation on mega-linter Docker image"},{"location":"descriptors/snakemake/","text":"SNAKEMAKE Linters Linter Configuration key Status snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT Linted files File extensions: .smk File names: Snakefile Configuration in MegaLinter Variable Description Default value SNAKEMAKE_FILTER_REGEX_INCLUDE Custom regex including filter SNAKEMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SNAKEMAKE linters"},{"location":"descriptors/snakemake/#snakemake","text":"","title":"SNAKEMAKE"},{"location":"descriptors/snakemake/#linters","text":"Linter Configuration key Status snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT","title":"Linters"},{"location":"descriptors/snakemake/#linted-files","text":"File extensions: .smk File names: Snakefile","title":"Linted files"},{"location":"descriptors/snakemake/#configuration-in-megalinter","text":"Variable Description Default value SNAKEMAKE_FILTER_REGEX_INCLUDE Custom regex including filter SNAKEMAKE_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/snakemake_snakefmt/","text":"snakefmt snakefmt documentation Version in MegaLinter: 0.6.1 Visit Official Web Site See How to configure snakefmt rules If custom .snakefmt.toml config file is not found, .snakefmt.toml will be used Configuration in MegaLinter Enable snakefmt by adding SNAKEMAKE_SNAKEFMT in ENABLE_LINTERS variable Disable snakefmt by adding SNAKEMAKE_SNAKEFMT in DISABLE_LINTERS variable Enable auto-fixes by adding SNAKEMAKE_SNAKEFMT in APPLY_FIXES variable Variable Description Default value SNAKEMAKE_SNAKEFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SNAKEMAKE_SNAKEFMT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_SNAKEFMT_PRE_COMMANDS List of bash commands to run before the linter None SNAKEMAKE_SNAKEFMT_POST_COMMANDS List of bash commands to run after the linter None SNAKEMAKE_SNAKEFMT_CONFIG_FILE snakefmt configuration file name Use LINTER_DEFAULT to let the linter find it .snakefmt.toml SNAKEMAKE_SNAKEFMT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS Run linter but consider errors as warnings true SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .smk File names (regex): Snakefile How the linting is performed snakefmt is called one time by identified file ( file CLI lint mode) Example calls snakefmt --check --compact-diff Snakefile snakefmt --check --compact-diff --config .snakefmt.toml Snakefile snakefmt --config .snakefmt.toml Snakefile Help content Usage: snakefmt [OPTIONS] [SRC]... The uncompromising Snakemake code formatter. SRC specifies directories and files to format. Directories will be searched for file names that conform to the include/exclude patterns provided. Files are modified in-place by default; use diff, check, or `snakefmt - < Snakefile` to avoid this. Options: -l, --line-length INT Lines longer than INT will be wrapped. [default: 88] --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an error. -d, --diff Don't write the files back, just output a diff for each file to stdout. --compact-diff Same as --diff but only shows lines that would change plus a few lines of context. --include PATTERN A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.smk$|^Snakefile)] --exclude PATTERN A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.snakemake|\\.eg gs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\\.tox|\\.venv|\\.svn|_ build|buck-out|build|dist)] -c, --config PATH Read configuration from PATH. By default, will try to read from `./pyproject.toml` -h, --help Show this message and exit. -V, --version Show the version and exit. -v, --verbose Turns on debug-level logger. Installation on mega-linter Docker image PIP packages (Python): snakefmt","title":"snakefmt"},{"location":"descriptors/snakemake_snakefmt/#snakefmt","text":"","title":"snakefmt"},{"location":"descriptors/snakemake_snakefmt/#snakefmt-documentation","text":"Version in MegaLinter: 0.6.1 Visit Official Web Site See How to configure snakefmt rules If custom .snakefmt.toml config file is not found, .snakefmt.toml will be used","title":"snakefmt documentation"},{"location":"descriptors/snakemake_snakefmt/#configuration-in-megalinter","text":"Enable snakefmt by adding SNAKEMAKE_SNAKEFMT in ENABLE_LINTERS variable Disable snakefmt by adding SNAKEMAKE_SNAKEFMT in DISABLE_LINTERS variable Enable auto-fixes by adding SNAKEMAKE_SNAKEFMT in APPLY_FIXES variable Variable Description Default value SNAKEMAKE_SNAKEFMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_SNAKEFMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SNAKEMAKE_SNAKEFMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SNAKEMAKE_SNAKEFMT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SNAKEMAKE_SNAKEFMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_SNAKEFMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_SNAKEFMT_PRE_COMMANDS List of bash commands to run before the linter None SNAKEMAKE_SNAKEFMT_POST_COMMANDS List of bash commands to run after the linter None SNAKEMAKE_SNAKEFMT_CONFIG_FILE snakefmt configuration file name Use LINTER_DEFAULT to let the linter find it .snakefmt.toml SNAKEMAKE_SNAKEFMT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS Run linter but consider errors as warnings true SNAKEMAKE_SNAKEFMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/snakemake_snakefmt/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/snakemake_snakefmt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/snakemake_snakefmt/#how-are-identified-applicable-files","text":"File extensions: .smk File names (regex): Snakefile","title":"How are identified applicable files"},{"location":"descriptors/snakemake_snakefmt/#how-the-linting-is-performed","text":"snakefmt is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/snakemake_snakefmt/#example-calls","text":"snakefmt --check --compact-diff Snakefile snakefmt --check --compact-diff --config .snakefmt.toml Snakefile snakefmt --config .snakefmt.toml Snakefile","title":"Example calls"},{"location":"descriptors/snakemake_snakefmt/#help-content","text":"Usage: snakefmt [OPTIONS] [SRC]... The uncompromising Snakemake code formatter. SRC specifies directories and files to format. Directories will be searched for file names that conform to the include/exclude patterns provided. Files are modified in-place by default; use diff, check, or `snakefmt - < Snakefile` to avoid this. Options: -l, --line-length INT Lines longer than INT will be wrapped. [default: 88] --check Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an error. -d, --diff Don't write the files back, just output a diff for each file to stdout. --compact-diff Same as --diff but only shows lines that would change plus a few lines of context. --include PATTERN A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.smk$|^Snakefile)] --exclude PATTERN A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later. [default: (\\.snakemake|\\.eg gs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\\.tox|\\.venv|\\.svn|_ build|buck-out|build|dist)] -c, --config PATH Read configuration from PATH. By default, will try to read from `./pyproject.toml` -h, --help Show this message and exit. -V, --version Show the version and exit. -v, --verbose Turns on debug-level logger.","title":"Help content"},{"location":"descriptors/snakemake_snakefmt/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): snakefmt","title":"Installation on mega-linter Docker image"},{"location":"descriptors/snakemake_snakemake/","text":"snakemake documentation Version in MegaLinter: 7.14.2 Visit Official Web Site Configuration in MegaLinter Enable snakemake by adding SNAKEMAKE_LINT in ENABLE_LINTERS variable Disable snakemake by adding SNAKEMAKE_LINT in DISABLE_LINTERS variable Variable Description Default value SNAKEMAKE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SNAKEMAKE_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SNAKEMAKE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_LINT_PRE_COMMANDS List of bash commands to run before the linter None SNAKEMAKE_LINT_POST_COMMANDS List of bash commands to run after the linter None SNAKEMAKE_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false SNAKEMAKE_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use snakemake in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA SnakeCharm Visual Studio Code VsCode SnakeMake MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .smk File names (regex): Snakefile How the linting is performed snakemake is called one time by identified file ( file CLI lint mode) Example calls snakemake --lint -s Snakefile Help content usage: snakemake [-h] [--dry-run] [--profile PROFILE] [--cache [RULE ...]] [--snakefile FILE] [--cores [N]] [--jobs [N]] [--local-cores N] [--resources [NAME=INT ...]] [--set-threads RULE=THREADS [RULE=THREADS ...]] [--max-threads MAX_THREADS] [--set-resources RULE:RESOURCE=VALUE [RULE:RESOURCE=VALUE ...]] [--set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...]] [--set-resource-scopes RESOURCE=[global|local] [RESOURCE=[global|local] ...]] [--default-resources [NAME=INT ...]] [--preemption-default PREEMPTION_DEFAULT] [--preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...]] [--config [KEY=VALUE ...]] [--configfile FILE [FILE ...]] [--envvars VARNAME [VARNAME ...]] [--directory DIR] [--touch] [--keep-going] [--rerun-triggers {mtime,params,input,software-env,code} [{mtime,params,input,software-env,code} ...]] [--force] [--forceall] [--forcerun [TARGET ...]] [--prioritize TARGET [TARGET ...]] [--batch RULE=BATCH/BATCHES] [--until TARGET [TARGET ...]] [--omit-from TARGET [TARGET ...]] [--rerun-incomplete] [--shadow-prefix DIR] [--scheduler [{ilp,greedy}]] [--wms-monitor [WMS_MONITOR]] [--wms-monitor-arg [NAME=VALUE ...]] [--scheduler-ilp-solver {PULP_CBC_CMD}] [--scheduler-solver-path SCHEDULER_SOLVER_PATH] [--conda-base-path CONDA_BASE_PATH] [--no-subworkflows] [--groups GROUPS [GROUPS ...]] [--group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...]] [--report [FILE]] [--report-stylesheet CSSFILE] [--draft-notebook TARGET] [--edit-notebook TARGET] [--notebook-listen IP:PORT] [--lint [{text,json}]] [--generate-unit-tests [TESTPATH]] [--containerize] [--export-cwl FILE] [--list] [--list-target-rules] [--dag] [--rulegraph] [--filegraph] [--d3dag] [--summary] [--detailed-summary] [--archive FILE] [--cleanup-metadata FILE [FILE ...]] [--cleanup-shadow] [--skip-script-cleanup] [--unlock] [--list-version-changes] [--list-code-changes] [--list-input-changes] [--list-params-changes] [--list-untracked] [--delete-all-output] [--delete-temp-output] [--bash-completion] [--keep-incomplete] [--drop-metadata] [--version] [--reason] [--gui [PORT]] [--printshellcmds] [--debug-dag] [--stats FILE] [--nocolor] [--quiet [{progress,rules,all} ...]] [--print-compilation] [--verbose] [--force-use-threads] [--allow-ambiguity] [--nolock] [--ignore-incomplete] [--max-inventory-time SECONDS] [--latency-wait SECONDS] [--wait-for-files [FILE ...]] [--wait-for-files-file FILE] [--notemp] [--all-temp] [--keep-remote] [--keep-target-files] [--allowed-rules ALLOWED_RULES [ALLOWED_RULES ...]] [--local-groupid LOCAL_GROUPID] [--max-jobs-per-second MAX_JOBS_PER_SECOND] [--max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND] [-T RETRIES] [--attempt ATTEMPT] [--wrapper-prefix WRAPPER_PREFIX] [--default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob,XRootD}] [--default-remote-prefix DEFAULT_REMOTE_PREFIX] [--no-shared-fs] [--greediness GREEDINESS] [--no-hooks] [--overwrite-shellcmd OVERWRITE_SHELLCMD] [--debug] [--runtime-profile FILE] [--mode {0,1,2}] [--show-failed-logs] [--log-handler-script FILE] [--log-service {none,slack,wms}] [--cluster CMD | --cluster-sync CMD | --drmaa [ARGS]] [--cluster-config FILE] [--immediate-submit] [--jobscript SCRIPT] [--jobname NAME] [--cluster-status CLUSTER_STATUS] [--cluster-cancel CLUSTER_CANCEL] [--cluster-cancel-nargs CLUSTER_CANCEL_NARGS] [--cluster-sidecar CLUSTER_SIDECAR] [--drmaa-log-dir DIR] [--kubernetes [NAMESPACE]] [--container-image IMAGE] [--tibanna] [--tibanna-sfn TIBANNA_SFN] [--precommand PRECOMMAND] [--tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...]] [--google-lifesciences] [--google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...]] [--google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION] [--google-lifesciences-keep-cache] [--tes URL] [--use-conda] [--conda-not-block-search-path-envvars] [--list-conda-envs] [--conda-prefix DIR] [--conda-cleanup-envs] [--conda-cleanup-pkgs [{tarballs,cache}]] [--conda-create-envs-only] [--conda-frontend {conda,mamba}] [--use-singularity] [--singularity-prefix DIR] [--singularity-args ARGS] [--use-envmodules] [target ...] Snakemake is a Python based language and execution environment for GNU Make- like workflows. options: -h, --help show this help message and exit EXECUTION: target Targets to build. May be rules or files. (default: None) --dry-run, --dryrun, -n Do not execute anything, and display what would be done. If you have a very large workflow, use --dry-run --quiet to just print a summary of the DAG of jobs. (default: False) --profile PROFILE Name of profile to use for configuring Snakemake. Snakemake will search for a corresponding folder in /etc/xdg/snakemake and /root/.config/snakemake. Alternatively, this can be an absolute or relative path. The profile folder has to contain a file 'config.yaml'. This file can be used to set default values for command line options in YAML format. For example, '--cluster qsub' becomes 'cluster: qsub' in the YAML file. Profiles can be obtained from https://github.com/snakemake-profiles. The profile can also be set via the environment variable $SNAKEMAKE_PROFILE. [env var: SNAKEMAKE_PROFILE] (default: None) --cache [RULE ...] Store output files of given rules in a central cache given by the environment variable $SNAKEMAKE_OUTPUT_CACHE. Likewise, retrieve output files of the given rules from this cache if they have been created before (by anybody writing to the same cache), instead of actually executing the rules. Output files are identified by hashing all steps, parameters and software stack (conda envs or containers) needed to create them. (default: None) --snakefile FILE, -s FILE The workflow definition in form of a snakefile.Usually, you should not need to specify this. By default, Snakemake will search for 'Snakefile', 'snakefile', 'workflow/Snakefile', 'workflow/snakefile' beneath the current working directory, in this order. Only if you definitely want a different layout, you need to use this parameter. (default: None) --cores [N], -c [N] Use at most N CPU cores/jobs in parallel. If N is omitted or 'all', the limit is set to the number of available CPU cores. In case of cluster/cloud execution, this argument sets the maximum number of cores requested from the cluster or cloud scheduler. (See https://snakemake.readthedocs.io/en/stable/snakef iles/rules.html#resources-remote-execution for more info)This number is available to rules via workflow.cores. (default: None) --jobs [N], -j [N] Use at most N CPU cluster/cloud jobs in parallel. For local execution this is an alias for --cores. (default: None) --local-cores N In cluster/cloud mode, use at most N cores of the host machine in parallel (default: number of CPU cores of the host). The cores are used to execute local rules. This option is ignored when not in cluster/cloud mode. (default: 2) --resources [NAME=INT ...], --res [NAME=INT ...] Define additional resources that shall constrain the scheduling analogously to --cores (see above). A resource is defined as a name and an integer value. E.g. --resources mem_mb=1000. Rules can use resources by defining the resource keyword, e.g. resources: mem_mb=600. If now two rules require 600 of the resource 'mem_mb' they won't be run in parallel by the scheduler. In cluster/cloud mode, this argument will also constrain the amount of resources requested from the server. (See https://snakemake.readthedocs.io/en/s table/snakefiles/rules.html#resources-remote-execution for more info) (default: None) --set-threads RULE=THREADS [RULE=THREADS ...] Overwrite thread usage of rules. This allows to fine- tune workflow parallelization. In particular, this is helpful to target certain cluster nodes by e.g. shifting a rule to use more, or less threads than defined in the workflow. Thereby, THREADS has to be a positive integer, and RULE has to be the name of the rule. (default: None) --max-threads MAX_THREADS Define a global maximum number of threads available to any rule. Rules requesting more threads (via the threads keyword) will have their values reduced to the maximum. This can be useful when you want to restrict the maximum number of threads without modifying the workflow definition or overwriting rules individually with --set-threads. (default: None) --set-resources RULE:RESOURCE=VALUE [RULE:RESOURCE=VALUE ...] Overwrite resource usage of rules. This allows to fine-tune workflow resources. In particular, this is helpful to target certain cluster nodes by e.g. defining a certain partition for a rule, or overriding a temporary directory. Thereby, VALUE has to be a positive integer or a string, RULE has to be the name of the rule, and RESOURCE has to be the name of the resource. (default: None) --set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...] Overwrite number of scatter items of scattergather processes. This allows to fine-tune workflow parallelization. Thereby, SCATTERITEMS has to be a positive integer, and NAME has to be the name of the scattergather process defined via a scattergather directive in the workflow. (default: None) --set-resource-scopes RESOURCE=[global|local] [RESOURCE=[global|local] ...] Overwrite resource scopes. A scope determines how a constraint is reckoned in cluster execution. With RESOURCE=local, a constraint applied to RESOURCE using --resources will be considered the limit for each group submission. With RESOURCE=global, the constraint will apply across all groups cumulatively. By default, only `mem_mb` and `disk_mb` are considered local, all other resources are global. This may be modified in the snakefile using the `resource_scopes:` directive. Note that number of threads, specified via --cores, is always considered local. (See https://snakemake.readth edocs.io/en/stable/snakefiles/rules.html#resources- remote-execution for more info) (default: None) --default-resources [NAME=INT ...], --default-res [NAME=INT ...] Define default values of resources for rules that do not define their own values. In addition to plain integers, python expressions over inputsize are allowed (e.g. '2*input.size_mb').When specifying this without any arguments (--default-resources), it defines 'mem_mb=max(2*input.size_mb, 1000)' 'disk_mb=max(2*input.size_mb, 1000)' i.e., default disk and mem usage is twice the input file size but at least 1GB.In addition, the system temporary directory (as given by $TMPDIR, $TEMP, or $TMP) is used for the tmpdir resource. The tmpdir resource is automatically used by shell commands, scripts and wrappers to store temporary data (as it is mirrored into $TMPDIR, $TEMP, and $TMP for the executed subprocesses). If this argument is not specified at all, Snakemake just uses the tmpdir resource as outlined above. (default: None) --preemption-default PREEMPTION_DEFAULT A preemptible instance can be requested when using the Google Life Sciences API. If you set a --preemption- default,all rules will be subject to the default. Specifically, this integer is the number of restart attempts that will be made given that the instance is killed unexpectedly. Note that preemptible instances have a maximum running time of 24 hours. If you want to set preemptible instances for only a subset of rules, use --preemptible-rules instead. (default: None) --preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...] A preemptible instance can be requested when using the Google Life Sciences API. If you want to use these instances for a subset of your rules, you can use --preemptible-rules and then specify a list of rule and integer pairs, where each integer indicates the number of restarts to use for the rule's instance in the case that the instance is terminated unexpectedly. --preemptible-rules can be used in combination with --preemption-default, and will take priority. Note that preemptible instances have a maximum running time of 24. If you want to apply a consistent number of retries across all your rules, use --premption-default instead. Example: snakemake --preemption-default 10 --preemptible-rules map_reads=3 call_variants=0 (default: None) --config [KEY=VALUE ...], -C [KEY=VALUE ...] Set or overwrite values in the workflow config object. The workflow config object is accessible as variable config inside the workflow. Default values can be set by providing a JSON file (see Documentation). (default: None) --configfile FILE [FILE ...], --configfiles FILE [FILE ...] Specify or overwrite the config file of the workflow (see the docs). Values specified in JSON or YAML format are available in the global config dictionary inside the workflow. Multiple files overwrite each other in the given order. Thereby missing keys in previous config files are extended by following configfiles. Note that this order also includes a config file defined in the workflow definition itself (which will come first). (default: None) --envvars VARNAME [VARNAME ...] Environment variables to pass to cloud jobs. (default: None) --directory DIR, -d DIR Specify working directory (relative paths in the snakefile will use this as their origin). (default: None) --touch, -t Touch output files (mark them up to date without really changing them) instead of running their commands. This is used to pretend that the rules were executed, in order to fool future invocations of snakemake. Fails if a file does not yet exist. Note that this will only touch files that would otherwise be recreated by Snakemake (e.g. because their input files are newer). For enforcing a touch, combine this with --force, --forceall, or --forcerun. Note however that you loose the provenance information when the files have been created in realitiy. Hence, this should be used only as a last resort. (default: False) --keep-going, -k Go on with independent jobs if a job fails. (default: False) --rerun-triggers {mtime,params,input,software-env,code} [{mtime,params,input,software-env,code} ...] Define what triggers the rerunning of a job. By default, all triggers are used, which guarantees that results are consistent with the workflow code and configuration. If you rather prefer the traditional way of just considering file modification dates, use ' --rerun-trigger mtime'. (default: ['mtime', 'params', 'input', 'software-env', 'code']) --force, -f Force the execution of the selected target or the first rule regardless of already created output. (default: False) --forceall, -F Force the execution of the selected (or the first) rule and all rules it is dependent on regardless of already created output. (default: False) --forcerun [TARGET ...], -R [TARGET ...] Force the re-execution or creation of the given rules or files. Use this option if you changed a rule and want to have all its output in your workflow updated. (default: None) --prioritize TARGET [TARGET ...], -P TARGET [TARGET ...] Tell the scheduler to assign creation of given targets (and all their dependencies) highest priority. (EXPERIMENTAL) (default: None) --batch RULE=BATCH/BATCHES Only create the given BATCH of the input files of the given RULE. This can be used to iteratively run parts of very large workflows. Only the execution plan of the relevant part of the workflow has to be calculated, thereby speeding up DAG computation. It is recommended to provide the most suitable rule for batching when documenting a workflow. It should be some aggregating rule that would be executed only once, and has a large number of input files. For example, it can be a rule that aggregates over samples. (default: None) --until TARGET [TARGET ...], -U TARGET [TARGET ...] Runs the pipeline until it reaches the specified rules or files. Only runs jobs that are dependencies of the specified rule or files, does not run sibling DAGs. (default: None) --omit-from TARGET [TARGET ...], -O TARGET [TARGET ...] Prevent the execution or creation of the given rules or files as well as any rules or files that are downstream of these targets in the DAG. Also runs jobs in sibling DAGs that are independent of the rules or files specified here. (default: None) --rerun-incomplete, --ri Re-run all jobs the output of which is recognized as incomplete. (default: False) --shadow-prefix DIR Specify a directory in which the 'shadow' directory is created. If not supplied, the value is set to the '.snakemake' directory relative to the working directory. (default: None) --scheduler [{ilp,greedy}] Specifies if jobs are selected by a greedy algorithm or by solving an ilp. The ilp scheduler aims to reduce runtime and hdd usage by best possible use of resources. (default: greedy) --wms-monitor [WMS_MONITOR] IP and port of workflow management system to monitor the execution of snakemake (e.g. http://127.0.0.1:5000) Note that if your service requires an authorization token, you must export WMS_MONITOR_TOKEN in the environment. (default: None) --wms-monitor-arg [NAME=VALUE ...] If the workflow management service accepts extra arguments, provide. them in key value pairs with --wms-monitor-arg. For example, to run an existing workflow using a wms monitor, you can provide the pair id=12345 and the arguments will be provided to the endpoint to first interact with the workflow (default: None) --scheduler-ilp-solver {PULP_CBC_CMD} Specifies solver to be utilized when selecting ilp- scheduler. (default: COIN_CMD) --scheduler-solver-path SCHEDULER_SOLVER_PATH Set the PATH to search for scheduler solver binaries (internal use only). (default: None) --conda-base-path CONDA_BASE_PATH Path of conda base installation (home of conda, mamba, activate) (internal use only). (default: None) --no-subworkflows, --nosw Do not evaluate or execute subworkflows. (default: False) GROUPING: --groups GROUPS [GROUPS ...] Assign rules to groups (this overwrites any group definitions from the workflow). (default: None) --group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...] Set the number of connected components a group is allowed to span. By default, this is 1, but this flag allows to extend this. This can be used to run e.g. 3 jobs of the same rule in the same group, although they are not connected. It can be helpful for putting together many small jobs or benefitting of shared memory setups. (default: None) REPORTS: --report [FILE] Create an HTML report with results and statistics. This can be either a .html file or a .zip file. In the former case, all results are embedded into the .html (this only works for small data). In the latter case, results are stored along with a file report.html in the zip archive. If no filename is given, an embedded report.html is the default. (default: None) --report-stylesheet CSSFILE Custom stylesheet to use for report. In particular, this can be used for branding the report with e.g. a custom logo, see docs. (default: None) NOTEBOOKS: --draft-notebook TARGET Draft a skeleton notebook for the rule used to generate the given target file. This notebook can then be opened in a jupyter server, exeucted and implemented until ready. After saving, it will automatically be reused in non-interactive mode by Snakemake for subsequent jobs. (default: None) --edit-notebook TARGET Interactively edit the notebook associated with the rule used to generate the given target file. This will start a local jupyter notebook server. Any changes to the notebook should be saved, and the server has to be stopped by closing the notebook and hitting the 'Quit' button on the jupyter dashboard. Afterwards, the updated notebook will be automatically stored in the path defined in the rule. If the notebook is not yet present, this will create an empty draft. (default: None) --notebook-listen IP:PORT The IP address and PORT the notebook server used for editing the notebook (--edit-notebook) will listen on. (default: localhost:8888) UTILITIES: --lint [{text,json}] Perform linting on the given workflow. This will print snakemake specific suggestions to improve code quality (work in progress, more lints to be added in the future). If no argument is provided, plain text output is used. (default: None) --generate-unit-tests [TESTPATH] Automatically generate unit tests for each workflow rule. This assumes that all input files of each job are already present. Rules without a job with present input files will be skipped (a warning will be issued). For each rule, one test case will be created in the specified test folder (.tests/unit by default). After successfull execution, tests can be run with 'pytest TESTPATH'. (default: None) --containerize Print a Dockerfile that provides an execution environment for the workflow, including all conda environments. (default: False) --export-cwl FILE Compile workflow to CWL and store it in given FILE. (default: None) --list, -l Show available rules in given Snakefile. (default: False) --list-target-rules, --lt Show available target rules in given Snakefile. (default: False) --dag Do not execute anything and print the directed acyclic graph of jobs in the dot language. Recommended use on Unix systems: snakemake --dag | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --rulegraph Do not execute anything and print the dependency graph of rules in the dot language. This will be less crowded than above DAG of jobs, but also show less information. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --rulegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --filegraph Do not execute anything and print the dependency graph of rules with their input and output files in the dot language. This is an intermediate solution between above DAG of jobs and the rule graph. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --filegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --d3dag Print the DAG in D3.js compatible JSON format. (default: False) --summary, -S Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, status, plan. Thereby rule version contains the versionthe file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --detailed-summary, -D Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, input file(s), shell command, status, plan. Thereby rule version contains the version the file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. The input file and shell command columns are self explanatory. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --archive FILE Archive the workflow into the given tar archive FILE. The archive will be created such that the workflow can be re-executed on a vanilla system. The function needs conda and git to be installed. It will archive every file that is under git version control. Note that it is best practice to have the Snakefile, config files, and scripts under version control. Hence, they will be included in the archive. Further, it will add input files that are not generated by by the workflow itself and conda environments. Note that symlinks are dereferenced. Supported formats are .tar, .tar.gz, .tar.bz2 and .tar.xz. (default: None) --cleanup-metadata FILE [FILE ...], --cm FILE [FILE ...] Cleanup the metadata of given files. That means that snakemake removes any tracked version info, and any marks that files are incomplete. (default: None) --cleanup-shadow Cleanup old shadow directories which have not been deleted due to failures or power loss. (default: False) --skip-script-cleanup Don't delete wrapper scripts used for execution (default: False) --unlock Remove a lock on the working directory. (default: False) --list-version-changes, --lv List all output files that have been created with a different version (as determined by the version keyword). (default: False) --list-code-changes, --lc List all output files for which the rule body (run or shell) have changed in the Snakefile. (default: False) --list-input-changes, --li List all output files for which the defined input files have changed in the Snakefile (e.g. new input files were added in the rule definition or files were renamed). For listing input file modification in the filesystem, use --summary. (default: False) --list-params-changes, --lp List all output files for which the defined params have changed in the Snakefile. (default: False) --list-untracked, --lu List all files in the working directory that are not used in the workflow. This can be used e.g. for identifying leftover files. Hidden files and directories are ignored. (default: False) --delete-all-output Remove all files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. Write-protected files are not removed. Nevertheless, use with care! (default: False) --delete-temp-output Remove all temporary files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. (default: False) --bash-completion Output code to register bash completion for snakemake. Put the following in your .bashrc (including the accents): `snakemake --bash-completion` or issue it in an open terminal session. (default: False) --keep-incomplete Do not remove incomplete output files by failed jobs. (default: False) --drop-metadata Drop metadata file tracking information after job finishes. Provenance-information based reports (e.g. --report and the --list_x_changes functions) will be empty or incomplete. (default: False) --version, -v show program's version number and exit OUTPUT: --reason, -r Print the reason for each executed rule (deprecated, always true now). (default: False) --gui [PORT] Serve an HTML based user interface to the given network and port e.g. 168.129.10.15:8000. By default Snakemake is only available in the local network (default port: 8000). To make Snakemake listen to all ip addresses add the special host address 0.0.0.0 to the url (0.0.0.0:8000). This is important if Snakemake is used in a virtualised environment like Docker. If possible, a browser window is opened. (default: None) --printshellcmds, -p Print out the shell commands that will be executed. (default: False) --debug-dag Print candidate and selected jobs (including their wildcards) while inferring DAG. This can help to debug unexpected DAG topology or errors. (default: False) --stats FILE Write stats about Snakefile execution in JSON format to the given file. (default: None) --nocolor Do not use a colored output. (default: False) --quiet [{progress,rules,all} ...], -q [{progress,rules,all} ...] Do not output certain information. If used without arguments, do not output any progress or rule information. Defining 'all' results in no information being printed at all. (default: None) --print-compilation Print the python representation of the workflow. (default: False) --verbose Print debugging output. (default: False) BEHAVIOR: --force-use-threads Force threads rather than processes. Helpful if shared memory (/dev/shm) is full or unavailable. (default: False) --allow-ambiguity, -a Don't check for ambiguous rules and simply use the first if several can produce the same file. This allows the user to prioritize rules by their order in the snakefile. (default: False) --nolock Do not lock the working directory (default: False) --ignore-incomplete, --ii Do not check for incomplete output files. (default: False) --max-inventory-time SECONDS Spend at most SECONDS seconds to create a file inventory for the working directory. The inventory vastly speeds up file modification and existence checks when computing which jobs need to be executed. However, creating the inventory itself can be slow, e.g. on network file systems. Hence, we do not spend more than a given amount of time and fall back to individual checks for the rest. (default: 20) --latency-wait SECONDS, --output-wait SECONDS, -w SECONDS Wait given seconds if an output file of a job is not present after the job finished. This helps if your filesystem suffers from latency (default 5). (default: 5) --wait-for-files [FILE ...] Wait --latency-wait seconds for these files to be present before executing the workflow. This option is used internally to handle filesystem latency in cluster environments. (default: None) --wait-for-files-file FILE Same behaviour as --wait-for-files, but file list is stored in file instead of being passed on the commandline. This is useful when the list of files is too long to be passed on the commandline. (default: None) --notemp, --nt Ignore temp() declarations. This is useful when running only a part of the workflow, since temp() would lead to deletion of probably needed files by other parts of the workflow. (default: False) --all-temp Mark all output files as temp files. This can be useful for CI testing, in order to save space. (default: False) --keep-remote Keep local copies of remote input files. (default: False) --keep-target-files Do not adjust the paths of given target files relative to the working directory. (default: False) --allowed-rules ALLOWED_RULES [ALLOWED_RULES ...] Only consider given rules. If omitted, all rules in Snakefile are used. Note that this is intended primarily for internal use and may lead to unexpected results otherwise. (default: None) --local-groupid LOCAL_GROUPID Name for local groupid, meant for internal use only. (default: local) --max-jobs-per-second MAX_JOBS_PER_SECOND Maximal number of cluster/drmaa jobs per second, default is 10, fractions allowed. (default: 10) --max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND Maximal number of job status checks per second, default is 10, fractions allowed. (default: 10) -T RETRIES, --retries RETRIES, --restart-times RETRIES Number of times to restart failing jobs (defaults to 0). (default: 0) --attempt ATTEMPT Internal use only: define the initial value of the attempt parameter (default: 1). (default: 1) --wrapper-prefix WRAPPER_PREFIX Prefix for URL created from wrapper directive (default: https://github.com/snakemake/snakemake- wrappers/raw/). Set this to a different URL to use your fork or a local clone of the repository, e.g., use a git URL like 'git+file://path/to/your/local/clone@'. (default: https://github.com/snakemake/snakemake-wrappers/raw/) --default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob,XRootD} Specify default remote provider to be used for all input and output files that don't yet specify one. (default: None) --default-remote-prefix DEFAULT_REMOTE_PREFIX Specify prefix for default remote provider. E.g. a bucket name. (default: ) --no-shared-fs Do not assume that jobs share a common file system. When this flag is activated, Snakemake will assume that the filesystem on a cluster node is not shared with other nodes. For example, this will lead to downloading remote files on each cluster node separately. Further, it won't take special measures to deal with filesystem latency issues. This option will in most cases only make sense in combination with --default-remote-provider. Further, when using --cluster you will have to also provide --cluster- status. Only activate this if you know what you are doing. (default: False) --greediness GREEDINESS Set the greediness of scheduling. This value between 0 and 1 determines how careful jobs are selected for execution. The default value (1.0) provides the best speed and still acceptable scheduling quality. (default: None) --no-hooks Do not invoke onstart, onsuccess or onerror hooks after execution. (default: False) --overwrite-shellcmd OVERWRITE_SHELLCMD Provide a shell command that shall be executed instead of those given in the workflow. This is for debugging purposes only. (default: None) --debug Allow to debug rules with e.g. PDB. This flag allows to set breakpoints in run blocks. (default: False) --runtime-profile FILE Profile Snakemake and write the output to FILE. This requires yappi to be installed. (default: None) --mode {0,1,2} Set execution mode of Snakemake (internal use only). (default: 0) --show-failed-logs Automatically display logs of failed jobs. (default: False) --log-handler-script FILE Provide a custom script containing a function 'def log_handler(msg):'. Snakemake will call this function for every logging output (given as a dictionary msg)allowing to e.g. send notifications in the form of e.g. slack messages or emails. (default: None) --log-service {none,slack,wms} Set a specific messaging service for logging output.Snakemake will notify the service on errors and completed execution.Currently slack and workflow management system (wms) are supported. (default: None) CLUSTER: --cluster CMD Execute snakemake rules with the given submit command, e.g. qsub. Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. The submit command can be decorated to make it aware of certain job properties (name, rulename, input, output, params, wildcards, log, threads and dependencies (see the argument below)), e.g.: $ snakemake --cluster 'qsub -pe threaded {threads}'. (default: None) --cluster-sync CMD cluster submission command will block, returning the remote exitstatus upon remote termination (for example, this should be usedif the cluster command is 'qsub -sync y' (SGE) (default: None) --drmaa [ARGS] Execute snakemake on a cluster accessed via DRMAA, Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. ARGS can be used to specify options of the underlying cluster system, thereby using the job properties name, rulename, input, output, params, wildcards, log, threads and dependencies, e.g.: --drmaa ' -pe threaded {threads}'. Note that ARGS must be given in quotes and with a leading whitespace. (default: None) --cluster-config FILE, -u FILE A JSON or YAML file that defines the wildcards used in 'cluster'for specific rules, instead of having them specified in the Snakefile. For example, for rule 'job' you may define: { 'job' : { 'time' : '24:00:00' } } to specify the time for rule 'job'. You can specify more than one file. The configuration files are merged with later values overriding earlier ones. This option is deprecated in favor of using --profile, see docs. (default: []) --immediate-submit, --is Immediately submit all jobs to the cluster instead of waiting for present input files. This will fail, unless you make the cluster aware of job dependencies, e.g. via: $ snakemake --cluster 'sbatch --dependency {dependencies}. Assuming that your submit script (here sbatch) outputs the generated job id to the first stdout line, {dependencies} will be filled with space separated job ids this job depends on. Does not work for workflows that contain checkpoint rules. (default: False) --jobscript SCRIPT, --js SCRIPT Provide a custom job script for submission to the cluster. The default script resides as 'jobscript.sh' in the installation directory. (default: None) --jobname NAME, --jn NAME Provide a custom name for the jobscript that is submitted to the cluster (see --cluster). NAME is \"snakejob.{name}.{jobid}.sh\" per default. The wildcard {jobid} has to be present in the name. (default: snakejob.{name}.{jobid}.sh) --cluster-status CLUSTER_STATUS Status command for cluster execution. This is only considered in combination with the --cluster flag. If provided, Snakemake will use the status command to determine if a job has finished successfully or failed. For this it is necessary that the submit command provided to --cluster returns the cluster job id. Then, the status command will be invoked with the job id. Snakemake expects it to return 'success' if the job was successfull, 'failed' if the job failed and 'running' if the job still runs. (default: None) --cluster-cancel CLUSTER_CANCEL Specify a command that allows to stop currently running jobs. The command will be passed a single argument, the job id. (default: None) --cluster-cancel-nargs CLUSTER_CANCEL_NARGS Specify maximal number of job ids to pass to --cluster-cancel command, defaults to 1000. (default: 1000) --cluster-sidecar CLUSTER_SIDECAR Optional command to start a sidecar process during cluster execution. Only active when --cluster is given as well. (default: None) --drmaa-log-dir DIR Specify a directory in which stdout and stderr files of DRMAA jobs will be written. The value may be given as a relative path, in which case Snakemake will use the current invocation directory as the origin. If given, this will override any given '-o' and/or '-e' native specification. If not given, all DRMAA stdout and stderr files are written to the current working directory. (default: None) KUBERNETES: --kubernetes [NAMESPACE] Execute workflow in a kubernetes cluster (in the cloud). NAMESPACE is the namespace you want to use for your job (if nothing specified: 'default'). Usually, this requires --default-remote-provider and --default- remote-prefix to be set to a S3 or GS bucket where your . data shall be stored. It is further advisable to activate conda integration via --use-conda. (default: None) --container-image IMAGE Docker image to use, e.g., when submitting jobs to kubernetes Defaults to 'https://hub.docker.com/r/snakemake/snakemake', tagged with the same version as the currently running Snakemake instance. Note that overwriting this value is up to your responsibility. Any used image has to contain a working snakemake installation that is compatible with (or ideally the same as) the currently running version. (default: None) TIBANNA: --tibanna Execute workflow on AWS cloud using Tibanna. This requires --default-remote-prefix to be set to S3 bucket name and prefix (e.g. 'bucketname/subdirectory') where input is already stored and output will be sent to. Using --tibanna implies --default-resources is set as default. Optionally, use --precommand to specify any preparation command to run before snakemake command on the cloud (inside snakemake container on Tibanna VM). Also, --use-conda, --use-singularity, --config, --configfile are supported and will be carried over. (default: False) --tibanna-sfn TIBANNA_SFN Name of Tibanna Unicorn step function (e.g. tibanna_unicorn_monty).This works as serverless scheduler/resource allocator and must be deployed first using tibanna cli. (e.g. tibanna deploy_unicorn --usergroup=monty --buckets=bucketname) (default: None) --precommand PRECOMMAND Any command to execute before snakemake command on AWS cloud such as wget, git clone, unzip, etc. This is used with --tibanna.Do not include input/output download/upload commands - file transfer between S3 bucket and the run environment (container) is automatically handled by Tibanna. (default: None) --tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...] Additional tibanna config e.g. --tibanna-config spot_instance=true subnet=<subnet_id> security group=<security_group_id> (default: None) GOOGLE_LIFE_SCIENCE: --google-lifesciences Execute workflow on Google Cloud cloud using the Google Life. Science API. This requires default application credentials (json) to be created and export to the environment to use Google Cloud Storage, Compute Engine, and Life Sciences. The credential file should be exported as GOOGLE_APPLICATION_CREDENTIALS for snakemake to discover. Also, --use-conda, --use- singularity, --config, --configfile are supported and will be carried over. (default: False) --google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...] Specify one or more valid instance regions (defaults to US) (default: ['us-east1', 'us-west1', 'us- central1']) --google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION The Life Sciences API service used to schedule the jobs. E.g., us-centra1 (Iowa) and europe-west2 (London) Watch the terminal output to see all options found to be available. If not specified, defaults to the first found with a matching prefix from regions specified with --google-lifesciences-regions. (default: None) --google-lifesciences-keep-cache Cache workflows in your Google Cloud Storage Bucket specified by --default-remote-prefix/{source}/{cache}. Each workflow working directory is compressed to a .tar.gz, named by the hash of the contents, and kept in Google Cloud Storage. By default, the caches are deleted at the shutdown step of the workflow. (default: False) TES: --tes URL Send workflow tasks to GA4GH TES server specified by url. (default: None) CONDA: --use-conda If defined in the rule, run job in a conda environment. If this flag is not set, the conda directive is ignored. (default: False) --conda-not-block-search-path-envvars Do not block environment variables that modify the search path (R_LIBS, PYTHONPATH, PERL5LIB, PERLLIB) when using conda environments. (default: False) --list-conda-envs List all conda environments and their location on disk. (default: False) --conda-prefix DIR Specify a directory in which the 'conda' and 'conda- archive' directories are created. These are used to store conda environments and their archives, respectively. If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-conda` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. The value can also be provided via the environment variable $SNAKEMAKE_CONDA_PREFIX. (default: None) --conda-cleanup-envs Cleanup unused conda environments. (default: False) --conda-cleanup-pkgs [{tarballs,cache}] Cleanup conda packages after creating environments. In case of 'tarballs' mode, will clean up all downloaded package tarballs. In case of 'cache' mode, will additionally clean up unused package caches. If mode is omitted, will default to only cleaning up the tarballs. (default: None) --conda-create-envs-only If specified, only creates the job-specific conda environments then exits. The `--use-conda` flag must also be set. (default: False) --conda-frontend {conda,mamba} Choose the conda frontend for installing environments. Mamba is much faster and highly recommended. (default: mamba) SINGULARITY: --use-singularity If defined in the rule, run job within a singularity container. If this flag is not set, the singularity directive is ignored. (default: False) --singularity-prefix DIR Specify a directory in which singularity images will be stored.If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-singularity` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. (default: None) --singularity-args ARGS Pass additional args to singularity. (default: ) ENVIRONMENT MODULES: --use-envmodules If defined in the rule, run job within the given environment modules, loaded in the given order. This can be combined with --use-conda and --use- singularity, which will then be only used as a fallback for rules which don't define environment modules. (default: False) If an arg is specified in more than one place, then commandline values override environment variables which override defaults. Installation on mega-linter Docker image PIP packages (Python): snakemake","title":"snakemake"},{"location":"descriptors/snakemake_snakemake/#snakemake-documentation","text":"Version in MegaLinter: 7.14.2 Visit Official Web Site","title":"snakemake documentation"},{"location":"descriptors/snakemake_snakemake/#configuration-in-megalinter","text":"Enable snakemake by adding SNAKEMAKE_LINT in ENABLE_LINTERS variable Disable snakemake by adding SNAKEMAKE_LINT in DISABLE_LINTERS variable Variable Description Default value SNAKEMAKE_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SNAKEMAKE_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SNAKEMAKE_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SNAKEMAKE_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SNAKEMAKE_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".smk\"] SNAKEMAKE_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] [\"Snakefile\"] SNAKEMAKE_LINT_PRE_COMMANDS List of bash commands to run before the linter None SNAKEMAKE_LINT_POST_COMMANDS List of bash commands to run after the linter None SNAKEMAKE_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false SNAKEMAKE_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/snakemake_snakemake/#ide-integration","text":"Use snakemake in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install IDEA SnakeCharm Visual Studio Code VsCode SnakeMake","title":"IDE Integration"},{"location":"descriptors/snakemake_snakemake/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/snakemake_snakemake/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/snakemake_snakemake/#how-are-identified-applicable-files","text":"File extensions: .smk File names (regex): Snakefile","title":"How are identified applicable files"},{"location":"descriptors/snakemake_snakemake/#how-the-linting-is-performed","text":"snakemake is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/snakemake_snakemake/#example-calls","text":"snakemake --lint -s Snakefile","title":"Example calls"},{"location":"descriptors/snakemake_snakemake/#help-content","text":"usage: snakemake [-h] [--dry-run] [--profile PROFILE] [--cache [RULE ...]] [--snakefile FILE] [--cores [N]] [--jobs [N]] [--local-cores N] [--resources [NAME=INT ...]] [--set-threads RULE=THREADS [RULE=THREADS ...]] [--max-threads MAX_THREADS] [--set-resources RULE:RESOURCE=VALUE [RULE:RESOURCE=VALUE ...]] [--set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...]] [--set-resource-scopes RESOURCE=[global|local] [RESOURCE=[global|local] ...]] [--default-resources [NAME=INT ...]] [--preemption-default PREEMPTION_DEFAULT] [--preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...]] [--config [KEY=VALUE ...]] [--configfile FILE [FILE ...]] [--envvars VARNAME [VARNAME ...]] [--directory DIR] [--touch] [--keep-going] [--rerun-triggers {mtime,params,input,software-env,code} [{mtime,params,input,software-env,code} ...]] [--force] [--forceall] [--forcerun [TARGET ...]] [--prioritize TARGET [TARGET ...]] [--batch RULE=BATCH/BATCHES] [--until TARGET [TARGET ...]] [--omit-from TARGET [TARGET ...]] [--rerun-incomplete] [--shadow-prefix DIR] [--scheduler [{ilp,greedy}]] [--wms-monitor [WMS_MONITOR]] [--wms-monitor-arg [NAME=VALUE ...]] [--scheduler-ilp-solver {PULP_CBC_CMD}] [--scheduler-solver-path SCHEDULER_SOLVER_PATH] [--conda-base-path CONDA_BASE_PATH] [--no-subworkflows] [--groups GROUPS [GROUPS ...]] [--group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...]] [--report [FILE]] [--report-stylesheet CSSFILE] [--draft-notebook TARGET] [--edit-notebook TARGET] [--notebook-listen IP:PORT] [--lint [{text,json}]] [--generate-unit-tests [TESTPATH]] [--containerize] [--export-cwl FILE] [--list] [--list-target-rules] [--dag] [--rulegraph] [--filegraph] [--d3dag] [--summary] [--detailed-summary] [--archive FILE] [--cleanup-metadata FILE [FILE ...]] [--cleanup-shadow] [--skip-script-cleanup] [--unlock] [--list-version-changes] [--list-code-changes] [--list-input-changes] [--list-params-changes] [--list-untracked] [--delete-all-output] [--delete-temp-output] [--bash-completion] [--keep-incomplete] [--drop-metadata] [--version] [--reason] [--gui [PORT]] [--printshellcmds] [--debug-dag] [--stats FILE] [--nocolor] [--quiet [{progress,rules,all} ...]] [--print-compilation] [--verbose] [--force-use-threads] [--allow-ambiguity] [--nolock] [--ignore-incomplete] [--max-inventory-time SECONDS] [--latency-wait SECONDS] [--wait-for-files [FILE ...]] [--wait-for-files-file FILE] [--notemp] [--all-temp] [--keep-remote] [--keep-target-files] [--allowed-rules ALLOWED_RULES [ALLOWED_RULES ...]] [--local-groupid LOCAL_GROUPID] [--max-jobs-per-second MAX_JOBS_PER_SECOND] [--max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND] [-T RETRIES] [--attempt ATTEMPT] [--wrapper-prefix WRAPPER_PREFIX] [--default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob,XRootD}] [--default-remote-prefix DEFAULT_REMOTE_PREFIX] [--no-shared-fs] [--greediness GREEDINESS] [--no-hooks] [--overwrite-shellcmd OVERWRITE_SHELLCMD] [--debug] [--runtime-profile FILE] [--mode {0,1,2}] [--show-failed-logs] [--log-handler-script FILE] [--log-service {none,slack,wms}] [--cluster CMD | --cluster-sync CMD | --drmaa [ARGS]] [--cluster-config FILE] [--immediate-submit] [--jobscript SCRIPT] [--jobname NAME] [--cluster-status CLUSTER_STATUS] [--cluster-cancel CLUSTER_CANCEL] [--cluster-cancel-nargs CLUSTER_CANCEL_NARGS] [--cluster-sidecar CLUSTER_SIDECAR] [--drmaa-log-dir DIR] [--kubernetes [NAMESPACE]] [--container-image IMAGE] [--tibanna] [--tibanna-sfn TIBANNA_SFN] [--precommand PRECOMMAND] [--tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...]] [--google-lifesciences] [--google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...]] [--google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION] [--google-lifesciences-keep-cache] [--tes URL] [--use-conda] [--conda-not-block-search-path-envvars] [--list-conda-envs] [--conda-prefix DIR] [--conda-cleanup-envs] [--conda-cleanup-pkgs [{tarballs,cache}]] [--conda-create-envs-only] [--conda-frontend {conda,mamba}] [--use-singularity] [--singularity-prefix DIR] [--singularity-args ARGS] [--use-envmodules] [target ...] Snakemake is a Python based language and execution environment for GNU Make- like workflows. options: -h, --help show this help message and exit EXECUTION: target Targets to build. May be rules or files. (default: None) --dry-run, --dryrun, -n Do not execute anything, and display what would be done. If you have a very large workflow, use --dry-run --quiet to just print a summary of the DAG of jobs. (default: False) --profile PROFILE Name of profile to use for configuring Snakemake. Snakemake will search for a corresponding folder in /etc/xdg/snakemake and /root/.config/snakemake. Alternatively, this can be an absolute or relative path. The profile folder has to contain a file 'config.yaml'. This file can be used to set default values for command line options in YAML format. For example, '--cluster qsub' becomes 'cluster: qsub' in the YAML file. Profiles can be obtained from https://github.com/snakemake-profiles. The profile can also be set via the environment variable $SNAKEMAKE_PROFILE. [env var: SNAKEMAKE_PROFILE] (default: None) --cache [RULE ...] Store output files of given rules in a central cache given by the environment variable $SNAKEMAKE_OUTPUT_CACHE. Likewise, retrieve output files of the given rules from this cache if they have been created before (by anybody writing to the same cache), instead of actually executing the rules. Output files are identified by hashing all steps, parameters and software stack (conda envs or containers) needed to create them. (default: None) --snakefile FILE, -s FILE The workflow definition in form of a snakefile.Usually, you should not need to specify this. By default, Snakemake will search for 'Snakefile', 'snakefile', 'workflow/Snakefile', 'workflow/snakefile' beneath the current working directory, in this order. Only if you definitely want a different layout, you need to use this parameter. (default: None) --cores [N], -c [N] Use at most N CPU cores/jobs in parallel. If N is omitted or 'all', the limit is set to the number of available CPU cores. In case of cluster/cloud execution, this argument sets the maximum number of cores requested from the cluster or cloud scheduler. (See https://snakemake.readthedocs.io/en/stable/snakef iles/rules.html#resources-remote-execution for more info)This number is available to rules via workflow.cores. (default: None) --jobs [N], -j [N] Use at most N CPU cluster/cloud jobs in parallel. For local execution this is an alias for --cores. (default: None) --local-cores N In cluster/cloud mode, use at most N cores of the host machine in parallel (default: number of CPU cores of the host). The cores are used to execute local rules. This option is ignored when not in cluster/cloud mode. (default: 2) --resources [NAME=INT ...], --res [NAME=INT ...] Define additional resources that shall constrain the scheduling analogously to --cores (see above). A resource is defined as a name and an integer value. E.g. --resources mem_mb=1000. Rules can use resources by defining the resource keyword, e.g. resources: mem_mb=600. If now two rules require 600 of the resource 'mem_mb' they won't be run in parallel by the scheduler. In cluster/cloud mode, this argument will also constrain the amount of resources requested from the server. (See https://snakemake.readthedocs.io/en/s table/snakefiles/rules.html#resources-remote-execution for more info) (default: None) --set-threads RULE=THREADS [RULE=THREADS ...] Overwrite thread usage of rules. This allows to fine- tune workflow parallelization. In particular, this is helpful to target certain cluster nodes by e.g. shifting a rule to use more, or less threads than defined in the workflow. Thereby, THREADS has to be a positive integer, and RULE has to be the name of the rule. (default: None) --max-threads MAX_THREADS Define a global maximum number of threads available to any rule. Rules requesting more threads (via the threads keyword) will have their values reduced to the maximum. This can be useful when you want to restrict the maximum number of threads without modifying the workflow definition or overwriting rules individually with --set-threads. (default: None) --set-resources RULE:RESOURCE=VALUE [RULE:RESOURCE=VALUE ...] Overwrite resource usage of rules. This allows to fine-tune workflow resources. In particular, this is helpful to target certain cluster nodes by e.g. defining a certain partition for a rule, or overriding a temporary directory. Thereby, VALUE has to be a positive integer or a string, RULE has to be the name of the rule, and RESOURCE has to be the name of the resource. (default: None) --set-scatter NAME=SCATTERITEMS [NAME=SCATTERITEMS ...] Overwrite number of scatter items of scattergather processes. This allows to fine-tune workflow parallelization. Thereby, SCATTERITEMS has to be a positive integer, and NAME has to be the name of the scattergather process defined via a scattergather directive in the workflow. (default: None) --set-resource-scopes RESOURCE=[global|local] [RESOURCE=[global|local] ...] Overwrite resource scopes. A scope determines how a constraint is reckoned in cluster execution. With RESOURCE=local, a constraint applied to RESOURCE using --resources will be considered the limit for each group submission. With RESOURCE=global, the constraint will apply across all groups cumulatively. By default, only `mem_mb` and `disk_mb` are considered local, all other resources are global. This may be modified in the snakefile using the `resource_scopes:` directive. Note that number of threads, specified via --cores, is always considered local. (See https://snakemake.readth edocs.io/en/stable/snakefiles/rules.html#resources- remote-execution for more info) (default: None) --default-resources [NAME=INT ...], --default-res [NAME=INT ...] Define default values of resources for rules that do not define their own values. In addition to plain integers, python expressions over inputsize are allowed (e.g. '2*input.size_mb').When specifying this without any arguments (--default-resources), it defines 'mem_mb=max(2*input.size_mb, 1000)' 'disk_mb=max(2*input.size_mb, 1000)' i.e., default disk and mem usage is twice the input file size but at least 1GB.In addition, the system temporary directory (as given by $TMPDIR, $TEMP, or $TMP) is used for the tmpdir resource. The tmpdir resource is automatically used by shell commands, scripts and wrappers to store temporary data (as it is mirrored into $TMPDIR, $TEMP, and $TMP for the executed subprocesses). If this argument is not specified at all, Snakemake just uses the tmpdir resource as outlined above. (default: None) --preemption-default PREEMPTION_DEFAULT A preemptible instance can be requested when using the Google Life Sciences API. If you set a --preemption- default,all rules will be subject to the default. Specifically, this integer is the number of restart attempts that will be made given that the instance is killed unexpectedly. Note that preemptible instances have a maximum running time of 24 hours. If you want to set preemptible instances for only a subset of rules, use --preemptible-rules instead. (default: None) --preemptible-rules PREEMPTIBLE_RULES [PREEMPTIBLE_RULES ...] A preemptible instance can be requested when using the Google Life Sciences API. If you want to use these instances for a subset of your rules, you can use --preemptible-rules and then specify a list of rule and integer pairs, where each integer indicates the number of restarts to use for the rule's instance in the case that the instance is terminated unexpectedly. --preemptible-rules can be used in combination with --preemption-default, and will take priority. Note that preemptible instances have a maximum running time of 24. If you want to apply a consistent number of retries across all your rules, use --premption-default instead. Example: snakemake --preemption-default 10 --preemptible-rules map_reads=3 call_variants=0 (default: None) --config [KEY=VALUE ...], -C [KEY=VALUE ...] Set or overwrite values in the workflow config object. The workflow config object is accessible as variable config inside the workflow. Default values can be set by providing a JSON file (see Documentation). (default: None) --configfile FILE [FILE ...], --configfiles FILE [FILE ...] Specify or overwrite the config file of the workflow (see the docs). Values specified in JSON or YAML format are available in the global config dictionary inside the workflow. Multiple files overwrite each other in the given order. Thereby missing keys in previous config files are extended by following configfiles. Note that this order also includes a config file defined in the workflow definition itself (which will come first). (default: None) --envvars VARNAME [VARNAME ...] Environment variables to pass to cloud jobs. (default: None) --directory DIR, -d DIR Specify working directory (relative paths in the snakefile will use this as their origin). (default: None) --touch, -t Touch output files (mark them up to date without really changing them) instead of running their commands. This is used to pretend that the rules were executed, in order to fool future invocations of snakemake. Fails if a file does not yet exist. Note that this will only touch files that would otherwise be recreated by Snakemake (e.g. because their input files are newer). For enforcing a touch, combine this with --force, --forceall, or --forcerun. Note however that you loose the provenance information when the files have been created in realitiy. Hence, this should be used only as a last resort. (default: False) --keep-going, -k Go on with independent jobs if a job fails. (default: False) --rerun-triggers {mtime,params,input,software-env,code} [{mtime,params,input,software-env,code} ...] Define what triggers the rerunning of a job. By default, all triggers are used, which guarantees that results are consistent with the workflow code and configuration. If you rather prefer the traditional way of just considering file modification dates, use ' --rerun-trigger mtime'. (default: ['mtime', 'params', 'input', 'software-env', 'code']) --force, -f Force the execution of the selected target or the first rule regardless of already created output. (default: False) --forceall, -F Force the execution of the selected (or the first) rule and all rules it is dependent on regardless of already created output. (default: False) --forcerun [TARGET ...], -R [TARGET ...] Force the re-execution or creation of the given rules or files. Use this option if you changed a rule and want to have all its output in your workflow updated. (default: None) --prioritize TARGET [TARGET ...], -P TARGET [TARGET ...] Tell the scheduler to assign creation of given targets (and all their dependencies) highest priority. (EXPERIMENTAL) (default: None) --batch RULE=BATCH/BATCHES Only create the given BATCH of the input files of the given RULE. This can be used to iteratively run parts of very large workflows. Only the execution plan of the relevant part of the workflow has to be calculated, thereby speeding up DAG computation. It is recommended to provide the most suitable rule for batching when documenting a workflow. It should be some aggregating rule that would be executed only once, and has a large number of input files. For example, it can be a rule that aggregates over samples. (default: None) --until TARGET [TARGET ...], -U TARGET [TARGET ...] Runs the pipeline until it reaches the specified rules or files. Only runs jobs that are dependencies of the specified rule or files, does not run sibling DAGs. (default: None) --omit-from TARGET [TARGET ...], -O TARGET [TARGET ...] Prevent the execution or creation of the given rules or files as well as any rules or files that are downstream of these targets in the DAG. Also runs jobs in sibling DAGs that are independent of the rules or files specified here. (default: None) --rerun-incomplete, --ri Re-run all jobs the output of which is recognized as incomplete. (default: False) --shadow-prefix DIR Specify a directory in which the 'shadow' directory is created. If not supplied, the value is set to the '.snakemake' directory relative to the working directory. (default: None) --scheduler [{ilp,greedy}] Specifies if jobs are selected by a greedy algorithm or by solving an ilp. The ilp scheduler aims to reduce runtime and hdd usage by best possible use of resources. (default: greedy) --wms-monitor [WMS_MONITOR] IP and port of workflow management system to monitor the execution of snakemake (e.g. http://127.0.0.1:5000) Note that if your service requires an authorization token, you must export WMS_MONITOR_TOKEN in the environment. (default: None) --wms-monitor-arg [NAME=VALUE ...] If the workflow management service accepts extra arguments, provide. them in key value pairs with --wms-monitor-arg. For example, to run an existing workflow using a wms monitor, you can provide the pair id=12345 and the arguments will be provided to the endpoint to first interact with the workflow (default: None) --scheduler-ilp-solver {PULP_CBC_CMD} Specifies solver to be utilized when selecting ilp- scheduler. (default: COIN_CMD) --scheduler-solver-path SCHEDULER_SOLVER_PATH Set the PATH to search for scheduler solver binaries (internal use only). (default: None) --conda-base-path CONDA_BASE_PATH Path of conda base installation (home of conda, mamba, activate) (internal use only). (default: None) --no-subworkflows, --nosw Do not evaluate or execute subworkflows. (default: False) GROUPING: --groups GROUPS [GROUPS ...] Assign rules to groups (this overwrites any group definitions from the workflow). (default: None) --group-components GROUP_COMPONENTS [GROUP_COMPONENTS ...] Set the number of connected components a group is allowed to span. By default, this is 1, but this flag allows to extend this. This can be used to run e.g. 3 jobs of the same rule in the same group, although they are not connected. It can be helpful for putting together many small jobs or benefitting of shared memory setups. (default: None) REPORTS: --report [FILE] Create an HTML report with results and statistics. This can be either a .html file or a .zip file. In the former case, all results are embedded into the .html (this only works for small data). In the latter case, results are stored along with a file report.html in the zip archive. If no filename is given, an embedded report.html is the default. (default: None) --report-stylesheet CSSFILE Custom stylesheet to use for report. In particular, this can be used for branding the report with e.g. a custom logo, see docs. (default: None) NOTEBOOKS: --draft-notebook TARGET Draft a skeleton notebook for the rule used to generate the given target file. This notebook can then be opened in a jupyter server, exeucted and implemented until ready. After saving, it will automatically be reused in non-interactive mode by Snakemake for subsequent jobs. (default: None) --edit-notebook TARGET Interactively edit the notebook associated with the rule used to generate the given target file. This will start a local jupyter notebook server. Any changes to the notebook should be saved, and the server has to be stopped by closing the notebook and hitting the 'Quit' button on the jupyter dashboard. Afterwards, the updated notebook will be automatically stored in the path defined in the rule. If the notebook is not yet present, this will create an empty draft. (default: None) --notebook-listen IP:PORT The IP address and PORT the notebook server used for editing the notebook (--edit-notebook) will listen on. (default: localhost:8888) UTILITIES: --lint [{text,json}] Perform linting on the given workflow. This will print snakemake specific suggestions to improve code quality (work in progress, more lints to be added in the future). If no argument is provided, plain text output is used. (default: None) --generate-unit-tests [TESTPATH] Automatically generate unit tests for each workflow rule. This assumes that all input files of each job are already present. Rules without a job with present input files will be skipped (a warning will be issued). For each rule, one test case will be created in the specified test folder (.tests/unit by default). After successfull execution, tests can be run with 'pytest TESTPATH'. (default: None) --containerize Print a Dockerfile that provides an execution environment for the workflow, including all conda environments. (default: False) --export-cwl FILE Compile workflow to CWL and store it in given FILE. (default: None) --list, -l Show available rules in given Snakefile. (default: False) --list-target-rules, --lt Show available target rules in given Snakefile. (default: False) --dag Do not execute anything and print the directed acyclic graph of jobs in the dot language. Recommended use on Unix systems: snakemake --dag | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --rulegraph Do not execute anything and print the dependency graph of rules in the dot language. This will be less crowded than above DAG of jobs, but also show less information. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --rulegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --filegraph Do not execute anything and print the dependency graph of rules with their input and output files in the dot language. This is an intermediate solution between above DAG of jobs and the rule graph. Note that each rule is displayed once, hence the displayed graph will be cyclic if a rule appears in several steps of the workflow. Use this if above option leads to a DAG that is too large. Recommended use on Unix systems: snakemake --filegraph | dot | displayNote print statements in your Snakefile may interfere with visualization. (default: False) --d3dag Print the DAG in D3.js compatible JSON format. (default: False) --summary, -S Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, status, plan. Thereby rule version contains the versionthe file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --detailed-summary, -D Print a summary of all files created by the workflow. The has the following columns: filename, modification time, rule version, input file(s), shell command, status, plan. Thereby rule version contains the version the file was created with (see the version keyword of rules), and status denotes whether the file is missing, its input files are newer or if version or implementation of the rule changed since file creation. The input file and shell command columns are self explanatory. Finally the last column denotes whether the file will be updated or created during the next workflow execution. (default: False) --archive FILE Archive the workflow into the given tar archive FILE. The archive will be created such that the workflow can be re-executed on a vanilla system. The function needs conda and git to be installed. It will archive every file that is under git version control. Note that it is best practice to have the Snakefile, config files, and scripts under version control. Hence, they will be included in the archive. Further, it will add input files that are not generated by by the workflow itself and conda environments. Note that symlinks are dereferenced. Supported formats are .tar, .tar.gz, .tar.bz2 and .tar.xz. (default: None) --cleanup-metadata FILE [FILE ...], --cm FILE [FILE ...] Cleanup the metadata of given files. That means that snakemake removes any tracked version info, and any marks that files are incomplete. (default: None) --cleanup-shadow Cleanup old shadow directories which have not been deleted due to failures or power loss. (default: False) --skip-script-cleanup Don't delete wrapper scripts used for execution (default: False) --unlock Remove a lock on the working directory. (default: False) --list-version-changes, --lv List all output files that have been created with a different version (as determined by the version keyword). (default: False) --list-code-changes, --lc List all output files for which the rule body (run or shell) have changed in the Snakefile. (default: False) --list-input-changes, --li List all output files for which the defined input files have changed in the Snakefile (e.g. new input files were added in the rule definition or files were renamed). For listing input file modification in the filesystem, use --summary. (default: False) --list-params-changes, --lp List all output files for which the defined params have changed in the Snakefile. (default: False) --list-untracked, --lu List all files in the working directory that are not used in the workflow. This can be used e.g. for identifying leftover files. Hidden files and directories are ignored. (default: False) --delete-all-output Remove all files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. Write-protected files are not removed. Nevertheless, use with care! (default: False) --delete-temp-output Remove all temporary files generated by the workflow. Use together with --dry-run to list files without actually deleting anything. Note that this will not recurse into subworkflows. (default: False) --bash-completion Output code to register bash completion for snakemake. Put the following in your .bashrc (including the accents): `snakemake --bash-completion` or issue it in an open terminal session. (default: False) --keep-incomplete Do not remove incomplete output files by failed jobs. (default: False) --drop-metadata Drop metadata file tracking information after job finishes. Provenance-information based reports (e.g. --report and the --list_x_changes functions) will be empty or incomplete. (default: False) --version, -v show program's version number and exit OUTPUT: --reason, -r Print the reason for each executed rule (deprecated, always true now). (default: False) --gui [PORT] Serve an HTML based user interface to the given network and port e.g. 168.129.10.15:8000. By default Snakemake is only available in the local network (default port: 8000). To make Snakemake listen to all ip addresses add the special host address 0.0.0.0 to the url (0.0.0.0:8000). This is important if Snakemake is used in a virtualised environment like Docker. If possible, a browser window is opened. (default: None) --printshellcmds, -p Print out the shell commands that will be executed. (default: False) --debug-dag Print candidate and selected jobs (including their wildcards) while inferring DAG. This can help to debug unexpected DAG topology or errors. (default: False) --stats FILE Write stats about Snakefile execution in JSON format to the given file. (default: None) --nocolor Do not use a colored output. (default: False) --quiet [{progress,rules,all} ...], -q [{progress,rules,all} ...] Do not output certain information. If used without arguments, do not output any progress or rule information. Defining 'all' results in no information being printed at all. (default: None) --print-compilation Print the python representation of the workflow. (default: False) --verbose Print debugging output. (default: False) BEHAVIOR: --force-use-threads Force threads rather than processes. Helpful if shared memory (/dev/shm) is full or unavailable. (default: False) --allow-ambiguity, -a Don't check for ambiguous rules and simply use the first if several can produce the same file. This allows the user to prioritize rules by their order in the snakefile. (default: False) --nolock Do not lock the working directory (default: False) --ignore-incomplete, --ii Do not check for incomplete output files. (default: False) --max-inventory-time SECONDS Spend at most SECONDS seconds to create a file inventory for the working directory. The inventory vastly speeds up file modification and existence checks when computing which jobs need to be executed. However, creating the inventory itself can be slow, e.g. on network file systems. Hence, we do not spend more than a given amount of time and fall back to individual checks for the rest. (default: 20) --latency-wait SECONDS, --output-wait SECONDS, -w SECONDS Wait given seconds if an output file of a job is not present after the job finished. This helps if your filesystem suffers from latency (default 5). (default: 5) --wait-for-files [FILE ...] Wait --latency-wait seconds for these files to be present before executing the workflow. This option is used internally to handle filesystem latency in cluster environments. (default: None) --wait-for-files-file FILE Same behaviour as --wait-for-files, but file list is stored in file instead of being passed on the commandline. This is useful when the list of files is too long to be passed on the commandline. (default: None) --notemp, --nt Ignore temp() declarations. This is useful when running only a part of the workflow, since temp() would lead to deletion of probably needed files by other parts of the workflow. (default: False) --all-temp Mark all output files as temp files. This can be useful for CI testing, in order to save space. (default: False) --keep-remote Keep local copies of remote input files. (default: False) --keep-target-files Do not adjust the paths of given target files relative to the working directory. (default: False) --allowed-rules ALLOWED_RULES [ALLOWED_RULES ...] Only consider given rules. If omitted, all rules in Snakefile are used. Note that this is intended primarily for internal use and may lead to unexpected results otherwise. (default: None) --local-groupid LOCAL_GROUPID Name for local groupid, meant for internal use only. (default: local) --max-jobs-per-second MAX_JOBS_PER_SECOND Maximal number of cluster/drmaa jobs per second, default is 10, fractions allowed. (default: 10) --max-status-checks-per-second MAX_STATUS_CHECKS_PER_SECOND Maximal number of job status checks per second, default is 10, fractions allowed. (default: 10) -T RETRIES, --retries RETRIES, --restart-times RETRIES Number of times to restart failing jobs (defaults to 0). (default: 0) --attempt ATTEMPT Internal use only: define the initial value of the attempt parameter (default: 1). (default: 1) --wrapper-prefix WRAPPER_PREFIX Prefix for URL created from wrapper directive (default: https://github.com/snakemake/snakemake- wrappers/raw/). Set this to a different URL to use your fork or a local clone of the repository, e.g., use a git URL like 'git+file://path/to/your/local/clone@'. (default: https://github.com/snakemake/snakemake-wrappers/raw/) --default-remote-provider {S3,GS,FTP,SFTP,S3Mocked,gfal,gridftp,iRODS,AzBlob,XRootD} Specify default remote provider to be used for all input and output files that don't yet specify one. (default: None) --default-remote-prefix DEFAULT_REMOTE_PREFIX Specify prefix for default remote provider. E.g. a bucket name. (default: ) --no-shared-fs Do not assume that jobs share a common file system. When this flag is activated, Snakemake will assume that the filesystem on a cluster node is not shared with other nodes. For example, this will lead to downloading remote files on each cluster node separately. Further, it won't take special measures to deal with filesystem latency issues. This option will in most cases only make sense in combination with --default-remote-provider. Further, when using --cluster you will have to also provide --cluster- status. Only activate this if you know what you are doing. (default: False) --greediness GREEDINESS Set the greediness of scheduling. This value between 0 and 1 determines how careful jobs are selected for execution. The default value (1.0) provides the best speed and still acceptable scheduling quality. (default: None) --no-hooks Do not invoke onstart, onsuccess or onerror hooks after execution. (default: False) --overwrite-shellcmd OVERWRITE_SHELLCMD Provide a shell command that shall be executed instead of those given in the workflow. This is for debugging purposes only. (default: None) --debug Allow to debug rules with e.g. PDB. This flag allows to set breakpoints in run blocks. (default: False) --runtime-profile FILE Profile Snakemake and write the output to FILE. This requires yappi to be installed. (default: None) --mode {0,1,2} Set execution mode of Snakemake (internal use only). (default: 0) --show-failed-logs Automatically display logs of failed jobs. (default: False) --log-handler-script FILE Provide a custom script containing a function 'def log_handler(msg):'. Snakemake will call this function for every logging output (given as a dictionary msg)allowing to e.g. send notifications in the form of e.g. slack messages or emails. (default: None) --log-service {none,slack,wms} Set a specific messaging service for logging output.Snakemake will notify the service on errors and completed execution.Currently slack and workflow management system (wms) are supported. (default: None) CLUSTER: --cluster CMD Execute snakemake rules with the given submit command, e.g. qsub. Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. The submit command can be decorated to make it aware of certain job properties (name, rulename, input, output, params, wildcards, log, threads and dependencies (see the argument below)), e.g.: $ snakemake --cluster 'qsub -pe threaded {threads}'. (default: None) --cluster-sync CMD cluster submission command will block, returning the remote exitstatus upon remote termination (for example, this should be usedif the cluster command is 'qsub -sync y' (SGE) (default: None) --drmaa [ARGS] Execute snakemake on a cluster accessed via DRMAA, Snakemake compiles jobs into scripts that are submitted to the cluster with the given command, once all input files for a particular job are present. ARGS can be used to specify options of the underlying cluster system, thereby using the job properties name, rulename, input, output, params, wildcards, log, threads and dependencies, e.g.: --drmaa ' -pe threaded {threads}'. Note that ARGS must be given in quotes and with a leading whitespace. (default: None) --cluster-config FILE, -u FILE A JSON or YAML file that defines the wildcards used in 'cluster'for specific rules, instead of having them specified in the Snakefile. For example, for rule 'job' you may define: { 'job' : { 'time' : '24:00:00' } } to specify the time for rule 'job'. You can specify more than one file. The configuration files are merged with later values overriding earlier ones. This option is deprecated in favor of using --profile, see docs. (default: []) --immediate-submit, --is Immediately submit all jobs to the cluster instead of waiting for present input files. This will fail, unless you make the cluster aware of job dependencies, e.g. via: $ snakemake --cluster 'sbatch --dependency {dependencies}. Assuming that your submit script (here sbatch) outputs the generated job id to the first stdout line, {dependencies} will be filled with space separated job ids this job depends on. Does not work for workflows that contain checkpoint rules. (default: False) --jobscript SCRIPT, --js SCRIPT Provide a custom job script for submission to the cluster. The default script resides as 'jobscript.sh' in the installation directory. (default: None) --jobname NAME, --jn NAME Provide a custom name for the jobscript that is submitted to the cluster (see --cluster). NAME is \"snakejob.{name}.{jobid}.sh\" per default. The wildcard {jobid} has to be present in the name. (default: snakejob.{name}.{jobid}.sh) --cluster-status CLUSTER_STATUS Status command for cluster execution. This is only considered in combination with the --cluster flag. If provided, Snakemake will use the status command to determine if a job has finished successfully or failed. For this it is necessary that the submit command provided to --cluster returns the cluster job id. Then, the status command will be invoked with the job id. Snakemake expects it to return 'success' if the job was successfull, 'failed' if the job failed and 'running' if the job still runs. (default: None) --cluster-cancel CLUSTER_CANCEL Specify a command that allows to stop currently running jobs. The command will be passed a single argument, the job id. (default: None) --cluster-cancel-nargs CLUSTER_CANCEL_NARGS Specify maximal number of job ids to pass to --cluster-cancel command, defaults to 1000. (default: 1000) --cluster-sidecar CLUSTER_SIDECAR Optional command to start a sidecar process during cluster execution. Only active when --cluster is given as well. (default: None) --drmaa-log-dir DIR Specify a directory in which stdout and stderr files of DRMAA jobs will be written. The value may be given as a relative path, in which case Snakemake will use the current invocation directory as the origin. If given, this will override any given '-o' and/or '-e' native specification. If not given, all DRMAA stdout and stderr files are written to the current working directory. (default: None) KUBERNETES: --kubernetes [NAMESPACE] Execute workflow in a kubernetes cluster (in the cloud). NAMESPACE is the namespace you want to use for your job (if nothing specified: 'default'). Usually, this requires --default-remote-provider and --default- remote-prefix to be set to a S3 or GS bucket where your . data shall be stored. It is further advisable to activate conda integration via --use-conda. (default: None) --container-image IMAGE Docker image to use, e.g., when submitting jobs to kubernetes Defaults to 'https://hub.docker.com/r/snakemake/snakemake', tagged with the same version as the currently running Snakemake instance. Note that overwriting this value is up to your responsibility. Any used image has to contain a working snakemake installation that is compatible with (or ideally the same as) the currently running version. (default: None) TIBANNA: --tibanna Execute workflow on AWS cloud using Tibanna. This requires --default-remote-prefix to be set to S3 bucket name and prefix (e.g. 'bucketname/subdirectory') where input is already stored and output will be sent to. Using --tibanna implies --default-resources is set as default. Optionally, use --precommand to specify any preparation command to run before snakemake command on the cloud (inside snakemake container on Tibanna VM). Also, --use-conda, --use-singularity, --config, --configfile are supported and will be carried over. (default: False) --tibanna-sfn TIBANNA_SFN Name of Tibanna Unicorn step function (e.g. tibanna_unicorn_monty).This works as serverless scheduler/resource allocator and must be deployed first using tibanna cli. (e.g. tibanna deploy_unicorn --usergroup=monty --buckets=bucketname) (default: None) --precommand PRECOMMAND Any command to execute before snakemake command on AWS cloud such as wget, git clone, unzip, etc. This is used with --tibanna.Do not include input/output download/upload commands - file transfer between S3 bucket and the run environment (container) is automatically handled by Tibanna. (default: None) --tibanna-config TIBANNA_CONFIG [TIBANNA_CONFIG ...] Additional tibanna config e.g. --tibanna-config spot_instance=true subnet=<subnet_id> security group=<security_group_id> (default: None) GOOGLE_LIFE_SCIENCE: --google-lifesciences Execute workflow on Google Cloud cloud using the Google Life. Science API. This requires default application credentials (json) to be created and export to the environment to use Google Cloud Storage, Compute Engine, and Life Sciences. The credential file should be exported as GOOGLE_APPLICATION_CREDENTIALS for snakemake to discover. Also, --use-conda, --use- singularity, --config, --configfile are supported and will be carried over. (default: False) --google-lifesciences-regions GOOGLE_LIFESCIENCES_REGIONS [GOOGLE_LIFESCIENCES_REGIONS ...] Specify one or more valid instance regions (defaults to US) (default: ['us-east1', 'us-west1', 'us- central1']) --google-lifesciences-location GOOGLE_LIFESCIENCES_LOCATION The Life Sciences API service used to schedule the jobs. E.g., us-centra1 (Iowa) and europe-west2 (London) Watch the terminal output to see all options found to be available. If not specified, defaults to the first found with a matching prefix from regions specified with --google-lifesciences-regions. (default: None) --google-lifesciences-keep-cache Cache workflows in your Google Cloud Storage Bucket specified by --default-remote-prefix/{source}/{cache}. Each workflow working directory is compressed to a .tar.gz, named by the hash of the contents, and kept in Google Cloud Storage. By default, the caches are deleted at the shutdown step of the workflow. (default: False) TES: --tes URL Send workflow tasks to GA4GH TES server specified by url. (default: None) CONDA: --use-conda If defined in the rule, run job in a conda environment. If this flag is not set, the conda directive is ignored. (default: False) --conda-not-block-search-path-envvars Do not block environment variables that modify the search path (R_LIBS, PYTHONPATH, PERL5LIB, PERLLIB) when using conda environments. (default: False) --list-conda-envs List all conda environments and their location on disk. (default: False) --conda-prefix DIR Specify a directory in which the 'conda' and 'conda- archive' directories are created. These are used to store conda environments and their archives, respectively. If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-conda` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. The value can also be provided via the environment variable $SNAKEMAKE_CONDA_PREFIX. (default: None) --conda-cleanup-envs Cleanup unused conda environments. (default: False) --conda-cleanup-pkgs [{tarballs,cache}] Cleanup conda packages after creating environments. In case of 'tarballs' mode, will clean up all downloaded package tarballs. In case of 'cache' mode, will additionally clean up unused package caches. If mode is omitted, will default to only cleaning up the tarballs. (default: None) --conda-create-envs-only If specified, only creates the job-specific conda environments then exits. The `--use-conda` flag must also be set. (default: False) --conda-frontend {conda,mamba} Choose the conda frontend for installing environments. Mamba is much faster and highly recommended. (default: mamba) SINGULARITY: --use-singularity If defined in the rule, run job within a singularity container. If this flag is not set, the singularity directive is ignored. (default: False) --singularity-prefix DIR Specify a directory in which singularity images will be stored.If not supplied, the value is set to the '.snakemake' directory relative to the invocation directory. If supplied, the `--use-singularity` flag must also be set. The value may be given as a relative path, which will be extrapolated to the invocation directory, or as an absolute path. (default: None) --singularity-args ARGS Pass additional args to singularity. (default: ) ENVIRONMENT MODULES: --use-envmodules If defined in the rule, run job within the given environment modules, loaded in the given order. This can be combined with --use-conda and --use- singularity, which will then be only used as a fallback for rules which don't define environment modules. (default: False) If an arg is specified in more than one place, then commandline values override environment variables which override defaults.","title":"Help content"},{"location":"descriptors/snakemake_snakemake/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): snakemake","title":"Installation on mega-linter Docker image"},{"location":"descriptors/spell/","text":"SPELL Linters Linter Configuration key Status misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT Linted files Configuration in MegaLinter Variable Description Default value SPELL_FILTER_REGEX_INCLUDE Custom regex including filter SPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SPELL linters"},{"location":"descriptors/spell/#spell","text":"","title":"SPELL"},{"location":"descriptors/spell/#linters","text":"Linter Configuration key Status misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Linters"},{"location":"descriptors/spell/#linted-files","text":"","title":"Linted files"},{"location":"descriptors/spell/#configuration-in-megalinter","text":"Variable Description Default value SPELL_FILTER_REGEX_INCLUDE Custom regex including filter SPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/spell_cspell/","text":"cspell MegaLinter generates content of a .cspell.json config file at the end of its TextReporter artifact Copy it at the root of your repository, read it, remove real spelling errors (after have corrected them in the source), and you're good to go ! cspell documentation Version in MegaLinter: 6.12.0 Visit Official Web Site See How to configure cspell rules See How to disable cspell rules in files Configuration in MegaLinter Enable cspell by adding SPELL_CSPELL in ENABLE_LINTERS variable Disable cspell by adding SPELL_CSPELL in DISABLE_LINTERS variable Variable Description Default value SPELL_CSPELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_CSPELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SPELL_CSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SPELL_CSPELL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SPELL_CSPELL_PRE_COMMANDS List of bash commands to run before the linter None SPELL_CSPELL_POST_COMMANDS List of bash commands to run after the linter None SPELL_CSPELL_CONFIG_FILE cspell configuration file name Use LINTER_DEFAULT to let the linter find it .cspell.json SPELL_CSPELL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_CSPELL_DISABLE_ERRORS Run linter but consider errors as warnings false SPELL_CSPELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use cspell in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Code Spell Checker MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files linted by all other active linters will be linted How the linting is performed cspell is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls cspell myfile.any cspell -c cspell.json myfile.any Help content Usage: cspell [options] [command] Spelling Checker for Code Options: -V, --version output the version number -h, --help display help for command Commands: lint [options] [globs...] Check spelling trace [options] [words...] Trace words -- Search for words in the configuration and dictionaries. check [options] <files...> Spell check file(s) and display the result. The full file is displayed in color. suggestions|sug [options] [words...] Spelling Suggestions for words. link Link dictionaries and other settings to the cspell global config. help [command] display help for command Installation on mega-linter Docker image NPM packages (node.js): cspell","title":"cspell"},{"location":"descriptors/spell_cspell/#cspell","text":"MegaLinter generates content of a .cspell.json config file at the end of its TextReporter artifact Copy it at the root of your repository, read it, remove real spelling errors (after have corrected them in the source), and you're good to go !","title":"cspell"},{"location":"descriptors/spell_cspell/#cspell-documentation","text":"Version in MegaLinter: 6.12.0 Visit Official Web Site See How to configure cspell rules See How to disable cspell rules in files","title":"cspell documentation"},{"location":"descriptors/spell_cspell/#configuration-in-megalinter","text":"Enable cspell by adding SPELL_CSPELL in ENABLE_LINTERS variable Disable cspell by adding SPELL_CSPELL in DISABLE_LINTERS variable Variable Description Default value SPELL_CSPELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_CSPELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SPELL_CSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SPELL_CSPELL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SPELL_CSPELL_PRE_COMMANDS List of bash commands to run before the linter None SPELL_CSPELL_POST_COMMANDS List of bash commands to run after the linter None SPELL_CSPELL_CONFIG_FILE cspell configuration file name Use LINTER_DEFAULT to let the linter find it .cspell.json SPELL_CSPELL_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_CSPELL_DISABLE_ERRORS Run linter but consider errors as warnings false SPELL_CSPELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/spell_cspell/#ide-integration","text":"Use cspell in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Code Spell Checker","title":"IDE Integration"},{"location":"descriptors/spell_cspell/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/spell_cspell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/spell_cspell/#how-are-identified-applicable-files","text":"If this linter is active, all files linted by all other active linters will be linted","title":"How are identified applicable files"},{"location":"descriptors/spell_cspell/#how-the-linting-is-performed","text":"cspell is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/spell_cspell/#example-calls","text":"cspell myfile.any cspell -c cspell.json myfile.any","title":"Example calls"},{"location":"descriptors/spell_cspell/#help-content","text":"Usage: cspell [options] [command] Spelling Checker for Code Options: -V, --version output the version number -h, --help display help for command Commands: lint [options] [globs...] Check spelling trace [options] [words...] Trace words -- Search for words in the configuration and dictionaries. check [options] <files...> Spell check file(s) and display the result. The full file is displayed in color. suggestions|sug [options] [words...] Spelling Suggestions for words. link Link dictionaries and other settings to the cspell global config. help [command] display help for command","title":"Help content"},{"location":"descriptors/spell_cspell/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): cspell","title":"Installation on mega-linter Docker image"},{"location":"descriptors/spell_misspell/","text":"misspell misspell detects and corrects commonly misspelled english words misspell documentation Version in MegaLinter: 0.3.4 Visit Official Web Site Configuration in MegaLinter Enable misspell by adding SPELL_MISSPELL in ENABLE_LINTERS variable Disable misspell by adding SPELL_MISSPELL in DISABLE_LINTERS variable Enable auto-fixes by adding SPELL_MISSPELL in APPLY_FIXES variable Variable Description Default value SPELL_MISSPELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_MISSPELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SPELL_MISSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SPELL_MISSPELL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SPELL_MISSPELL_PRE_COMMANDS List of bash commands to run before the linter None SPELL_MISSPELL_POST_COMMANDS List of bash commands to run after the linter None SPELL_MISSPELL_DISABLE_ERRORS Run linter but consider errors as warnings false SPELL_MISSPELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files If this linter is active, all files linted by all other active linters will be linted How the linting is performed misspell is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls misspell myfile.any Help content Usage of misspell: -debug Debug matching, very slow -error Exit with 2 if misspelling found -f string 'csv', 'sqlite3' or custom Golang template for output -i string ignore the following corrections, comma separated -j int Number of workers, 0 = number of CPUs -legal Show legal information and exit -locale string Correct spellings using locale perferances for US or UK. Default is to use a neutral variety of English. Setting locale to US will correct the British spelling of 'colour' to 'color' -o string output file or [stderr|stdout|] (default \"stdout\") -q Do not emit misspelling output -source string Source mode: auto=guess, go=golang source, text=plain or markdown-like text (default \"auto\") -v Show version and exit -w Overwrite file with corrections (default is just to display) Installation on mega-linter Docker image Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/misspell\" \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && curl -L -o ${ML_THIRD_PARTY_DIR}/install-misspell.sh https://git.io/misspell \\ && sh .${ML_THIRD_PARTY_DIR}/install-misspell.sh \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete \\ && find /tmp -path '/tmp/tmp.*' -type f -name 'misspell*' -delete -o -type d -empty -delete","title":"misspell"},{"location":"descriptors/spell_misspell/#misspell","text":"misspell detects and corrects commonly misspelled english words","title":"misspell"},{"location":"descriptors/spell_misspell/#misspell-documentation","text":"Version in MegaLinter: 0.3.4 Visit Official Web Site","title":"misspell documentation"},{"location":"descriptors/spell_misspell/#configuration-in-megalinter","text":"Enable misspell by adding SPELL_MISSPELL in ENABLE_LINTERS variable Disable misspell by adding SPELL_MISSPELL in DISABLE_LINTERS variable Enable auto-fixes by adding SPELL_MISSPELL in APPLY_FIXES variable Variable Description Default value SPELL_MISSPELL_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_MISSPELL_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SPELL_MISSPELL_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SPELL_MISSPELL_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SPELL_MISSPELL_PRE_COMMANDS List of bash commands to run before the linter None SPELL_MISSPELL_POST_COMMANDS List of bash commands to run after the linter None SPELL_MISSPELL_DISABLE_ERRORS Run linter but consider errors as warnings false SPELL_MISSPELL_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/spell_misspell/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/spell_misspell/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/spell_misspell/#how-are-identified-applicable-files","text":"If this linter is active, all files linted by all other active linters will be linted","title":"How are identified applicable files"},{"location":"descriptors/spell_misspell/#how-the-linting-is-performed","text":"misspell is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/spell_misspell/#example-calls","text":"misspell myfile.any","title":"Example calls"},{"location":"descriptors/spell_misspell/#help-content","text":"Usage of misspell: -debug Debug matching, very slow -error Exit with 2 if misspelling found -f string 'csv', 'sqlite3' or custom Golang template for output -i string ignore the following corrections, comma separated -j int Number of workers, 0 = number of CPUs -legal Show legal information and exit -locale string Correct spellings using locale perferances for US or UK. Default is to use a neutral variety of English. Setting locale to US will correct the British spelling of 'colour' to 'color' -o string output file or [stderr|stdout|] (default \"stdout\") -q Do not emit misspelling output -source string Source mode: auto=guess, go=golang source, text=plain or markdown-like text (default \"auto\") -v Show version and exit -w Overwrite file with corrections (default is just to display)","title":"Help content"},{"location":"descriptors/spell_misspell/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN ML_THIRD_PARTY_DIR=\"/third-party/misspell\" \\ && mkdir -p ${ML_THIRD_PARTY_DIR} \\ && curl -L -o ${ML_THIRD_PARTY_DIR}/install-misspell.sh https://git.io/misspell \\ && sh .${ML_THIRD_PARTY_DIR}/install-misspell.sh \\ && find ${ML_THIRD_PARTY_DIR} -type f -not -name 'LICENSE*' -delete -o -type d -empty -delete \\ && find /tmp -path '/tmp/tmp.*' -type f -name 'misspell*' -delete -o -type d -empty -delete","title":"Installation on mega-linter Docker image"},{"location":"descriptors/spell_proselint/","text":"a linter for prose proselint documentation Version in MegaLinter: 0.13.0 Visit Official Web Site See How to configure proselint rules See Index of problems detected by proselint Configuration in MegaLinter Enable proselint by adding SPELL_PROSELINT in ENABLE_LINTERS variable Disable proselint by adding SPELL_PROSELINT in DISABLE_LINTERS variable Variable Description Default value SPELL_PROSELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_PROSELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SPELL_PROSELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SPELL_PROSELINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SPELL_PROSELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\", \".txt\"] SPELL_PROSELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SPELL_PROSELINT_PRE_COMMANDS List of bash commands to run before the linter None SPELL_PROSELINT_POST_COMMANDS List of bash commands to run after the linter None SPELL_PROSELINT_CONFIG_FILE proselint configuration file name Use LINTER_DEFAULT to let the linter find it .proselintrc SPELL_PROSELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_PROSELINT_DISABLE_ERRORS Run linter but consider errors as warnings false SPELL_PROSELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use proselint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-proselint Visit Web Site IDEA Proselint Sublime Text SublimeLinter-contrib-proselint Visit Web Site Visual Studio Code VsCode Proselint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if one of these files is found: .proselintrc, proselint/config.json File extensions: .md , .txt How the linting is performed proselint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls proselint --config .proselintrc myfile.md myfile2.txt myfile3.rst Help content Usage: proselint [OPTIONS] [PATHS]... Create the CLI for proselint, a linter for prose. Options: -v, --version Show the version and exit. --config PATH Path to configuration file. -d, --debug Give verbose output. -c, --clean Clear the cache. -j, --json Output as JSON. -t, --time Time on a corpus. --demo Run over demo file. --compact Shorten output. --dump-config Prints current config. --dump-default-config Prints default config. -h, --help Show this message and exit. Installation on mega-linter Docker image PIP packages (Python): proselint","title":"proselint"},{"location":"descriptors/spell_proselint/#proselint-documentation","text":"Version in MegaLinter: 0.13.0 Visit Official Web Site See How to configure proselint rules See Index of problems detected by proselint","title":"proselint documentation"},{"location":"descriptors/spell_proselint/#configuration-in-megalinter","text":"Enable proselint by adding SPELL_PROSELINT in ENABLE_LINTERS variable Disable proselint by adding SPELL_PROSELINT in DISABLE_LINTERS variable Variable Description Default value SPELL_PROSELINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SPELL_PROSELINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SPELL_PROSELINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SPELL_PROSELINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SPELL_PROSELINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".md\", \".txt\"] SPELL_PROSELINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SPELL_PROSELINT_PRE_COMMANDS List of bash commands to run before the linter None SPELL_PROSELINT_POST_COMMANDS List of bash commands to run after the linter None SPELL_PROSELINT_CONFIG_FILE proselint configuration file name Use LINTER_DEFAULT to let the linter find it .proselintrc SPELL_PROSELINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SPELL_PROSELINT_DISABLE_ERRORS Run linter but consider errors as warnings false SPELL_PROSELINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/spell_proselint/#ide-integration","text":"Use proselint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-proselint Visit Web Site IDEA Proselint Sublime Text SublimeLinter-contrib-proselint Visit Web Site Visual Studio Code VsCode Proselint","title":"IDE Integration"},{"location":"descriptors/spell_proselint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/spell_proselint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/spell_proselint/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .proselintrc, proselint/config.json File extensions: .md , .txt","title":"How are identified applicable files"},{"location":"descriptors/spell_proselint/#how-the-linting-is-performed","text":"proselint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/spell_proselint/#example-calls","text":"proselint --config .proselintrc myfile.md myfile2.txt myfile3.rst","title":"Example calls"},{"location":"descriptors/spell_proselint/#help-content","text":"Usage: proselint [OPTIONS] [PATHS]... Create the CLI for proselint, a linter for prose. Options: -v, --version Show the version and exit. --config PATH Path to configuration file. -d, --debug Give verbose output. -c, --clean Clear the cache. -j, --json Output as JSON. -t, --time Time on a corpus. --demo Run over demo file. --compact Shorten output. --dump-config Prints current config. --dump-default-config Prints default config. -h, --help Show this message and exit.","title":"Help content"},{"location":"descriptors/spell_proselint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): proselint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/sql/","text":"SQL Linters Linter Configuration key Status sql-lint SQL sqlfluff SQL tsqllint SQL Linted files File extensions: .sql Configuration in MegaLinter Variable Description Default value SQL_FILTER_REGEX_INCLUDE Custom regex including filter SQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SQL linters"},{"location":"descriptors/sql/#sql","text":"","title":"SQL"},{"location":"descriptors/sql/#linters","text":"Linter Configuration key Status sql-lint SQL sqlfluff SQL tsqllint SQL","title":"Linters"},{"location":"descriptors/sql/#linted-files","text":"File extensions: .sql","title":"Linted files"},{"location":"descriptors/sql/#configuration-in-megalinter","text":"Variable Description Default value SQL_FILTER_REGEX_INCLUDE Custom regex including filter SQL_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/sql_sql_lint/","text":"sql-lint sql-lint documentation Version in MegaLinter: 1.0.0 Visit Official Web Site See How to configure sql-lint rules If custom .sql-config.json config file is not found, .sql-config.json will be used See Index of problems detected by sql-lint Configuration in MegaLinter Enable sql-lint by adding SQL_SQL_LINT in ENABLE_LINTERS variable Disable sql-lint by adding SQL_SQL_LINT in DISABLE_LINTERS variable Variable Description Default value SQL_SQL_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_SQL_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SQL_SQL_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SQL_SQL_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SQL_SQL_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_SQL_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_SQL_LINT_PRE_COMMANDS List of bash commands to run before the linter None SQL_SQL_LINT_POST_COMMANDS List of bash commands to run after the linter None SQL_SQL_LINT_CONFIG_FILE sql-lint configuration file name Use LINTER_DEFAULT to let the linter find it .sql-config.json SQL_SQL_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_SQL_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false SQL_SQL_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use sql-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install vim ale Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .sql How the linting is performed sql-lint is called one time by identified file ( file CLI lint mode) Example calls sql-lint myfile.sql sql-lint --config .sql-config.json myfile.sql Help content Usage: sql-lint [options] Lint sql files and stdin for errors, oddities, and bad practices. Options: -V, --version output the version number --fix [string] The .sql string to fix (experimental and alpha) -d, --driver <string> The driver to use, must be one of ['mysql', 'postgres'] -v, --verbose Brings back information on the what it's linting and the tokens generated --format <string> The format of the output, can be one of ['simple', 'json'] (default: \"simple\") --host <string> The host for the database connection --user <string> The user for the database connection --password <string> The password for the database connection --port <string> The port for the database connection --config <string> The path to the configuration file --ignore-errors <string...> The errors to ignore (comma separated) -h, --help display help for command Installation on mega-linter Docker image NPM packages (node.js): sql-lint","title":"sql-lint"},{"location":"descriptors/sql_sql_lint/#sql-lint","text":"","title":"sql-lint"},{"location":"descriptors/sql_sql_lint/#sql-lint-documentation","text":"Version in MegaLinter: 1.0.0 Visit Official Web Site See How to configure sql-lint rules If custom .sql-config.json config file is not found, .sql-config.json will be used See Index of problems detected by sql-lint","title":"sql-lint documentation"},{"location":"descriptors/sql_sql_lint/#configuration-in-megalinter","text":"Enable sql-lint by adding SQL_SQL_LINT in ENABLE_LINTERS variable Disable sql-lint by adding SQL_SQL_LINT in DISABLE_LINTERS variable Variable Description Default value SQL_SQL_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_SQL_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SQL_SQL_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SQL_SQL_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file SQL_SQL_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_SQL_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_SQL_LINT_PRE_COMMANDS List of bash commands to run before the linter None SQL_SQL_LINT_POST_COMMANDS List of bash commands to run after the linter None SQL_SQL_LINT_CONFIG_FILE sql-lint configuration file name Use LINTER_DEFAULT to let the linter find it .sql-config.json SQL_SQL_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_SQL_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false SQL_SQL_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/sql_sql_lint/#ide-integration","text":"Use sql-lint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install vim ale Visit Web Site","title":"IDE Integration"},{"location":"descriptors/sql_sql_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/sql_sql_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/sql_sql_lint/#how-are-identified-applicable-files","text":"File extensions: .sql","title":"How are identified applicable files"},{"location":"descriptors/sql_sql_lint/#how-the-linting-is-performed","text":"sql-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/sql_sql_lint/#example-calls","text":"sql-lint myfile.sql sql-lint --config .sql-config.json myfile.sql","title":"Example calls"},{"location":"descriptors/sql_sql_lint/#help-content","text":"Usage: sql-lint [options] Lint sql files and stdin for errors, oddities, and bad practices. Options: -V, --version output the version number --fix [string] The .sql string to fix (experimental and alpha) -d, --driver <string> The driver to use, must be one of ['mysql', 'postgres'] -v, --verbose Brings back information on the what it's linting and the tokens generated --format <string> The format of the output, can be one of ['simple', 'json'] (default: \"simple\") --host <string> The host for the database connection --user <string> The user for the database connection --password <string> The password for the database connection --port <string> The port for the database connection --config <string> The path to the configuration file --ignore-errors <string...> The errors to ignore (comma separated) -h, --help display help for command","title":"Help content"},{"location":"descriptors/sql_sql_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): sql-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/sql_sqlfluff/","text":"sqlfluff documentation Version in MegaLinter: 1.3.2 Visit Official Web Site See How to configure sqlfluff rules If custom .sqlfluff config file is not found, .sqlfluff will be used See Index of problems detected by sqlfluff Configuration in MegaLinter Enable sqlfluff by adding SQL_SQLFLUFF in ENABLE_LINTERS variable Disable sqlfluff by adding SQL_SQLFLUFF in DISABLE_LINTERS variable Variable Description Default value SQL_SQLFLUFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_SQLFLUFF_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SQL_SQLFLUFF_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SQL_SQLFLUFF_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SQL_SQLFLUFF_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_SQLFLUFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_SQLFLUFF_PRE_COMMANDS List of bash commands to run before the linter None SQL_SQLFLUFF_POST_COMMANDS List of bash commands to run after the linter None SQL_SQLFLUFF_CONFIG_FILE sqlfluff configuration file name Use LINTER_DEFAULT to let the linter find it .sqlfluff SQL_SQLFLUFF_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_SQLFLUFF_DISABLE_ERRORS Run linter but consider errors as warnings false SQL_SQLFLUFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files Activated only if one of these files is found: .sqlfluff File extensions: .sql How the linting is performed sqlfluff is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls sqlfluff myfile.sql sqlfluff --config .sqlfluff myfile.sql myfile2.sql Help content Usage: sqlfluff [OPTIONS] COMMAND [ARGS]... SQLFluff is a modular SQL linter for humans. Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: dialects Show the current dialects available. fix Fix SQL files. lint Lint SQL files via passing a list of files or using stdin. parse Parse SQL files and just spit out the result. rules Show the current rules in use. version Show the version of sqlfluff. \b\bExamples: sqlfluff lint --dialect postgres . sqlfluff lint --dialect postgres --rules L042 . sqlfluff fix --dialect sqlite --rules L041,L042 src/queries sqlfluff parse --dialect sqlite --templater jinja src/queries/common.sql Installation on mega-linter Docker image PIP packages (Python): sqlfluff","title":"sqlfluff"},{"location":"descriptors/sql_sqlfluff/#sqlfluff-documentation","text":"Version in MegaLinter: 1.3.2 Visit Official Web Site See How to configure sqlfluff rules If custom .sqlfluff config file is not found, .sqlfluff will be used See Index of problems detected by sqlfluff","title":"sqlfluff documentation"},{"location":"descriptors/sql_sqlfluff/#configuration-in-megalinter","text":"Enable sqlfluff by adding SQL_SQLFLUFF in ENABLE_LINTERS variable Disable sqlfluff by adding SQL_SQLFLUFF in DISABLE_LINTERS variable Variable Description Default value SQL_SQLFLUFF_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_SQLFLUFF_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SQL_SQLFLUFF_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SQL_SQLFLUFF_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SQL_SQLFLUFF_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_SQLFLUFF_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_SQLFLUFF_PRE_COMMANDS List of bash commands to run before the linter None SQL_SQLFLUFF_POST_COMMANDS List of bash commands to run after the linter None SQL_SQLFLUFF_CONFIG_FILE sqlfluff configuration file name Use LINTER_DEFAULT to let the linter find it .sqlfluff SQL_SQLFLUFF_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_SQLFLUFF_DISABLE_ERRORS Run linter but consider errors as warnings false SQL_SQLFLUFF_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/sql_sqlfluff/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/sql_sqlfluff/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/sql_sqlfluff/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .sqlfluff File extensions: .sql","title":"How are identified applicable files"},{"location":"descriptors/sql_sqlfluff/#how-the-linting-is-performed","text":"sqlfluff is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/sql_sqlfluff/#example-calls","text":"sqlfluff myfile.sql sqlfluff --config .sqlfluff myfile.sql myfile2.sql","title":"Example calls"},{"location":"descriptors/sql_sqlfluff/#help-content","text":"Usage: sqlfluff [OPTIONS] COMMAND [ARGS]... SQLFluff is a modular SQL linter for humans. Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: dialects Show the current dialects available. fix Fix SQL files. lint Lint SQL files via passing a list of files or using stdin. parse Parse SQL files and just spit out the result. rules Show the current rules in use. version Show the version of sqlfluff. \b\bExamples: sqlfluff lint --dialect postgres . sqlfluff lint --dialect postgres --rules L042 . sqlfluff fix --dialect sqlite --rules L041,L042 src/queries sqlfluff parse --dialect sqlite --templater jinja src/queries/common.sql","title":"Help content"},{"location":"descriptors/sql_sqlfluff/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): sqlfluff","title":"Installation on mega-linter Docker image"},{"location":"descriptors/sql_tsqllint/","text":"tsqllint tsqllint documentation Version in MegaLinter: 1.14.5.0 Visit Official Web Site See How to configure tsqllint rules See How to disable tsqllint rules in files See Index of problems detected by tsqllint Configuration in MegaLinter Enable tsqllint by adding SQL_TSQLLINT in ENABLE_LINTERS variable Disable tsqllint by adding SQL_TSQLLINT in DISABLE_LINTERS variable Variable Description Default value SQL_TSQLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_TSQLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SQL_TSQLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SQL_TSQLLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SQL_TSQLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_TSQLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_TSQLLINT_PRE_COMMANDS List of bash commands to run before the linter None SQL_TSQLLINT_POST_COMMANDS List of bash commands to run after the linter None SQL_TSQLLINT_CONFIG_FILE tsqllint configuration file name Use LINTER_DEFAULT to let the linter find it .tsqllintrc SQL_TSQLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_TSQLLINT_DISABLE_ERRORS Run linter but consider errors as warnings false SQL_TSQLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use tsqllint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code TSQL Lint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .sql How the linting is performed tsqllint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls tsqllint myfile.sql tsqllint myfile.sql myfile2.sql Help content running tsqllint tsqllint [options] [file.sql] | [dir] | [file.sql | dir] -c, --config Used to specify a .tsqllintrc file path other than the default -f, --force Used to force generation of default config file when one already exists -i, --init Generate default .tsqllintrc config file -p, --print-config Print path to config file -l, --list-plugins List the loaded plugins -v, --version Display tsqllint version -h, --help Display this help dialog Installation on mega-linter Docker image Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" RUN dotnet tool install --global --version 1.14.5 TSQLLint APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"tsqllint"},{"location":"descriptors/sql_tsqllint/#tsqllint","text":"","title":"tsqllint"},{"location":"descriptors/sql_tsqllint/#tsqllint-documentation","text":"Version in MegaLinter: 1.14.5.0 Visit Official Web Site See How to configure tsqllint rules See How to disable tsqllint rules in files See Index of problems detected by tsqllint","title":"tsqllint documentation"},{"location":"descriptors/sql_tsqllint/#configuration-in-megalinter","text":"Enable tsqllint by adding SQL_TSQLLINT in ENABLE_LINTERS variable Disable tsqllint by adding SQL_TSQLLINT in DISABLE_LINTERS variable Variable Description Default value SQL_TSQLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SQL_TSQLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file SQL_TSQLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file SQL_TSQLLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files SQL_TSQLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".sql\"] SQL_TSQLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SQL_TSQLLINT_PRE_COMMANDS List of bash commands to run before the linter None SQL_TSQLLINT_POST_COMMANDS List of bash commands to run after the linter None SQL_TSQLLINT_CONFIG_FILE tsqllint configuration file name Use LINTER_DEFAULT to let the linter find it .tsqllintrc SQL_TSQLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SQL_TSQLLINT_DISABLE_ERRORS Run linter but consider errors as warnings false SQL_TSQLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/sql_tsqllint/#ide-integration","text":"Use tsqllint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code TSQL Lint","title":"IDE Integration"},{"location":"descriptors/sql_tsqllint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/sql_tsqllint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/sql_tsqllint/#how-are-identified-applicable-files","text":"File extensions: .sql","title":"How are identified applicable files"},{"location":"descriptors/sql_tsqllint/#how-the-linting-is-performed","text":"tsqllint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/sql_tsqllint/#example-calls","text":"tsqllint myfile.sql tsqllint myfile.sql myfile2.sql","title":"Example calls"},{"location":"descriptors/sql_tsqllint/#help-content","text":"running tsqllint tsqllint [options] [file.sql] | [dir] | [file.sql | dir] -c, --config Used to specify a .tsqllintrc file path other than the default -f, --force Used to force generation of default config file when one already exists -i, --init Generate default .tsqllintrc config file -p, --print-config Print path to config file -l, --list-plugins List the loaded plugins -v, --version Display tsqllint version -h, --help Display this help dialog","title":"Help content"},{"location":"descriptors/sql_tsqllint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" RUN dotnet tool install --global --version 1.14.5 TSQLLint APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"Installation on mega-linter Docker image"},{"location":"descriptors/swift/","text":"SWIFT Linters Linter Configuration key Status swiftlint SWIFT Linted files File extensions: .swift Configuration in MegaLinter Variable Description Default value SWIFT_FILTER_REGEX_INCLUDE Custom regex including filter SWIFT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All SWIFT linters"},{"location":"descriptors/swift/#swift","text":"","title":"SWIFT"},{"location":"descriptors/swift/#linters","text":"Linter Configuration key Status swiftlint SWIFT","title":"Linters"},{"location":"descriptors/swift/#linted-files","text":"File extensions: .swift","title":"Linted files"},{"location":"descriptors/swift/#configuration-in-megalinter","text":"Variable Description Default value SWIFT_FILTER_REGEX_INCLUDE Custom regex including filter SWIFT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/swift_swiftlint/","text":"swiftlint swiftlint documentation Version in MegaLinter: 0.46.5 Visit Official Web Site Docker image: norionomura/swiftlint:latest arguments: -v {{WORKSPACE}}:/tmp/lint:rw See How to configure swiftlint rules See How to disable swiftlint rules in files See Index of problems detected by swiftlint Configuration in MegaLinter Enable swiftlint by adding SWIFT_SWIFTLINT in ENABLE_LINTERS variable Disable swiftlint by adding SWIFT_SWIFTLINT in DISABLE_LINTERS variable Enable auto-fixes by adding SWIFT_SWIFTLINT in APPLY_FIXES variable Variable Description Default value SWIFT_SWIFTLINT_DOCKER_IMAGE_VERSION Docker image version latest SWIFT_SWIFTLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SWIFT_SWIFTLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".swift\"] SWIFT_SWIFTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SWIFT_SWIFTLINT_PRE_COMMANDS List of bash commands to run before the linter None SWIFT_SWIFTLINT_POST_COMMANDS List of bash commands to run after the linter None SWIFT_SWIFTLINT_CONFIG_FILE swiftlint configuration file name Use LINTER_DEFAULT to let the linter find it .swiftlint.yml SWIFT_SWIFTLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SWIFT_SWIFTLINT_DISABLE_ERRORS Run linter but consider errors as warnings false SWIFT_SWIFTLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use swiftlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-swiftlint Visit Web Site IDEA swiftlint xcode Configure manually Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 swift Optimized for SWIFT based projects 47 Behind the scenes How are identified applicable files Activated only if one of these files is found: .swiftlint.yml File extensions: .swift How the linting is performed swiftlint is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using swiftlint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make swiftlint analyze only updated files Example calls docker run -v /tmp/lint:/tmp/lint:rw norionomura/swiftlint:latest swiftlint lint --path /tmp/lint --strict docker run -v /tmp/lint:/tmp/lint:rw norionomura/swiftlint:latest swiftlint autocorrect --path /tmp/lint --strict Help content OVERVIEW: A tool to enforce Swift style and conventions. USAGE: swiftlint <subcommand> OPTIONS: --version Show the version. -h, --help Show help information. SUBCOMMANDS: analyze Run analysis rules docs Open SwiftLint documentation website in the default web browser generate-docs Generates markdown documentation for all rules lint (default) Print lint warnings and errors rules Display the list of rules and their identifiers version Display the current version of SwiftLint See 'swiftlint help <subcommand>' for detailed help. Installation on mega-linter Docker image None","title":"swiftlint"},{"location":"descriptors/swift_swiftlint/#swiftlint","text":"","title":"swiftlint"},{"location":"descriptors/swift_swiftlint/#swiftlint-documentation","text":"Version in MegaLinter: 0.46.5 Visit Official Web Site Docker image: norionomura/swiftlint:latest arguments: -v {{WORKSPACE}}:/tmp/lint:rw See How to configure swiftlint rules See How to disable swiftlint rules in files See Index of problems detected by swiftlint","title":"swiftlint documentation"},{"location":"descriptors/swift_swiftlint/#configuration-in-megalinter","text":"Enable swiftlint by adding SWIFT_SWIFTLINT in ENABLE_LINTERS variable Disable swiftlint by adding SWIFT_SWIFTLINT in DISABLE_LINTERS variable Enable auto-fixes by adding SWIFT_SWIFTLINT in APPLY_FIXES variable Variable Description Default value SWIFT_SWIFTLINT_DOCKER_IMAGE_VERSION Docker image version latest SWIFT_SWIFTLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" SWIFT_SWIFTLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".swift\"] SWIFT_SWIFTLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file SWIFT_SWIFTLINT_PRE_COMMANDS List of bash commands to run before the linter None SWIFT_SWIFTLINT_POST_COMMANDS List of bash commands to run after the linter None SWIFT_SWIFTLINT_CONFIG_FILE swiftlint configuration file name Use LINTER_DEFAULT to let the linter find it .swiftlint.yml SWIFT_SWIFTLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules SWIFT_SWIFTLINT_DISABLE_ERRORS Run linter but consider errors as warnings false SWIFT_SWIFTLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/swift_swiftlint/#ide-integration","text":"Use swiftlint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-swiftlint Visit Web Site IDEA swiftlint xcode Configure manually Visit Web Site","title":"IDE Integration"},{"location":"descriptors/swift_swiftlint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 swift Optimized for SWIFT based projects 47","title":"MegaLinter Flavours"},{"location":"descriptors/swift_swiftlint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/swift_swiftlint/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .swiftlint.yml File extensions: .swift","title":"How are identified applicable files"},{"location":"descriptors/swift_swiftlint/#how-the-linting-is-performed","text":"swiftlint is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using swiftlint configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make swiftlint analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/swift_swiftlint/#example-calls","text":"docker run -v /tmp/lint:/tmp/lint:rw norionomura/swiftlint:latest swiftlint lint --path /tmp/lint --strict docker run -v /tmp/lint:/tmp/lint:rw norionomura/swiftlint:latest swiftlint autocorrect --path /tmp/lint --strict","title":"Example calls"},{"location":"descriptors/swift_swiftlint/#help-content","text":"OVERVIEW: A tool to enforce Swift style and conventions. USAGE: swiftlint <subcommand> OPTIONS: --version Show the version. -h, --help Show help information. SUBCOMMANDS: analyze Run analysis rules docs Open SwiftLint documentation website in the default web browser generate-docs Generates markdown documentation for all rules lint (default) Print lint warnings and errors rules Display the list of rules and their identifiers version Display the current version of SwiftLint See 'swiftlint help <subcommand>' for detailed help.","title":"Help content"},{"location":"descriptors/swift_swiftlint/#installation-on-mega-linter-docker-image","text":"None","title":"Installation on mega-linter Docker image"},{"location":"descriptors/tekton/","text":"TEKTON Linters Linter Configuration key Status tekton-lint TEKTON Linted files File extensions: .yml .yaml Detected file content: apiVersion: tekton Configuration in MegaLinter Variable Description Default value TEKTON_FILTER_REGEX_INCLUDE Custom regex including filter TEKTON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All TEKTON linters"},{"location":"descriptors/tekton/#tekton","text":"","title":"TEKTON"},{"location":"descriptors/tekton/#linters","text":"Linter Configuration key Status tekton-lint TEKTON","title":"Linters"},{"location":"descriptors/tekton/#linted-files","text":"File extensions: .yml .yaml Detected file content: apiVersion: tekton","title":"Linted files"},{"location":"descriptors/tekton/#configuration-in-megalinter","text":"Variable Description Default value TEKTON_FILTER_REGEX_INCLUDE Custom regex including filter TEKTON_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/tekton_tekton_lint/","text":"tekton-lint tekton-lint documentation Version in MegaLinter: 0.6.0 Visit Official Web Site See How to configure tekton-lint rules See Index of problems detected by tekton-lint Configuration in MegaLinter Enable tekton-lint by adding TEKTON_TEKTON_LINT in ENABLE_LINTERS variable Disable tekton-lint by adding TEKTON_TEKTON_LINT in DISABLE_LINTERS variable Variable Description Default value TEKTON_TEKTON_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TEKTON_TEKTON_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TEKTON_TEKTON_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] TEKTON_TEKTON_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TEKTON_TEKTON_LINT_PRE_COMMANDS List of bash commands to run before the linter None TEKTON_TEKTON_LINT_POST_COMMANDS List of bash commands to run after the linter None TEKTON_TEKTON_LINT_CONFIG_FILE tekton-lint configuration file name Use LINTER_DEFAULT to let the linter find it .tektonlintrc.yaml TEKTON_TEKTON_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TEKTON_TEKTON_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false TEKTON_TEKTON_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .yml , .yaml Detected file content (regex): apiVersion: tekton How the linting is performed tekton-lint is called one time by identified file ( file CLI lint mode) Example calls tekton-lint myfile.yml Help content Usage: tekton-lint <path-to-yaml-files> Options: $ tekton-lint --watch # Run tekton-lint in watch mode $ tekton-lint --version # Show version number $ tekton-lint --help # Show help $ tekton-lint --color / --no-color # Forcefully enable/disable colored output $ tekton-lint --format # Format output. Available formatters: vscode (default) | stylish | json $ tekton-lint --quiet # Report errors only - default: false $ tekton-lint --max-warnings <Int> # Number of warnings to trigger nonzero exit code - default: -1 Examples: # Globstar matching $ tekton-lint '**/*.yaml' # Exact file path $ tekton-lint my-pipeline.yaml my-task.yaml # Multiple glob patterns $ tekton-lint path/to/my/pipeline.yaml 'path/to/my/tasks/*.yaml' # Watch mode $ tekton-lint --watch '**/*.yaml' Installation on mega-linter Docker image NPM packages (node.js): tekton-lint","title":"tekton-lint"},{"location":"descriptors/tekton_tekton_lint/#tekton-lint","text":"","title":"tekton-lint"},{"location":"descriptors/tekton_tekton_lint/#tekton-lint-documentation","text":"Version in MegaLinter: 0.6.0 Visit Official Web Site See How to configure tekton-lint rules See Index of problems detected by tekton-lint","title":"tekton-lint documentation"},{"location":"descriptors/tekton_tekton_lint/#configuration-in-megalinter","text":"Enable tekton-lint by adding TEKTON_TEKTON_LINT in ENABLE_LINTERS variable Disable tekton-lint by adding TEKTON_TEKTON_LINT in DISABLE_LINTERS variable Variable Description Default value TEKTON_TEKTON_LINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TEKTON_TEKTON_LINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TEKTON_TEKTON_LINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TEKTON_TEKTON_LINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TEKTON_TEKTON_LINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] TEKTON_TEKTON_LINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TEKTON_TEKTON_LINT_PRE_COMMANDS List of bash commands to run before the linter None TEKTON_TEKTON_LINT_POST_COMMANDS List of bash commands to run after the linter None TEKTON_TEKTON_LINT_CONFIG_FILE tekton-lint configuration file name Use LINTER_DEFAULT to let the linter find it .tektonlintrc.yaml TEKTON_TEKTON_LINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TEKTON_TEKTON_LINT_DISABLE_ERRORS Run linter but consider errors as warnings false TEKTON_TEKTON_LINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/tekton_tekton_lint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/tekton_tekton_lint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/tekton_tekton_lint/#how-are-identified-applicable-files","text":"File extensions: .yml , .yaml Detected file content (regex): apiVersion: tekton","title":"How are identified applicable files"},{"location":"descriptors/tekton_tekton_lint/#how-the-linting-is-performed","text":"tekton-lint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/tekton_tekton_lint/#example-calls","text":"tekton-lint myfile.yml","title":"Example calls"},{"location":"descriptors/tekton_tekton_lint/#help-content","text":"Usage: tekton-lint <path-to-yaml-files> Options: $ tekton-lint --watch # Run tekton-lint in watch mode $ tekton-lint --version # Show version number $ tekton-lint --help # Show help $ tekton-lint --color / --no-color # Forcefully enable/disable colored output $ tekton-lint --format # Format output. Available formatters: vscode (default) | stylish | json $ tekton-lint --quiet # Report errors only - default: false $ tekton-lint --max-warnings <Int> # Number of warnings to trigger nonzero exit code - default: -1 Examples: # Globstar matching $ tekton-lint '**/*.yaml' # Exact file path $ tekton-lint my-pipeline.yaml my-task.yaml # Multiple glob patterns $ tekton-lint path/to/my/pipeline.yaml 'path/to/my/tasks/*.yaml' # Watch mode $ tekton-lint --watch '**/*.yaml'","title":"Help content"},{"location":"descriptors/tekton_tekton_lint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): tekton-lint","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform/","text":"TERRAFORM Linters Linter Configuration key Status tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS Linted files File extensions: .tf Configuration in MegaLinter Variable Description Default value TERRAFORM_FILTER_REGEX_INCLUDE Custom regex including filter TERRAFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All TERRAFORM linters"},{"location":"descriptors/terraform/#terraform","text":"","title":"TERRAFORM"},{"location":"descriptors/terraform/#linters","text":"Linter Configuration key Status tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS","title":"Linters"},{"location":"descriptors/terraform/#linted-files","text":"File extensions: .tf","title":"Linted files"},{"location":"descriptors/terraform/#configuration-in-megalinter","text":"Variable Description Default value TERRAFORM_FILTER_REGEX_INCLUDE Custom regex including filter TERRAFORM_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_checkov/","text":"TERRAFORM_CHECKOV will be deprecated because now REPOSITORY_CHECKOV does the same and much more. You should disable TERRAFORM_CHECKOV by adding it in DISABLE_LINTERS property. checkov documentation Version in MegaLinter: 2.1.242 Visit Official Web Site See How to disable checkov rules in files See Index of problems detected by checkov Configuration in MegaLinter Enable checkov by adding TERRAFORM_CHECKOV in ENABLE_LINTERS variable Disable checkov by adding TERRAFORM_CHECKOV in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_CHECKOV_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_CHECKOV_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_CHECKOV_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_CHECKOV_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_CHECKOV_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_CHECKOV_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_CHECKOV_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_CHECKOV_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_CHECKOV_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use checkov in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Checkov MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .tf How the linting is performed checkov is called one time by identified file ( file CLI lint mode) Example calls checkov --file myfile.tf Help content usage: checkov [-h] [-v] [-d DIRECTORY] [--add-check] [-f FILE] [--skip-path SKIP_PATH] [--external-checks-dir EXTERNAL_CHECKS_DIR] [--external-checks-git EXTERNAL_CHECKS_GIT] [-l] [-o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}] [--output-file-path OUTPUT_FILE_PATH] [--output-bc-ids] [--include-all-checkov-policies] [--quiet] [--compact] [--framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...]] [--skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...]] [-c CHECK] [--skip-check SKIP_CHECK] [--run-all-external-checks] [-s] [--soft-fail-on SOFT_FAIL_ON] [--hard-fail-on HARD_FAIL_ON] [--bc-api-key BC_API_KEY] [--prisma-api-url PRISMA_API_URL] [--docker-image DOCKER_IMAGE] [--dockerfile-path DOCKERFILE_PATH] [--repo-id REPO_ID] [-b BRANCH] [--skip-download] [--use-enforcement-rules] [--no-guide] [--skip-suppressions] [--skip-policy-download] [--skip-fixes] [--download-external-modules DOWNLOAD_EXTERNAL_MODULES] [--var-file VAR_FILE] [--external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH] [--evaluate-variables EVALUATE_VARIABLES] [-ca CA_CERTIFICATE] [--repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT] [--config-file CONFIG_FILE] [--create-config CREATE_CONFIG] [--show-config] [--create-baseline] [--baseline BASELINE] [--output-baseline-as-skipped] [--skip-cve-package SKIP_CVE_PACKAGE] [--policy-metadata-filter POLICY_METADATA_FILTER] [--secrets-scan-file-type SECRETS_SCAN_FILE_TYPE] [--enable-secret-scan-all-files] [--block-list-secret-scan BLOCK_LIST_SECRET_SCAN] [--summary-position {bottom,top}] Infrastructure as code static analysis options: -h, --help show this help message and exit -v, --version version -d DIRECTORY, --directory DIRECTORY IaC root directory (can not be used together with --file). --add-check Generate a new check via CLI prompt -f FILE, --file FILE File to scan (can not be used together with --directory). With this option, Checkov will attempt to filter the runners based on the file type. For example, if you specify a \".tf\" file, only the terraform and secrets frameworks will be included. You can further limit this (e.g., skip secrets) by using the --skip-framework argument. --skip-path SKIP_PATH Path (file or directory) to skip, using regular expression logic, relative to current working directory. Word boundaries are not implicit; i.e., specifying \"dir1\" will skip any directory or subdirectory named \"dir1\". Ignored with -f. Can be specified multiple times. --external-checks-dir EXTERNAL_CHECKS_DIR Directory for custom checks to be loaded. Can be repeated --external-checks-git EXTERNAL_CHECKS_GIT Github url of external checks to be added. you can specify a subdirectory after a double-slash //. cannot be used together with --external-checks-dir -l, --list List checks -o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}, --output {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv} Report output format. Add multiple outputs by using the flag multiple times (-o sarif -o cli) --output-file-path OUTPUT_FILE_PATH Name for output file. The first selected output via output flag will be saved to the file (default output is cli) --output-bc-ids Print Bridgecrew platform IDs (BC...) instead of Checkov IDs (CKV...), if the check exists in the platform --include-all-checkov-policies When running with an API key, Checkov will omit any policies that do not exist in the Bridgecrew or Prisma Cloud platform, except for local custom policies loaded with the --external-check flags. Use this key to include policies that only exist in Checkov in the scan. Note that this will make the local CLI results different from the results you see in the platform. Has no effect if you are not using an API key. Use the --check option to explicitly include checks by ID even if they are not in the platform, without using this flag. --quiet in case of CLI output, display only failed checks. Also disables progress bars --compact in case of CLI output, do not display code blocks --framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...] Filter scan to run only on specific infrastructure code frameworks [env var: CKV_FRAMEWORK] --skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...] Filter scan to skip specific infrastructure as code frameworks.This will be included automatically for some frameworks if system dependencies are missing. Add multiple frameworks using spaces. For example, --skip-framework terraform sca_package. -c CHECK, --check CHECK Checks to run; any other checks will be skipped. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or above the lowest severity in the list will be included. This option can be combined with --skip-check. If it is, then the logic is to first take all checks that match this list, and then remove all checks that match the skip list. For example, if you use --check CKV_123 and --skip-check LOW, then CKV_123 will not run if it is a LOW severity. Similarly, if you use --check CKV_789 --skip-check MEDIUM, then CKV_789 will run if it is a HIGH severity. If you use a check ID here along with an API key, and the check is not part of the BC / PC platform, then the check will still be run (see --include-all-checkov-policies for more info). [env var: CKV_CHECK] --skip-check SKIP_CHECK Checks to skip; any other checks will not be run. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or below the highest severity in the list will be skipped. This option can be combined with --check. If it is, priority is given to checks explicitly listed by ID or wildcard over checks listed by severity. For example, if you use --skip-check CKV_123 and --check HIGH, then CKV_123 will be skipped even if it is a HIGH severity. In the case of a tie (e.g., --check MEDIUM and --skip-check HIGH for a medium severity check), then the check will be skipped. [env var: CKV_SKIP_CHECK] --run-all-external-checks Run all external checks (loaded via --external-checks options) even if the checks are not present in the --check list. This allows you to always ensure that new checks present in the external source are used. If an external check is included in --skip-check, it will still be skipped. -s, --soft-fail Runs checks but always returns a 0 exit code. Using either --soft-fail-on and / or --hard-fail-on overrides this option, except for the case when a result does not match either of the soft fail or hard fail criteria, in which case this flag determines the result. --soft-fail-on SOFT_FAIL_ON Exits with a 0 exit code if only the specified items fail. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or less than the highest severity in the list will result in a soft fail. This option may be used with --hard-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. If a given result does not meet the --soft-fail-on nor the --hard-fail-on criteria, then the default is to hard fail --hard-fail-on HARD_FAIL_ON Exits with a non-zero exit code for specified checks. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or greater than the lowest severity in the list will result in a hard fail. This option can be used with --soft-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. --bc-api-key BC_API_KEY Bridgecrew API key or Prisma Cloud Access Key (see --prisma-api-url) [env var: BC_API_KEY] --prisma-api-url PRISMA_API_URL The Prisma Cloud API URL (see: https://prisma.pan.dev/api/cloud/api-urls). Requires --bc-api-key to be a Prisma Cloud Access Key in the following format: <access_key_id>::<secret_key> [env var: PRISMA_API_URL] --docker-image DOCKER_IMAGE Scan docker images by name or ID. Only works with --bc-api-key flag --dockerfile-path DOCKERFILE_PATH Path to the Dockerfile of the scanned docker image --repo-id REPO_ID Identity string of the repository, with form <repo_owner>/<repo_name> -b BRANCH, --branch BRANCH Selected branch of the persisted repository. Only has effect when using the --bc-api-key flag --skip-download Do not download any data from Bridgecrew. This will omit doc links, severities, etc., as well as custom policies and suppressions if using an API token. Note: it will prevent BC platform IDs from being available in Checkov. --use-enforcement-rules Use the Enforcement rules configured in the platform for hard / soft fail logic. With this option, the enforcement rule matching this repo, or the default rule if there is no match, will determine this behavior: any check with a severity below the selected rule's soft-fail threshold will be skipped; any check with a severity equal to or greater than the rule's hard-fail threshold will be part of the hard-fail list, and any check in between will be part of the soft-fail list. For example, if the given enforcement rule has a hard-fail value of HIGH and a soft-fail value of MEDIUM,this is the equivalent of using the flags `--skip-check LOW --hard-fail-on HIGH`. You can use --check, --skip-check, --soft-fail, --soft-fail- on, or --hard-fail-on to override portions of an enforcement rule. Note, however, that the logic of applying the --check list and then the --skip-check list (as described above under --check) still applies here. Requires a BC or PC platform API key. --no-guide Deprecated - use --skip-download --skip-suppressions Deprecated - use --skip-download --skip-policy-download Deprecated - use --skip-download --skip-fixes Do not download fixed resource templates from Bridgecrew. Only has effect when using the API key. --download-external-modules DOWNLOAD_EXTERNAL_MODULES download external terraform modules from public git repositories and terraform registry [env var: DOWNLOAD_EXTERNAL_MODULES] --var-file VAR_FILE Variable files to load in addition to the default files (see https://www.terraform.io/docs/language/valu es/variables.html#variable-definitions-tfvars- files).Currently only supported for source Terraform (.tf file), and Helm chart scans.Requires using --directory, not --file. --external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH set the path for the download external terraform modules [env var: EXTERNAL_MODULES_DIR] --evaluate-variables EVALUATE_VARIABLES evaluate the values of variables and locals [env var: CKV_EVAL_VARS] -ca CA_CERTIFICATE, --ca-certificate CA_CERTIFICATE Custom CA certificate (bundle) file [env var: BC_CA_BUNDLE] --repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT Directory containing the hcl code used to generate a given plan file. Use with -f. --config-file CONFIG_FILE path to the Checkov configuration YAML file --create-config CREATE_CONFIG takes the current command line args and writes them out to a config file at the given path --show-config prints all args and config settings and where they came from (eg. commandline, config file, environment variable or default) --create-baseline Alongside outputting the findings, save all results to .checkov.baseline file so future runs will not re-flag the same noise. Works only with `--directory` flag --baseline BASELINE Use a .checkov.baseline file to compare current results with a known baseline. Report will include only failed checks that are new with respect to the provided baseline --output-baseline-as-skipped output checks that are skipped due to baseline file presence --skip-cve-package SKIP_CVE_PACKAGE filter scan to run on all packages but a specific package identifier (denylist), You can specify this argument multiple times to skip multiple packages --policy-metadata-filter POLICY_METADATA_FILTER comma separated key:value string to filter policies based on Prisma Cloud policy metadata. See https://pri sma.pan.dev/api/cloud/cspm/policy#operation/get- policy-filters-and-options for information on allowed filters. Format: policy.label=test,cloud.type=aws --secrets-scan-file-type SECRETS_SCAN_FILE_TYPE not in use [env var: CKV_SECRETS_SCAN_FILE_TYPE] --enable-secret-scan-all-files enable secret scan for all files [env var: CKV_SECRETS_SCAN_ENABLE_ALL] --block-list-secret-scan BLOCK_LIST_SECRET_SCAN List of files to filter out from the secret scanner [env var: CKV_SECRETS_SCAN_BLOCK_LIST] --summary-position {bottom,top} Chose whether the summary will be appended on top (before the checks results) or on bottom (after check results), default is on top. Args that start with '--' (eg. -v) can also be set in a config file (/.checkov.yaml or /.checkov.yml or /root/.checkov.yaml or /root/.checkov.yml or specified via --config-file). The config file uses YAML syntax and must represent a YAML 'mapping' (for details, see http://learn.getgrav.org/advanced/yaml). If an arg is specified in more than one place, then commandline values override environment variables which override config file values which override defaults. Installation on mega-linter Docker image Dockerfile commands : RUN PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir pip && PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir setuptools \\ && PYTHONDONTWRITEBYTECODE=1 pip3 install --no-cache-dir checkov && find . | grep -E \"(/__pycache__$|\\.pyc$|\\.pyo$)\" | xargs rm -rf","title":"checkov"},{"location":"descriptors/terraform_checkov/#checkov-documentation","text":"Version in MegaLinter: 2.1.242 Visit Official Web Site See How to disable checkov rules in files See Index of problems detected by checkov","title":"checkov documentation"},{"location":"descriptors/terraform_checkov/#configuration-in-megalinter","text":"Enable checkov by adding TERRAFORM_CHECKOV in ENABLE_LINTERS variable Disable checkov by adding TERRAFORM_CHECKOV in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_CHECKOV_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_CHECKOV_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_CHECKOV_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_CHECKOV_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_CHECKOV_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_CHECKOV_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_CHECKOV_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_CHECKOV_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_CHECKOV_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_CHECKOV_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_checkov/#ide-integration","text":"Use checkov in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Visual Studio Code Checkov","title":"IDE Integration"},{"location":"descriptors/terraform_checkov/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/terraform_checkov/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_checkov/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_checkov/#how-the-linting-is-performed","text":"checkov is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/terraform_checkov/#example-calls","text":"checkov --file myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_checkov/#help-content","text":"usage: checkov [-h] [-v] [-d DIRECTORY] [--add-check] [-f FILE] [--skip-path SKIP_PATH] [--external-checks-dir EXTERNAL_CHECKS_DIR] [--external-checks-git EXTERNAL_CHECKS_GIT] [-l] [-o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}] [--output-file-path OUTPUT_FILE_PATH] [--output-bc-ids] [--include-all-checkov-policies] [--quiet] [--compact] [--framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...]] [--skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...]] [-c CHECK] [--skip-check SKIP_CHECK] [--run-all-external-checks] [-s] [--soft-fail-on SOFT_FAIL_ON] [--hard-fail-on HARD_FAIL_ON] [--bc-api-key BC_API_KEY] [--prisma-api-url PRISMA_API_URL] [--docker-image DOCKER_IMAGE] [--dockerfile-path DOCKERFILE_PATH] [--repo-id REPO_ID] [-b BRANCH] [--skip-download] [--use-enforcement-rules] [--no-guide] [--skip-suppressions] [--skip-policy-download] [--skip-fixes] [--download-external-modules DOWNLOAD_EXTERNAL_MODULES] [--var-file VAR_FILE] [--external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH] [--evaluate-variables EVALUATE_VARIABLES] [-ca CA_CERTIFICATE] [--repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT] [--config-file CONFIG_FILE] [--create-config CREATE_CONFIG] [--show-config] [--create-baseline] [--baseline BASELINE] [--output-baseline-as-skipped] [--skip-cve-package SKIP_CVE_PACKAGE] [--policy-metadata-filter POLICY_METADATA_FILTER] [--secrets-scan-file-type SECRETS_SCAN_FILE_TYPE] [--enable-secret-scan-all-files] [--block-list-secret-scan BLOCK_LIST_SECRET_SCAN] [--summary-position {bottom,top}] Infrastructure as code static analysis options: -h, --help show this help message and exit -v, --version version -d DIRECTORY, --directory DIRECTORY IaC root directory (can not be used together with --file). --add-check Generate a new check via CLI prompt -f FILE, --file FILE File to scan (can not be used together with --directory). With this option, Checkov will attempt to filter the runners based on the file type. For example, if you specify a \".tf\" file, only the terraform and secrets frameworks will be included. You can further limit this (e.g., skip secrets) by using the --skip-framework argument. --skip-path SKIP_PATH Path (file or directory) to skip, using regular expression logic, relative to current working directory. Word boundaries are not implicit; i.e., specifying \"dir1\" will skip any directory or subdirectory named \"dir1\". Ignored with -f. Can be specified multiple times. --external-checks-dir EXTERNAL_CHECKS_DIR Directory for custom checks to be loaded. Can be repeated --external-checks-git EXTERNAL_CHECKS_GIT Github url of external checks to be added. you can specify a subdirectory after a double-slash //. cannot be used together with --external-checks-dir -l, --list List checks -o {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv}, --output {cli,cyclonedx,json,junitxml,github_failed_only,sarif,csv} Report output format. Add multiple outputs by using the flag multiple times (-o sarif -o cli) --output-file-path OUTPUT_FILE_PATH Name for output file. The first selected output via output flag will be saved to the file (default output is cli) --output-bc-ids Print Bridgecrew platform IDs (BC...) instead of Checkov IDs (CKV...), if the check exists in the platform --include-all-checkov-policies When running with an API key, Checkov will omit any policies that do not exist in the Bridgecrew or Prisma Cloud platform, except for local custom policies loaded with the --external-check flags. Use this key to include policies that only exist in Checkov in the scan. Note that this will make the local CLI results different from the results you see in the platform. Has no effect if you are not using an API key. Use the --check option to explicitly include checks by ID even if they are not in the platform, without using this flag. --quiet in case of CLI output, display only failed checks. Also disables progress bars --compact in case of CLI output, do not display code blocks --framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan,all} ...] Filter scan to run only on specific infrastructure code frameworks [env var: CKV_FRAMEWORK] --skip-framework {bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} [{bitbucket_pipelines,circleci_pipelines,argo_workflows,arm,bicep,cloudformation,dockerfile,github_configuration,github_actions,gitlab_configuration,gitlab_ci,bitbucket_configuration,helm,json,yaml,kubernetes,kustomize,openapi,sca_package,sca_image,secrets,serverless,terraform,terraform_plan} ...] Filter scan to skip specific infrastructure as code frameworks.This will be included automatically for some frameworks if system dependencies are missing. Add multiple frameworks using spaces. For example, --skip-framework terraform sca_package. -c CHECK, --check CHECK Checks to run; any other checks will be skipped. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or above the lowest severity in the list will be included. This option can be combined with --skip-check. If it is, then the logic is to first take all checks that match this list, and then remove all checks that match the skip list. For example, if you use --check CKV_123 and --skip-check LOW, then CKV_123 will not run if it is a LOW severity. Similarly, if you use --check CKV_789 --skip-check MEDIUM, then CKV_789 will run if it is a HIGH severity. If you use a check ID here along with an API key, and the check is not part of the BC / PC platform, then the check will still be run (see --include-all-checkov-policies for more info). [env var: CKV_CHECK] --skip-check SKIP_CHECK Checks to skip; any other checks will not be run. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then all checks equal to or below the highest severity in the list will be skipped. This option can be combined with --check. If it is, priority is given to checks explicitly listed by ID or wildcard over checks listed by severity. For example, if you use --skip-check CKV_123 and --check HIGH, then CKV_123 will be skipped even if it is a HIGH severity. In the case of a tie (e.g., --check MEDIUM and --skip-check HIGH for a medium severity check), then the check will be skipped. [env var: CKV_SKIP_CHECK] --run-all-external-checks Run all external checks (loaded via --external-checks options) even if the checks are not present in the --check list. This allows you to always ensure that new checks present in the external source are used. If an external check is included in --skip-check, it will still be skipped. -s, --soft-fail Runs checks but always returns a 0 exit code. Using either --soft-fail-on and / or --hard-fail-on overrides this option, except for the case when a result does not match either of the soft fail or hard fail criteria, in which case this flag determines the result. --soft-fail-on SOFT_FAIL_ON Exits with a 0 exit code if only the specified items fail. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or less than the highest severity in the list will result in a soft fail. This option may be used with --hard-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. If a given result does not meet the --soft-fail-on nor the --hard-fail-on criteria, then the default is to hard fail --hard-fail-on HARD_FAIL_ON Exits with a non-zero exit code for specified checks. Enter one or more items separated by commas. Each item may be either a Checkov check ID (CKV_AWS_123), a BC check ID (BC_AWS_GENERAL_123), or a severity (LOW, MEDIUM, HIGH, CRITICAL). If you use a severity, then any severity equal to or greater than the lowest severity in the list will result in a hard fail. This option can be used with --soft-fail-on, using the same priority logic described in --check and --skip-check options above, with --hard-fail-on taking precedence in a tie. --bc-api-key BC_API_KEY Bridgecrew API key or Prisma Cloud Access Key (see --prisma-api-url) [env var: BC_API_KEY] --prisma-api-url PRISMA_API_URL The Prisma Cloud API URL (see: https://prisma.pan.dev/api/cloud/api-urls). Requires --bc-api-key to be a Prisma Cloud Access Key in the following format: <access_key_id>::<secret_key> [env var: PRISMA_API_URL] --docker-image DOCKER_IMAGE Scan docker images by name or ID. Only works with --bc-api-key flag --dockerfile-path DOCKERFILE_PATH Path to the Dockerfile of the scanned docker image --repo-id REPO_ID Identity string of the repository, with form <repo_owner>/<repo_name> -b BRANCH, --branch BRANCH Selected branch of the persisted repository. Only has effect when using the --bc-api-key flag --skip-download Do not download any data from Bridgecrew. This will omit doc links, severities, etc., as well as custom policies and suppressions if using an API token. Note: it will prevent BC platform IDs from being available in Checkov. --use-enforcement-rules Use the Enforcement rules configured in the platform for hard / soft fail logic. With this option, the enforcement rule matching this repo, or the default rule if there is no match, will determine this behavior: any check with a severity below the selected rule's soft-fail threshold will be skipped; any check with a severity equal to or greater than the rule's hard-fail threshold will be part of the hard-fail list, and any check in between will be part of the soft-fail list. For example, if the given enforcement rule has a hard-fail value of HIGH and a soft-fail value of MEDIUM,this is the equivalent of using the flags `--skip-check LOW --hard-fail-on HIGH`. You can use --check, --skip-check, --soft-fail, --soft-fail- on, or --hard-fail-on to override portions of an enforcement rule. Note, however, that the logic of applying the --check list and then the --skip-check list (as described above under --check) still applies here. Requires a BC or PC platform API key. --no-guide Deprecated - use --skip-download --skip-suppressions Deprecated - use --skip-download --skip-policy-download Deprecated - use --skip-download --skip-fixes Do not download fixed resource templates from Bridgecrew. Only has effect when using the API key. --download-external-modules DOWNLOAD_EXTERNAL_MODULES download external terraform modules from public git repositories and terraform registry [env var: DOWNLOAD_EXTERNAL_MODULES] --var-file VAR_FILE Variable files to load in addition to the default files (see https://www.terraform.io/docs/language/valu es/variables.html#variable-definitions-tfvars- files).Currently only supported for source Terraform (.tf file), and Helm chart scans.Requires using --directory, not --file. --external-modules-download-path EXTERNAL_MODULES_DOWNLOAD_PATH set the path for the download external terraform modules [env var: EXTERNAL_MODULES_DIR] --evaluate-variables EVALUATE_VARIABLES evaluate the values of variables and locals [env var: CKV_EVAL_VARS] -ca CA_CERTIFICATE, --ca-certificate CA_CERTIFICATE Custom CA certificate (bundle) file [env var: BC_CA_BUNDLE] --repo-root-for-plan-enrichment REPO_ROOT_FOR_PLAN_ENRICHMENT Directory containing the hcl code used to generate a given plan file. Use with -f. --config-file CONFIG_FILE path to the Checkov configuration YAML file --create-config CREATE_CONFIG takes the current command line args and writes them out to a config file at the given path --show-config prints all args and config settings and where they came from (eg. commandline, config file, environment variable or default) --create-baseline Alongside outputting the findings, save all results to .checkov.baseline file so future runs will not re-flag the same noise. Works only with `--directory` flag --baseline BASELINE Use a .checkov.baseline file to compare current results with a known baseline. Report will include only failed checks that are new with respect to the provided baseline --output-baseline-as-skipped output checks that are skipped due to baseline file presence --skip-cve-package SKIP_CVE_PACKAGE filter scan to run on all packages but a specific package identifier (denylist), You can specify this argument multiple times to skip multiple packages --policy-metadata-filter POLICY_METADATA_FILTER comma separated key:value string to filter policies based on Prisma Cloud policy metadata. See https://pri sma.pan.dev/api/cloud/cspm/policy#operation/get- policy-filters-and-options for information on allowed filters. Format: policy.label=test,cloud.type=aws --secrets-scan-file-type SECRETS_SCAN_FILE_TYPE not in use [env var: CKV_SECRETS_SCAN_FILE_TYPE] --enable-secret-scan-all-files enable secret scan for all files [env var: CKV_SECRETS_SCAN_ENABLE_ALL] --block-list-secret-scan BLOCK_LIST_SECRET_SCAN List of files to filter out from the secret scanner [env var: CKV_SECRETS_SCAN_BLOCK_LIST] --summary-position {bottom,top} Chose whether the summary will be appended on top (before the checks results) or on bottom (after check results), default is on top. Args that start with '--' (eg. -v) can also be set in a config file (/.checkov.yaml or /.checkov.yml or /root/.checkov.yaml or /root/.checkov.yml or specified via --config-file). The config file uses YAML syntax and must represent a YAML 'mapping' (for details, see http://learn.getgrav.org/advanced/yaml). If an arg is specified in more than one place, then commandline values override environment variables which override config file values which override defaults.","title":"Help content"},{"location":"descriptors/terraform_checkov/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : RUN PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir pip && PYTHONDONTWRITEBYTECODE=1 pip3 install --upgrade --no-cache-dir setuptools \\ && PYTHONDONTWRITEBYTECODE=1 pip3 install --no-cache-dir checkov && find . | grep -E \"(/__pycache__$|\\.pyc$|\\.pyo$)\" | xargs rm -rf","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_kics/","text":"kics documentation Version in MegaLinter: 1.6.1 Visit Official Web Site See How to disable kics rules in files See Index of problems detected by kics Configuration in MegaLinter Enable kics by adding TERRAFORM_KICS in ENABLE_LINTERS variable Disable kics by adding TERRAFORM_KICS in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_KICS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_KICS_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_KICS_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_KICS_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_KICS_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_KICS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_KICS_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_KICS_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_KICS_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_KICS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .tf How the linting is performed kics is called one time by identified file ( file CLI lint mode) Example calls kics scan --path myfile.tf Help content Keeping Infrastructure as Code Secure Usage: kics [command] Available Commands: generate-id Generates uuid for query help Help about any command list-platforms List supported platforms remediate Auto remediates the project scan Executes a scan analysis version Displays the current version Flags: --ci display only log messages to CLI output (mutually exclusive with silent) -h, --help help for kics -f, --log-format string determines log format (pretty,json) (default \"pretty\") --log-level string determines log level (TRACE,DEBUG,INFO,WARN,ERROR,FATAL) (default \"INFO\") --log-path string path to generate log file (info.log) --no-color disable CLI color output --profiling string enables performance profiler that prints resource consumption metrics in the logs during the execution (CPU, MEM) -s, --silent silence stdout messages (mutually exclusive with verbose and ci) -v, --verbose write logs to stdout too (mutually exclusive with silent) Use \"kics [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : FROM checkmarx/kics:alpine as kics COPY --from=kics /app/bin/kics /usr/bin/ RUN mkdir -p /opt/kics/assets ENV KICS_QUERIES_PATH=/opt/kics/assets/queries KICS_LIBRARIES_PATH=/opt/kics/assets/libraries COPY --from=kics /app/bin/assets /opt/kics/assets/","title":"kics"},{"location":"descriptors/terraform_kics/#kics-documentation","text":"Version in MegaLinter: 1.6.1 Visit Official Web Site See How to disable kics rules in files See Index of problems detected by kics","title":"kics documentation"},{"location":"descriptors/terraform_kics/#configuration-in-megalinter","text":"Enable kics by adding TERRAFORM_KICS in ENABLE_LINTERS variable Disable kics by adding TERRAFORM_KICS in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_KICS_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_KICS_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_KICS_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_KICS_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_KICS_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_KICS_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_KICS_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_KICS_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_KICS_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_KICS_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_kics/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/terraform_kics/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_kics/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_kics/#how-the-linting-is-performed","text":"kics is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/terraform_kics/#example-calls","text":"kics scan --path myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_kics/#help-content","text":"Keeping Infrastructure as Code Secure Usage: kics [command] Available Commands: generate-id Generates uuid for query help Help about any command list-platforms List supported platforms remediate Auto remediates the project scan Executes a scan analysis version Displays the current version Flags: --ci display only log messages to CLI output (mutually exclusive with silent) -h, --help help for kics -f, --log-format string determines log format (pretty,json) (default \"pretty\") --log-level string determines log level (TRACE,DEBUG,INFO,WARN,ERROR,FATAL) (default \"INFO\") --log-path string path to generate log file (info.log) --no-color disable CLI color output --profiling string enables performance profiler that prints resource consumption metrics in the logs during the execution (CPU, MEM) -s, --silent silence stdout messages (mutually exclusive with verbose and ci) -v, --verbose write logs to stdout too (mutually exclusive with silent) Use \"kics [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/terraform_kics/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM checkmarx/kics:alpine as kics COPY --from=kics /app/bin/kics /usr/bin/ RUN mkdir -p /opt/kics/assets ENV KICS_QUERIES_PATH=/opt/kics/assets/queries KICS_LIBRARIES_PATH=/opt/kics/assets/libraries COPY --from=kics /app/bin/assets /opt/kics/assets/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_terraform_fmt/","text":"terraform-fmt documentation Version in MegaLinter: 1.3.1 Visit Official Web Site Configuration in MegaLinter Enable terraform-fmt by adding TERRAFORM_TERRAFORM_FMT in ENABLE_LINTERS variable Disable terraform-fmt by adding TERRAFORM_TERRAFORM_FMT in DISABLE_LINTERS variable Enable auto-fixes by adding TERRAFORM_TERRAFORM_FMT in APPLY_FIXES variable Variable Description Default value TERRAFORM_TERRAFORM_FMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_TERRAFORM_FMT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_TERRAFORM_FMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TERRAFORM_FMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRAFORM_FMT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRAFORM_FMT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS Run linter but consider errors as warnings true TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use terraform-fmt in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom terraform-fmt Visit Web Site IDEA HashiCorp Terraform / HCL language support Sublime Text Terrafmt Visit Web Site Visual Studio Code HashiCorp Terraform MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .tf How the linting is performed terraform-fmt is called one time by identified file ( file CLI lint mode) Example calls terraform fmt myfile.tf Help content Usage: terraform [global options] <subcommand> [args] The available commands for execution are listed below. The primary workflow commands are given first, followed by less common or more advanced commands. Main commands: init Prepare your working directory for other commands validate Check whether the configuration is valid plan Show changes required by the current configuration apply Create or update infrastructure destroy Destroy previously-created infrastructure All other commands: console Try Terraform expressions at an interactive command prompt fmt Reformat your configuration in the standard style force-unlock Release a stuck lock on the current workspace get Install or upgrade remote Terraform modules graph Generate a Graphviz graph of the steps in an operation import Associate existing infrastructure with a Terraform resource login Obtain and save credentials for a remote host logout Remove locally-stored credentials for a remote host output Show output values from your root module providers Show the providers required for this configuration refresh Update the state to match remote systems show Show the current state or a saved plan state Advanced state management taint Mark a resource instance as not fully functional test Experimental support for module integration testing untaint Remove the 'tainted' state from a resource instance version Show the current Terraform version workspace Workspace management Global options (use these before the subcommand, if any): -chdir=DIR Switch to a different working directory before executing the given subcommand. -help Show this help output, or the help for a specified subcommand. -version An alias for the \"version\" subcommand. Installation on mega-linter Docker image Dockerfile commands : FROM alpine/terragrunt:latest as terragrunt COPY --from=terragrunt /bin/terraform /usr/bin/","title":"terraform-fmt"},{"location":"descriptors/terraform_terraform_fmt/#terraform-fmt-documentation","text":"Version in MegaLinter: 1.3.1 Visit Official Web Site","title":"terraform-fmt documentation"},{"location":"descriptors/terraform_terraform_fmt/#configuration-in-megalinter","text":"Enable terraform-fmt by adding TERRAFORM_TERRAFORM_FMT in ENABLE_LINTERS variable Disable terraform-fmt by adding TERRAFORM_TERRAFORM_FMT in DISABLE_LINTERS variable Enable auto-fixes by adding TERRAFORM_TERRAFORM_FMT in APPLY_FIXES variable Variable Description Default value TERRAFORM_TERRAFORM_FMT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_TERRAFORM_FMT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_TERRAFORM_FMT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_TERRAFORM_FMT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TERRAFORM_FMT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRAFORM_FMT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRAFORM_FMT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS Run linter but consider errors as warnings true TERRAFORM_TERRAFORM_FMT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_terraform_fmt/#ide-integration","text":"Use terraform-fmt in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom terraform-fmt Visit Web Site IDEA HashiCorp Terraform / HCL language support Sublime Text Terrafmt Visit Web Site Visual Studio Code HashiCorp Terraform","title":"IDE Integration"},{"location":"descriptors/terraform_terraform_fmt/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/terraform_terraform_fmt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_terraform_fmt/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_terraform_fmt/#how-the-linting-is-performed","text":"terraform-fmt is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/terraform_terraform_fmt/#example-calls","text":"terraform fmt myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_terraform_fmt/#help-content","text":"Usage: terraform [global options] <subcommand> [args] The available commands for execution are listed below. The primary workflow commands are given first, followed by less common or more advanced commands. Main commands: init Prepare your working directory for other commands validate Check whether the configuration is valid plan Show changes required by the current configuration apply Create or update infrastructure destroy Destroy previously-created infrastructure All other commands: console Try Terraform expressions at an interactive command prompt fmt Reformat your configuration in the standard style force-unlock Release a stuck lock on the current workspace get Install or upgrade remote Terraform modules graph Generate a Graphviz graph of the steps in an operation import Associate existing infrastructure with a Terraform resource login Obtain and save credentials for a remote host logout Remove locally-stored credentials for a remote host output Show output values from your root module providers Show the providers required for this configuration refresh Update the state to match remote systems show Show the current state or a saved plan state Advanced state management taint Mark a resource instance as not fully functional test Experimental support for module integration testing untaint Remove the 'tainted' state from a resource instance version Show the current Terraform version workspace Workspace management Global options (use these before the subcommand, if any): -chdir=DIR Switch to a different working directory before executing the given subcommand. -help Show this help output, or the help for a specified subcommand. -version An alias for the \"version\" subcommand.","title":"Help content"},{"location":"descriptors/terraform_terraform_fmt/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM alpine/terragrunt:latest as terragrunt COPY --from=terragrunt /bin/terraform /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_terragrunt/","text":"terragrunt terragrunt documentation Version in MegaLinter: 0.39.0 Visit Official Web Site See How to configure terragrunt rules Configuration in MegaLinter Enable terragrunt by adding TERRAFORM_TERRAGRUNT in ENABLE_LINTERS variable Disable terragrunt by adding TERRAFORM_TERRAGRUNT in DISABLE_LINTERS variable Enable auto-fixes by adding TERRAFORM_TERRAGRUNT in APPLY_FIXES variable Variable Description Default value TERRAFORM_TERRAGRUNT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_TERRAGRUNT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".hcl\"] TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRAGRUNT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRAGRUNT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRAGRUNT_CONFIG_FILE terragrunt configuration file name Use LINTER_DEFAULT to let the linter find it terragrunt.hcl TERRAFORM_TERRAGRUNT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TERRAGRUNT_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_TERRAGRUNT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .hcl File name do not ends with: .tflint.hcl How the linting is performed terragrunt is called one time by identified file ( file CLI lint mode) Example calls terragrunt hclfmt --terragrunt-check --terragrunt-hclfmt-file myfile.hcl terragrunt hclfmt --terragrunt-check --terragrunt-config terragrunt.hcl --terragrunt-hclfmt-file myfile.hcl Help content DESCRIPTION: terragrunt - Terragrunt is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules, remote state, and locking. For documentation, see https://github.com/gruntwork-io/terragrunt/. USAGE: terragrunt <COMMAND> [GLOBAL OPTIONS] COMMANDS: run-all Run a terraform command against a 'stack' by running the specified command in each subfolder. E.g., to run 'terragrunt apply' in each subfolder, use 'terragrunt run-all apply'. terragrunt-info Emits limited terragrunt state on stdout and exits validate-inputs Checks if the terragrunt configured inputs align with the terraform defined variables. graph-dependencies Prints the terragrunt dependency graph to stdout hclfmt Recursively find hcl files and rewrite them into a canonical format. aws-provider-patch Overwrite settings on nested AWS providers to work around a Terraform bug (issue #13018) render-json Render the final terragrunt config, with all variables, includes, and functions resolved, as json. This is useful for enforcing policies using static analysis tools like Open Policy Agent, or for debugging your terragrunt config. * Terragrunt forwards all other commands directly to Terraform GLOBAL OPTIONS: terragrunt-config Path to the Terragrunt config file. Default is terragrunt.hcl. terragrunt-tfpath Path to the Terraform binary. Default is terraform (on PATH). terragrunt-no-auto-init Don't automatically run 'terraform init' during other terragrunt commands. You must run 'terragrunt init' manually. terragrunt-no-auto-retry Don't automatically re-run command in case of transient errors. terragrunt-non-interactive Assume \"yes\" for all prompts. terragrunt-working-dir The path to the Terraform templates. Default is current directory. terragrunt-download-dir The path where to download Terraform code. Default is .terragrunt-cache in the working directory. terragrunt-source Download Terraform configurations from the specified source into a temporary folder, and run Terraform in that temporary folder. terragrunt-source-update Delete the contents of the temporary folder to clear out any old, cached source code before downloading new source code into it. terragrunt-iam-role Assume the specified IAM role before executing Terraform. Can also be set via the TERRAGRUNT_IAM_ROLE environment variable. terragrunt-iam-assume-role-duration Session duration for IAM Assume Role session. Can also be set via the TERRAGRUNT_IAM_ASSUME_ROLE_DURATION environment variable. terragrunt-iam-assume-role-session-name Name for the IAM Assummed Role session. Can also be set via TERRAGRUNT_IAM_ASSUME_ROLE_SESSION_NAME environment variable. terragrunt-ignore-dependency-errors *-all commands continue processing components even if a dependency fails. terragrunt-ignore-dependency-order *-all commands will be run disregarding the dependencies terragrunt-ignore-external-dependencies *-all commands will not attempt to include external dependencies terragrunt-include-external-dependencies *-all commands will include external dependencies terragrunt-parallelism <N> *-all commands parallelism set to at most N modules terragrunt-exclude-dir Unix-style glob of directories to exclude when running *-all commands terragrunt-include-dir Unix-style glob of directories to include when running *-all commands terragrunt-check Enable check mode in the hclfmt command. terragrunt-hclfmt-file The path to a single hcl file that the hclfmt command should run on. terragrunt-override-attr A key=value attribute to override in a provider block as part of the aws-provider-patch command. May be specified multiple times. terragrunt-debug Write terragrunt-debug.tfvars to working folder to help root-cause issues. terragrunt-log-level Sets the logging level for Terragrunt. Supported levels: panic, fatal, error, warn (default), info, debug, trace. terragrunt-strict-validate Sets strict mode for the validate-inputs command. By default, strict mode is off. When this flag is passed, strict mode is turned on. When strict mode is turned off, the validate-inputs command will only return an error if required inputs are missing from all input sources (env vars, var files, etc). When strict mode is turned on, an error will be returned if required inputs are missing OR if unused variables are passed to Terragrunt. terragrunt-json-out The file path that terragrunt should use when rendering the terragrunt.hcl config as json. Only used in the render-json command. Defaults to terragrunt_rendered.json. terragrunt-use-partial-parse-config-cache Enables caching of includes during partial parsing operations. Will also be used for the --terragrunt-iam-role option if provided. VERSION: v0.39.0 AUTHOR(S): Gruntwork <www.gruntwork.io> Installation on mega-linter Docker image Dockerfile commands : FROM alpine/terragrunt:latest as terragrunt COPY --from=terragrunt /usr/local/bin/terragrunt /usr/bin/","title":"terragrunt"},{"location":"descriptors/terraform_terragrunt/#terragrunt","text":"","title":"terragrunt"},{"location":"descriptors/terraform_terragrunt/#terragrunt-documentation","text":"Version in MegaLinter: 0.39.0 Visit Official Web Site See How to configure terragrunt rules","title":"terragrunt documentation"},{"location":"descriptors/terraform_terragrunt/#configuration-in-megalinter","text":"Enable terragrunt by adding TERRAFORM_TERRAGRUNT in ENABLE_LINTERS variable Disable terragrunt by adding TERRAFORM_TERRAGRUNT in DISABLE_LINTERS variable Enable auto-fixes by adding TERRAFORM_TERRAGRUNT in APPLY_FIXES variable Variable Description Default value TERRAFORM_TERRAGRUNT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRAGRUNT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_TERRAGRUNT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_TERRAGRUNT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_TERRAGRUNT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".hcl\"] TERRAFORM_TERRAGRUNT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRAGRUNT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRAGRUNT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRAGRUNT_CONFIG_FILE terragrunt configuration file name Use LINTER_DEFAULT to let the linter find it terragrunt.hcl TERRAFORM_TERRAGRUNT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TERRAGRUNT_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_TERRAGRUNT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_terragrunt/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/terraform_terragrunt/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_terragrunt/#how-are-identified-applicable-files","text":"File extensions: .hcl File name do not ends with: .tflint.hcl","title":"How are identified applicable files"},{"location":"descriptors/terraform_terragrunt/#how-the-linting-is-performed","text":"terragrunt is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/terraform_terragrunt/#example-calls","text":"terragrunt hclfmt --terragrunt-check --terragrunt-hclfmt-file myfile.hcl terragrunt hclfmt --terragrunt-check --terragrunt-config terragrunt.hcl --terragrunt-hclfmt-file myfile.hcl","title":"Example calls"},{"location":"descriptors/terraform_terragrunt/#help-content","text":"DESCRIPTION: terragrunt - Terragrunt is a thin wrapper for Terraform that provides extra tools for working with multiple Terraform modules, remote state, and locking. For documentation, see https://github.com/gruntwork-io/terragrunt/. USAGE: terragrunt <COMMAND> [GLOBAL OPTIONS] COMMANDS: run-all Run a terraform command against a 'stack' by running the specified command in each subfolder. E.g., to run 'terragrunt apply' in each subfolder, use 'terragrunt run-all apply'. terragrunt-info Emits limited terragrunt state on stdout and exits validate-inputs Checks if the terragrunt configured inputs align with the terraform defined variables. graph-dependencies Prints the terragrunt dependency graph to stdout hclfmt Recursively find hcl files and rewrite them into a canonical format. aws-provider-patch Overwrite settings on nested AWS providers to work around a Terraform bug (issue #13018) render-json Render the final terragrunt config, with all variables, includes, and functions resolved, as json. This is useful for enforcing policies using static analysis tools like Open Policy Agent, or for debugging your terragrunt config. * Terragrunt forwards all other commands directly to Terraform GLOBAL OPTIONS: terragrunt-config Path to the Terragrunt config file. Default is terragrunt.hcl. terragrunt-tfpath Path to the Terraform binary. Default is terraform (on PATH). terragrunt-no-auto-init Don't automatically run 'terraform init' during other terragrunt commands. You must run 'terragrunt init' manually. terragrunt-no-auto-retry Don't automatically re-run command in case of transient errors. terragrunt-non-interactive Assume \"yes\" for all prompts. terragrunt-working-dir The path to the Terraform templates. Default is current directory. terragrunt-download-dir The path where to download Terraform code. Default is .terragrunt-cache in the working directory. terragrunt-source Download Terraform configurations from the specified source into a temporary folder, and run Terraform in that temporary folder. terragrunt-source-update Delete the contents of the temporary folder to clear out any old, cached source code before downloading new source code into it. terragrunt-iam-role Assume the specified IAM role before executing Terraform. Can also be set via the TERRAGRUNT_IAM_ROLE environment variable. terragrunt-iam-assume-role-duration Session duration for IAM Assume Role session. Can also be set via the TERRAGRUNT_IAM_ASSUME_ROLE_DURATION environment variable. terragrunt-iam-assume-role-session-name Name for the IAM Assummed Role session. Can also be set via TERRAGRUNT_IAM_ASSUME_ROLE_SESSION_NAME environment variable. terragrunt-ignore-dependency-errors *-all commands continue processing components even if a dependency fails. terragrunt-ignore-dependency-order *-all commands will be run disregarding the dependencies terragrunt-ignore-external-dependencies *-all commands will not attempt to include external dependencies terragrunt-include-external-dependencies *-all commands will include external dependencies terragrunt-parallelism <N> *-all commands parallelism set to at most N modules terragrunt-exclude-dir Unix-style glob of directories to exclude when running *-all commands terragrunt-include-dir Unix-style glob of directories to include when running *-all commands terragrunt-check Enable check mode in the hclfmt command. terragrunt-hclfmt-file The path to a single hcl file that the hclfmt command should run on. terragrunt-override-attr A key=value attribute to override in a provider block as part of the aws-provider-patch command. May be specified multiple times. terragrunt-debug Write terragrunt-debug.tfvars to working folder to help root-cause issues. terragrunt-log-level Sets the logging level for Terragrunt. Supported levels: panic, fatal, error, warn (default), info, debug, trace. terragrunt-strict-validate Sets strict mode for the validate-inputs command. By default, strict mode is off. When this flag is passed, strict mode is turned on. When strict mode is turned off, the validate-inputs command will only return an error if required inputs are missing from all input sources (env vars, var files, etc). When strict mode is turned on, an error will be returned if required inputs are missing OR if unused variables are passed to Terragrunt. terragrunt-json-out The file path that terragrunt should use when rendering the terragrunt.hcl config as json. Only used in the render-json command. Defaults to terragrunt_rendered.json. terragrunt-use-partial-parse-config-cache Enables caching of includes during partial parsing operations. Will also be used for the --terragrunt-iam-role option if provided. VERSION: v0.39.0 AUTHOR(S): Gruntwork <www.gruntwork.io>","title":"Help content"},{"location":"descriptors/terraform_terragrunt/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM alpine/terragrunt:latest as terragrunt COPY --from=terragrunt /usr/local/bin/terragrunt /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_terrascan/","text":"terrascan documentation Version in MegaLinter: 1.15.2 Visit Official Web Site See How to configure terrascan rules See Index of problems detected by terrascan Configuration in MegaLinter Enable terrascan by adding TERRAFORM_TERRASCAN in ENABLE_LINTERS variable Disable terrascan by adding TERRAFORM_TERRASCAN in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TERRASCAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRASCAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TERRASCAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRASCAN_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRASCAN_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRASCAN_CONFIG_FILE terrascan configuration file name Use LINTER_DEFAULT to let the linter find it terrascan-config.toml TERRAFORM_TERRASCAN_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TERRASCAN_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_TERRASCAN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .tf How the linting is performed terrascan is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using terrascan configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make terrascan analyze only updated files Example calls terrascan scan -i terraform -t all -f myfile.tf Help content Terrascan Detect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure. For more information, please visit https://runterrascan.io/ Usage: terrascan [command] Available Commands: init Initializes Terrascan and clones policies from the Terrascan GitHub repository. scan Detect compliance and security violations across Infrastructure as Code. server Run Terrascan as an API server version Terrascan version Flags: -c, --config-path string config file path -l, --log-level string log level (debug, info, warn, error, panic, fatal) (default \"info\") --log-output-dir string directory path to write the log and output files -x, --log-type string log output type (console, json) (default \"console\") -o, --output string output type (human, json, yaml, xml, junit-xml, sarif, github-sarif) (default \"human\") --temp-dir string temporary directory path to download remote repository,module and templates Use \"terrascan [command] --help\" for more information about a command. Installation on mega-linter Docker image Dockerfile commands : FROM tenable/terrascan:latest as terrascan COPY --from=terrascan /go/bin/terrascan /usr/bin/","title":"terrascan"},{"location":"descriptors/terraform_terrascan/#terrascan-documentation","text":"Version in MegaLinter: 1.15.2 Visit Official Web Site See How to configure terrascan rules See Index of problems detected by terrascan","title":"terrascan documentation"},{"location":"descriptors/terraform_terrascan/#configuration-in-megalinter","text":"Enable terrascan by adding TERRAFORM_TERRASCAN in ENABLE_LINTERS variable Disable terrascan by adding TERRAFORM_TERRASCAN in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TERRASCAN_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TERRASCAN_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TERRASCAN_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TERRASCAN_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TERRASCAN_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TERRASCAN_CONFIG_FILE terrascan configuration file name Use LINTER_DEFAULT to let the linter find it terrascan-config.toml TERRAFORM_TERRASCAN_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TERRASCAN_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_TERRASCAN_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_terrascan/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/terraform_terrascan/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_terrascan/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_terrascan/#how-the-linting-is-performed","text":"terrascan is called once on the whole project directory ( project CLI lint mode) filtering can not be done using MegaLinter configuration variables,it must be done using terrascan configuration or ignore file (if existing) VALIDATE_ALL_CODEBASE: false does not make terrascan analyze only updated files","title":"How the linting is performed"},{"location":"descriptors/terraform_terrascan/#example-calls","text":"terrascan scan -i terraform -t all -f myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_terrascan/#help-content","text":"Terrascan Detect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure. For more information, please visit https://runterrascan.io/ Usage: terrascan [command] Available Commands: init Initializes Terrascan and clones policies from the Terrascan GitHub repository. scan Detect compliance and security violations across Infrastructure as Code. server Run Terrascan as an API server version Terrascan version Flags: -c, --config-path string config file path -l, --log-level string log level (debug, info, warn, error, panic, fatal) (default \"info\") --log-output-dir string directory path to write the log and output files -x, --log-type string log output type (console, json) (default \"console\") -o, --output string output type (human, json, yaml, xml, junit-xml, sarif, github-sarif) (default \"human\") --temp-dir string temporary directory path to download remote repository,module and templates Use \"terrascan [command] --help\" for more information about a command.","title":"Help content"},{"location":"descriptors/terraform_terrascan/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM tenable/terrascan:latest as terrascan COPY --from=terrascan /go/bin/terrascan /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/terraform_tflint/","text":"tflint tflint documentation Version in MegaLinter: 0.41.0 Visit Official Web Site See How to configure tflint rules If custom .tflint.hcl config file is not found, .tflint.hcl will be used See How to disable tflint rules in files See Index of problems detected by tflint Configuration in MegaLinter Enable tflint by adding TERRAFORM_TFLINT in ENABLE_LINTERS variable Disable tflint by adding TERRAFORM_TFLINT in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TFLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TFLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_TFLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_TFLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_TFLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TFLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TFLINT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TFLINT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TFLINT_CONFIG_FILE tflint configuration file name Use LINTER_DEFAULT to let the linter find it .tflint.hcl TERRAFORM_TFLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TFLINT_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_TFLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .tf How the linting is performed tflint is called one time by identified file ( file CLI lint mode) Example calls tflint myfile.tf tflint -c .tflint.hcl myfile.tf Help content Usage: tflint [OPTIONS] [FILE or DIR...] Application Options: -v, --version Print TFLint version --init Install plugins --langserver Start language server -f, --format=[default|json|checkstyle|junit|compact|sarif] Output format -c, --config=FILE Config file name (default: .tflint.hcl) --ignore-module=SOURCE Ignore module sources --enable-rule=RULE_NAME Enable rules from the command line --disable-rule=RULE_NAME Disable rules from the command line --only=RULE_NAME Enable only this rule, disabling all other defaults. Can be specified multiple times --enable-plugin=PLUGIN_NAME Enable plugins from the command line --var-file=FILE Terraform variable file name --var='foo=bar' Set a Terraform variable --module Inspect modules --force Return zero exit status even if issues found --color Enable colorized output --no-color Disable colorized output Help Options: -h, --help Show this help message Installation on mega-linter Docker image Dockerfile commands : FROM ghcr.io/terraform-linters/tflint:v0.41.0 as tflint COPY --from=tflint /usr/local/bin/tflint /usr/bin/","title":"tflint"},{"location":"descriptors/terraform_tflint/#tflint","text":"","title":"tflint"},{"location":"descriptors/terraform_tflint/#tflint-documentation","text":"Version in MegaLinter: 0.41.0 Visit Official Web Site See How to configure tflint rules If custom .tflint.hcl config file is not found, .tflint.hcl will be used See How to disable tflint rules in files See Index of problems detected by tflint","title":"tflint documentation"},{"location":"descriptors/terraform_tflint/#configuration-in-megalinter","text":"Enable tflint by adding TERRAFORM_TFLINT in ENABLE_LINTERS variable Disable tflint by adding TERRAFORM_TFLINT in DISABLE_LINTERS variable Variable Description Default value TERRAFORM_TFLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TERRAFORM_TFLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TERRAFORM_TFLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TERRAFORM_TFLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file TERRAFORM_TFLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tf\"] TERRAFORM_TFLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TERRAFORM_TFLINT_PRE_COMMANDS List of bash commands to run before the linter None TERRAFORM_TFLINT_POST_COMMANDS List of bash commands to run after the linter None TERRAFORM_TFLINT_CONFIG_FILE tflint configuration file name Use LINTER_DEFAULT to let the linter find it .tflint.hcl TERRAFORM_TFLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TERRAFORM_TFLINT_DISABLE_ERRORS Run linter but consider errors as warnings false TERRAFORM_TFLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/terraform_tflint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 security Optimized for security 21 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/terraform_tflint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/terraform_tflint/#how-are-identified-applicable-files","text":"File extensions: .tf","title":"How are identified applicable files"},{"location":"descriptors/terraform_tflint/#how-the-linting-is-performed","text":"tflint is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/terraform_tflint/#example-calls","text":"tflint myfile.tf tflint -c .tflint.hcl myfile.tf","title":"Example calls"},{"location":"descriptors/terraform_tflint/#help-content","text":"Usage: tflint [OPTIONS] [FILE or DIR...] Application Options: -v, --version Print TFLint version --init Install plugins --langserver Start language server -f, --format=[default|json|checkstyle|junit|compact|sarif] Output format -c, --config=FILE Config file name (default: .tflint.hcl) --ignore-module=SOURCE Ignore module sources --enable-rule=RULE_NAME Enable rules from the command line --disable-rule=RULE_NAME Disable rules from the command line --only=RULE_NAME Enable only this rule, disabling all other defaults. Can be specified multiple times --enable-plugin=PLUGIN_NAME Enable plugins from the command line --var-file=FILE Terraform variable file name --var='foo=bar' Set a Terraform variable --module Inspect modules --force Return zero exit status even if issues found --color Enable colorized output --no-color Disable colorized output Help Options: -h, --help Show this help message","title":"Help content"},{"location":"descriptors/terraform_tflint/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : FROM ghcr.io/terraform-linters/tflint:v0.41.0 as tflint COPY --from=tflint /usr/local/bin/tflint /usr/bin/","title":"Installation on mega-linter Docker image"},{"location":"descriptors/tsx/","text":"TSX Linters Linter Configuration key Status eslint TSX Linted files File extensions: .tsx Configuration in MegaLinter Variable Description Default value TSX_FILTER_REGEX_INCLUDE Custom regex including filter TSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All TSX linters"},{"location":"descriptors/tsx/#tsx","text":"","title":"TSX"},{"location":"descriptors/tsx/#linters","text":"Linter Configuration key Status eslint TSX","title":"Linters"},{"location":"descriptors/tsx/#linted-files","text":"File extensions: .tsx","title":"Linted files"},{"location":"descriptors/tsx/#configuration-in-megalinter","text":"Variable Description Default value TSX_FILTER_REGEX_INCLUDE Custom regex including filter TSX_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/tsx_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint Configuration in MegaLinter Enable eslint by adding TSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding TSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding TSX_ESLINT in APPLY_FIXES variable Variable Description Default value TSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TSX_ESLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tsx\"] TSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TSX_ESLINT_PRE_COMMANDS List of bash commands to run before the linter None TSX_ESLINT_POST_COMMANDS List of bash commands to run after the linter None TSX_ESLINT_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TSX_ESLINT_DISABLE_ERRORS Run linter but consider errors as warnings false TSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .tsx How the linting is performed eslint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls eslint myfile.tsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-jest eslint-plugin-prettier eslint-plugin-react babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser @microsoft/eslint-formatter-sarif","title":"eslint"},{"location":"descriptors/tsx_eslint/#eslint-documentation","text":"Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/tsx_eslint/#configuration-in-megalinter","text":"Enable eslint by adding TSX_ESLINT in ENABLE_LINTERS variable Disable eslint by adding TSX_ESLINT in DISABLE_LINTERS variable Enable auto-fixes by adding TSX_ESLINT in APPLY_FIXES variable Variable Description Default value TSX_ESLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TSX_ESLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TSX_ESLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TSX_ESLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TSX_ESLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".tsx\"] TSX_ESLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TSX_ESLINT_PRE_COMMANDS List of bash commands to run before the linter None TSX_ESLINT_POST_COMMANDS List of bash commands to run after the linter None TSX_ESLINT_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TSX_ESLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TSX_ESLINT_DISABLE_ERRORS Run linter but consider errors as warnings false TSX_ESLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/tsx_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/tsx_eslint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/tsx_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/tsx_eslint/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .tsx","title":"How are identified applicable files"},{"location":"descriptors/tsx_eslint/#how-the-linting-is-performed","text":"eslint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/tsx_eslint/#example-calls","text":"eslint myfile.tsx eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.tsx","title":"Example calls"},{"location":"descriptors/tsx_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/tsx_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-plugin-jest eslint-plugin-prettier eslint-plugin-react babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser @microsoft/eslint-formatter-sarif","title":"Installation on mega-linter Docker image"},{"location":"descriptors/typescript/","text":"TYPESCRIPT Linters Linter Configuration key Status eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT Linted files File extensions: .ts Configuration in MegaLinter Variable Description Default value TYPESCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter TYPESCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation NPM packages (node.js): typescript","title":"All TYPESCRIPT linters"},{"location":"descriptors/typescript/#typescript","text":"","title":"TYPESCRIPT"},{"location":"descriptors/typescript/#linters","text":"Linter Configuration key Status eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT","title":"Linters"},{"location":"descriptors/typescript/#linted-files","text":"File extensions: .ts","title":"Linted files"},{"location":"descriptors/typescript/#configuration-in-megalinter","text":"Variable Description Default value TYPESCRIPT_FILTER_REGEX_INCLUDE Custom regex including filter TYPESCRIPT_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/typescript/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript/#installation","text":"NPM packages (node.js): typescript","title":"Installation"},{"location":"descriptors/typescript_eslint/","text":"eslint requires a custom configuration file applicable to your project. You can create it by typing npx eslint --init in the root of your repository eslint documentation Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint Configuration in MegaLinter Enable eslint by adding TYPESCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding TYPESCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_ES in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TYPESCRIPT_ES_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TYPESCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_ES_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_ES_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_ES_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TYPESCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TYPESCRIPT_ES_DISABLE_ERRORS Run linter but consider errors as warnings false TYPESCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .ts How the linting is performed eslint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls eslint myfile.ts eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts Help content eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file Installation on mega-linter Docker image NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser @microsoft/eslint-formatter-sarif","title":"eslint"},{"location":"descriptors/typescript_eslint/#eslint-documentation","text":"Version in MegaLinter: 8.24.0 Visit Official Web Site See How to configure eslint rules See How to disable eslint rules in files See How to ignore files and directories with eslint You can define a .eslintignore file to ignore files and folders See Index of problems detected by eslint","title":"eslint documentation"},{"location":"descriptors/typescript_eslint/#configuration-in-megalinter","text":"Enable eslint by adding TYPESCRIPT_ES in ENABLE_LINTERS variable Disable eslint by adding TYPESCRIPT_ES in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_ES in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_ES_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_ES_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TYPESCRIPT_ES_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TYPESCRIPT_ES_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TYPESCRIPT_ES_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_ES_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_ES_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_ES_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_ES_CONFIG_FILE eslint configuration file name Use LINTER_DEFAULT to let the linter find it .eslintrc.json TYPESCRIPT_ES_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TYPESCRIPT_ES_DISABLE_ERRORS Run linter but consider errors as warnings false TYPESCRIPT_ES_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/typescript_eslint/#ide-integration","text":"Use eslint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-eslint Visit Web Site Brackets brackets-eslint Visit Web Site Eclipse Tern-Linter-ESLint Visit Web Site Emacs flycheck Visit Web Site IDEA ESLint Plugin Sublime Text SublimeLinter-eslint Visit Web Site vim ale Visit Web Site vim Syntastic Visit Web Site Visual Studio Code vscode-eslint","title":"IDE Integration"},{"location":"descriptors/typescript_eslint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/typescript_eslint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript_eslint/#how-are-identified-applicable-files","text":"Activated only if one of these files is found: .eslintrc.json, .eslintrc.yml, .eslintrc.yaml, .eslintrc.js, .eslintrc.cjs, package.json:eslintConfig File extensions: .ts","title":"How are identified applicable files"},{"location":"descriptors/typescript_eslint/#how-the-linting-is-performed","text":"eslint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/typescript_eslint/#example-calls","text":"eslint myfile.ts eslint -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts eslint --fix -c .eslintrc.json --no-eslintrc --no-ignore myfile.ts","title":"Example calls"},{"location":"descriptors/typescript_eslint/#help-content","text":"eslint [options] file.js [file.js] [dir] Basic configuration: --no-eslintrc Disable use of configuration from .eslintrc.* -c, --config path::String Use this configuration, overriding .eslintrc.* config options if present --env [String] Specify environments --ext [String] Specify JavaScript file extensions --global [String] Define global variables --parser String Specify the parser to be used --parser-options Object Specify parser options --resolve-plugins-relative-to path::String A folder where plugins should be resolved from, CWD by default Specifying rules and plugins: --plugin [String] Specify plugins --rule Object Specify rules --rulesdir [path::String] Load additional rules from this directory. Deprecated: Use rules from plugins Fixing problems: --fix Automatically fix problems --fix-dry-run Automatically fix problems without saving the changes to the file system --fix-type Array Specify the types of fixes to apply (directive, problem, suggestion, layout) Ignoring files: --ignore-path path::String Specify path of ignore file --no-ignore Disable use of ignore files and patterns --ignore-pattern [String] Pattern of files to ignore (in addition to those in .eslintignore) Using stdin: --stdin Lint code provided on <STDIN> - default: false --stdin-filename String Specify filename to process STDIN as Handling warnings: --quiet Report errors only - default: false --max-warnings Int Number of warnings to trigger nonzero exit code - default: -1 Output: -o, --output-file path::String Specify file to write report to -f, --format String Use a specific output format - default: stylish --color, --no-color Force enabling/disabling of color Inline configuration comments: --no-inline-config Prevent comments from changing config or rules --report-unused-disable-directives Adds reported errors for unused eslint-disable directives Caching: --cache Only check changed files - default: false --cache-file path::String Path to the cache file. Deprecated: use --cache-location - default: .eslintcache --cache-location path::String Path to the cache file or directory --cache-strategy String Strategy to use for detecting changed files in the cache - either: metadata or content - default: metadata Miscellaneous: --init Run config initialization wizard - default: false --env-info Output execution environment information - default: false --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched --exit-on-fatal-error Exit with exit code 2 in case of fatal error - default: false --debug Output debugging information -h, --help Show help -v, --version Output the version number --print-config path::String Print the configuration for the given file","title":"Help content"},{"location":"descriptors/typescript_eslint/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript eslint eslint-config-airbnb eslint-config-prettier eslint-config-standard eslint-plugin-import eslint-plugin-jest eslint-plugin-node eslint-plugin-prettier eslint-plugin-promise babel-eslint prettier prettyjson @typescript-eslint/eslint-plugin @typescript-eslint/parser @microsoft/eslint-formatter-sarif","title":"Installation on mega-linter Docker image"},{"location":"descriptors/typescript_prettier/","text":"prettier documentation Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier Configuration in MegaLinter Enable prettier by adding TYPESCRIPT_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding TYPESCRIPT_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_PRETTIER in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_DEFAULT_STYLE For prettier to be active, TYPESCRIPT_DEFAULT_STYLE must be prettier standard TYPESCRIPT_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TYPESCRIPT_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TYPESCRIPT_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json TYPESCRIPT_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TYPESCRIPT_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true TYPESCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files File extensions: .ts How the linting is performed prettier is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls prettier --check myfile.ts prettier --config .prettierrc.json --check myfile.ts prettier --config .prettierrc.json --write myfile.ts Help content Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version. Installation on mega-linter Docker image NPM packages (node.js): typescript prettier","title":"prettier"},{"location":"descriptors/typescript_prettier/#prettier-documentation","text":"Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier","title":"prettier documentation"},{"location":"descriptors/typescript_prettier/#configuration-in-megalinter","text":"Enable prettier by adding TYPESCRIPT_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding TYPESCRIPT_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_PRETTIER in APPLY_FIXES variable Variable Description Default value TYPESCRIPT_DEFAULT_STYLE For prettier to be active, TYPESCRIPT_DEFAULT_STYLE must be prettier standard TYPESCRIPT_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TYPESCRIPT_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TYPESCRIPT_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TYPESCRIPT_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json TYPESCRIPT_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules TYPESCRIPT_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true TYPESCRIPT_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/typescript_prettier/#ide-integration","text":"Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode","title":"IDE Integration"},{"location":"descriptors/typescript_prettier/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/typescript_prettier/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript_prettier/#how-are-identified-applicable-files","text":"File extensions: .ts","title":"How are identified applicable files"},{"location":"descriptors/typescript_prettier/#how-the-linting-is-performed","text":"prettier is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/typescript_prettier/#example-calls","text":"prettier --check myfile.ts prettier --config .prettierrc.json --check myfile.ts prettier --config .prettierrc.json --write myfile.ts","title":"Example calls"},{"location":"descriptors/typescript_prettier/#help-content","text":"Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version.","title":"Help content"},{"location":"descriptors/typescript_prettier/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript prettier","title":"Installation on mega-linter Docker image"},{"location":"descriptors/typescript_standard/","text":"standard documentation Version in MegaLinter: 17.0.0 Visit Official Web Site See Index of problems detected by standard Configuration in MegaLinter Enable standard by adding TYPESCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding TYPESCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For standard to be active, JAVASCRIPT_DEFAULT_STYLE must be standard standard TYPESCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TYPESCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TYPESCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings false TYPESCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use standard in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-js-standard Visit Web Site Atom linter-js-standard-engine Visit Web Site Atom standard-formatter Visit Web Site Brackets brackets-standard Visit Web Site IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 Behind the scenes How are identified applicable files File extensions: .ts How the linting is performed standard is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin myfile.ts standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin --fix myfile.ts Help content standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --ext Specify JavaScript file extensions --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint) Installation on mega-linter Docker image NPM packages (node.js): typescript standard @typescript-eslint/eslint-plugin @typescript-eslint/parser","title":"standard"},{"location":"descriptors/typescript_standard/#standard-documentation","text":"Version in MegaLinter: 17.0.0 Visit Official Web Site See Index of problems detected by standard","title":"standard documentation"},{"location":"descriptors/typescript_standard/#configuration-in-megalinter","text":"Enable standard by adding TYPESCRIPT_STANDARD in ENABLE_LINTERS variable Disable standard by adding TYPESCRIPT_STANDARD in DISABLE_LINTERS variable Enable auto-fixes by adding TYPESCRIPT_STANDARD in APPLY_FIXES variable Variable Description Default value JAVASCRIPT_DEFAULT_STYLE For standard to be active, JAVASCRIPT_DEFAULT_STYLE must be standard standard TYPESCRIPT_STANDARD_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" TYPESCRIPT_STANDARD_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file TYPESCRIPT_STANDARD_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file TYPESCRIPT_STANDARD_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files TYPESCRIPT_STANDARD_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".ts\"] TYPESCRIPT_STANDARD_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file TYPESCRIPT_STANDARD_PRE_COMMANDS List of bash commands to run before the linter None TYPESCRIPT_STANDARD_POST_COMMANDS List of bash commands to run after the linter None TYPESCRIPT_STANDARD_DISABLE_ERRORS Run linter but consider errors as warnings false TYPESCRIPT_STANDARD_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/typescript_standard/#ide-integration","text":"Use standard in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom linter-js-standard Visit Web Site Atom linter-js-standard-engine Visit Web Site Atom standard-formatter Visit Web Site Brackets brackets-standard Visit Web Site IDEA native support Visit Web Site Sublime Text SublimeLinter-contrib-standard Visit Web Site Sublime Text StandardFormat Visit Web Site Visual Studio Code https://marketplace.visualstudio.com/items?itemName=standard.vscode-standard Visit Web Site","title":"IDE Integration"},{"location":"descriptors/typescript_standard/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/typescript_standard/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/typescript_standard/#how-are-identified-applicable-files","text":"File extensions: .ts","title":"How are identified applicable files"},{"location":"descriptors/typescript_standard/#how-the-linting-is-performed","text":"standard is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/typescript_standard/#example-calls","text":"standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin myfile.ts standard --parser @typescript-eslint/parser --plugin @typescript-eslint/eslint-plugin --fix myfile.ts","title":"Example calls"},{"location":"descriptors/typescript_standard/#help-content","text":"standard - Use JavaScript Standard Style (https://standardjs.com) Usage: standard <flags> [FILES...] If FILES is omitted, all JavaScript source files (*.js, *.jsx, *.mjs, *.cjs) in the current working directory are checked, recursively. Certain paths (node_modules/, coverage/, vendor/, *.min.js, and files/folders that begin with '.' like .git/) are automatically ignored. Paths in a project's root .gitignore file are also automatically ignored. Flags: --fix Automatically fix problems --version Show current version -h, --help Show usage information Flags (advanced): --stdin Read file text from stdin --ext Specify JavaScript file extensions --global Declare global variable --plugin Use custom eslint plugin --env Use custom eslint environment --parser Use custom js parser (e.g. babel-eslint)","title":"Help content"},{"location":"descriptors/typescript_standard/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): typescript standard @typescript-eslint/eslint-plugin @typescript-eslint/parser","title":"Installation on mega-linter Docker image"},{"location":"descriptors/vbdotnet/","text":"Visual Basic .NET Linters Linter Configuration key Status dotnet-format VBDOTNET Linted files File extensions: .vb Configuration in MegaLinter Variable Description Default value VBDOTNET_FILTER_REGEX_INCLUDE Custom regex including filter VBDOTNET_FILTER_REGEX_EXCLUDE Custom regex excluding filter Behind the scenes Installation Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"All Visual Basic .NET (VBDOTNET) linters"},{"location":"descriptors/vbdotnet/#visual-basic-net","text":"","title":"Visual Basic .NET"},{"location":"descriptors/vbdotnet/#linters","text":"Linter Configuration key Status dotnet-format VBDOTNET","title":"Linters"},{"location":"descriptors/vbdotnet/#linted-files","text":"File extensions: .vb","title":"Linted files"},{"location":"descriptors/vbdotnet/#configuration-in-megalinter","text":"Variable Description Default value VBDOTNET_FILTER_REGEX_INCLUDE Custom regex including filter VBDOTNET_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/vbdotnet/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/vbdotnet/#installation","text":"Dockerfile commands : RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" APK packages (Linux): icu-libs libcurl libintl libssl1.1 libstdc++ lttng-ust-dev zlib zlib-dev","title":"Installation"},{"location":"descriptors/vbdotnet_dotnet_format/","text":"dotnet-format dotnet-format documentation Version in MegaLinter: 000 Visit Official Web Site Configuration in MegaLinter Enable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding VBDOTNET_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value VBDOTNET_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file VBDOTNET_DOTNET_FORMAT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".vb\"] VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file VBDOTNET_DOTNET_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None VBDOTNET_DOTNET_FORMAT_POST_COMMANDS List of bash commands to run after the linter None VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings true VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55 Behind the scenes How are identified applicable files File extensions: .vb How the linting is performed dotnet-format is called one time by identified file ( file CLI lint mode) Example calls dotnet-format --folder --check --exclude / --include myfile.vb dotnet-format --folder --exclude / --include myfile.vb Help content dotnet-format dotnet-format Usage: dotnet-format [options] [<workspace>] Arguments: <workspace> A path to a solution file, a project file, or a folder containing a solution or project file. If a path is not specified then the current directory is used. [default: ] Options: --no-restore Doesn't execute an implicit restore before formatting. -f, --folder Whether to treat the `<workspace>` argument as a simple folder of files. -w, --fix-whitespace Run whitespace formatting. Run by default when not applying fixes. -s, --fix-style <error|info|warn> Run code style analyzers and apply fixes. -a, --fix-analyzers <error|info|warn> Run 3rd party analyzers and apply fixes. --diagnostics <diagnostics> A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. [default: ] --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: ] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: ] --check Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report-path> Accepts a file path, which if provided, will produce a json report in the given directory. -v, --verbosity <d|detailed|diag|diagnostic|m|minimal|n|normal|q|quiet> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --binarylog <binary-log-path> Log all project or solution load information to a binary log file. --version Show version information -?, -h, --help Show help and usage information Installation on mega-linter Docker image Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" # Linter install RUN /usr/share/dotnet/dotnet tool install -g dotnet-format","title":"dotnet-format"},{"location":"descriptors/vbdotnet_dotnet_format/#dotnet-format","text":"","title":"dotnet-format"},{"location":"descriptors/vbdotnet_dotnet_format/#dotnet-format-documentation","text":"Version in MegaLinter: 000 Visit Official Web Site","title":"dotnet-format documentation"},{"location":"descriptors/vbdotnet_dotnet_format/#configuration-in-megalinter","text":"Enable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in ENABLE_LINTERS variable Disable dotnet-format by adding VBDOTNET_DOTNET_FORMAT in DISABLE_LINTERS variable Enable auto-fixes by adding VBDOTNET_DOTNET_FORMAT in APPLY_FIXES variable Variable Description Default value VBDOTNET_DOTNET_FORMAT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file VBDOTNET_DOTNET_FORMAT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file VBDOTNET_DOTNET_FORMAT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project file VBDOTNET_DOTNET_FORMAT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".vb\"] VBDOTNET_DOTNET_FORMAT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file VBDOTNET_DOTNET_FORMAT_PRE_COMMANDS List of bash commands to run before the linter None VBDOTNET_DOTNET_FORMAT_POST_COMMANDS List of bash commands to run after the linter None VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS Run linter but consider errors as warnings true VBDOTNET_DOTNET_FORMAT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/vbdotnet_dotnet_format/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 dotnet Optimized for C, C++, C# or VB based projects 55","title":"MegaLinter Flavours"},{"location":"descriptors/vbdotnet_dotnet_format/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/vbdotnet_dotnet_format/#how-are-identified-applicable-files","text":"File extensions: .vb","title":"How are identified applicable files"},{"location":"descriptors/vbdotnet_dotnet_format/#how-the-linting-is-performed","text":"dotnet-format is called one time by identified file ( file CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/vbdotnet_dotnet_format/#example-calls","text":"dotnet-format --folder --check --exclude / --include myfile.vb dotnet-format --folder --exclude / --include myfile.vb","title":"Example calls"},{"location":"descriptors/vbdotnet_dotnet_format/#help-content","text":"dotnet-format dotnet-format Usage: dotnet-format [options] [<workspace>] Arguments: <workspace> A path to a solution file, a project file, or a folder containing a solution or project file. If a path is not specified then the current directory is used. [default: ] Options: --no-restore Doesn't execute an implicit restore before formatting. -f, --folder Whether to treat the `<workspace>` argument as a simple folder of files. -w, --fix-whitespace Run whitespace formatting. Run by default when not applying fixes. -s, --fix-style <error|info|warn> Run code style analyzers and apply fixes. -a, --fix-analyzers <error|info|warn> Run 3rd party analyzers and apply fixes. --diagnostics <diagnostics> A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. [default: ] --include <include> A list of relative file or folder paths to include in formatting. All files are formatted if empty. [default: ] --exclude <exclude> A list of relative file or folder paths to exclude from formatting. [default: ] --check Formats files without saving changes to disk. Terminates with a non-zero exit code if any files were formatted. --report <report-path> Accepts a file path, which if provided, will produce a json report in the given directory. -v, --verbosity <d|detailed|diag|diagnostic|m|minimal|n|normal|q|quiet> Set the verbosity level. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] --binarylog <binary-log-path> Log all project or solution load information to a binary log file. --version Show version information -?, -h, --help Show help and usage information","title":"Help content"},{"location":"descriptors/vbdotnet_dotnet_format/#installation-on-mega-linter-docker-image","text":"Dockerfile commands : # Parent descriptor install RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \\ && chmod +x dotnet-install.sh \\ && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 5.0 -version latest ENV PATH=\"${PATH}:/root/.dotnet/tools:/usr/share/dotnet\" # Linter install RUN /usr/share/dotnet/dotnet tool install -g dotnet-format","title":"Installation on mega-linter Docker image"},{"location":"descriptors/xml/","text":"XML Linters Linter Configuration key Status xmllint XML Linted files File extensions: .xml Configuration in MegaLinter Variable Description Default value XML_FILTER_REGEX_INCLUDE Custom regex including filter XML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All XML linters"},{"location":"descriptors/xml/#xml","text":"","title":"XML"},{"location":"descriptors/xml/#linters","text":"Linter Configuration key Status xmllint XML","title":"Linters"},{"location":"descriptors/xml/#linted-files","text":"File extensions: .xml","title":"Linted files"},{"location":"descriptors/xml/#configuration-in-megalinter","text":"Variable Description Default value XML_FILTER_REGEX_INCLUDE Custom regex including filter XML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/xml_xmllint/","text":"xmllint xmllint documentation Version in MegaLinter: 20914 Visit Official Web Site See Index of problems detected by xmllint Configuration in MegaLinter Enable xmllint by adding XML_XMLLINT in ENABLE_LINTERS variable Disable xmllint by adding XML_XMLLINT in DISABLE_LINTERS variable Variable Description Default value XML_XMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" XML_XMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file XML_XMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file XML_XMLLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files XML_XMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".xml\"] XML_XMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file XML_XMLLINT_PRE_COMMANDS List of bash commands to run before the linter None XML_XMLLINT_POST_COMMANDS List of bash commands to run after the linter None XML_XMLLINT_DISABLE_ERRORS Run linter but consider errors as warnings false XML_XMLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .xml How the linting is performed xmllint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls xmllint myfile.xml Help content Unknown option --help Usage : xmllint [options] XMLfiles ... Parse the XML files and output the result of the parsing --version : display the version of the XML library used --debug : dump a debug tree of the in-memory document --shell : run a navigating shell --debugent : debug the entities defined in the document --copy : used to test the internal copy implementation --recover : output what was parsable on broken XML documents --huge : remove any internal arbitrary parser limits --noent : substitute entity references by their value --noenc : ignore any encoding specified inside the document --noout : don't output the result tree --path 'paths': provide a set of paths for resources --load-trace : print trace of all external entities loaded --nonet : refuse to fetch DTDs or entities over network --nocompact : do not generate compact text nodes --htmlout : output results as HTML --nowrap : do not put HTML doc wrapper --valid : validate the document in addition to std well-formed check --postvalid : do a posteriori validation, i.e after parsing --dtdvalid URL : do a posteriori validation against a given DTD --dtdvalidfpi FPI : same but name the DTD with a Public Identifier --quiet : be quiet when succeeded --timing : print some timings --output file or -o file: save to a given file --repeat : repeat 100 times, for timing or profiling --insert : ad-hoc test for valid insertions --compress : turn on gzip compression of output --html : use the HTML parser --xmlout : force to use the XML serializer when using --html --nodefdtd : do not default HTML doctype --push : use the push mode of the parser --pushsmall : use the push mode of the parser using tiny increments --memory : parse from memory --maxmem nbbytes : limits memory allocation to nbbytes bytes --nowarning : do not emit warnings from parser/validator --noblanks : drop (ignorable?) blanks spaces --nocdata : replace cdata section with text nodes --format : reformat/reindent the output --encode encoding : output in the given encoding --dropdtd : remove the DOCTYPE of the input docs --pretty STYLE : pretty-print in a particular style 0 Do not pretty print 1 Format the XML content, as --format 2 Add whitespace inside tags, preserving content --c14n : save in W3C canonical format v1.0 (with comments) --c14n11 : save in W3C canonical format v1.1 (with comments) --exc-c14n : save in W3C exclusive canonical format (with comments) --nsclean : remove redundant namespace declarations --testIO : test user I/O support --catalogs : use SGML catalogs from $SGML_CATALOG_FILES otherwise XML Catalogs starting from file:///etc/xml/catalog are activated by default --nocatalogs: deactivate all catalogs --auto : generate a small doc on the fly --xinclude : do XInclude processing --noxincludenode : same but do not generate XInclude nodes --nofixup-base-uris : do not fixup xml:base uris --loaddtd : fetch external DTD --dtdattr : loaddtd + populate the tree with inherited attributes --stream : use the streaming interface to process very large files --walker : create a reader and walk though the resulting doc --pattern pattern_value : test the pattern support --chkregister : verify the node registration code --relaxng schema : do RelaxNG validation against the schema --schema schema : do validation against the WXS schema --schematron schema : do validation against a schematron --sax1: use the old SAX1 interfaces for processing --sax: do not build a tree but work just at the SAX level --oldxml10: use XML-1.0 parsing rules before the 5th edition --xpath expr: evaluate the XPath expression, imply --noout Libxml project home page: https://gitlab.gnome.org/GNOME/libxml2 Installation on mega-linter Docker image APK packages (Linux): libc-dev libxml2-dev libxml2-utils libgcc","title":"xmllint"},{"location":"descriptors/xml_xmllint/#xmllint","text":"","title":"xmllint"},{"location":"descriptors/xml_xmllint/#xmllint-documentation","text":"Version in MegaLinter: 20914 Visit Official Web Site See Index of problems detected by xmllint","title":"xmllint documentation"},{"location":"descriptors/xml_xmllint/#configuration-in-megalinter","text":"Enable xmllint by adding XML_XMLLINT in ENABLE_LINTERS variable Disable xmllint by adding XML_XMLLINT in DISABLE_LINTERS variable Variable Description Default value XML_XMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" XML_XMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file XML_XMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file XML_XMLLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files XML_XMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".xml\"] XML_XMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file XML_XMLLINT_PRE_COMMANDS List of bash commands to run before the linter None XML_XMLLINT_POST_COMMANDS List of bash commands to run after the linter None XML_XMLLINT_DISABLE_ERRORS Run linter but consider errors as warnings false XML_XMLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/xml_xmllint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/xml_xmllint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/xml_xmllint/#how-are-identified-applicable-files","text":"File extensions: .xml","title":"How are identified applicable files"},{"location":"descriptors/xml_xmllint/#how-the-linting-is-performed","text":"xmllint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/xml_xmllint/#example-calls","text":"xmllint myfile.xml","title":"Example calls"},{"location":"descriptors/xml_xmllint/#help-content","text":"Unknown option --help Usage : xmllint [options] XMLfiles ... Parse the XML files and output the result of the parsing --version : display the version of the XML library used --debug : dump a debug tree of the in-memory document --shell : run a navigating shell --debugent : debug the entities defined in the document --copy : used to test the internal copy implementation --recover : output what was parsable on broken XML documents --huge : remove any internal arbitrary parser limits --noent : substitute entity references by their value --noenc : ignore any encoding specified inside the document --noout : don't output the result tree --path 'paths': provide a set of paths for resources --load-trace : print trace of all external entities loaded --nonet : refuse to fetch DTDs or entities over network --nocompact : do not generate compact text nodes --htmlout : output results as HTML --nowrap : do not put HTML doc wrapper --valid : validate the document in addition to std well-formed check --postvalid : do a posteriori validation, i.e after parsing --dtdvalid URL : do a posteriori validation against a given DTD --dtdvalidfpi FPI : same but name the DTD with a Public Identifier --quiet : be quiet when succeeded --timing : print some timings --output file or -o file: save to a given file --repeat : repeat 100 times, for timing or profiling --insert : ad-hoc test for valid insertions --compress : turn on gzip compression of output --html : use the HTML parser --xmlout : force to use the XML serializer when using --html --nodefdtd : do not default HTML doctype --push : use the push mode of the parser --pushsmall : use the push mode of the parser using tiny increments --memory : parse from memory --maxmem nbbytes : limits memory allocation to nbbytes bytes --nowarning : do not emit warnings from parser/validator --noblanks : drop (ignorable?) blanks spaces --nocdata : replace cdata section with text nodes --format : reformat/reindent the output --encode encoding : output in the given encoding --dropdtd : remove the DOCTYPE of the input docs --pretty STYLE : pretty-print in a particular style 0 Do not pretty print 1 Format the XML content, as --format 2 Add whitespace inside tags, preserving content --c14n : save in W3C canonical format v1.0 (with comments) --c14n11 : save in W3C canonical format v1.1 (with comments) --exc-c14n : save in W3C exclusive canonical format (with comments) --nsclean : remove redundant namespace declarations --testIO : test user I/O support --catalogs : use SGML catalogs from $SGML_CATALOG_FILES otherwise XML Catalogs starting from file:///etc/xml/catalog are activated by default --nocatalogs: deactivate all catalogs --auto : generate a small doc on the fly --xinclude : do XInclude processing --noxincludenode : same but do not generate XInclude nodes --nofixup-base-uris : do not fixup xml:base uris --loaddtd : fetch external DTD --dtdattr : loaddtd + populate the tree with inherited attributes --stream : use the streaming interface to process very large files --walker : create a reader and walk though the resulting doc --pattern pattern_value : test the pattern support --chkregister : verify the node registration code --relaxng schema : do RelaxNG validation against the schema --schema schema : do validation against the WXS schema --schematron schema : do validation against a schematron --sax1: use the old SAX1 interfaces for processing --sax: do not build a tree but work just at the SAX level --oldxml10: use XML-1.0 parsing rules before the 5th edition --xpath expr: evaluate the XPath expression, imply --noout Libxml project home page: https://gitlab.gnome.org/GNOME/libxml2","title":"Help content"},{"location":"descriptors/xml_xmllint/#installation-on-mega-linter-docker-image","text":"APK packages (Linux): libc-dev libxml2-dev libxml2-utils libgcc","title":"Installation on mega-linter Docker image"},{"location":"descriptors/yaml/","text":"YAML Linters Linter Configuration key Status prettier YAML yamllint YAML v8r YAML Linted files File extensions: .yml .yaml Configuration in MegaLinter Variable Description Default value YAML_FILTER_REGEX_INCLUDE Custom regex including filter YAML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"All YAML linters"},{"location":"descriptors/yaml/#yaml","text":"","title":"YAML"},{"location":"descriptors/yaml/#linters","text":"Linter Configuration key Status prettier YAML yamllint YAML v8r YAML","title":"Linters"},{"location":"descriptors/yaml/#linted-files","text":"File extensions: .yml .yaml","title":"Linted files"},{"location":"descriptors/yaml/#configuration-in-megalinter","text":"Variable Description Default value YAML_FILTER_REGEX_INCLUDE Custom regex including filter YAML_FILTER_REGEX_EXCLUDE Custom regex excluding filter","title":"Configuration in MegaLinter"},{"location":"descriptors/yaml_prettier/","text":"prettier documentation Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier Configuration in MegaLinter Enable prettier by adding YAML_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding YAML_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding YAML_PRETTIER in APPLY_FIXES variable Variable Description Default value YAML_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file YAML_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file YAML_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files YAML_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None YAML_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None YAML_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json YAML_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true YAML_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .yml , .yaml How the linting is performed prettier is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls prettier --check myfile.yml prettier --config .prettierrc.json --check myfile.yml prettier --config .prettierrc.json --write myfile.yml Help content Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version. Installation on mega-linter Docker image NPM packages (node.js): prettier","title":"prettier"},{"location":"descriptors/yaml_prettier/#prettier-documentation","text":"Version in MegaLinter: 2.7.1 Visit Official Web Site See How to configure prettier rules See How to disable prettier rules in files See Index of problems detected by prettier","title":"prettier documentation"},{"location":"descriptors/yaml_prettier/#configuration-in-megalinter","text":"Enable prettier by adding YAML_PRETTIER in ENABLE_LINTERS variable Disable prettier by adding YAML_PRETTIER in DISABLE_LINTERS variable Enable auto-fixes by adding YAML_PRETTIER in APPLY_FIXES variable Variable Description Default value YAML_PRETTIER_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_PRETTIER_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file YAML_PRETTIER_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file YAML_PRETTIER_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files YAML_PRETTIER_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_PRETTIER_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_PRETTIER_PRE_COMMANDS List of bash commands to run before the linter None YAML_PRETTIER_POST_COMMANDS List of bash commands to run after the linter None YAML_PRETTIER_CONFIG_FILE prettier configuration file name Use LINTER_DEFAULT to let the linter find it .prettierrc.json YAML_PRETTIER_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_PRETTIER_DISABLE_ERRORS Run linter but consider errors as warnings true YAML_PRETTIER_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/yaml_prettier/#ide-integration","text":"Use prettier in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Atom prettier-atom Visit Web Site Atom atom-mprettier Visit Web Site Atom atom-miniprettier Visit Web Site Emacs prettier-emacs Visit Web Site Emacs prettier.el Visit Web Site Emacs apheleia Visit Web Site IDEA native support Visit Web Site Sublime Text JsPrettier Visit Web Site vim vim-prettier Visit Web Site visual_studio JavaScriptPrettier Visit Web Site Visual Studio Code prettier-vscode","title":"IDE Integration"},{"location":"descriptors/yaml_prettier/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/yaml_prettier/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/yaml_prettier/#how-are-identified-applicable-files","text":"File extensions: .yml , .yaml","title":"How are identified applicable files"},{"location":"descriptors/yaml_prettier/#how-the-linting-is-performed","text":"prettier is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/yaml_prettier/#example-calls","text":"prettier --check myfile.yml prettier --config .prettierrc.json --check myfile.yml prettier --config .prettierrc.json --write myfile.yml","title":"Example calls"},{"location":"descriptors/yaml_prettier/#help-content","text":"Usage: prettier [options] [file/dir/glob ...] By default, output is written to stdout. Stdin is read if it is piped to Prettier and no files are given. Output options: -c, --check Check if the given files are formatted, print a human-friendly summary message and paths to unformatted files (see also --list-different). -l, --list-different Print the names of files that are different from Prettier's formatting (see also --check). -w, --write Edit files in-place. (Beware!) Format options: --arrow-parens <always|avoid> Include parentheses around a sole arrow function parameter. Defaults to always. --bracket-same-line Put > of opening tags on the last line instead of on a new line. Defaults to false. --no-bracket-spacing Do not print spaces between brackets. --embedded-language-formatting <auto|off> Control how Prettier formats quoted code embedded in the file. Defaults to auto. --end-of-line <lf|crlf|cr|auto> Which end of line characters to apply. Defaults to lf. --html-whitespace-sensitivity <css|strict|ignore> How to handle whitespaces in HTML. Defaults to css. --jsx-single-quote Use single quotes in JSX. Defaults to false. --parser <flow|babel|babel-flow|babel-ts|typescript|acorn|espree|meriyah|css|less|scss|json|json5|json-stringify|graphql|markdown|mdx|vue|yaml|glimmer|html|angular|lwc> Which parser to use. --print-width <int> The line length where Prettier will try wrap. Defaults to 80. --prose-wrap <always|never|preserve> How to wrap prose. Defaults to preserve. --quote-props <as-needed|consistent|preserve> Change when properties in objects are quoted. Defaults to as-needed. --no-semi Do not print semicolons, except at the beginning of lines which may need them. --single-attribute-per-line Enforce single attribute per line in HTML, Vue and JSX. Defaults to false. --single-quote Use single quotes instead of double quotes. Defaults to false. --tab-width <int> Number of spaces per indentation level. Defaults to 2. --trailing-comma <es5|none|all> Print trailing commas wherever possible when multi-line. Defaults to es5. --use-tabs Indent with tabs instead of spaces. Defaults to false. --vue-indent-script-and-style Indent script and style tags in Vue files. Defaults to false. Config options: --config <path> Path to a Prettier configuration file (.prettierrc, package.json, prettier.config.js). --no-config Do not look for a configuration file. --config-precedence <cli-override|file-override|prefer-file> Define in which order config files and CLI options should be evaluated. Defaults to cli-override. --no-editorconfig Don't take .editorconfig into account when parsing configuration. --find-config-path <path> Find and print the path to a configuration file for the given input file. --ignore-path <path> Path to a file with patterns describing files to ignore. Defaults to .prettierignore. --plugin <path> Add a plugin. Multiple plugins can be passed as separate `--plugin`s. Defaults to []. --plugin-search-dir <path> Custom directory that contains prettier plugins in node_modules subdirectory. Overrides default behavior when plugins are searched relatively to the location of Prettier. Multiple values are accepted. Defaults to []. --with-node-modules Process files inside 'node_modules' directory. Editor options: --cursor-offset <int> Print (to stderr) where a cursor at the given position would move to after formatting. This option cannot be used with --range-start and --range-end. Defaults to -1. --range-end <int> Format code ending at a given character offset (exclusive). The range will extend forwards to the end of the selected statement. This option cannot be used with --cursor-offset. Defaults to Infinity. --range-start <int> Format code starting at a given character offset. The range will extend backwards to the start of the first line containing the selected statement. This option cannot be used with --cursor-offset. Defaults to 0. Other options: --cache Only format changed files. Cannot use with --stdin-filepath. Defaults to false. --cache-strategy <metadata|content> Strategy for the cache to use for detecting changed files. --no-color Do not colorize error messages. --no-error-on-unmatched-pattern Prevent errors when pattern is unmatched. --file-info <path> Extract the following info (as JSON) for a given file path. Reported fields: * ignored (boolean) - true if file path is filtered by --ignore-path * inferredParser (string | null) - name of parser inferred from file path -h, --help <flag> Show CLI usage, or details about the given flag. Example: --help write -u, --ignore-unknown Ignore unknown files. --insert-pragma Insert @format pragma into file's first docblock comment. Defaults to false. --loglevel <silent|error|warn|log|debug> What level of logs to report. Defaults to log. --no-plugin-search Disable plugin autoloading. --require-pragma Require either '@prettier' or '@format' to be present in the file's first docblock comment in order for it to be formatted. Defaults to false. --stdin-filepath <path> Path to the file to pretend that stdin comes from. --support-info Print support information as JSON. -v, --version Print Prettier version.","title":"Help content"},{"location":"descriptors/yaml_prettier/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): prettier","title":"Installation on mega-linter Docker image"},{"location":"descriptors/yaml_v8r/","text":"v8r v8r checks the validity of JSON/YAML files if they have a matching schema defined on schemastore.org v8r documentation Version in MegaLinter: 0.13.0 Visit Official Web Site See Index of problems detected by v8r Configuration in MegaLinter Enable v8r by adding YAML_V8R in ENABLE_LINTERS variable Disable v8r by adding YAML_V8R in DISABLE_LINTERS variable Variable Description Default value YAML_V8R_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_V8R_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file YAML_V8R_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file YAML_V8R_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files YAML_V8R_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_V8R_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_V8R_PRE_COMMANDS List of bash commands to run before the linter None YAML_V8R_POST_COMMANDS List of bash commands to run after the linter None YAML_V8R_DISABLE_ERRORS Run linter but consider errors as warnings false YAML_V8R_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use v8r in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse native support Visit Web Site IDEA native support Visit Web Site vim vison Visit Web Site Visual Studio Code native support Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .yml , .yaml How the linting is performed v8r is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls v8r --ignore-errors myfile.yml v8r --ignore-errors myfile.yaml Help content \u2139 No config file found v8r <patterns..> Validate local json/yaml files against schema(s) Positionals: patterns One or more filenames or glob patterns describing local file or file s to validate Options: --help Show help [boolean] --version Show version number [boolean] -v, --verbose Run with verbose logging. Can be stacked e.g: -vv -vvv [count] -s, --schema Local path or URL of a schema to validate against. If not supplied, we will attempt to find an appropriate schema on schemastore.org using the filename. If passed with glo b pattern(s) matching multiple files, all matching files will be validated against this schema [string] -c, --catalogs Local path or URL of custom catalogs to use prior to sche mastore.org [array] --ignore-errors Exit with code 0 even if an error was encountered. Passin g this flag means a non-zero exit code is only issued if validation could be completed successfully and one or mor e files were invalid [boolean] [default: false] --cache-ttl Remove cached HTTP responses older than <cache-ttl> secon ds old. Passing 0 clears and disables cache completely [number] [default: 600] --format Output format for validation results [string] [choices: \"text\", \"json\"] [default: \"text\"] Examples: v8r file.json Validate a single file v8r file1.json file2.json Validate multiple files v8r 'dir/*.yml' 'dir/*.yaml' Specify files to validate with glob patterns Installation on mega-linter Docker image NPM packages (node.js): v8r","title":"v8r"},{"location":"descriptors/yaml_v8r/#v8r","text":"v8r checks the validity of JSON/YAML files if they have a matching schema defined on schemastore.org","title":"v8r"},{"location":"descriptors/yaml_v8r/#v8r-documentation","text":"Version in MegaLinter: 0.13.0 Visit Official Web Site See Index of problems detected by v8r","title":"v8r documentation"},{"location":"descriptors/yaml_v8r/#configuration-in-megalinter","text":"Enable v8r by adding YAML_V8R in ENABLE_LINTERS variable Disable v8r by adding YAML_V8R in DISABLE_LINTERS variable Variable Description Default value YAML_V8R_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_V8R_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file YAML_V8R_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file YAML_V8R_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files YAML_V8R_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_V8R_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_V8R_PRE_COMMANDS List of bash commands to run before the linter None YAML_V8R_POST_COMMANDS List of bash commands to run after the linter None YAML_V8R_DISABLE_ERRORS Run linter but consider errors as warnings false YAML_V8R_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/yaml_v8r/#ide-integration","text":"Use v8r in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Eclipse native support Visit Web Site IDEA native support Visit Web Site vim vison Visit Web Site Visual Studio Code native support Visit Web Site","title":"IDE Integration"},{"location":"descriptors/yaml_v8r/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/yaml_v8r/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/yaml_v8r/#how-are-identified-applicable-files","text":"File extensions: .yml , .yaml","title":"How are identified applicable files"},{"location":"descriptors/yaml_v8r/#how-the-linting-is-performed","text":"v8r is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/yaml_v8r/#example-calls","text":"v8r --ignore-errors myfile.yml v8r --ignore-errors myfile.yaml","title":"Example calls"},{"location":"descriptors/yaml_v8r/#help-content","text":"\u2139 No config file found v8r <patterns..> Validate local json/yaml files against schema(s) Positionals: patterns One or more filenames or glob patterns describing local file or file s to validate Options: --help Show help [boolean] --version Show version number [boolean] -v, --verbose Run with verbose logging. Can be stacked e.g: -vv -vvv [count] -s, --schema Local path or URL of a schema to validate against. If not supplied, we will attempt to find an appropriate schema on schemastore.org using the filename. If passed with glo b pattern(s) matching multiple files, all matching files will be validated against this schema [string] -c, --catalogs Local path or URL of custom catalogs to use prior to sche mastore.org [array] --ignore-errors Exit with code 0 even if an error was encountered. Passin g this flag means a non-zero exit code is only issued if validation could be completed successfully and one or mor e files were invalid [boolean] [default: false] --cache-ttl Remove cached HTTP responses older than <cache-ttl> secon ds old. Passing 0 clears and disables cache completely [number] [default: 600] --format Output format for validation results [string] [choices: \"text\", \"json\"] [default: \"text\"] Examples: v8r file.json Validate a single file v8r file1.json file2.json Validate multiple files v8r 'dir/*.yml' 'dir/*.yaml' Specify files to validate with glob patterns","title":"Help content"},{"location":"descriptors/yaml_v8r/#installation-on-mega-linter-docker-image","text":"NPM packages (node.js): v8r","title":"Installation on mega-linter Docker image"},{"location":"descriptors/yaml_yamllint/","text":"yamllint yamllint documentation Version in MegaLinter: 1.28.0 Visit Official Web Site See How to configure yamllint rules If custom .yamllint.yml config file is not found, .yamllint.yml will be used See Index of problems detected by yamllint Configuration in MegaLinter Enable yamllint by adding YAML_YAMLLINT in ENABLE_LINTERS variable Disable yamllint by adding YAML_YAMLLINT in DISABLE_LINTERS variable Variable Description Default value YAML_YAMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_YAMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file YAML_YAMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file YAML_YAMLLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files YAML_YAMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_YAMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_YAMLLINT_PRE_COMMANDS List of bash commands to run before the linter None YAML_YAMLLINT_POST_COMMANDS List of bash commands to run after the linter None YAML_YAMLLINT_CONFIG_FILE yamllint configuration file name Use LINTER_DEFAULT to let the linter find it .yamllint.yml YAML_YAMLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_YAMLLINT_DISABLE_ERRORS Run linter but consider errors as warnings false YAML_YAMLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0 IDE Integration Use yamllint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Emacs flycheck Visit Web Site vim ale Visit Web Site MegaLinter Flavours This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52 Behind the scenes How are identified applicable files File extensions: .yml , .yaml How the linting is performed yamllint is called once with the list of files as arguments ( list_of_files CLI lint mode) Example calls yamllint myfile.yaml yamllint -c .yamllint.yml myfile.yaml Help content usage: yamllint [-h] [-] [-c CONFIG_FILE | -d CONFIG_DATA] [-f {parsable,standard,colored,github,auto}] [-s] [--no-warnings] [-v] [FILE_OR_DIR ...] A linter for YAML files. yamllint does not only check for syntax validity, but for weirdnesses like key repetition and cosmetic problems such as lines length, trailing spaces, indentation, etc. positional arguments: FILE_OR_DIR files to check options: -h, --help show this help message and exit - read from standard input -c CONFIG_FILE, --config-file CONFIG_FILE path to a custom configuration -d CONFIG_DATA, --config-data CONFIG_DATA custom configuration (as YAML source) -f {parsable,standard,colored,github,auto}, --format {parsable,standard,colored,github,auto} format for parsing output -s, --strict return non-zero exit code on warnings as well as errors --no-warnings output only error level problems -v, --version show program's version number and exit Installation on mega-linter Docker image PIP packages (Python): yamllint","title":"yamllint"},{"location":"descriptors/yaml_yamllint/#yamllint","text":"","title":"yamllint"},{"location":"descriptors/yaml_yamllint/#yamllint-documentation","text":"Version in MegaLinter: 1.28.0 Visit Official Web Site See How to configure yamllint rules If custom .yamllint.yml config file is not found, .yamllint.yml will be used See Index of problems detected by yamllint","title":"yamllint documentation"},{"location":"descriptors/yaml_yamllint/#configuration-in-megalinter","text":"Enable yamllint by adding YAML_YAMLLINT in ENABLE_LINTERS variable Disable yamllint by adding YAML_YAMLLINT in DISABLE_LINTERS variable Variable Description Default value YAML_YAMLLINT_ARGUMENTS User custom arguments to add in linter CLI call Ex: -s --foo \"bar\" YAML_YAMLLINT_FILTER_REGEX_INCLUDE Custom regex including filter Ex: (src\\|lib) Include every file YAML_YAMLLINT_FILTER_REGEX_EXCLUDE Custom regex excluding filter Ex: (test\\|examples) Exclude no file YAML_YAMLLINT_CLI_LINT_MODE Override default CLI lint mode - file : Calls the linter for each file - list_of_files : Call the linter with the list of files as argument - project : Call the linter from the root of the project list_of_files YAML_YAMLLINT_FILE_EXTENSIONS Allowed file extensions. \"*\" matches any extension, \"\" matches empty extension. Empty list excludes all files Ex: [\".py\", \"\"] [\".yml\", \".yaml\"] YAML_YAMLLINT_FILE_NAMES_REGEX File name regex filters. Regular expression list for filtering files by their base names using regex full match. Empty list includes all files Ex: [\"Dockerfile(-.+)?\", \"Jenkinsfile\"] Include every file YAML_YAMLLINT_PRE_COMMANDS List of bash commands to run before the linter None YAML_YAMLLINT_POST_COMMANDS List of bash commands to run after the linter None YAML_YAMLLINT_CONFIG_FILE yamllint configuration file name Use LINTER_DEFAULT to let the linter find it .yamllint.yml YAML_YAMLLINT_RULES_PATH Path where to find linter configuration file Workspace folder, then MegaLinter default rules YAML_YAMLLINT_DISABLE_ERRORS Run linter but consider errors as warnings false YAML_YAMLLINT_DISABLE_ERRORS_IF_LESS_THAN Maximum number of errors allowed 0","title":"Configuration in MegaLinter"},{"location":"descriptors/yaml_yamllint/#ide-integration","text":"Use yamllint in your favorite IDE to catch errors before MegaLinter ! IDE Extension Name Install Emacs flycheck Visit Web Site vim ale Visit Web Site","title":"IDE Integration"},{"location":"descriptors/yaml_yamllint/#megalinter-flavours","text":"This linter is available in the following flavours Flavor Description Embedded linters Info all Default MegaLinter Flavor 107 ci_light Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML 20 documentation MegaLinter for documentation projects 46 dotnet Optimized for C, C++, C# or VB based projects 55 go Optimized for GO based projects 48 java Optimized for JAVA based projects 50 javascript Optimized for JAVASCRIPT or TYPESCRIPT based projects 55 php Optimized for PHP based projects 50 python Optimized for PYTHON based projects 56 ruby Optimized for RUBY based projects 47 rust Optimized for RUST based projects 47 salesforce Optimized for Salesforce based projects 49 swift Optimized for SWIFT based projects 47 terraform Optimized for TERRAFORM based projects 52","title":"MegaLinter Flavours"},{"location":"descriptors/yaml_yamllint/#behind-the-scenes","text":"","title":"Behind the scenes"},{"location":"descriptors/yaml_yamllint/#how-are-identified-applicable-files","text":"File extensions: .yml , .yaml","title":"How are identified applicable files"},{"location":"descriptors/yaml_yamllint/#how-the-linting-is-performed","text":"yamllint is called once with the list of files as arguments ( list_of_files CLI lint mode)","title":"How the linting is performed"},{"location":"descriptors/yaml_yamllint/#example-calls","text":"yamllint myfile.yaml yamllint -c .yamllint.yml myfile.yaml","title":"Example calls"},{"location":"descriptors/yaml_yamllint/#help-content","text":"usage: yamllint [-h] [-] [-c CONFIG_FILE | -d CONFIG_DATA] [-f {parsable,standard,colored,github,auto}] [-s] [--no-warnings] [-v] [FILE_OR_DIR ...] A linter for YAML files. yamllint does not only check for syntax validity, but for weirdnesses like key repetition and cosmetic problems such as lines length, trailing spaces, indentation, etc. positional arguments: FILE_OR_DIR files to check options: -h, --help show this help message and exit - read from standard input -c CONFIG_FILE, --config-file CONFIG_FILE path to a custom configuration -d CONFIG_DATA, --config-data CONFIG_DATA custom configuration (as YAML source) -f {parsable,standard,colored,github,auto}, --format {parsable,standard,colored,github,auto} format for parsing output -s, --strict return non-zero exit code on warnings as well as errors --no-warnings output only error level problems -v, --version show program's version number and exit","title":"Help content"},{"location":"descriptors/yaml_yamllint/#installation-on-mega-linter-docker-image","text":"PIP packages (Python): yamllint","title":"Installation on mega-linter Docker image"},{"location":"flavors/ci_light/","text":"ci_light MegaLinter Flavor Description Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML Usage GitHub Action : oxsecurity/megalinter/flavors/ci_light@beta Docker image: oxsecurity/megalinter-ci_light:beta mega-linter-runner : mega-linter-runner --flavor ci_light Embedded linters Languages Language Linter Configuration key Additional shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT MAKEFILE checkmake MAKEFILE_CHECKMAKE Formats Format Linter Configuration key Additional ENV dotenv-linter ENV_DOTENV_LINTER JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional DOCKERFILE hadolint DOCKERFILE_HADOLINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT trivy REPOSITORY_TRIVY","title":"ci_light"},{"location":"flavors/ci_light/#ci_light-megalinter-flavor","text":"","title":"ci_light MegaLinter Flavor"},{"location":"flavors/ci_light/#description","text":"Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas,XML","title":"Description"},{"location":"flavors/ci_light/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/ci_light@beta Docker image: oxsecurity/megalinter-ci_light:beta mega-linter-runner : mega-linter-runner --flavor ci_light","title":"Usage"},{"location":"flavors/ci_light/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/ci_light/#languages","text":"Language Linter Configuration key Additional shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT MAKEFILE checkmake MAKEFILE_CHECKMAKE","title":"Languages"},{"location":"flavors/ci_light/#formats","text":"Format Linter Configuration key Additional ENV dotenv-linter ENV_DOTENV_LINTER JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/ci_light/#tooling-formats","text":"Tooling format Linter Configuration key Additional DOCKERFILE hadolint DOCKERFILE_HADOLINT","title":"Tooling formats"},{"location":"flavors/ci_light/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT trivy REPOSITORY_TRIVY","title":"Other"},{"location":"flavors/documentation/","text":"documentation MegaLinter Flavor Description MegaLinter for documentation projects Usage GitHub Action : oxsecurity/megalinter/flavors/documentation@beta Docker image: oxsecurity/megalinter-documentation:beta mega-linter-runner : mega-linter-runner --flavor documentation Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"documentation"},{"location":"flavors/documentation/#documentation-megalinter-flavor","text":"","title":"documentation MegaLinter Flavor"},{"location":"flavors/documentation/#description","text":"MegaLinter for documentation projects","title":"Description"},{"location":"flavors/documentation/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/documentation@beta Docker image: oxsecurity/megalinter-documentation:beta mega-linter-runner : mega-linter-runner --flavor documentation","title":"Usage"},{"location":"flavors/documentation/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/documentation/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/documentation/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/documentation/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/documentation/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/dotnet/","text":"dotnet MegaLinter Flavor Description Optimized for C, C++, C# or VB based projects Usage GitHub Action : oxsecurity/megalinter/flavors/dotnet@beta Docker image: oxsecurity/megalinter-dotnet:beta mega-linter-runner : mega-linter-runner --flavor dotnet Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT MAKEFILE checkmake MAKEFILE_CHECKMAKE POWERSHELL powershell POWERSHELL_POWERSHELL SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF tsqllint SQL_TSQLLINT Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"dotnet"},{"location":"flavors/dotnet/#dotnet-megalinter-flavor","text":"","title":"dotnet MegaLinter Flavor"},{"location":"flavors/dotnet/#description","text":"Optimized for C, C++, C# or VB based projects","title":"Description"},{"location":"flavors/dotnet/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/dotnet@beta Docker image: oxsecurity/megalinter-dotnet:beta mega-linter-runner : mega-linter-runner --flavor dotnet","title":"Usage"},{"location":"flavors/dotnet/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/dotnet/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT C cpplint C_CPPLINT C++ (CPP) cpplint CPP_CPPLINT C# (CSHARP) dotnet-format CSHARP_DOTNET_FORMAT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT MAKEFILE checkmake MAKEFILE_CHECKMAKE POWERSHELL powershell POWERSHELL_POWERSHELL SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF tsqllint SQL_TSQLLINT Visual Basic .NET (VBDOTNET) dotnet-format VBDOTNET_DOTNET_FORMAT","title":"Languages"},{"location":"flavors/dotnet/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/dotnet/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT ARM arm-ttk ARM_ARM_TTK DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER GHERKIN gherkin-lint GHERKIN_GHERKIN_LINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/dotnet/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/go/","text":"go MegaLinter Flavor Description Optimized for GO based projects Usage GitHub Action : oxsecurity/megalinter/flavors/go@beta Docker image: oxsecurity/megalinter-go:beta mega-linter-runner : mega-linter-runner --flavor go Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GO golangci-lint GO_GOLANGCI_LINT revive GO_REVIVE GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"go"},{"location":"flavors/go/#go-megalinter-flavor","text":"","title":"go MegaLinter Flavor"},{"location":"flavors/go/#description","text":"Optimized for GO based projects","title":"Description"},{"location":"flavors/go/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/go@beta Docker image: oxsecurity/megalinter-go:beta mega-linter-runner : mega-linter-runner --flavor go","title":"Usage"},{"location":"flavors/go/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/go/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GO golangci-lint GO_GOLANGCI_LINT revive GO_REVIVE GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/go/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/go/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/go/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/java/","text":"java MegaLinter Flavor Description Optimized for JAVA based projects Usage GitHub Action : oxsecurity/megalinter/flavors/java@beta Docker image: oxsecurity/megalinter-java:beta mega-linter-runner : mega-linter-runner --flavor java Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT CLOJURE clj-kondo CLOJURE_CLJ_KONDO GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE pmd JAVA_PMD KOTLIN ktlint KOTLIN_KTLINT MAKEFILE checkmake MAKEFILE_CHECKMAKE SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"java"},{"location":"flavors/java/#java-megalinter-flavor","text":"","title":"java MegaLinter Flavor"},{"location":"flavors/java/#description","text":"Optimized for JAVA based projects","title":"Description"},{"location":"flavors/java/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/java@beta Docker image: oxsecurity/megalinter-java:beta mega-linter-runner : mega-linter-runner --flavor java","title":"Usage"},{"location":"flavors/java/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/java/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT CLOJURE clj-kondo CLOJURE_CLJ_KONDO GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVA checkstyle JAVA_CHECKSTYLE pmd JAVA_PMD KOTLIN ktlint KOTLIN_KTLINT MAKEFILE checkmake MAKEFILE_CHECKMAKE SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/java/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/java/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/java/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/javascript/","text":"javascript MegaLinter Flavor Description Optimized for JAVASCRIPT or TYPESCRIPT based projects Usage GitHub Action : oxsecurity/megalinter/flavors/javascript@beta Docker image: oxsecurity/megalinter-javascript:beta mega-linter-runner : mega-linter-runner --flavor javascript Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT COFFEE coffeelint COFFEE_COFFEELINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT_PRETTIER JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT_PRETTIER Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"javascript"},{"location":"flavors/javascript/#javascript-megalinter-flavor","text":"","title":"javascript MegaLinter Flavor"},{"location":"flavors/javascript/#description","text":"Optimized for JAVASCRIPT or TYPESCRIPT based projects","title":"Description"},{"location":"flavors/javascript/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/javascript@beta Docker image: oxsecurity/megalinter-javascript:beta mega-linter-runner : mega-linter-runner --flavor javascript","title":"Usage"},{"location":"flavors/javascript/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/javascript/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT COFFEE coffeelint COFFEE_COFFEELINT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT JAVASCRIPT eslint JAVASCRIPT_ES standard JAVASCRIPT_STANDARD prettier JAVASCRIPT_PRETTIER JSX eslint JSX_ESLINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF TSX eslint TSX_ESLINT TYPESCRIPT eslint TYPESCRIPT_ES standard TYPESCRIPT_STANDARD prettier TYPESCRIPT_PRETTIER","title":"Languages"},{"location":"flavors/javascript/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/javascript/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/javascript/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/php/","text":"php MegaLinter Flavor Description Optimized for PHP based projects Usage GitHub Action : oxsecurity/megalinter/flavors/php@beta Docker image: oxsecurity/megalinter-php:beta mega-linter-runner : mega-linter-runner --flavor php Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT PHP phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP_PHPLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"php"},{"location":"flavors/php/#php-megalinter-flavor","text":"","title":"php MegaLinter Flavor"},{"location":"flavors/php/#description","text":"Optimized for PHP based projects","title":"Description"},{"location":"flavors/php/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/php@beta Docker image: oxsecurity/megalinter-php:beta mega-linter-runner : mega-linter-runner --flavor php","title":"Usage"},{"location":"flavors/php/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/php/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT PHP phpcs PHP_PHPCS phpstan PHP_PHPSTAN psalm PHP_PSALM phplint PHP_PHPLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/php/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/php/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/php/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/python/","text":"python MegaLinter Flavor Description Optimized for PYTHON based projects Usage GitHub Action : oxsecurity/megalinter/flavors/python@beta Docker image: oxsecurity/megalinter-python:beta mega-linter-runner : mega-linter-runner --flavor python Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT MAKEFILE checkmake MAKEFILE_CHECKMAKE PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"python"},{"location":"flavors/python/#python-megalinter-flavor","text":"","title":"python MegaLinter Flavor"},{"location":"flavors/python/#description","text":"Optimized for PYTHON based projects","title":"Description"},{"location":"flavors/python/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/python@beta Docker image: oxsecurity/megalinter-python:beta mega-linter-runner : mega-linter-runner --flavor python","title":"Usage"},{"location":"flavors/python/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/python/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT MAKEFILE checkmake MAKEFILE_CHECKMAKE PYTHON pylint PYTHON_PYLINT black PYTHON_BLACK flake8 PYTHON_FLAKE8 isort PYTHON_ISORT bandit PYTHON_BANDIT mypy PYTHON_MYPY pyright PYTHON_PYRIGHT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/python/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT RST rst-lint RST_RST_LINT rstcheck RST_RSTCHECK XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/python/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/python/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/ruby/","text":"ruby MegaLinter Flavor Description Optimized for RUBY based projects Usage GitHub Action : oxsecurity/megalinter/flavors/ruby@beta Docker image: oxsecurity/megalinter-ruby:beta mega-linter-runner : mega-linter-runner --flavor ruby Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUBY rubocop RUBY_RUBOCOP SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"ruby"},{"location":"flavors/ruby/#ruby-megalinter-flavor","text":"","title":"ruby MegaLinter Flavor"},{"location":"flavors/ruby/#description","text":"Optimized for RUBY based projects","title":"Description"},{"location":"flavors/ruby/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/ruby@beta Docker image: oxsecurity/megalinter-ruby:beta mega-linter-runner : mega-linter-runner --flavor ruby","title":"Usage"},{"location":"flavors/ruby/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/ruby/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUBY rubocop RUBY_RUBOCOP SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/ruby/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/ruby/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/ruby/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/rust/","text":"rust MegaLinter Flavor Description Optimized for RUST based projects Usage GitHub Action : oxsecurity/megalinter/flavors/rust@beta Docker image: oxsecurity/megalinter-rust:beta mega-linter-runner : mega-linter-runner --flavor rust Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUST clippy RUST_CLIPPY SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"rust"},{"location":"flavors/rust/#rust-megalinter-flavor","text":"","title":"rust MegaLinter Flavor"},{"location":"flavors/rust/#description","text":"Optimized for RUST based projects","title":"Description"},{"location":"flavors/rust/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/rust@beta Docker image: oxsecurity/megalinter-rust:beta mega-linter-runner : mega-linter-runner --flavor rust","title":"Usage"},{"location":"flavors/rust/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/rust/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT RUST clippy RUST_CLIPPY SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/rust/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/rust/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/rust/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/salesforce/","text":"salesforce MegaLinter Flavor Description Optimized for Salesforce based projects Usage GitHub Action : oxsecurity/megalinter/flavors/salesforce@beta Docker image: oxsecurity/megalinter-salesforce:beta mega-linter-runner : mega-linter-runner --flavor salesforce Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SALESFORCE sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"salesforce"},{"location":"flavors/salesforce/#salesforce-megalinter-flavor","text":"","title":"salesforce MegaLinter Flavor"},{"location":"flavors/salesforce/#description","text":"Optimized for Salesforce based projects","title":"Description"},{"location":"flavors/salesforce/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/salesforce@beta Docker image: oxsecurity/megalinter-salesforce:beta mega-linter-runner : mega-linter-runner --flavor salesforce","title":"Usage"},{"location":"flavors/salesforce/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/salesforce/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SALESFORCE sfdx-scanner-apex SALESFORCE_SFDX_SCANNER_APEX sfdx-scanner-aura SALESFORCE_SFDX_SCANNER_AURA sfdx-scanner-lwc SALESFORCE_SFDX_SCANNER_LWC SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/salesforce/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/salesforce/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/salesforce/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/security/","text":"security MegaLinter Flavor Description Optimized for security Usage GitHub Action : oxsecurity/megalinter/flavors/security@beta Docker image: oxsecurity/megalinter-security:beta mega-linter-runner : mega-linter-runner --flavor security Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK bandit PYTHON_BANDIT Formats Format Linter Configuration key Additional Tooling formats Tooling format Linter Configuration key Additional ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS Other Code quality checker Linter Configuration key Additional REPOSITORY checkov REPOSITORY_CHECKOV devskim REPOSITORY_DEVSKIM dustilock REPOSITORY_DUSTILOCK gitleaks REPOSITORY_GITLEAKS secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP syft REPOSITORY_SYFT trivy REPOSITORY_TRIVY","title":"security"},{"location":"flavors/security/#security-megalinter-flavor","text":"","title":"security MegaLinter Flavor"},{"location":"flavors/security/#description","text":"Optimized for security","title":"Description"},{"location":"flavors/security/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/security@beta Docker image: oxsecurity/megalinter-security:beta mega-linter-runner : mega-linter-runner --flavor security","title":"Usage"},{"location":"flavors/security/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/security/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK bandit PYTHON_BANDIT","title":"Languages"},{"location":"flavors/security/#formats","text":"Format Linter Configuration key Additional","title":"Formats"},{"location":"flavors/security/#tooling-formats","text":"Tooling format Linter Configuration key Additional ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT CLOUDFORMATION cfn-lint CLOUDFORMATION_CFN_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS","title":"Tooling formats"},{"location":"flavors/security/#other","text":"Code quality checker Linter Configuration key Additional REPOSITORY checkov REPOSITORY_CHECKOV devskim REPOSITORY_DEVSKIM dustilock REPOSITORY_DUSTILOCK gitleaks REPOSITORY_GITLEAKS secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP syft REPOSITORY_SYFT trivy REPOSITORY_TRIVY","title":"Other"},{"location":"flavors/swift/","text":"swift MegaLinter Flavor Description Optimized for SWIFT based projects Usage GitHub Action : oxsecurity/megalinter/flavors/swift@beta Docker image: oxsecurity/megalinter-swift:beta mega-linter-runner : mega-linter-runner --flavor swift Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF SWIFT swiftlint SWIFT_SWIFTLINT Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"swift"},{"location":"flavors/swift/#swift-megalinter-flavor","text":"","title":"swift MegaLinter Flavor"},{"location":"flavors/swift/#description","text":"Optimized for SWIFT based projects","title":"Description"},{"location":"flavors/swift/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/swift@beta Docker image: oxsecurity/megalinter-swift:beta mega-linter-runner : mega-linter-runner --flavor swift","title":"Usage"},{"location":"flavors/swift/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/swift/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF SWIFT swiftlint SWIFT_SWIFTLINT","title":"Languages"},{"location":"flavors/swift/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/swift/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT","title":"Tooling formats"},{"location":"flavors/swift/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"flavors/terraform/","text":"terraform MegaLinter Flavor Description Optimized for TERRAFORM based projects Usage GitHub Action : oxsecurity/megalinter/flavors/terraform@beta Docker image: oxsecurity/megalinter-terraform:beta mega-linter-runner : mega-linter-runner --flavor terraform Embedded linters Languages Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF Formats Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R Tooling formats Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS Other Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"terraform"},{"location":"flavors/terraform/#terraform-megalinter-flavor","text":"","title":"terraform MegaLinter Flavor"},{"location":"flavors/terraform/#description","text":"Optimized for TERRAFORM based projects","title":"Description"},{"location":"flavors/terraform/#usage","text":"GitHub Action : oxsecurity/megalinter/flavors/terraform@beta Docker image: oxsecurity/megalinter-terraform:beta mega-linter-runner : mega-linter-runner --flavor terraform","title":"Usage"},{"location":"flavors/terraform/#embedded-linters","text":"","title":"Embedded linters"},{"location":"flavors/terraform/#languages","text":"Language Linter Configuration key Additional BASH bash-exec BASH_EXEC shellcheck BASH_SHELLCHECK shfmt BASH_SHFMT GROOVY npm-groovy-lint GROOVY_NPM_GROOVY_LINT KOTLIN ktlint KOTLIN_KTLINT SQL sql-lint SQL_SQL_LINT sqlfluff SQL_SQLFLUFF","title":"Languages"},{"location":"flavors/terraform/#formats","text":"Format Linter Configuration key Additional CSS stylelint CSS_STYLELINT scss-lint CSS_SCSS_LINT ENV dotenv-linter ENV_DOTENV_LINTER GRAPHQL graphql-schema-linter GRAPHQL_GRAPHQL_SCHEMA_LINTER HTML djlint HTML_DJLINT htmlhint HTML_HTMLHINT JSON jsonlint JSON_JSONLINT eslint-plugin-jsonc JSON_ESLINT_PLUGIN_JSONC v8r JSON_V8R prettier JSON_PRETTIER MARKDOWN markdownlint MARKDOWN_MARKDOWNLINT markdown-link-check MARKDOWN_MARKDOWN_LINK_CHECK markdown-table-formatter MARKDOWN_MARKDOWN_TABLE_FORMATTER PROTOBUF protolint PROTOBUF_PROTOLINT XML xmllint XML_XMLLINT YAML prettier YAML_PRETTIER yamllint YAML_YAMLLINT v8r YAML_V8R","title":"Formats"},{"location":"flavors/terraform/#tooling-formats","text":"Tooling format Linter Configuration key Additional ACTION actionlint ACTION_ACTIONLINT ANSIBLE ansible-lint ANSIBLE_ANSIBLE_LINT DOCKERFILE hadolint DOCKERFILE_HADOLINT EDITORCONFIG editorconfig-checker EDITORCONFIG_EDITORCONFIG_CHECKER KUBERNETES kubeval KUBERNETES_KUBEVAL kubeconform KUBERNETES_KUBECONFORM OPENAPI spectral OPENAPI_SPECTRAL SNAKEMAKE snakemake SNAKEMAKE_LINT snakefmt SNAKEMAKE_SNAKEFMT TEKTON tekton-lint TEKTON_TEKTON_LINT TERRAFORM tflint TERRAFORM_TFLINT terrascan TERRAFORM_TERRASCAN terragrunt TERRAFORM_TERRAGRUNT terraform-fmt TERRAFORM_TERRAFORM_FMT checkov TERRAFORM_CHECKOV kics TERRAFORM_KICS","title":"Tooling formats"},{"location":"flavors/terraform/#other","text":"Code quality checker Linter Configuration key Additional COPYPASTE jscpd COPYPASTE_JSCPD REPOSITORY checkov REPOSITORY_CHECKOV git_diff REPOSITORY_GIT_DIFF gitleaks REPOSITORY_GITLEAKS goodcheck REPOSITORY_GOODCHECK secretlint REPOSITORY_SECRETLINT semgrep REPOSITORY_SEMGREP trivy REPOSITORY_TRIVY SPELL misspell SPELL_MISSPELL cspell SPELL_CSPELL proselint SPELL_PROSELINT","title":"Other"},{"location":"licenses/actionlint/","text":"the MIT License Copyright (c) 2021 rhysd Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Actionlint"},{"location":"licenses/ansible-lint/","text":"Copyright (c) 2013-2018 Will Thames will@thames.id.au Copyright (c) 2018 Ansible by Red Hat Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Ansible lint"},{"location":"licenses/bandit/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.","title":"Bandit"},{"location":"licenses/black/","text":"The MIT License (MIT) Copyright (c) 2018 \u0141ukasz Langa Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Black"},{"location":"licenses/cfn-lint/","text":"MIT No Attribution Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Cfn lint"},{"location":"licenses/checkmake/","text":"Copyright (C) 2016 Daniel Schauenberg Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Checkmake"},{"location":"licenses/checkov/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2019 Bridgecrew Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Checkov"},{"location":"licenses/checkstyle/","text":"GNU LESSER GENERAL PUBLIC LICENSE Version 2.1, February 1999 Copyright (C) 1991, 1999 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. (This is the first released version of the Lesser GPL. It also counts as the successor of the GNU Library Public License, version 2, hence the version number 2.1.) Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public Licenses are intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some specially designated software packages--typically libraries--of the Free Software Foundation and other authors who decide to use it. You can use it too, but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish); that you receive source code or can get it if you want it; that you can change the software and use pieces of it in new free programs; and that you are informed that you can do these things. To protect your rights, we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights. These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis or for a fee, you must give the recipients all the rights that we gave you. You must make sure that they, too, receive or can get the source code. If you link other code with the library, you must provide complete object files to the recipients, so that they can relink them with the library after making changes to the library and recompiling it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the library, and (2) we offer you this license, which gives you legal permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that there is no warranty for the free library. Also, if the library is modified by someone else and passed on, the recipients should know that what they have is not the original version, so that the original author's reputation will not be affected by problems that might be introduced by others. Finally, software patents pose a constant threat to the existence of any free program. We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder. Therefore, we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the ordinary GNU General Public License. This license, the GNU Lesser General Public License, applies to certain designated libraries, and is quite different from the ordinary General Public License. We use this license for certain libraries in order to permit linking those libraries into non-free programs. When a program is linked with a library, whether statically or using a shared library, the combination of the two is legally speaking a combined work, a derivative of the original library. The ordinary General Public License therefore permits such linking only if the entire combination fits its criteria of freedom. The Lesser General Public License permits more lax criteria for linking other code with the library. We call this license the \"Lesser\" General Public License because it does Less to protect the user's freedom than the ordinary General Public License. It also provides other free software developers Less of an advantage over competing non-free programs. These disadvantages are the reason we use the ordinary General Public License for many libraries. However, the Lesser license provides advantages in certain special circumstances. For example, on rare occasions, there may be a special need to encourage the widest possible use of a certain library, so that it becomes a de-facto standard. To achieve this, non-free programs must be allowed to use the library. A more frequent case is that a free library does the same job as widely used non-free libraries. In this case, there is little to gain by limiting the free library to free software only, so we use the Lesser General Public License. In other cases, permission to use a particular library in non-free programs enables a greater number of people to use a large body of free software. For example, permission to use the GNU C Library in non-free programs enables many more people to use the whole GNU operating system, as well as its variant, the GNU/Linux operating system. Although the Lesser General Public License is Less protective of the users' freedom, it does ensure that the user of a program that is linked with the Library has the freedom and the wherewithal to run that program using a modified version of the Library. The precise terms and conditions for copying, distribution and modification follow. Pay close attention to the difference between a \"work based on the library\" and a \"work that uses the library\". The former contains code derived from the library, whereas the latter must be combined with the library in order to run. GNU LESSER GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License Agreement applies to any software library or other program which contains a notice placed by the copyright holder or other authorized party saying it may be distributed under the terms of this Lesser General Public License (also called \"this License\"). Each licensee is addressed as \"you\". A \"library\" means a collection of software functions and/or data prepared so as to be conveniently linked with application programs (which use some of those functions and data) to form executables. The \"Library\", below, refers to any such software library or work which has been distributed under these terms. A \"work based on the Library\" means either the Library or any derivative work under copyright law: that is to say, a work containing the Library or a portion of it, either verbatim or with modifications and/or translated straightforwardly into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) \"Source code\" for a work means the preferred form of the work for making modifications to it. For a library, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the library. Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running a program using the Library is not restricted, and output from such a program is covered only if its contents constitute a work based on the Library (independent of the use of the Library in a tool for writing it). Whether that is true depends on what the Library does and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's complete source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and distribute a copy of this License along with the Library. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Library or any portion of it, thus forming a work based on the Library, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a table of data to be supplied by an application program that uses the facility, other than as an argument passed when the facility is invoked, then you must make a good faith effort to ensure that, in the event an application does not supply such function or table, the facility still operates, and performs whatever part of its purpose remains meaningful. (For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application. Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional: if the application does not supply it, the square root function must still compute square roots.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Library, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Library, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Library. In addition, mere aggregation of another work not based on the Library with the Library (or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library. To do this, you must alter all the notices that refer to this License, so that they refer to the ordinary GNU General Public License, version 2, instead of to this License. (If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices. Once this change is made in a given copy, it is irreversible for that copy, so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange. If distribution of object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source code, even though third parties are not compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the Library, but is designed to work with the Library by being compiled or linked with it, is called a \"work that uses the Library\". Such a work, in isolation, is not a derivative work of the Library, and therefore falls outside the scope of this License. However, linking a \"work that uses the Library\" with the Library creates an executable that is a derivative of the Library (because it contains portions of the Library), rather than a \"work that uses the library\". The executable is therefore covered by this License. Section 6 states terms for distribution of such executables. When a \"work that uses the Library\" uses material from a header file that is part of the Library, the object code for the work may be a derivative work of the Library even though the source code is not. Whether this is true is especially significant if the work can be linked without the Library, or if the work is itself a library. The threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data structure layouts and accessors, and small macros and small inline functions (ten lines or less in length), then the use of the object file is unrestricted, regardless of whether it is legally a derivative work. (Executables containing this object code plus portions of the Library will still fall under Section 6.) Otherwise, if the work is a derivative of the Library, you may distribute the object code for the work under the terms of Section 6. Any executables containing that work also fall under Section 6, whether or not they are linked directly with the Library itself. 6. As an exception to the Sections above, you may also combine or link a \"work that uses the Library\" with the Library to produce a work containing portions of the Library, and distribute that work under terms of your choice, provided that the terms permit modification of the work for the customer's own use and reverse engineering for debugging such modifications. You must give prominent notice with each copy of the work that the Library is used in it and that the Library and its use are covered by this License. You must supply a copy of this License. If the work during execution displays copyright notices, you must include the copyright notice for the Library among them, as well as a reference directing the user to the copy of this License. Also, you must do one of these things: a) Accompany the work with the complete corresponding machine-readable source code for the Library including whatever changes were used in the work (which must be distributed under Sections 1 and 2 above); and, if the work is an executable linked with the Library, with the complete machine-readable \"work that uses the Library\", as object code and/or source code, so that the user can modify the Library and then relink to produce a modified executable containing the modified Library. (It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.) b) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (1) uses at run time a copy of the library already present on the user's computer system, rather than copying library functions into the executable, and (2) will operate properly with a modified version of the library, if the user installs one, as long as the modified version is interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at least three years, to give the same user the materials specified in Subsection 6a, above, for a charge no more than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy from a designated place, offer equivalent access to copy the above specified materials from the same place. e) Verify that the user has already received a copy of these materials or that you have already sent this user a copy. For an executable, the required form of the \"work that uses the Library\" must include any data and utility programs needed for reproducing the executable from it. However, as a special exception, the materials to be distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute. 7. You may place library facilities that are a work based on the Library side-by-side in a single library together with other library facilities not covered by this License, and distribute such a combined library, provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise permitted, and provided that you do these two things: a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities. This must be distributed under the terms of the Sections above. b) Give prominent notice with the combined library of the fact that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work. 8. You may not copy, modify, sublicense, link with, or distribute the Library except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, link with, or distribute the Library is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 9. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Library or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Library (or any work based on the Library), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Library or works based on it. 10. Each time you redistribute the Library (or any work based on the Library), the recipient automatically receives a license from the original licensor to copy, distribute, link with or modify the Library subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties with this License. 11. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Library at all. For example, if a patent license would not permit royalty-free redistribution of the Library by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply, and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Library under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 13. The Free Software Foundation may publish revised and/or new versions of the Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Library does not specify a license version number, you may choose any version ever published by the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with these, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Libraries If you develop a new library, and you want it to be of the greatest possible use to the public, we recommend making it free software that everyone can redistribute and change. You can do so by permitting redistribution under these terms (or, alternatively, under the terms of the ordinary General Public License). To apply these terms, attach the following notices to the library. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. {description} Copyright (C) {year} {fullname} This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Also add information on how to contact you by electronic and paper mail. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the library, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker. {signature of Ty Coon}, 1 April 1990 Ty Coon, President of Vice That's all there is to it!","title":"Checkstyle"},{"location":"licenses/clippy/","text":"Copyright 2014-2022 The Rust Project Developers Licensed under the Apache License, Version 2.0 http://www.apache.org/licenses/LICENSE-2.0 > or the MIT license http://opensource.org/licenses/MIT >, at your option. All files in the project carrying such notice may not be copied, modified, or distributed except according to those terms.","title":"Clippy"},{"location":"licenses/clj-kondo/","text":"Eclipse Public License - v 1.0 THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT. DEFINITIONS \"Contribution\" means: a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and b) in the case of each subsequent Contributor: i) changes to the Program, and ii) additions to the Program; where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program. \"Contributor\" means any person or entity that distributes the Program. \"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program. \"Program\" means the Contributions distributed in accordance with this Agreement. \"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors. GRANT OF RIGHTS a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form. b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder. c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program. d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement. REQUIREMENTS A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that: a) it complies with the terms and conditions of this Agreement; and b) its license agreement: i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose; ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits; iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange. When the Program is made available in source code form: a) it must be made available under this Agreement; and b) a copy of this Agreement must be included with each copy of the Program. Contributors may not remove or alter any copyright notices contained within the Program. Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution. COMMERCIAL DISTRIBUTION Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense. For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages. NO WARRANTY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations. DISCLAIMER OF LIABILITY EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. GENERAL If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable. If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed. All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive. Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved. This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.","title":"Clj kondo"},{"location":"licenses/coffeelint/","text":"CoffeeLint Copyright (c) 2011 Matthew Perpick Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Coffeelint"},{"location":"licenses/cspell/","text":"MIT License Copyright (c) 2019 cspell Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Cspell"},{"location":"licenses/dartanalyzer/","text":"Copyright 2012, the Dart project authors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Google LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Dartanalyzer"},{"location":"licenses/devskim/","text":"Copyright (c) Microsoft Corporation. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Devskim"},{"location":"licenses/djlint/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"Djlint"},{"location":"licenses/djlint/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU GENERAL PUBLIC LICENSE"},{"location":"licenses/djlint/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"licenses/djlint/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"licenses/djlint/#0-definitions","text":"\"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions"},{"location":"licenses/djlint/#1-source-code","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code"},{"location":"licenses/djlint/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions"},{"location":"licenses/djlint/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law"},{"location":"licenses/djlint/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies"},{"location":"licenses/djlint/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions"},{"location":"licenses/djlint/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms"},{"location":"licenses/djlint/#7-additional-terms","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms"},{"location":"licenses/djlint/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination"},{"location":"licenses/djlint/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies"},{"location":"licenses/djlint/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients"},{"location":"licenses/djlint/#11-patents","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents"},{"location":"licenses/djlint/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom"},{"location":"licenses/djlint/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License"},{"location":"licenses/djlint/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License"},{"location":"licenses/djlint/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty"},{"location":"licenses/djlint/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability"},{"location":"licenses/djlint/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16"},{"location":"licenses/djlint/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"How to Apply These Terms to Your New Programs"},{"location":"licenses/dotenv-linter/","text":"MIT License Copyright (c) 2019 Grachev Mikhail Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Dotenv linter"},{"location":"licenses/dotnet-format/","text":"The MIT License (MIT) Copyright (c) .NET Foundation and Contributors All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Dotnet format"},{"location":"licenses/dustilock/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright Dustico Inc Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Dustilock"},{"location":"licenses/editorconfig-checker/","text":"The MIT License (MIT) Copyright (c) 2018 Max Str\u00fcbing Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Editorconfig checker"},{"location":"licenses/eslint-plugin-jsonc/","text":"MIT License Copyright (c) 2020 Yosuke Ota Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Eslint plugin jsonc"},{"location":"licenses/eslint/","text":"Copyright OpenJS Foundation and other contributors, Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Eslint"},{"location":"licenses/flake8/","text":"== Flake8 License (MIT) == Copyright (C) 2011-2013 Tarek Ziade tarek@ziade.org Copyright (C) 2012-2016 Ian Cordasco graffatcolmingov@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Flake8"},{"location":"licenses/gherkin-lint/","text":"Copyright (c) 2016, Vasiliki Siakka Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"Gherkin lint"},{"location":"licenses/git_diff/","text":"Note that the only valid version of the GPL as far as this project is concerned is this particular version of the license (ie v2, not v2.2 or v3.x or whatever), unless explicitly otherwise stated. HOWEVER, in order to allow a migration to GPLv3 if that seems like a good idea, I also ask that people involved with the project make their preferences known. In particular, if you trust me to make that decision, you might note so in your copyright message, ie something like This file is licensed under the GPL v2, or a later version at the discretion of Linus. might avoid issues. But we can also just decide to synchronize and contact all copyright holders on record if/when the occasion arises. Linus Torvalds GNU GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than show w' and show c'; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. , 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License.","title":"Git diff"},{"location":"licenses/gitleaks/","text":"MIT License Copyright (c) 2019 Zachary Rice Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Gitleaks"},{"location":"licenses/golangci-lint/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"Golangci lint"},{"location":"licenses/goodcheck/","text":"MIT License Copyright (c) 2019 Sider Corporation Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Goodcheck"},{"location":"licenses/graphql-schema-linter/","text":"The MIT License (MIT) Copyright (c) 2017 Christian Joudrey Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Graphql schema linter"},{"location":"licenses/hadolint/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. {one line to give the program's name and a brief idea of what it does.} Copyright (C) {year} {name of author} This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: {project} Copyright (C) {year} {fullname} This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"Hadolint"},{"location":"licenses/htmlhint/","text":"MIT License Copyright (c) 2014-2016 Yanis Wang <yanis.wang@gmail.com> Copyright (c) 2018 David Dias (Thanks to the initial contributor Yanis Wang) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Htmlhint"},{"location":"licenses/isort/","text":"The MIT License (MIT) Copyright (c) 2013 Timothy Edmund Crosley Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Isort"},{"location":"licenses/jscpd/","text":"The MIT License (MIT) Copyright (c) 2013-2020 Andrey Kucherenko Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Jscpd"},{"location":"licenses/jsonlint/","text":"MIT License Copyright (c) 2012-2018 Zachary Carter Copyright (c) 2019-2022 Ferdinand Prantl Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Jsonlint"},{"location":"licenses/kics/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. It is clarified that the Apache License 2.0 shall not apply to any content generated by KICS which is marked as being \u201cProprietary to CIS\u201d (the \u201cCIS Proprietary Content\u201d). The CIS Proprietary Content is exclusively owned by the Center for Internet Security, Inc. and you are granted a limited, non-exclusively, non-transferable, non-sublicensable license to view the CIS Proprietary Content in connection with your use of KICS. You may not, and may not permit others to modify, create derivative works of, reproduce, publish, distribute, transfer, publicly display, resell, rent, lease, sublicense, loan, or lend the CIS Proprietary Content to any third party.","title":"Kics"},{"location":"licenses/ktlint/","text":"Copyright 2019 Pinterest, Inc. Copyright 2016-2019 Stanley Shyiko Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Ktlint"},{"location":"licenses/kubeconform/","text":"Kubeconform - Validate Kubernetes configuration files Copyright (C) 2020 Yann Hamon Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Kubeconform"},{"location":"licenses/kubeval/","text":"Kubeval - Validate Kubernetes configuration files Copyright (C) 2017 Gareth Rushgrove Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Kubeval"},{"location":"licenses/lintr/","text":"COPYRIGHT HOLDER: James Hester","title":"Lintr"},{"location":"licenses/luacheck/","text":"The MIT License (MIT) Copyright (c) 2014 - 2018 Peter Melnichenko Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Luacheck"},{"location":"licenses/markdown-link-check/","text":"Copyright (c) 2016-2022 Thomas Cort linuxgeek@gmail.com Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"Markdown link check"},{"location":"licenses/markdown-table-formatter/","text":"MIT License Copyright (c) 2020 Nicolas Vuillamy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Markdown table formatter"},{"location":"licenses/markdownlint/","text":"The MIT License (MIT) Copyright (c) 2015-2022 David Anson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Markdownlint"},{"location":"licenses/misspell/","text":"The MIT License (MIT) Copyright (c) 2015-2017 Nick Galbreath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Misspell"},{"location":"licenses/mypy/","text":"Mypy (and mypyc) are licensed under the terms of the MIT license, reproduced below. = = = = = The MIT License Copyright (c) 2015-2021 Jukka Lehtosalo and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. = = = = = Portions of mypy and mypyc are licensed under different licenses. The files mypyc/lib-rt/pythonsupport.h, mypyc/lib-rt/getargs.c and mypyc/lib-rt/getargsfast.c are licensed under the PSF 2 License, reproduced below. = = = = = PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using this software (\"Python\") in source or binary form and its associated documentation. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python alone or in any derivative version, provided, however, that PSF's License Agreement and PSF's notice of copyright, i.e., \"Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 Python Software Foundation; All Rights Reserved\" are retained in Python alone or in any derivative version prepared by Licensee. In the event Licensee prepares a derivative work that is based on or incorporates Python or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python. PSF is making Python available to Licensee on an \"AS IS\" basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. This License Agreement will automatically terminate upon a material breach of its terms and conditions. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party. By copying, installing or otherwise using Python, Licensee agrees to be bound by the terms and conditions of this License Agreement. BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1 This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization (\"Licensee\") accessing and otherwise using this software in source or binary form and its associated documentation (\"the Software\"). Subject to the terms and conditions of this BeOpen Python License Agreement, BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use the Software alone or in any derivative version, provided, however, that the BeOpen Python License is retained in the Software, alone or in any derivative version prepared by Licensee. BeOpen is making the Software available to Licensee on an \"AS IS\" basis. BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. This License Agreement will automatically terminate upon a material breach of its terms and conditions. This License Agreement shall be governed by and interpreted in all respects by the law of the State of California, excluding conflict of law provisions. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between BeOpen and Licensee. This License Agreement does not grant permission to use BeOpen trademarks or trade names in a trademark sense to endorse or promote products or services of Licensee, or any third party. As an exception, the \"BeOpen Python\" logos available at http://www.pythonlabs.com/logos.html may be used according to the permissions granted on that web page. By copying, installing or otherwise using the software, Licensee agrees to be bound by the terms and conditions of this License Agreement. CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 This LICENSE AGREEMENT is between the Corporation for National Research Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191 (\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using Python 1.6.1 software in source or binary form and its associated documentation. Subject to the terms and conditions of this License Agreement, CNRI hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 1.6.1 alone or in any derivative version, provided, however, that CNRI's License Agreement and CNRI's notice of copyright, i.e., \"Copyright (c) 1995-2001 Corporation for National Research Initiatives; All Rights Reserved\" are retained in Python 1.6.1 alone or in any derivative version prepared by Licensee. Alternately, in lieu of CNRI's License Agreement, Licensee may substitute the following text (omitting the quotes): \"Python 1.6.1 is made available subject to the terms and conditions in CNRI's License Agreement. This Agreement together with Python 1.6.1 may be located on the Internet using the following unique, persistent identifier (known as a handle): 1895.22/1013. This Agreement may also be obtained from a proxy server on the Internet using the following URL: http://hdl.handle.net/1895.22/1013 \". In the event Licensee prepares a derivative work that is based on or incorporates Python 1.6.1 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 1.6.1. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. This License Agreement will automatically terminate upon a material breach of its terms and conditions. This License Agreement shall be governed by the federal intellectual property law of the United States, including without limitation the federal copyright law, and, to the extent such U.S. federal law does not apply, by the law of the Commonwealth of Virginia, excluding Virginia's conflict of law provisions. Notwithstanding the foregoing, with regard to derivative works based on Python 1.6.1 that incorporate non-separable material that was previously distributed under the GNU General Public License (GPL), the law of the Commonwealth of Virginia shall govern this License Agreement only as to issues arising under or with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between CNRI and Licensee. This License Agreement does not grant permission to use CNRI trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and conditions of this License Agreement. ACCEPT CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 Copyright (c) 1991 - 1995, Stitching Mathematics Centrum Amsterdam, The Netherlands. All rights reserved. Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Stitching Mathematics Centrum or CWI not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. STITCHING MATHEMATICS CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL STITCHING MATHEMATICS CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"Mypy"},{"location":"licenses/mypy/#python-software-foundation-license-version-2","text":"This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using this software (\"Python\") in source or binary form and its associated documentation. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python alone or in any derivative version, provided, however, that PSF's License Agreement and PSF's notice of copyright, i.e., \"Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 Python Software Foundation; All Rights Reserved\" are retained in Python alone or in any derivative version prepared by Licensee. In the event Licensee prepares a derivative work that is based on or incorporates Python or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python. PSF is making Python available to Licensee on an \"AS IS\" basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. This License Agreement will automatically terminate upon a material breach of its terms and conditions. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party. By copying, installing or otherwise using Python, Licensee agrees to be bound by the terms and conditions of this License Agreement.","title":"PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2"},{"location":"licenses/mypy/#beopencom-license-agreement-for-python-20","text":"BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1 This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at 160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization (\"Licensee\") accessing and otherwise using this software in source or binary form and its associated documentation (\"the Software\"). Subject to the terms and conditions of this BeOpen Python License Agreement, BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use the Software alone or in any derivative version, provided, however, that the BeOpen Python License is retained in the Software, alone or in any derivative version prepared by Licensee. BeOpen is making the Software available to Licensee on an \"AS IS\" basis. BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. This License Agreement will automatically terminate upon a material breach of its terms and conditions. This License Agreement shall be governed by and interpreted in all respects by the law of the State of California, excluding conflict of law provisions. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between BeOpen and Licensee. This License Agreement does not grant permission to use BeOpen trademarks or trade names in a trademark sense to endorse or promote products or services of Licensee, or any third party. As an exception, the \"BeOpen Python\" logos available at http://www.pythonlabs.com/logos.html may be used according to the permissions granted on that web page. By copying, installing or otherwise using the software, Licensee agrees to be bound by the terms and conditions of this License Agreement.","title":"BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0"},{"location":"licenses/mypy/#cnri-license-agreement-for-python-161","text":"This LICENSE AGREEMENT is between the Corporation for National Research Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191 (\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using Python 1.6.1 software in source or binary form and its associated documentation. Subject to the terms and conditions of this License Agreement, CNRI hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 1.6.1 alone or in any derivative version, provided, however, that CNRI's License Agreement and CNRI's notice of copyright, i.e., \"Copyright (c) 1995-2001 Corporation for National Research Initiatives; All Rights Reserved\" are retained in Python 1.6.1 alone or in any derivative version prepared by Licensee. Alternately, in lieu of CNRI's License Agreement, Licensee may substitute the following text (omitting the quotes): \"Python 1.6.1 is made available subject to the terms and conditions in CNRI's License Agreement. This Agreement together with Python 1.6.1 may be located on the Internet using the following unique, persistent identifier (known as a handle): 1895.22/1013. This Agreement may also be obtained from a proxy server on the Internet using the following URL: http://hdl.handle.net/1895.22/1013 \". In the event Licensee prepares a derivative work that is based on or incorporates Python 1.6.1 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 1.6.1. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis. CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF. This License Agreement will automatically terminate upon a material breach of its terms and conditions. This License Agreement shall be governed by the federal intellectual property law of the United States, including without limitation the federal copyright law, and, to the extent such U.S. federal law does not apply, by the law of the Commonwealth of Virginia, excluding Virginia's conflict of law provisions. Notwithstanding the foregoing, with regard to derivative works based on Python 1.6.1 that incorporate non-separable material that was previously distributed under the GNU General Public License (GPL), the law of the Commonwealth of Virginia shall govern this License Agreement only as to issues arising under or with respect to Paragraphs 4, 5, and 7 of this License Agreement. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between CNRI and Licensee. This License Agreement does not grant permission to use CNRI trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and conditions of this License Agreement. ACCEPT","title":"CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1"},{"location":"licenses/mypy/#cwi-license-agreement-for-python-090-through-12","text":"Copyright (c) 1991 - 1995, Stitching Mathematics Centrum Amsterdam, The Netherlands. All rights reserved. Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Stitching Mathematics Centrum or CWI not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission. STITCHING MATHEMATICS CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL STITCHING MATHEMATICS CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2"},{"location":"licenses/npm-groovy-lint/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html . GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"Npm groovy lint"},{"location":"licenses/perlcritic/","text":"Terms of Perl itself a) the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version, or b) the \"Artistic License\" GNU GENERAL PUBLIC LICENSE Version 1, February 1989 Copyright (C) 1989 Free Software Foundation, Inc. 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The license agreements of most software companies try to keep users at the mercy of those companies. By contrast, our General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. The General Public License applies to the Free Software Foundation's software and to any other program whose authors commit to using it. You can use it for your programs, too. When we speak of free software, we are referring to freedom, not price. Specifically, the General Public License is designed to make sure that you have the freedom to give away or sell copies of free software, that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of a such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must tell them their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. The precise terms and conditions for copying, distribution and modification follow. GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License Agreement applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any work containing the Program or a portion of it, either verbatim or with modifications. Each licensee is addressed as \"you\". 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this General Public License and to the absence of any warranty; and give any other recipients of the Program a copy of this General Public License along with the Program. You may charge a fee for the physical act of transferring a copy. 2. You may modify your copy or copies of the Program or any portion of it, and copy and distribute such modifications under the terms of Paragraph 1 above, provided that you also do the following: a) cause the modified files to carry prominent notices stating that you changed the files and the date of any change; and b) cause the whole of any work that you distribute or publish, that in whole or in part contains the Program or any part thereof, either with or without modifications, to be licensed at no charge to all third parties under the terms of this General Public License (except that you may choose to grant warranty protection to some or all third parties, at your option). c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the simplest and most usual way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this General Public License. d) You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. Mere aggregation of another independent work with the Program (or its derivative) on a volume of a storage or distribution medium does not bring the other work under the scope of these terms. 3. You may copy and distribute the Program (or a portion or derivative of it, under Paragraph 2) in object code or executable form under the terms of Paragraphs 1 and 2 above provided that you also do one of the following: a) accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Paragraphs 1 and 2 above; or, b) accompany it with a written offer, valid for at least three years, to give any third party free (except for a nominal charge for the cost of distribution) a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Paragraphs 1 and 2 above; or, c) accompany it with the information you received as to where the corresponding source code may be obtained. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form alone.) Source code for a work means the preferred form of the work for making modifications to it. For an executable file, complete source code means all the source code for all modules it contains; but, as a special exception, it need not include source code for modules which are standard libraries that accompany the operating system on which the executable file runs, or for standard header files or definitions files that accompany that operating system. 4. You may not copy, modify, sublicense, distribute or transfer the Program except as expressly provided under this General Public License. Any attempt otherwise to copy, modify, sublicense, distribute or transfer the Program is void, and will automatically terminate your rights to use the Program under this License. However, parties who have received copies, or rights to use copies, from you under this General Public License will not have their licenses terminated so long as such parties remain in full compliance. 5. By copying, distributing or modifying the Program (or any work based on the Program) you indicate your acceptance of this license to do so, and all its terms and conditions. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. 7. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of the license which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the license, you may choose any version ever published by the Free Software Foundation. 8. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS The Artistic License Preamble The intent of this document is to state the conditions under which a Package may be copied, such that the Copyright Holder maintains some semblance of artistic control over the development of the package, while giving the users of the package the right to use and distribute the Package in a more-or-less customary fashion, plus the right to make reasonable modifications. Definitions: \"Package\" refers to the collection of files distributed by the Copyright Holder, and derivatives of that collection of files created through textual modification. \"Standard Version\" refers to such a Package if it has not been modified, or has been modified in accordance with the wishes of the Copyright Holder. \"Copyright Holder\" is whoever is named in the copyright or copyrights for the package. \"You\" is you, if you're thinking about copying or distributing this Package. \"Reasonable copying fee\" is whatever you can justify on the basis of media cost, duplication charges, time of people involved, and so on. (You will not be required to justify it to the Copyright Holder, but only to the computing community at large as a market that must bear the fee.) \"Freely Available\" means that no fee is charged for the item itself, though there may be fees involved in handling the item. It also means that recipients of the item may redistribute it under the same conditions they received it. You may make and give away verbatim copies of the source form of the Standard Version of this Package without restriction, provided that you duplicate all of the original copyright notices and associated disclaimers. You may apply bug fixes, portability fixes and other modifications derived from the Public Domain or from the Copyright Holder. A Package modified in such a way shall still be considered the Standard Version. You may otherwise modify your copy of this Package in any way, provided that you insert a prominent notice in each changed file stating how and when you changed that file, and provided that you do at least ONE of the following: a) place your modifications in the Public Domain or otherwise make them Freely Available, such as by posting said modifications to Usenet or an equivalent medium, or placing the modifications on a major archive site such as ftp.uu.net, or by allowing the Copyright Holder to include your modifications in the Standard Version of the Package. b) use the modified Package only within your corporation or organization. c) rename any non-standard executables so the names do not conflict with standard executables, which must also be provided, and provide a separate manual page for each non-standard executable that clearly documents how it differs from the Standard Version. d) make other distribution arrangements with the Copyright Holder. You may distribute the programs of this Package in object code or executable form, provided that you do at least ONE of the following: a) distribute a Standard Version of the executables and library files, together with instructions (in the manual page or equivalent) on where to get the Standard Version. b) accompany the distribution with the machine-readable source of the Package with your modifications. c) accompany any non-standard executables with their corresponding Standard Version executables, giving the non-standard executables non-standard names, and clearly documenting the differences in manual pages (or equivalent), together with instructions on where to get the Standard Version. d) make other distribution arrangements with the Copyright Holder. You may charge a reasonable copying fee for any distribution of this Package. You may charge any fee you choose for support of this Package. You may not charge a fee for this Package itself. However, you may distribute this Package in aggregate with other (possibly commercial) programs as part of a larger (possibly commercial) software distribution provided that you do not advertise this Package as a product of your own. The scripts and library files supplied as input to or produced as output from the programs of this Package do not automatically fall under the copyright of this Package, but belong to whomever generated them, and may be sold commercially, and may be aggregated with this Package. C or perl subroutines supplied by you and linked into this Package shall not be considered part of this Package. The name of the Copyright Holder may not be used to endorse or promote products derived from this software without specific prior written permission. THIS PACKAGE IS PROVIDED \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. The End","title":"Perlcritic"},{"location":"licenses/php/","text":"The PHP License, version 3.01 Copyright (c) 1999 - 2021 The PHP Group. All rights reserved Redistribution and use in source and binary forms, with or without modification, is permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The name \"PHP\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact group@php.net. 4. Products derived from this software may not be called \"PHP\", nor may \"PHP\" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying \"Foo for PHP\" instead of calling it \"PHP Foo\" or \"phpfoo\" 5. The PHP Group may publish revised and/or new versions of the license from time to time. Each version will be given a distinguishing version number. Once covered code has been published under a particular version of the license, you may always continue to use it under the terms of that version. You may also choose to use such covered code under the terms of any subsequent version of the license published by the PHP Group. No one other than the PHP Group has the right to modify the terms applicable to covered code created under this License. 6. Redistributions of any form whatsoever must retain the following acknowledgment: \"This product includes PHP software, freely available from http://www.php.net/software/ \". THIS SOFTWARE IS PROVIDED BY THE PHP DEVELOPMENT TEAM ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PHP DEVELOPMENT TEAM OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. This software consists of voluntary contributions made by many individuals on behalf of the PHP Group. The PHP Group can be contacted via Email at group@php.net. For more information on the PHP Group and the PHP project, please see http://www.php.net . PHP includes the Zend Engine, freely available at http://www.zend.com .","title":"Php"},{"location":"licenses/php/#copyright-c-1999-2021-the-php-group-all-rights-reserved","text":"Redistribution and use in source and binary forms, with or without modification, is permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The name \"PHP\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact group@php.net. 4. Products derived from this software may not be called \"PHP\", nor may \"PHP\" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying \"Foo for PHP\" instead of calling it \"PHP Foo\" or \"phpfoo\" 5. The PHP Group may publish revised and/or new versions of the license from time to time. Each version will be given a distinguishing version number. Once covered code has been published under a particular version of the license, you may always continue to use it under the terms of that version. You may also choose to use such covered code under the terms of any subsequent version of the license published by the PHP Group. No one other than the PHP Group has the right to modify the terms applicable to covered code created under this License. 6. Redistributions of any form whatsoever must retain the following acknowledgment: \"This product includes PHP software, freely available from http://www.php.net/software/ \". THIS SOFTWARE IS PROVIDED BY THE PHP DEVELOPMENT TEAM ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PHP DEVELOPMENT TEAM OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. This software consists of voluntary contributions made by many individuals on behalf of the PHP Group. The PHP Group can be contacted via Email at group@php.net. For more information on the PHP Group and the PHP project, please see http://www.php.net . PHP includes the Zend Engine, freely available at http://www.zend.com .","title":"Copyright (c) 1999 - 2021 The PHP Group. All rights reserved"},{"location":"licenses/phpcs/","text":"Copyright (c) 2012, Squiz Pty Ltd (ABN 77 084 670 600) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Phpcs"},{"location":"licenses/phpstan/","text":"MIT License Copyright (c) 2016 Ond\u0159ej Mirtes Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Phpstan"},{"location":"licenses/pmd/","text":"PMD's BSD-style license: Copyright (c) 2003-2009, InfoEther, LLC All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. *Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * The end-user documentation included with the redistribution, if any, must include the following acknowledgement: \"This product includes software developed in part by support from the Defense Advanced Research Project Agency (DARPA)\" * Neither the name of InfoEther, LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Pmd"},{"location":"licenses/prettier/","text":"Copyright \u00a9 James Long and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Prettier"},{"location":"licenses/psalm/","text":"MIT License Copyright (c) 2016 Vimeo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Psalm"},{"location":"licenses/puppet-lint/","text":"Copyright (c) 2011 Tim Sharpe Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Puppet lint"},{"location":"licenses/pylint/","text":"GNU GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than show w' and show c'; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. , 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License.","title":"Pylint"},{"location":"licenses/raku/","text":"The Artistic License 2.0 Copyright (c) 2000-2006, The Perl Foundation. Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble This license establishes the terms under which a given free software Package may be copied, modified, distributed, and/or redistributed. The intent is that the Copyright Holder maintains some artistic control over the development of that Package while still keeping the Package available as open source and free software. You are always permitted to make arrangements wholly outside of this license directly with the Copyright Holder of a given Package. If the terms of this license do not permit the full use that you propose to make of the Package, you should contact the Copyright Holder and seek a different licensing arrangement. Definitions \"Copyright Holder\" means the individual(s) or organization(s) named in the copyright notice for the entire Package. \"Contributor\" means any party that has contributed code or other material to the Package, in accordance with the Copyright Holder's procedures. \"You\" and \"your\" means any person who would like to copy, distribute, or modify the Package. \"Package\" means the collection of files distributed by the Copyright Holder, and derivatives of that collection and/or of those files. A given Package may consist of either the Standard Version, or a Modified Version. \"Distribute\" means providing a copy of the Package or making it accessible to anyone else, or in the case of a company or organization, to others outside of your company or organization. \"Distributor Fee\" means any fee that you charge for Distributing this Package or providing support for this Package to another party. It does not mean licensing fees. \"Standard Version\" refers to the Package if it has not been modified, or has been modified only in ways explicitly requested by the Copyright Holder. \"Modified Version\" means the Package, if it has been changed, and such changes were not explicitly requested by the Copyright Holder. \"Original License\" means this Artistic License as Distributed with the Standard Version of the Package, in its current version or as it may be modified by The Perl Foundation in the future. \"Source\" form means the source code, documentation source, and configuration files for the Package. \"Compiled\" form means the compiled bytecode, object code, binary, or any other form resulting from mechanical transformation or translation of the Source form. Permission for Use and Modification Without Distribution (1) You are permitted to use the Standard Version and create and use Modified Versions for any purpose without restriction, provided that you do not Distribute the Modified Version. Permissions for Redistribution of the Standard Version (2) You may Distribute verbatim copies of the Source form of the Standard Version of this Package in any medium without restriction, either gratis or for a Distributor Fee, provided that you duplicate all of the original copyright notices and associated disclaimers. At your discretion, such verbatim copies may or may not include a Compiled form of the Package. (3) You may apply any bug fixes, portability changes, and other modifications made available from the Copyright Holder. The resulting Package will still be considered the Standard Version, and as such will be subject to the Original License. Distribution of Modified Versions of the Package as Source (4) You may Distribute your Modified Version as Source (either gratis or for a Distributor Fee, and with or without a Compiled form of the Modified Version) provided that you clearly document how it differs from the Standard Version, including, but not limited to, documenting any non-standard features, executables, or modules, and provided that you do at least ONE of the following: (a) make the Modified Version available to the Copyright Holder of the Standard Version, under the Original License, so that the Copyright Holder may include your modifications in the Standard Version. (b) ensure that installation of your Modified Version does not prevent the user installing or running the Standard Version. In addition, the Modified Version must bear a name that is different from the name of the Standard Version. (c) allow anyone who receives a copy of the Modified Version to make the Source form of the Modified Version available to others under (i) the Original License or (ii) a license that permits the licensee to freely copy, modify and redistribute the Modified Version using the same licensing terms that apply to the copy that the licensee received, and requires that the Source form of the Modified Version, and of any works derived from it, be made freely available in that license fees are prohibited but Distributor Fees are allowed. Distribution of Compiled Forms of the Standard Version or Modified Versions without the Source (5) You may Distribute Compiled forms of the Standard Version without the Source, provided that you include complete instructions on how to get the Source of the Standard Version. Such instructions must be valid at the time of your distribution. If these instructions, at any time while you are carrying out such distribution, become invalid, you must provide new instructions on demand or cease further distribution. If you provide valid instructions or cease distribution within thirty days after you become aware that the instructions are invalid, then you do not forfeit any of your rights under this license. (6) You may Distribute a Modified Version in Compiled form without the Source, provided that you comply with Section 4 with respect to the Source of the Modified Version. Aggregating or Linking the Package (7) You may aggregate the Package (either the Standard Version or Modified Version) with other packages and Distribute the resulting aggregation provided that you do not charge a licensing fee for the Package. Distributor Fees are permitted, and licensing fees for other components in the aggregation are permitted. The terms of this license apply to the use and Distribution of the Standard or Modified Versions as included in the aggregation. (8) You are permitted to link Modified and Standard Versions with other works, to embed the Package in a larger work of your own, or to build stand-alone binary or bytecode versions of applications that include the Package, and Distribute the result without restriction, provided the result does not expose a direct interface to the Package. Items That are Not Considered Part of a Modified Version (9) Works (including, but not limited to, modules and scripts) that merely extend or make use of the Package, do not, by themselves, cause the Package to be a Modified Version. In addition, such works are not considered parts of the Package itself, and are not subject to the terms of this license. General Provisions (10) Any use, modification, and distribution of the Standard or Modified Versions is governed by this Artistic License. By using, modifying or distributing the Package, you accept this license. Do not use, modify, or distribute the Package, if you do not accept this license. (11) If your Modified Version has been derived from a Modified Version made by someone other than you, you are nevertheless required to ensure that your Modified Version complies with the requirements of this license. (12) This license does not grant you the right to use any trademark, service mark, tradename, or logo of the Copyright Holder. (13) This license includes the non-exclusive, worldwide, free-of-charge patent license to make, have made, use, offer to sell, sell, import and otherwise transfer the Package with respect to any patent claims licensable by the Copyright Holder that are necessarily infringed by the Package. If you institute patent litigation (including a cross-claim or counterclaim) against any party alleging that the Package constitutes direct or contributory patent infringement, then this Artistic License to you shall terminate on the date that such litigation is filed. (14) Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Raku"},{"location":"licenses/remark-lint/","text":"(The MIT License) Copyright (c) 2015 Titus Wormer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Remark lint"},{"location":"licenses/revive/","text":"MIT License Copyright (c) 2018 Minko Gechev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Revive"},{"location":"licenses/rubocop/","text":"Copyright (c) 2012-22 Bozhidar Batsov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Rubocop"},{"location":"licenses/scalafix/","text":"scalafix is licensed under the BSD 3-Clause License . Copyright (c) 2016 EPFL All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the EPFL nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Scalafix"},{"location":"licenses/secretlint/","text":"Copyright (c) 2020 azu Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Secretlint"},{"location":"licenses/sfdx-scanner-apex/","text":"MIT License Copyright (c) 2020 Michael Hoefer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Sfdx scanner apex"},{"location":"licenses/sfdx-scanner-aura/","text":"MIT License Copyright (c) 2020 Michael Hoefer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Sfdx scanner aura"},{"location":"licenses/sfdx-scanner-lwc/","text":"MIT License Copyright (c) 2020 Michael Hoefer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Sfdx scanner lwc"},{"location":"licenses/snakemake/","text":"Copyright (c) 2012-2019 Johannes K\u00f6ster johannes.koester@tu-dortmund.de Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Snakemake"},{"location":"licenses/spectral/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS Copyright 2018 Stoplight, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Spectral"},{"location":"licenses/sqlfluff/","text":"MIT License Copyright (c) 2018 Alan Cruickshank Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Sqlfluff"},{"location":"licenses/standard/","text":"The MIT License (MIT) Copyright (c) Feross Aboukhadijeh Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Standard"},{"location":"licenses/stylelint/","text":"The MIT License (MIT) Copyright (c) 2015 - present Maxime Thirouin, David Clark & Richard Hallows Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Stylelint"},{"location":"licenses/swiftlint/","text":"The MIT License (MIT) Copyright (c) 2020 Realm Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Swiftlint"},{"location":"licenses/terraform-fmt/","text":"Mozilla Public License, version 2.0 Definitions 1.1. \u201cContributor\u201d means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \u201cContributor Version\u201d means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor\u2019s Contribution. 1.3. \u201cContribution\u201d means Covered Software of a particular Contributor. 1.4. \u201cCovered Software\u201d means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \u201cIncompatible With Secondary Licenses\u201d means a. that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or b. that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \u201cExecutable Form\u201d means any form of the work other than Source Code Form. 1.7. \u201cLarger Work\u201d means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \u201cLicense\u201d means this document. 1.9. \u201cLicensable\u201d means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \u201cModifications\u201d means any of the following: a. any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or b. any new file in Source Code Form that contains any Covered Software. 1.11. \u201cPatent Claims\u201d of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \u201cSecondary License\u201d means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \u201cSource Code Form\u201d means the form of the work preferred for making modifications. 1.14. \u201cYou\u201d (or \u201cYour\u201d) means an individual or a legal entity exercising rights under this License. For legal entities, \u201cYou\u201d includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \u201ccontrol\u201d means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. License Grants and Conditions 2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: a. under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and b. under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: a. for any code that a Contributor has removed from Covered Software; or b. for infringements caused by: (i) Your and any other third party\u2019s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or c. under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1. Responsibilities 3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients\u2019 rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: a. such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and b. You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients\u2019 rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction. Inability to Comply Due to Statute or Regulation If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. Termination 5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. Disclaimer of Warranty Covered Software is provided under this License on an \u201cas is\u201d basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Covered Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Covered Software is with You. Should any Covered Software prove defective in any respect, You (not any Contributor) assume the cost of any necessary servicing, repair, or correction. This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is authorized under this License except under this disclaimer. Limitation of Liability Under no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall any Contributor, or anyone who distributes Covered Software as permitted above, be liable to You for any direct, indirect, special, incidental, or consequential damages of any character including, without limitation, damages for lost profits, loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party\u2019s negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to You. Litigation Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party\u2019s ability to bring cross-claims or counter-claims. Miscellaneous This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor. Versions of the License 10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached. Exhibit A - Source Code Form License Notice This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership. Exhibit B - \u201cIncompatible With Secondary Licenses\u201d Notice This Source Code Form is \u201cIncompatible With Secondary Licenses\u201d, as defined by the Mozilla Public License, v. 2.0.","title":"Terraform fmt"},{"location":"licenses/terragrunt/","text":"The MIT License (MIT) Copyright (c) 2016 Gruntwork, LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Terragrunt"},{"location":"licenses/terrascan/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS Copyright 2020 Accurics, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Terrascan"},{"location":"licenses/tsqllint/","text":"MIT License Copyright (c) 2017 Nathan Boyd and Douglas Wilson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Tsqllint"},{"location":"licenses/yamllint/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"Yamllint"},{"location":"reporters/AzureCommentReporter/","text":"Azure Comment Reporter Posts Mega-Linter results summary in the comments of the related Azure Pipelines pull request (if existing) Usage Click on MegaLinter-reports artifact from the main job log to view or download results. Configuration The following variables must be sent to docker run command Example: - script: | docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\ -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\ -e CI=true \\ -e TF_BUILD=true \\ -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\ -e SYSTEM_COLLECTIONURI=$(System.CollectionUri) \\ -e SYSTEM_PULLREQUEST_PULLREQUESTID=$(System.PullRequest.PullRequestId) \\ -e SYSTEM_TEAMPROJECT=$(System.TeamProject) \\ -e BUILD_BUILD_ID=$(Build.BuildId) \\ -e BUILD_REPOSITORY_ID=$(Build.Repository.ID) \\ oxsecurity/megalinter:v6 displayName: Run MegaLinter A build policy must be defined See https://docs.microsoft.com/en-US/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser#build-validation You must allow Contribute and Contribute to Pull Requests on your Build Service (Settings -> Repositories -> Select your build service) Variable Description Default value AZURE_COMMENT_REPORTER Activates/deactivates reporter true","title":"Azure Pull Request comments"},{"location":"reporters/AzureCommentReporter/#azure-comment-reporter","text":"Posts Mega-Linter results summary in the comments of the related Azure Pipelines pull request (if existing)","title":"Azure Comment Reporter"},{"location":"reporters/AzureCommentReporter/#usage","text":"Click on MegaLinter-reports artifact from the main job log to view or download results.","title":"Usage"},{"location":"reporters/AzureCommentReporter/#configuration","text":"The following variables must be sent to docker run command Example: - script: | docker run -v $(System.DefaultWorkingDirectory):/tmp/lint \\ -e GIT_AUTHORIZATION_BEARER=$(System.AccessToken) \\ -e CI=true \\ -e TF_BUILD=true \\ -e SYSTEM_ACCESSTOKEN=$(System.AccessToken) \\ -e SYSTEM_COLLECTIONURI=$(System.CollectionUri) \\ -e SYSTEM_PULLREQUEST_PULLREQUESTID=$(System.PullRequest.PullRequestId) \\ -e SYSTEM_TEAMPROJECT=$(System.TeamProject) \\ -e BUILD_BUILD_ID=$(Build.BuildId) \\ -e BUILD_REPOSITORY_ID=$(Build.Repository.ID) \\ oxsecurity/megalinter:v6 displayName: Run MegaLinter A build policy must be defined See https://docs.microsoft.com/en-US/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser#build-validation You must allow Contribute and Contribute to Pull Requests on your Build Service (Settings -> Repositories -> Select your build service) Variable Description Default value AZURE_COMMENT_REPORTER Activates/deactivates reporter true","title":"Configuration"},{"location":"reporters/ConfigReporter/","text":"IDE Configuration Reporter Generates a folder IDE-config located in report folder. It contains: All default MegaLinter configuration files used during the linting Updated .vscode/extensions.json containing VsCode extensions corresponding to the linters used during MegaLinter run This reporter activated by default . Usage Copy the content of report/IDE-config at the root of your repository You can copy all IDE_Config folder, or select config files and IDE extensions recommendations that you are interested into Restart your IDE Configuration Variable Description Default value CONFIG_REPORTER Activates/deactivates reporter true CONFIG_REPORTER_SUB_FOLDER Output folder for IDE configuration files within report folder IDE-config","title":"IDE Configuration"},{"location":"reporters/ConfigReporter/#ide-configuration-reporter","text":"Generates a folder IDE-config located in report folder. It contains: All default MegaLinter configuration files used during the linting Updated .vscode/extensions.json containing VsCode extensions corresponding to the linters used during MegaLinter run This reporter activated by default .","title":"IDE Configuration Reporter"},{"location":"reporters/ConfigReporter/#usage","text":"Copy the content of report/IDE-config at the root of your repository You can copy all IDE_Config folder, or select config files and IDE extensions recommendations that you are interested into Restart your IDE","title":"Usage"},{"location":"reporters/ConfigReporter/#configuration","text":"Variable Description Default value CONFIG_REPORTER Activates/deactivates reporter true CONFIG_REPORTER_SUB_FOLDER Output folder for IDE configuration files within report folder IDE-config","title":"Configuration"},{"location":"reporters/ConsoleReporter/","text":"Console Reporter Posts MegaLinter results execution logs in the console Usage Open GitHub action (or other CI tool) logs and look in MegaLinter step Configuration Variable Description Default value CONSOLE_REPORTER Activates/deactivates reporter true CONSOLE_REPORTER_SECTIONS Activates/deactivates sections for console logs true OUTPUT_DETAIL simple for only error files, detailed for all files simple","title":"Console"},{"location":"reporters/ConsoleReporter/#console-reporter","text":"Posts MegaLinter results execution logs in the console","title":"Console Reporter"},{"location":"reporters/ConsoleReporter/#usage","text":"Open GitHub action (or other CI tool) logs and look in MegaLinter step","title":"Usage"},{"location":"reporters/ConsoleReporter/#configuration","text":"Variable Description Default value CONSOLE_REPORTER Activates/deactivates reporter true CONSOLE_REPORTER_SECTIONS Activates/deactivates sections for console logs true OUTPUT_DETAIL simple for only error files, detailed for all files simple","title":"Configuration"},{"location":"reporters/EmailReporter/","text":"E-mail Reporter If you don't use artifacts upload to read MegaLinter reports, you can receive them by e-mail Usage Define related variables below allowing to send e-mails. To use with a gmail account, you have to previously follow these steps Reports are sent to the defined e-mail address at the end of each MegaLinter run Configuration Variable Description Default value EMAIL_REPORTER Activates/deactivates reporter true EMAIL_REPORTER_EMAIL Comma-separated list of recipient emails, that will receive reports EMAIL_REPORTER_SEND_SUCCESS Define to true if you want to receive reports by mail even when there is no errors or updated sources false EMAIL_REPORTER_SENDER Sender of emails megalinter@gmail.com EMAIL_REPORTER_SMTP_HOST SMTP server host smtp.gmail.com EMAIL_REPORTER_SMTP_PORT SMTP server port 465 EMAIL_REPORTER_SMTP_USERNAME SMTP server username megalinter@gmail.com EMAIL_REPORTER_SMTP_PASSWORD SMTP server password. Never hardcode it in a config variable, use secrets and context variables","title":"E-mail"},{"location":"reporters/EmailReporter/#e-mail-reporter","text":"If you don't use artifacts upload to read MegaLinter reports, you can receive them by e-mail","title":"E-mail Reporter"},{"location":"reporters/EmailReporter/#usage","text":"Define related variables below allowing to send e-mails. To use with a gmail account, you have to previously follow these steps Reports are sent to the defined e-mail address at the end of each MegaLinter run","title":"Usage"},{"location":"reporters/EmailReporter/#configuration","text":"Variable Description Default value EMAIL_REPORTER Activates/deactivates reporter true EMAIL_REPORTER_EMAIL Comma-separated list of recipient emails, that will receive reports EMAIL_REPORTER_SEND_SUCCESS Define to true if you want to receive reports by mail even when there is no errors or updated sources false EMAIL_REPORTER_SENDER Sender of emails megalinter@gmail.com EMAIL_REPORTER_SMTP_HOST SMTP server host smtp.gmail.com EMAIL_REPORTER_SMTP_PORT SMTP server port 465 EMAIL_REPORTER_SMTP_USERNAME SMTP server username megalinter@gmail.com EMAIL_REPORTER_SMTP_PASSWORD SMTP server password. Never hardcode it in a config variable, use secrets and context variables","title":"Configuration"},{"location":"reporters/FileIoReporter/","text":"File.io Reporter If you don't use artifacts upload to read MegaLinter reports, you can access them with an hyperlink to file.io important : MegaLinter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically) This reporter is deactivated by default . Usage Activate the reporter ( FILEIO_REPORTER: true ) to see link to reports zip on file.io Get the file.io hyperlink at the end of Mega-linter console output Download file on file.io: it is immediately deleted on the server so it can be downloaded only once Browse reports Configuration Variable Description Default value FILEIO_REPORTER Activates/deactivates reporter false FILEIO_REPORTER_SEND_SUCCESS Skip sending report to file.io if the lint is in success false","title":"File.io"},{"location":"reporters/FileIoReporter/#fileio-reporter","text":"If you don't use artifacts upload to read MegaLinter reports, you can access them with an hyperlink to file.io important : MegaLinter has no affiliation with file.io, but it's supposed to be secured, and only one download is available for a report (snapchat for files, basically) This reporter is deactivated by default .","title":"File.io Reporter"},{"location":"reporters/FileIoReporter/#usage","text":"Activate the reporter ( FILEIO_REPORTER: true ) to see link to reports zip on file.io Get the file.io hyperlink at the end of Mega-linter console output Download file on file.io: it is immediately deleted on the server so it can be downloaded only once Browse reports","title":"Usage"},{"location":"reporters/FileIoReporter/#configuration","text":"Variable Description Default value FILEIO_REPORTER Activates/deactivates reporter false FILEIO_REPORTER_SEND_SUCCESS Skip sending report to file.io if the lint is in success false","title":"Configuration"},{"location":"reporters/GitHubCommentReporter/","text":"GitHub Comment Reporter Posts MegaLinter results summary in the comments of the related pull request (if existing) Usage Click on hyperlinks to access detailed logs Configuration Variable Description Default value GITHUB_COMMENT_REPORTER Activates/deactivates reporter true GITHUB_API_URL URL where the github API can be reached Must be overridden if using GitHub Enterprise https://api.github.com GITHUB_SERVER_URL URL of the GitHub instance Must be overridden if using GitHub Enterprise https://github.com CI_ACTION_RUN_URL URL of the CI job visualization page url (if using Github but not GitHub Actions)","title":"GitHub Pull Request comments"},{"location":"reporters/GitHubCommentReporter/#github-comment-reporter","text":"Posts MegaLinter results summary in the comments of the related pull request (if existing)","title":"GitHub Comment Reporter"},{"location":"reporters/GitHubCommentReporter/#usage","text":"Click on hyperlinks to access detailed logs","title":"Usage"},{"location":"reporters/GitHubCommentReporter/#configuration","text":"Variable Description Default value GITHUB_COMMENT_REPORTER Activates/deactivates reporter true GITHUB_API_URL URL where the github API can be reached Must be overridden if using GitHub Enterprise https://api.github.com GITHUB_SERVER_URL URL of the GitHub instance Must be overridden if using GitHub Enterprise https://github.com CI_ACTION_RUN_URL URL of the CI job visualization page url (if using Github but not GitHub Actions)","title":"Configuration"},{"location":"reporters/GitHubStatusReporter/","text":"GitHub Status Reporter Posts a status on the pull request for each processed linter Usage Click on Details to access detailed logs Configuration Variable Description Default value GITHUB_STATUS_REPORTER Activates/deactivates reporter false GITHUB_API_URL URL where the github API can be reached Must be overridden if using GitHub Enterprise https://api.github.com GITHUB_SERVER_URL URL of the GitHub instance Must be overridden if using GitHub Enterprise https://github.com","title":"GitHub Status"},{"location":"reporters/GitHubStatusReporter/#github-status-reporter","text":"Posts a status on the pull request for each processed linter","title":"GitHub Status Reporter"},{"location":"reporters/GitHubStatusReporter/#usage","text":"Click on Details to access detailed logs","title":"Usage"},{"location":"reporters/GitHubStatusReporter/#configuration","text":"Variable Description Default value GITHUB_STATUS_REPORTER Activates/deactivates reporter false GITHUB_API_URL URL where the github API can be reached Must be overridden if using GitHub Enterprise https://api.github.com GITHUB_SERVER_URL URL of the GitHub instance Must be overridden if using GitHub Enterprise https://github.com","title":"Configuration"},{"location":"reporters/GitlabCommentReporter/","text":"Gitlab Comment Reporter Posts Mega-Linter results summary in the comments of the related merge request (if existing) Usage Click on hyperlinks to access detailed logs (click on Download in Artifacts section at the left of a CI job page) Configuration Create an access token with scope api Paste the access token in a masked CI/CD variable named GITLAB_ACCESS_TOKEN_MEGALINTER in your project (repository) Variable Description Default value GITLAB_COMMENT_REPORTER Activates/deactivates reporter true GITLAB_API_URL URL where the github API can be reached May be overridden if using self-hosted Gitlab https://api.gitlab.com GITLAB_SERVER_URL URL of the Gitlab instance May be overridden if using self-hosted Gitlab https://gitlab.com GITLAB_ACCESS_TOKEN_MEGALINTER Must contain a Gitlab private access token defined with api access GITLAB_CUSTOM_CERTIFICATE SSL certificate value to connect to Gitlab GITLAB_CERTIFICATE_PATH Path to SSL certificate to connect to Gitlab (if SSL cert has been manually defined with PRE_COMMANDS) Special Thanks Special thanks to John Berkers for his assistance in making Gitlab reporter work with self-hosted gitlab instances secured by certificates :)","title":"Gitlab Merge Request comments"},{"location":"reporters/GitlabCommentReporter/#gitlab-comment-reporter","text":"Posts Mega-Linter results summary in the comments of the related merge request (if existing)","title":"Gitlab Comment Reporter"},{"location":"reporters/GitlabCommentReporter/#usage","text":"Click on hyperlinks to access detailed logs (click on Download in Artifacts section at the left of a CI job page)","title":"Usage"},{"location":"reporters/GitlabCommentReporter/#configuration","text":"Create an access token with scope api Paste the access token in a masked CI/CD variable named GITLAB_ACCESS_TOKEN_MEGALINTER in your project (repository) Variable Description Default value GITLAB_COMMENT_REPORTER Activates/deactivates reporter true GITLAB_API_URL URL where the github API can be reached May be overridden if using self-hosted Gitlab https://api.gitlab.com GITLAB_SERVER_URL URL of the Gitlab instance May be overridden if using self-hosted Gitlab https://gitlab.com GITLAB_ACCESS_TOKEN_MEGALINTER Must contain a Gitlab private access token defined with api access GITLAB_CUSTOM_CERTIFICATE SSL certificate value to connect to Gitlab GITLAB_CERTIFICATE_PATH Path to SSL certificate to connect to Gitlab (if SSL cert has been manually defined with PRE_COMMANDS)","title":"Configuration"},{"location":"reporters/GitlabCommentReporter/#special-thanks","text":"Special thanks to John Berkers for his assistance in making Gitlab reporter work with self-hosted gitlab instances secured by certificates :)","title":"Special Thanks"},{"location":"reporters/JsonReporter/","text":"JSON Reporter Generates a full execution log in JSON format within a file named mega-linter-report.json , located in report folder This reporter is deactivated by default . Usage Activate the reporter ( JSON_REPORTER: true ) to generate JSON report file Configuration Variable Description Default value JSON_REPORTER Activates/deactivates reporter false JSON_REPORTER_OUTPUT_DETAIL \"simple\" or \"detailed\" simple JSON_REPORTER_FILE_NAME File name for JSON report output file mega-linter-report.json","title":"JSON"},{"location":"reporters/JsonReporter/#json-reporter","text":"Generates a full execution log in JSON format within a file named mega-linter-report.json , located in report folder This reporter is deactivated by default .","title":"JSON Reporter"},{"location":"reporters/JsonReporter/#usage","text":"Activate the reporter ( JSON_REPORTER: true ) to generate JSON report file","title":"Usage"},{"location":"reporters/JsonReporter/#configuration","text":"Variable Description Default value JSON_REPORTER Activates/deactivates reporter false JSON_REPORTER_OUTPUT_DETAIL \"simple\" or \"detailed\" simple JSON_REPORTER_FILE_NAME File name for JSON report output file mega-linter-report.json","title":"Configuration"},{"location":"reporters/SarifReporter/","text":"SARIF Reporter (beta) Generates a full execution log in SARIF format within a file named mega-linter-report.sarif , located in report folder. Note: Only linters able to handle SARIF will provide output in the aggregated SARIF file. This reporter is deactivated by default . Usage Activate the reporter ( SARIF_REPORTER: true ) to generate JSON report file. If you want GitHub to handle the SARIF file to display it in its UI, add the following step in your GitHub Action Workflow. - name: Upload MegaLinter scan results to GitHub Security tab if: ${{ success() }} || ${{ failure() }} uses: github/codeql-action/upload-sarif@v2 with: sarif_file: 'megalinter-reports/megalinter-report.sarif' Configuration Variable Description Default value SARIF_REPORTER Activates/deactivates reporter false SARIF_REPORTER_FILE_NAME File name for SARIF report output file mega-linter-report.sarif SARIF_REPORTER_LINTERS List of linter keys that will output SARIF (if not set, all SARIF compliant linters will output SARIF) []","title":"SARIF Reporter"},{"location":"reporters/SarifReporter/#sarif-reporter-beta","text":"Generates a full execution log in SARIF format within a file named mega-linter-report.sarif , located in report folder. Note: Only linters able to handle SARIF will provide output in the aggregated SARIF file. This reporter is deactivated by default .","title":"SARIF Reporter (beta)"},{"location":"reporters/SarifReporter/#usage","text":"Activate the reporter ( SARIF_REPORTER: true ) to generate JSON report file. If you want GitHub to handle the SARIF file to display it in its UI, add the following step in your GitHub Action Workflow. - name: Upload MegaLinter scan results to GitHub Security tab if: ${{ success() }} || ${{ failure() }} uses: github/codeql-action/upload-sarif@v2 with: sarif_file: 'megalinter-reports/megalinter-report.sarif'","title":"Usage"},{"location":"reporters/SarifReporter/#configuration","text":"Variable Description Default value SARIF_REPORTER Activates/deactivates reporter false SARIF_REPORTER_FILE_NAME File name for SARIF report output file mega-linter-report.sarif SARIF_REPORTER_LINTERS List of linter keys that will output SARIF (if not set, all SARIF compliant linters will output SARIF) []","title":"Configuration"},{"location":"reporters/TapReporter/","text":"TAP Reporter Posts a pack of TAP logs , zipped as a GitHub Action artifact A separate TAP file for each processed linter Warning : When TAP_REPORTER is true : Performances: all linters with CLI lint mode list_of_files are switched to file mode, so linter is called ont time per file to analyze Scope: all linters with CLI lint mode project are deactivated For those reasons... why not having a look at SARIF reporter , that does not have those issues ? Usage Access GitHub action run Click on Artifacts then click on MegaLinter reports Open the downloaded zip file and browse linters TAP reports Other CI tools If you are not using GitHub Actions, you can export mega-linter.log and folder <WORKSPACE>/megalinter-reports Configuration Variable Description Default value TAP_REPORTER Activates/deactivates reporter false TAP_REPORTER_OUTPUT_DETAIL If detailed , all files will be in TAP output, else only files with issues will be present simple TAP_REPORTER_SUB_FOLDER Sub-folder of reports folder containing tap logs tap","title":"TAP files"},{"location":"reporters/TapReporter/#tap-reporter","text":"Posts a pack of TAP logs , zipped as a GitHub Action artifact A separate TAP file for each processed linter Warning : When TAP_REPORTER is true : Performances: all linters with CLI lint mode list_of_files are switched to file mode, so linter is called ont time per file to analyze Scope: all linters with CLI lint mode project are deactivated For those reasons... why not having a look at SARIF reporter , that does not have those issues ?","title":"TAP Reporter"},{"location":"reporters/TapReporter/#usage","text":"Access GitHub action run Click on Artifacts then click on MegaLinter reports Open the downloaded zip file and browse linters TAP reports","title":"Usage"},{"location":"reporters/TapReporter/#other-ci-tools","text":"If you are not using GitHub Actions, you can export mega-linter.log and folder <WORKSPACE>/megalinter-reports","title":"Other CI tools"},{"location":"reporters/TapReporter/#configuration","text":"Variable Description Default value TAP_REPORTER Activates/deactivates reporter false TAP_REPORTER_OUTPUT_DETAIL If detailed , all files will be in TAP output, else only files with issues will be present simple TAP_REPORTER_SUB_FOLDER Sub-folder of reports folder containing tap logs tap","title":"Configuration"},{"location":"reporters/TextReporter/","text":"Text Reporter Posts a pack of text logs , zipped as a GitHub Action artifact General execution log mega-linter.log (same as ConsoleReporter log) A separate log file for each processed linter Usage Get Artifacts on GitHub Actions Access GitHub action run Click on Artifacts then click on MegaLinter reports Get Artifacts on GitLab CI Access GitLabel CI job page In Job Artifacts section, click on Download Other CI tools You can export mega-linter.log and folder <WORKSPACE>/report as external artifacts You can also use File.io Reporter or E-mail Reporter Report folder structure Open the downloaded zip file and browse linters_logs folder for reports Configuration Variable Description Default value TEXT_REPORTER Activates/deactivates reporter true TEXT_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs linters_logs","title":"Text files"},{"location":"reporters/TextReporter/#text-reporter","text":"Posts a pack of text logs , zipped as a GitHub Action artifact General execution log mega-linter.log (same as ConsoleReporter log) A separate log file for each processed linter","title":"Text Reporter"},{"location":"reporters/TextReporter/#usage","text":"","title":"Usage"},{"location":"reporters/TextReporter/#get-artifacts-on-github-actions","text":"Access GitHub action run Click on Artifacts then click on MegaLinter reports","title":"Get Artifacts on GitHub Actions"},{"location":"reporters/TextReporter/#get-artifacts-on-gitlab-ci","text":"Access GitLabel CI job page In Job Artifacts section, click on Download","title":"Get Artifacts on GitLab CI"},{"location":"reporters/TextReporter/#other-ci-tools","text":"You can export mega-linter.log and folder <WORKSPACE>/report as external artifacts You can also use File.io Reporter or E-mail Reporter","title":"Other CI tools"},{"location":"reporters/TextReporter/#report-folder-structure","text":"Open the downloaded zip file and browse linters_logs folder for reports","title":"Report folder structure"},{"location":"reporters/TextReporter/#configuration","text":"Variable Description Default value TEXT_REPORTER Activates/deactivates reporter true TEXT_REPORTER_SUB_FOLDER Sub-folder of reports folder containing text logs linters_logs","title":"Configuration"},{"location":"reporters/UpdatedSourcesReporter/","text":"Updated Sources Reporter Posts a pack of files containing only the source files fixed by linters This folder can be unpacked to currently repository to apply automated fixes on the repository Usage Access GitHub action run Click on Artifacts then click on MegaLinter reports Open the downloaded zip file and copy the content of folder updated_sources Paste the result in your repository Other CI tools If you are not using GitHub Actions, you can: use File.io Reporter : Updated sources folder will be in the downloadable reports zip use Email Reporter : Updated source folder will be in the email attachment reports zip publish folder <WORKSPACE>/report/updated_sources as artifact with your CI tool Configuration Variable Description Default value UPDATED_SOURCES_REPORTER Activates/deactivates reporter true UPDATED_SOURCES_REPORTER_DIR Sub-folder of reports folder containing updated sources updated_sources","title":"Updated sources"},{"location":"reporters/UpdatedSourcesReporter/#updated-sources-reporter","text":"Posts a pack of files containing only the source files fixed by linters This folder can be unpacked to currently repository to apply automated fixes on the repository","title":"Updated Sources Reporter"},{"location":"reporters/UpdatedSourcesReporter/#usage","text":"Access GitHub action run Click on Artifacts then click on MegaLinter reports Open the downloaded zip file and copy the content of folder updated_sources Paste the result in your repository","title":"Usage"},{"location":"reporters/UpdatedSourcesReporter/#other-ci-tools","text":"If you are not using GitHub Actions, you can: use File.io Reporter : Updated sources folder will be in the downloadable reports zip use Email Reporter : Updated source folder will be in the email attachment reports zip publish folder <WORKSPACE>/report/updated_sources as artifact with your CI tool","title":"Other CI tools"},{"location":"reporters/UpdatedSourcesReporter/#configuration","text":"Variable Description Default value UPDATED_SOURCES_REPORTER Activates/deactivates reporter true UPDATED_SOURCES_REPORTER_DIR Sub-folder of reports folder containing updated sources updated_sources","title":"Configuration"}]}